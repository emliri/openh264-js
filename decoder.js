// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 33554432;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 32768;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([111,112,101,110,104,50,54,52,32,116,114,97,99,101,32,37,100,32,37,115,10,0,0,0,67,114,101,97,116,101,32,68,101,99,111,100,101,114,32,102,97,105,108,101,100,10,0,0,67,114,101,97,116,101,32,68,101,99,111,100,101,114,32,102,97,105,108,101,100,32,40,110,111,32,104,97,110,100,108,101,41,10,0,0,0,0,0,0,83,101,116,79,112,116,105,111,110,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,105,110,105,116,105,97,108,105,122,101,32,102,97,105,108,101,100,10,0,0,0,0,0,0,123,32,102,114,97,109,101,95,99,97,108,108,98,97,99,107,40,36,48,44,32,36,49,44,32,36,50,44,32,36,51,44,32,36,52,44,32,36,53,44,32,36,54,41,59,32,125,0,44,70,114,97,109,101,80,101,110,100,105,110,103,0,0,0,44,82,101,102,76,111,115,116,0,0,0,0,0,0,0,0,44,66,105,116,115,116,114,101,97,109,69,114,114,111,114,0,44,68,101,112,76,97,121,101,114,76,111,115,116,0,0,0,44,78,111,80,97,114,97,109,83,101,116,115,0,0,0,0,44,68,97,116,97,69,114,114,111,114,67,111,110,99,101,97,108,101,100,0,0,0,0,0,44,73,110,118,97,108,105,100,65,114,103,117,109,101,110,116,0,0,0,0,0,0,0,0,44,73,110,105,116,105,97,108,79,112,116,69,120,99,112,101,99,116,101,100,0,0,0,0,44,79,117,116,79,102,77,101,109,111,114,121,0,0,0,0,44,68,115,116,66,117,102,78,101,101,100,69,120,112,97,110,0,0,0,0,0,0,0,0,68,101,99,111,100,101,32,102,97,105,108,101,100,58,32,37,35,120,32,45,32,37,115,10,0,0,0,0,0,0,0,0,112,97,114,115,101,95,110,97,108,40,41,44,32,110,111,32,101,120,105,115,116,32,83,101,113,117,101,110,99,101,32,80,97,114,97,109,101,116,101,114,32,83,101,116,115,32,97,104,101,97,100,32,111,102,32,115,101,113,117,101,110,99,101,32,119,104,101,110,32,116,114,121,32,116,111,32,100,101,99,111,100,101,32,78,65,76,40,116,121,112,101,58,37,100,41,46,0,0,0,0,0,0,0,0,112,97,114,115,101,95,110,97,108,40,41,44,32,110,111,32,101,120,105,115,116,32,80,105,99,116,117,114,101,32,80,97,114,97,109,101,116,101,114,32,83,101,116,115,32,97,104,101,97,100,32,111,102,32,115,101,113,117,101,110,99,101,32,119,104,101,110,32,116,114,121,32,116,111,32,100,101,99,111,100,101,32,78,65,76,40,116,121,112,101,58,37,100,41,46,0,80,97,114,115,101,78,97,108,72,101,97,100,101,114,40,41,44,32,110,111,32,101,120,105,115,116,32,80,97,114,97,109,101,116,101,114,32,83,101,116,115,32,97,104,101,97,100,32,111,102,32,115,101,113,117,101,110,99,101,32,119,104,101,110,32,116,114,121,32,116,111,32,100,101,99,111,100,101,32,115,108,105,99,101,40,116,121,112,101,58,37,100,41,46,0,0,80,97,114,115,101,78,97,108,72,101,97,100,101,114,40,41,32,105,110,32,80,114,101,102,105,120,32,78,97,108,32,85,110,105,116,58,117,105,81,117,97,108,105,116,121,73,100,32,40,37,100,41,32,33,61,32,48,44,32,98,85,115,101,82,101,102,66,97,115,101,80,105,99,70,108,97,103,32,40,37,100,41,32,33,61,32,48,44,32,110,111,116,32,115,117,112,112,111,114,116,101,100,33,0,78,65,76,95,85,78,73,84,95,80,82,69,70,73,88,58,32,68,101,99,73,110,105,116,66,105,116,115,40,41,32,102,97,105,108,32,100,117,101,32,105,110,118,97,108,105,100,32,97,99,99,101,115,115,46,0,77,101,109,71,101,116,78,101,120,116,78,97,108,40,41,32,102,97,105,108,32,100,117,101,32,111,117,116,32,111,102,32,109,101,109,111,114,121,46,0,80,97,114,115,101,78,97,108,72,101,97,100,101,114,40,41,58,117,105,81,117,97,108,105,116,121,73,100,32,40,37,100,41,32,33,61,32,48,44,32,77,71,83,32,110,111,116,32,115,117,112,112,111,114,116,101,100,33,0,0,0,0,0,0,80,97,114,115,101,78,97,108,72,101,97,100,101,114,40,41,58,98,85,115,101,82,101,102,66,97,115,101,80,105,99,70,108,97,103,32,40,37,100,41,32,33,61,32,48,44,32,77,71,83,32,110,111,116,32,115,117,112,112,111,114,116,101,100,33,0,0,0,0,0,0,0,78,65,76,95,85,78,73,84,95,67,79,68,69,68,95,83,76,73,67,69,58,32,68,101,99,73,110,105,116,66,105,116,115,40,41,32,102,97,105,108,32,100,117,101,32,105,110,118,97,108,105,100,32,97,99,99,101,115,115,46,0,0,0,0,68,101,99,111,100,101,83,112,115,83,118,99,69,120,116,40,41,58,101,120,116,101,110,100,101,100,95,115,112,97,116,105,97,108,95,115,99,97,108,97,98,105,108,105,116,121,32,40,37,100,41,32,33,61,32,48,44,32,69,83,83,32,110,111,116,32,115,117,112,112,111,114,116,101,100,33,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,115,101,113,95,115,99,97,108,101,100,95,114,101,102,95,108,97,121,101,114,95,108,101,102,116,95,111,102,102,115,101,116,32,37,100,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,115,101,113,95,115,99,97,108,101,100,95,114,101,102,95,108,97,121,101,114,95,116,111,112,95,111,102,102,115,101,116,32,37,100,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,115,101,113,95,115,99,97,108,101,100,95,114,101,102,95,108,97,121,101,114,95,114,105,103,104,116,95,111,102,102,115,101,116,32,37,100,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,115,101,113,95,115,99,97,108,101,100,95,114,101,102,95,108,97,121,101,114,95,98,111,116,116,111,109,95,111,102,102,115,101,116,32,37,100,0,0,0,0,32,105,83,112,115,73,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,33,32,10,0,0,0,0,0,0,80,97,114,115,101,83,112,115,40,41,58,32,108,101,118,101,108,95,105,100,120,32,40,37,100,41,46,10,0,0,0,0,80,97,114,115,101,83,112,115,40,41,58,32,99,104,114,111,109,97,95,102,111,114,109,97,116,95,105,100,99,32,40,37,100,41,32,60,61,49,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,0,0,80,97,114,115,101,83,112,115,40,41,58,32,98,105,116,95,100,101,112,116,104,95,108,117,109,97,32,40,37,100,41,32,79,110,108,121,32,56,32,98,105,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,80,97,114,115,101,83,112,115,40,41,58,32,98,105,116,95,100,101,112,116,104,95,99,104,114,111,109,97,32,40,37,100,41,46,32,79,110,108,121,32,56,32,98,105,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,108,111,103,50,95,109,97,120,95,102,114,97,109,101,95,110,117,109,95,109,105,110,117,115,52,32,37,100,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,108,111,103,50,95,109,97,120,95,112,105,99,95,111,114,100,101,114,95,99,110,116,95,108,115,98,95,109,105,110,117,115,52,32,37,100,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,110,117,109,95,114,101,102,95,102,114,97,109,101,115,95,105,110,95,112,105,99,95,111,114,100,101,114,95,99,110,116,95,99,121,99,108,101,32,37,100,0,32,105,108,108,101,103,97,108,32,112,105,99,95,111,114,100,101,114,95,99,110,116,95,116,121,112,101,58,32,37,100,32,33,32,0,0,0,0,0,0,112,105,99,95,119,105,100,116,104,95,105,110,95,109,98,115,40,37,100,41,32,101,120,99,101,101,100,115,32,116,104,101,32,109,97,120,105,109,117,109,32,97,108,108,111,119,101,100,33,0,0,0,0,0,0,0,32,116,104,101,32,112,105,99,95,119,105,100,116,104,95,105,110,95,109,98,115,32,101,120,99,101,101,100,115,32,116,104,101,32,108,101,118,101,108,32,108,105,109,105,116,115,33,0,112,105,99,95,104,101,105,103,104,116,95,105,110,95,109,98,115,40,37,100,41,32,101,120,99,101,101,100,115,32,116,104,101,32,109,97,120,105,109,117,109,32,97,108,108,111,119,101,100,33,0,0,0,0,0,0,32,116,104,101,32,112,105,99,95,104,101,105,103,104,116,95,105,110,95,109,98,115,32,101,120,99,101,101,100,115,32,116,104,101,32,108,101,118,101,108,32,108,105,109,105,116,115,33,0,0,0,0,0,0,0,0,32,116,104,101,32,116,111,116,97,108,32,99,111,117,110,116,32,111,102,32,109,98,32,101,120,99,101,101,100,115,32,116,104,101,32,108,101,118,101,108,32,108,105,109,105,116,115,33,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,109,97,120,95,110,117,109,95,114,101,102,95,102,114,97,109,101,115,32,37,100,0,0,0,0,32,109,97,120,95,110,117,109,95,114,101,102,95,102,114,97,109,101,115,32,101,120,99,101,101,100,115,32,108,101,118,101,108,32,108,105,109,105,116,115,33,0,0,0,0,0,0,0,80,97,114,115,101,83,112,115,40,41,58,32,102,114,97,109,101,95,109,98,115,95,111,110,108,121,95,102,108,97,103,32,40,37,100,41,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,102,114,97,109,101,95,99,114,111,112,95,108,101,102,116,95,111,102,102,115,101,116,32,43,32,102,114,97,109,101,95,99,114,111,112,95,114,105,103,104,116,95,111,102,102,115,101,116,32,101,120,99,101,101,100,115,32,108,105,109,105,116,115,33,0,0,0,0,0,0,0,0,102,114,97,109,101,95,99,114,111,112,95,116,111,112,95,111,102,102,115,101,116,32,43,32,102,114,97,109,101,95,99,114,111,112,95,114,105,103,104,116,95,111,102,102,115,101,116,32,101,120,99,101,101,100,115,32,108,105,109,105,116,115,33,0,84,101,109,112,32,98,117,102,102,101,114,32,102,111,114,32,112,97,114,115,101,32,111,110,108,121,32,117,115,97,103,101,46,0,0,0,0,0,0,0,112,66,115,66,117,102,32,102,111,114,32,112,97,114,115,101,32,111,110,108,121,32,117,115,97,103,101,0,0,0,0,0,80,97,114,115,101,80,112,115,40,41,58,32,115,108,105,99,101,95,103,114,111,117,112,95,109,97,112,95,116,121,112,101,32,40,37,100,41,58,32,115,117,112,112,111,114,116,32,111,110,108,121,32,48,44,49,46,0,0,0,0,0,0,0,0,80,97,114,115,101,80,112,115,40,41,58,32,119,101,105,103,104,116,101,100,95,98,105,112,114,101,100,95,105,100,99,32,40,37,100,41,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,10,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,112,105,99,95,105,110,105,116,95,113,112,95,109,105,110,117,115,50,54,32,43,32,50,54,32,37,100,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,112,105,99,95,105,110,105,116,95,113,115,95,109,105,110,117,115,50,54,32,43,32,50,54,32,37,100,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,99,104,114,111,109,97,95,113,112,95,105,110,100,101,120,95,111,102,102,115,101,116,32,37,100,0,0,0,0,0,0,0,0,0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,2,0,3,0,3,0,3,0,3,0,3,0,0,4,8,12,3,7,11,15,0,1,2,3,12,13,14,15,0,1,4,5,8,9,12,13,2,3,6,7,10,11,14,15,0,1,4,5,2,3,6,7,8,9,12,13,10,11,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,6,7,8,9,10,12,13,15,17,20,22,25,28,32,36,40,45,50,56,63,71,80,90,101,113,127,144,162,182,203,226,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,4,4,4,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,1,255,0,0,1,255,0,0,1,255,0,0,1,255,0,1,1,255,0,1,1,255,1,1,1,255,1,1,1,255,1,1,1,255,1,1,1,255,1,1,2,255,1,1,2,255,1,1,2,255,1,1,2,255,1,2,3,255,1,2,3,255,2,2,3,255,2,2,4,255,2,3,4,255,2,3,4,255,3,3,5,255,3,4,6,255,3,4,6,255,4,5,7,255,4,5,8,255,4,6,9,255,5,7,10,255,6,8,11,255,6,8,13,255,7,10,14,255,8,11,16,255,9,12,18,255,10,13,20,255,11,15,23,255,13,17,25,255,13,17,25,255,13,17,25,255,13,17,25,255,13,17,25,255,13,17,25,255,13,17,25,255,13,17,25,255,13,17,25,255,13,17,25,255,13,17,25,255,13,17,25,255,13,17,25,87,101,108,115,84,97,114,103,101,116,83,108,105,99,101,67,111,110,115,116,114,117,99,116,105,111,110,40,41,58,58,58,77,66,40,37,100,44,32,37,100,41,32,99,111,110,115,116,114,117,99,116,105,111,110,32,101,114,114,111,114,46,32,112,67,117,114,83,108,105,99,101,95,116,121,112,101,58,37,100,0,0,0,0,0,0,0,0,87,101,108,115,84,97,114,103,101,116,83,108,105,99,101,67,111,110,115,116,114,117,99,116,105,111,110,40,41,58,58,58,112,67,116,120,45,62,105,84,111,116,97,108,78,117,109,77,98,82,101,99,58,37,100,44,32,105,84,111,116,97,108,77,98,84,97,114,103,101,116,76,97,121,101,114,58,37,100,0,0,0,0,0,16,0,0,0,64,0,0,0,80,0,0,0,0,0,0,0,32,0,0,0,128,0,0,0,160,0,0,0,87,101,108,115,84,97,114,103,101,116,77,98,67,111,110,115,116,114,117,99,116,105,111,110,40,41,58,58,58,58,58,85,110,107,110,111,119,110,32,77,66,32,116,121,112,101,58,32,37,100,0,0,0,0,0,0,0,16,32,15,31,47,0,0,0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,87,101,108,115,68,101,99,111,100,101,83,108,105,99,101,40,41,58,58,58,58,73,76,80,32,102,108,97,103,32,101,120,105,115,116,44,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,67,65,66,65,67,32,101,110,97,98,108,101,100,33,0,0,105,66,97,115,101,77,111,100,101,70,108,97,103,32,40,37,100,41,32,33,61,32,48,44,32,105,110,116,101,114,45,108,97,121,101,114,32,112,114,101,100,105,99,116,105,111,110,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,87,101,108,115,68,101,99,111,100,101,77,98,67,97,118,108,99,73,83,108,105,99,101,40,41,58,58,58,58,112,66,115,32,105,110,99,111,109,112,108,101,116,101,44,32,105,85,115,101,100,66,105,116,115,58,37,108,108,100,32,62,32,112,66,115,45,62,105,66,105,116,115,58,37,100,44,32,77,85,83,84,32,115,116,111,112,32,100,101,99,111,100,105,110,103,46,0,0,0,0,0,0,0,0,114,101,115,105,100,117,97,108,95,112,114,101,100,95,102,108,97,103,32,61,32,49,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,8,0,0,0,1,4,0,0,16,0,0,0,2,4,0,0,32,0,0,0,2,2,0,0,64,0,0,0,4,4,0,0,128,0,0,0,4,4,0,0,112,80,105,99,66,117,102,45,62,113,117,101,117,101,0,0,112,80,105,99,66,117,102,0,87,101,108,115,82,101,113,117,101,115,116,77,101,109,40,41,58,32,109,101,109,111,114,121,32,114,101,45,97,108,108,111,99,32,102,111,114,32,110,111,32,114,101,115,111,108,117,116,105,111,110,32,99,104,97,110,103,101,32,40,115,105,122,101,32,61,32,37,100,32,42,32,37,100,41,44,32,114,101,102,32,108,105,115,116,32,115,105,122,101,32,99,104,97,110,103,101,32,102,114,111,109,32,37,100,32,116,111,32,37,100,0,87,101,108,115,82,101,113,117,101,115,116,77,101,109,40,41,58,32,109,101,109,111,114,121,32,114,101,45,97,108,108,111,99,32,102,111,114,32,114,101,115,111,108,117,116,105,111,110,32,99,104,97,110,103,101,44,32,115,105,122,101,32,99,104,97,110,103,101,32,102,114,111,109,32,37,100,32,42,32,37,100,32,116,111,32,37,100,32,42,32,37,100,44,32,114,101,102,32,108,105,115,116,32,115,105,122,101,32,99,104,97,110,103,101,32,102,114,111,109,32,37,100,32,116,111,32,37,100,0,0,0,0,0,0,0,0,87,101,108,115,82,101,113,117,101,115,116,77,101,109,40,41,58,32,109,101,109,111,114,121,32,97,108,108,111,99,32,115,105,122,101,32,61,32,37,100,32,42,32,37,100,44,32,114,101,102,32,108,105,115,116,32,115,105,122,101,32,61,32,37,100,0,0,0,0,0,0,0,112,67,116,120,45,62,112,67,97,98,97,99,68,101,99,69,110,103,105,110,101,0,0,0,83,68,101,99,111,100,105,110,103,80,97,114,97,109,0,0,101,86,105,100,101,111,84,121,112,101,58,32,37,100,0,0,83,117,112,112,111,114,116,32,73,52,50,48,32,111,117,116,112,117,116,32,111,110,108,121,32,102,111,114,32,110,111,119,33,32,67,104,97,110,103,101,32,116,111,32,73,52,50,48,46,46,46,0,0,0,0,0,83,121,110,99,80,105,99,116,117,114,101,82,101,115,111,108,117,116,105,111,110,69,120,116,40,41,58,58,87,101,108,115,82,101,113,117,101,115,116,77,101,109,45,45,98,117,102,102,101,114,32,97,108,108,111,99,97,116,101,100,32,102,97,105,108,117,114,101,46,0,0,0,83,121,110,99,80,105,99,116,117,114,101,82,101,115,111,108,117,116,105,111,110,69,120,116,40,41,58,58,73,110,105,116,105,97,108,68,113,76,97,121,101,114,115,67,111,110,116,101,120,116,45,45,98,117,102,102,101,114,32,97,108,108,111,99,97,116,101,100,32,102,97,105,108,117,114,101,46,0,0,0,83,121,110,99,80,105,99,116,117,114,101,82,101,115,111,108,117,116,105,111,110,69,120,116,40,41,44,32,111,118,101,114,97,108,108,32,109,101,109,111,114,121,32,117,115,97,103,101,58,32,37,108,108,117,32,98,121,116,101,115,0,0,0,0,80,80,105,99,66,117,102,102,0,0,0,0,0,0,0,0,80,80,105,99,116,117,114,101,42,0,0,0,0,0,0,0,112,80,105,99,79,108,100,66,117,102,45,62,113,117,101,117,101,0,0,0,0,0,0,0,112,80,105,99,79,108,100,66,117,102,0,0,0,0,0,0,112,67,116,120,45,62,115,82,97,119,68,97,116,97,46,112,72,101,97,100,0,0,0,0,112,67,116,120,45,62,112,80,97,114,115,101,114,66,115,73,110,102,111,0,0,0,0,0,112,67,116,120,45,62,112,80,97,114,115,101,114,66,115,73,110,102,111,45,62,112,68,115,116,66,117,102,102,0,0,0,112,67,116,120,45,62,115,83,97,118,101,100,68,97,116,97,46,112,72,101,97,100,0,0,77,97,120,32,65,85,32,115,105,122,101,32,101,120,99,101,101,100,101,100,46,32,65,108,108,111,119,101,100,32,115,105,122,101,32,61,32,37,100,44,32,99,117,114,114,101,110,116,32,115,105,122,101,32,61,32,37,100,0,0,0,0,0,0,112,67,116,120,45,62,112,80,97,114,97,109,0,0,0,0,112,67,116,120,45,62,115,82,97,119,68,97,116,97,45,62,112,72,101,97,100,0,0,0,112,67,116,120,45,62,115,83,97,118,101,100,68,97,116,97,45,62,112,72,101,97,100,0,115,108,105,99,101,32,116,121,112,101,32,116,111,111,32,108,97,114,103,101,32,40,37,100,41,32,97,116,32,102,105,114,115,116,95,109,98,40,37,100,41,0,0,0,0,0,0,0,80,97,114,115,101,83,108,105,99,101,72,101,97,100,101,114,83,121,110,116,97,120,115,40,41,58,32,66,32,115,108,105,99,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,108,105,99,101,32,116,121,112,101,40,37,100,41,32,105,110,32,73,68,82,32,112,105,99,116,117,114,101,46,32,0,73,110,118,97,108,105,100,32,115,108,105,99,101,32,116,121,112,101,40,37,100,41,46,0,105,80,112,115,73,100,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,80,80,83,32,105,100,32,40,37,100,41,32,105,115,32,105,110,118,97,108,105,100,44,32,112,114,101,118,105,111,117,115,32,105,100,32,40,37,100,41,32,101,114,114,111,114,32,105,103,110,111,114,101,100,32,40,37,100,41,33,0,0,0,0,73,110,118,97,108,105,100,32,80,80,83,32,114,101,102,101,114,101,110,99,101,100,0,0,83,117,98,32,83,80,83,32,105,100,32,40,37,100,41,32,105,115,32,105,110,118,97,108,105,100,44,32,112,114,101,118,105,111,117,115,32,105,100,32,40,37,100,41,32,101,114,114,111,114,32,105,103,110,111,114,101,100,32,40,37,100,41,33,0,0,0,0,0,0,0,0,83,80,83,32,105,100,32,40,37,100,41,32,105,115,32,105,110,118,97,108,105,100,44,32,112,114,101,118,105,111,117,115,32,105,100,32,40,37,100,41,32,101,114,114,111,114,32,105,103,110,111,114,101,100,32,40,37,100,41,33,0,0,0,0,110,111,110,32,101,120,105,115,116,105,110,103,32,83,80,83,32,114,101,102,101,114,101,110,99,101,100,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,102,105,114,115,116,95,109,98,95,105,110,95,115,108,105,99,101,32,37,100,0,0,0,0,0,80,97,114,115,101,83,108,105,99,101,72,101,97,100,101,114,83,121,110,116,97,120,115,40,41,58,32,102,114,97,109,101,95,109,98,115,95,111,110,108,121,95,102,108,97,103,32,61,32,37,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,32,0,0,0,0,0,80,97,114,115,101,83,108,105,99,101,72,101,97,100,101,114,83,121,110,116,97,120,115,40,41,44,32,105,110,118,97,105,108,100,32,102,114,97,109,101,32,110,117,109,98,101,114,58,32,37,100,32,100,117,101,32,116,111,32,73,68,82,32,102,114,97,109,101,32,105,110,116,114,111,100,117,99,101,100,33,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,105,100,114,95,112,105,99,95,105,100,32,37,100,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,114,101,100,117,110,100,97,110,116,95,112,105,99,95,99,110,116,32,37,100,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,110,117,109,95,114,101,102,95,105,100,120,95,108,48,95,97,99,116,105,118,101,95,109,105,110,117,115,49,32,37,100,0,0,114,101,102,101,114,101,110,99,101,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,105,110,118,97,108,105,100,32,114,101,102,32,112,80,105,99,32,108,105,115,116,32,114,101,111,114,100,101,114,105,110,103,32,115,121,110,116,97,120,115,33,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,119,101,105,103,104,116,101,100,32,112,114,101,100,105,99,116,105,111,110,32,115,121,110,116,97,120,115,33,0,0,0,0,80,97,114,115,101,83,108,105,99,101,72,101,97,100,101,114,83,121,110,116,97,120,115,40,41,58,32,98,85,115,101,82,101,102,66,97,115,101,80,105,99,70,108,97,103,32,111,114,32,98,83,116,111,114,101,82,101,102,66,97,115,101,80,105,99,70,108,97,103,32,61,32,49,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,99,97,98,97,99,95,105,110,105,116,95,105,100,99,32,37,100,0,0,0,0,0,0,0,0,81,80,32,37,100,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,83,80,47,83,73,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,100,105,115,97,98,108,101,95,100,101,98,108,111,99,107,95,102,105,108,116,101,114,95,105,100,99,32,40,37,100,41,32,111,117,116,32,111,102,32,114,97,110,103,101,32,91,48,44,32,54,93,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,115,108,105,99,101,95,97,108,112,104,97,95,99,48,95,111,102,102,115,101,116,95,100,105,118,50,32,42,32,50,32,37,100,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,115,108,105,99,101,95,98,101,116,97,95,111,102,102,115,101,116,95,100,105,118,50,32,42,32,50,32,37,100,0,0,0,0,100,105,115,97,98,108,101,95,105,110,116,101,114,95,108,97,121,101,114,95,100,101,98,108,111,99,107,95,102,105,108,116,101,114,95,105,100,99,32,40,37,100,41,32,111,117,116,32,111,102,32,114,97,110,103,101,32,91,48,44,32,54,93,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,105,110,116,101,114,95,108,97,121,101,114,95,97,108,112,104,97,95,99,48,95,111,102,102,115,101,116,95,100,105,118,50,32,42,32,50,32,37,100,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,105,110,116,101,114,95,108,97,121,101,114,95,115,108,105,99,101,95,98,101,116,97,95,111,102,102,115,101,116,95,100,105,118,50,32,42,32,50,32,37,100,0,0,0,0,0,0,0,0,98,83,108,105,99,101,83,107,105,112,70,108,97,103,32,61,61,32,49,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,0,117,105,83,99,97,110,73,100,120,83,116,97,114,116,32,40,37,100,41,32,33,61,32,48,32,97,110,100,32,117,105,83,99,97,110,73,100,120,69,110,100,32,40,37,100,41,32,33,61,49,53,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,104,101,114,101,0,0,85,112,100,97,116,101,65,99,99,101,115,115,85,110,105,116,40,41,58,58,58,58,58,75,101,121,32,102,114,97,109,101,32,108,111,115,116,46,46,46,46,46,67,65,78,32,78,79,84,32,102,105,110,100,32,73,68,82,32,102,114,111,109,32,99,117,114,114,101,110,116,32,65,85,46,0,0,0,0,0,80,68,113,76,97,121,101,114,0,0,0,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,77,98,84,121,112,101,91,93,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,77,118,91,93,91,93,0,0,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,82,101,102,73,110,100,101,120,91,93,91,93,0,112,67,116,120,45,62,115,77,98,46,112,76,117,109,97,81,112,91,93,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,78,111,83,117,98,77,98,80,97,114,116,83,105,122,101,76,101,115,115,84,104,97,110,56,120,56,70,108,97,103,91,93,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,84,114,97,110,115,102,111,114,109,83,105,122,101,56,120,56,70,108,97,103,91,93,0,0,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,67,104,114,111,109,97,81,112,91,93,0,0,0,112,67,116,120,45,62,115,77,98,46,112,77,118,100,91,93,91,93,0,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,67,98,102,68,99,91,93,0,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,78,122,99,91,93,0,0,0,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,78,122,99,82,115,91,93,0,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,83,99,97,108,101,100,84,67,111,101,102,102,91,93,0,0,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,73,110,116,114,97,80,114,101,100,77,111,100,101,91,93,0,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,73,110,116,114,97,52,120,52,70,105,110,97,108,77,111,100,101,91,93,0,0,112,67,116,120,45,62,115,77,98,46,112,73,110,116,114,97,78,120,78,65,118,97,105,108,70,108,97,103,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,67,104,114,111,109,97,80,114,101,100,77,111,100,101,91,93,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,67,98,112,91,93,0,0,0,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,83,117,98,77,98,84,121,112,101,91,93,0,0,112,67,116,120,45,62,115,77,98,46,112,83,108,105,99,101,73,100,99,91,93,0,0,0,112,67,116,120,45,62,115,77,98,46,112,82,101,115,105,100,117,97,108,80,114,101,100,70,108,97,103,91,93,0,0,0,112,67,116,120,45,62,115,77,98,46,112,73,110,116,101,114,80,114,101,100,105,99,116,105,111,110,68,111,110,101,70,108,97,103,91,93,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,77,98,67,111,114,114,101,99,116,108,121,68,101,99,111,100,101,100,70,108,97,103,91,93,0,0,0,0,0,112,67,116,120,45,62,112,77,98,82,101,102,67,111,110,99,101,97,108,101,100,70,108,97,103,91,93,0,0,0,0,0,112,67,116,120,45,62,115,77,98,46,112,77,98,82,101,102,67,111,110,99,101,97,108,101,100,70,108,97,103,91,93,0,112,68,113,0,0,0,0,0,115,121,110,99,32,112,105,99,116,117,114,101,32,114,101,115,111,108,117,116,105,111,110,32,101,120,116,32,102,97,105,108,101,100,44,32,32,116,104,101,32,101,114,114,111,114,32,105,115,32,37,100,0,0,0,0,114,101,116,117,114,110,101,100,32,101,114,114,111,114,32,102,114,111,109,32,100,101,99,111,100,105,110,103,58,91,48,120,37,120,93,0,0,0,0,0,68,101,99,111,100,101,67,117,114,114,101,110,116,65,99,99,101,115,115,85,110,105,116,40,41,58,58,58,58,58,58,80,114,101,102,101,116,99,104,80,105,99,32,69,82,82,79,82,44,32,112,83,112,115,45,62,105,78,117,109,82,101,102,70,114,97,109,101,115,58,37,100,46,0,0,0,0,0,0,0,68,101,99,111,100,101,67,117,114,114,101,110,116,65,99,99,101,115,115,85,110,105,116,40,41,44,32,70,109,111,80,97,114,97,109,85,112,100,97,116,101,32,102,97,105,108,101,100,44,32,101,83,108,105,99,101,84,121,112,101,58,32,37,100,46,0,0,0,0,0,0,0,114,101,102,101,114,101,110,99,105,110,103,32,112,105,99,116,117,114,101,115,32,108,111,115,116,32,100,117,101,32,102,114,97,109,101,32,103,97,112,115,32,101,120,105,115,116,44,32,112,114,101,118,95,102,114,97,109,101,95,110,117,109,58,32,37,100,44,32,99,117,114,114,95,102,114,97,109,101,95,110,117,109,58,32,37,100,0,0,114,101,102,101,114,101,110,99,101,32,112,105,99,116,117,114,101,32,105,110,116,114,111,100,117,99,101,100,32,98,121,32,116,104,105,115,32,102,114,97,109,101,32,105,115,32,108,111,115,116,32,100,117,114,105,110,103,32,116,114,97,110,115,109,105,115,115,105,111,110,33,32,117,105,84,73,100,58,32,37,100,0,0,0,0,0,0,0,68,101,99,111,100,101,67,117,114,114,101,110,116,65,99,99,101,115,115,85,110,105,116,40,41,32,102,97,105,108,101,100,32,40,37,100,41,32,105,110,32,102,114,97,109,101,58,32,37,100,32,117,105,68,73,100,58,32,37,100,32,117,105,81,73,100,58,32,37,100,0,0,68,101,99,111,100,101,70,114,97,109,101,67,111,110,115,116,114,117,99,116,105,111,110,40,41,58,32,119,105,108,108,32,111,117,116,112,117,116,32,102,105,114,115,116,32,102,114,97,109,101,32,111,102,32,110,101,119,32,115,101,113,117,101,110,99,101,44,32,37,100,32,120,32,37,100,44,32,99,114,111,112,95,108,101,102,116,58,37,100,44,32,99,114,111,112,95,114,105,103,104,116,58,37,100,44,32,99,114,111,112,95,116,111,112,58,37,100,44,32,99,114,111,112,95,98,111,116,116,111,109,58,37,100,44,32,105,103,110,111,114,101,100,32,101,114,114,111,114,32,112,97,99,107,101,116,58,37,100,46,0,68,101,99,111,100,101,70,114,97,109,101,67,111,110,115,116,114,117,99,116,105,111,110,40,41,58,32,105,84,111,116,97,108,78,117,109,77,98,82,101,99,58,37,100,44,32,116,111,116,97,108,95,110,117,109,95,109,98,95,115,112,115,58,37,100,44,32,99,117,114,95,108,97,121,101,114,95,109,98,95,119,105,100,116,104,58,37,100,44,32,99,117,114,95,108,97,121,101,114,95,109,98,95,104,101,105,103,104,116,58,37,100,32,0,0,0,0,0,0,0,68,101,99,111,100,101,70,114,97,109,101,67,111,110,115,116,114,117,99,116,105,111,110,40,41,58,78,101,119,32,115,101,113,117,101,110,99,101,32,100,101,116,101,99,116,101,100,44,32,98,117,116,32,102,114,101,101,122,101,100,46,0,0,0,0,1,4,5,2,3,6,7,8,9,12,13,10,11,14,15,9,10,17,18,11,12,19,20,25,26,33,34,27,28,35,36,14,15,22,23,38,39,46,47,41,42,43,0,0,0,0,0,9,10,17,18,11,12,19,20,25,26,33,34,27,28,35,36,14,15,22,23,38,39,46,47,0,16,32,128,48,64,80,96,144,160,176,192,112,208,224,240,0,16,32,48,0,0,0,0,47,31,15,0,23,27,29,30,7,11,13,14,39,43,45,46,16,3,5,10,12,19,21,26,28,35,37,42,44,1,2,4,8,17,18,20,24,6,9,22,25,32,33,34,36,40,38,41,15,0,7,11,13,14,3,5,10,12,1,2,4,8,6,9,0,16,1,2,4,8,32,3,5,10,12,15,47,7,11,13,14,6,9,31,35,37,42,44,33,34,36,40,39,43,45,46,17,18,20,24,19,21,26,28,23,27,29,30,22,25,38,41,0,1,2,4,8,3,5,10,12,15,7,11,13,14,6,9,8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,7,13,7,12,8,11,8,8,7,8,7,7,7,7,7,10,6,10,6,10,6,10,6,6,6,6,6,6,6,6,6,3,6,3,6,3,6,3,6,9,6,9,6,9,6,9,6,4,6,4,6,4,6,4,6,1,6,1,6,1,6,1,6,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,0,0,0,0,0,0,0,0,21,8,12,8,7,8,3,8,17,7,17,7,8,7,8,7,13,6,13,6,13,6,13,6,4,6,4,6,4,6,4,6,1,6,1,6,1,6,1,6,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,47,7,47,7,58,8,60,8,59,8,54,8,61,8,56,8,55,8,50,8,57,8,52,8,51,8,46,8,53,7,53,7,48,7,48,7,43,7,43,7,42,7,42,7,49,7,49,7,44,7,44,7,39,7,39,7,38,7,38,7,45,6,45,6,45,6,45,6,40,6,40,6,40,6,40,6,35,6,35,6,35,6,35,6,34,6,34,6,34,6,34,6,41,6,41,6,41,6,41,6,36,6,36,6,36,6,36,6,31,6,31,6,31,6,31,6,30,6,30,6,30,6,30,6,26,5,26,5,26,5,26,5,26,5,26,5,26,5,26,5,32,5,32,5,32,5,32,5,32,5,32,5,32,5,32,5,27,5,27,5,27,5,27,5,27,5,27,5,27,5,27,5,22,5,22,5,22,5,22,5,22,5,22,5,22,5,22,5,37,5,37,5,37,5,37,5,37,5,37,5,37,5,37,5,28,5,28,5,28,5,28,5,28,5,28,5,28,5,28,5,23,5,23,5,23,5,23,5,23,5,23,5,23,5,23,5,18,5,18,5,18,5,18,5,18,5,18,5,18,5,18,5,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3,33,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,24,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,14,3,29,2,20,2,15,2,10,2,25,1,16,1,0,0,0,0,11,1,6,1,0,0,0,0,0,0,0,0,0,0,0,0,14,8,20,8,19,8,10,8,29,7,29,7,16,7,16,7,15,7,15,7,6,7,6,7,25,6,25,6,25,6,25,6,12,6,12,6,12,6,12,6,11,6,11,6,11,6,11,6,3,6,3,6,3,6,3,6,21,6,21,6,21,6,21,6,8,6,8,6,8,6,8,6,7,6,7,6,7,6,7,6,1,6,1,6,1,6,1,6,17,5,17,5,17,5,17,5,17,5,17,5,17,5,17,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,0,0,0,57,5,57,5,61,6,60,6,59,6,58,6,55,6,54,6,56,6,51,6,52,5,52,5,50,5,50,5,53,5,53,5,48,5,48,5,47,5,47,5,46,5,46,5,49,5,49,5,44,5,44,5,43,5,43,5,42,5,42,5,38,4,38,4,38,4,38,4,40,4,40,4,40,4,40,4,39,4,39,4,39,4,39,4,34,4,34,4,34,4,34,4,45,4,45,4,45,4,45,4,36,4,36,4,36,4,36,4,35,4,35,4,35,4,35,4,30,4,30,4,30,4,30,4,41,3,32,3,31,3,26,3,37,3,28,3,27,3,22,3,33,1,24,1,0,0,0,0,23,1,18,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,8,40,8,35,8,30,8,41,8,36,8,31,8,26,8,22,7,22,7,18,7,18,7,32,7,32,7,14,7,14,7,37,7,37,7,28,7,28,7,27,7,27,7,10,7,10,7,6,6,6,6,6,6,6,6,24,6,24,6,24,6,24,6,23,6,23,6,23,6,23,6,3,6,3,6,3,6,3,6,33,6,33,6,33,6,33,6,20,6,20,6,20,6,20,6,19,6,19,6,19,6,19,6,1,6,1,6,1,6,1,6,15,5,15,5,15,5,15,5,15,5,15,5,15,5,15,5,16,5,16,5,16,5,16,5,16,5,16,5,16,5,16,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,11,5,12,5,12,5,12,5,12,5,12,5,12,5,12,5,12,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,29,5,29,5,29,5,29,5,29,5,29,5,29,5,29,5,8,5,8,5,8,5,8,5,8,5,8,5,8,5,8,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,25,4,25,4,25,4,25,4,25,4,25,4,25,4,25,4,25,4,25,4,25,4,25,4,25,4,25,4,25,4,25,4,21,4,21,4,21,4,21,4,21,4,21,4,21,4,21,4,21,4,21,4,21,4,21,4,21,4,21,4,21,4,21,4,17,4,17,4,17,4,17,4,17,4,17,4,17,4,17,4,17,4,17,4,17,4,17,4,17,4,17,4,17,4,17,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,13,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,0,58,2,61,2,60,2,59,2,54,2,57,2,56,2,55,2,50,2,53,2,52,2,51,2,46,2,47,1,47,1,42,1,48,1,0,0,0,0,43,1,38,1,0,0,0,0,49,1,44,1,0,0,0,0,39,1,34,1,0,0,0,0,1,6,2,6,0,0,0,6,3,6,4,6,5,6,0,0,6,6,7,6,8,6,9,6,10,6,11,6,12,6,13,6,14,6,15,6,16,6,17,6,18,6,19,6,20,6,21,6,22,6,23,6,24,6,25,6,26,6,27,6,28,6,29,6,30,6,31,6,32,6,33,6,34,6,35,6,36,6,37,6,38,6,39,6,40,6,41,6,42,6,43,6,44,6,45,6,46,6,47,6,48,6,49,6,50,6,51,6,52,6,53,6,54,6,55,6,56,6,57,6,58,6,59,6,60,6,61,6,4,4,8,0,0,0,0,0,8,2,1,1,0,0,0,0,6,3,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,1,1,1,0,2,1,2,2,2,0,3,1,3,2,3,3,3,0,4,1,4,2,4,3,4,0,5,1,5,2,5,3,5,0,6,1,6,2,6,3,6,0,7,1,7,2,7,3,7,0,8,1,8,2,8,3,8,0,9,1,9,2,9,3,9,0,10,1,10,2,10,3,10,0,11,1,11,2,11,3,11,0,12,1,12,2,12,3,12,0,13,1,13,2,13,3,13,0,14,1,14,2,14,3,14,0,15,1,15,2,15,3,15,0,16,1,16,2,16,3,16,0,0,0,0,0,0,15,9,14,9,13,9,12,8,12,8,11,8,11,8,10,7,10,7,10,7,10,7,9,7,9,7,9,7,9,7,8,6,8,6,8,6,8,6,8,6,8,6,8,6,8,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,14,6,13,6,12,6,11,6,10,5,10,5,9,5,9,5,8,4,8,4,8,4,8,4,7,4,7,4,7,4,7,4,6,4,6,4,6,4,6,4,5,4,5,4,5,4,5,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,13,6,11,6,12,5,12,5,10,5,10,5,9,5,9,5,8,4,8,4,8,4,8,4,5,4,5,4,5,4,5,4,4,4,4,4,4,4,4,4,0,4,0,4,0,4,0,4,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,12,5,11,5,10,5,0,5,9,4,9,4,7,4,7,4,3,4,3,4,2,4,2,4,8,3,8,3,8,3,8,3,6,3,6,3,6,3,6,3,5,3,5,3,5,3,5,3,4,3,4,3,4,3,4,3,1,3,1,3,1,3,1,3,11,5,9,5,10,4,10,4,8,4,8,4,2,4,2,4,1,4,1,4,0,4,0,4,7,3,7,3,7,3,7,3,6,3,6,3,6,3,6,3,5,3,5,3,5,3,5,3,4,3,4,3,4,3,4,3,3,3,3,3,3,3,3,3,10,6,0,6,1,5,1,5,8,4,8,4,8,4,8,4,9,3,9,3,9,3,9,3,9,3,9,3,9,3,9,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,9,6,0,6,1,5,1,5,7,4,7,4,7,4,7,4,8,3,8,3,8,3,8,3,8,3,8,3,8,3,8,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,8,6,0,6,2,5,2,5,1,4,1,4,1,4,1,4,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,1,6,0,6,7,5,7,5,2,4,2,4,2,4,2,4,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,1,5,0,5,6,4,6,4,2,3,2,3,2,3,2,3,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,0,4,1,4,2,3,2,3,3,3,3,3,5,3,5,3,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,0,4,1,4,4,3,4,3,2,2,2,2,2,2,2,2,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,0,3,1,3,3,2,3,2,2,1,2,1,2,1,2,1,0,2,1,2,2,1,2,1,0,1,1,1,0,0,0,0,9,6,6,5,5,6,6,6,6,5,4,4,3,2,1,0,3,3,2,3,1,2,1,2,0,1,0,1,0,1,0,1,2,2,1,2,0,1,0,1,1,1,0,1,0,0,0,0,3,2,1,0,0,0,0,0,1,1,0,1,0,0,0,0,2,2,1,2,0,1,0,1,3,2,2,2,1,2,0,2,4,3,3,3,2,2,2,2,1,2,1,2,0,2,0,2,5,3,4,3,3,3,2,3,1,2,1,2,0,2,0,2,1,3,2,3,4,3,3,3,6,3,5,3,0,2,0,2,7,3,6,3,5,3,4,3,3,3,2,3,1,3,0,3,0,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,68,111,69,114,114,111,114,67,111,110,83,108,105,99,101,77,86,67,111,112,121,40,41,58,58,112,80,114,101,118,105,111,117,115,80,105,99,32,97,110,100,32,112,68,101,99,32,117,115,101,32,115,97,109,101,32,98,117,102,102,101,114,44,32,105,103,110,111,114,101,100,46,0,0,0,0,0,0,0,0,112,73,116,101,114,45,62,112,77,98,65,108,108,111,99,77,97,112,0,0,0,0,0,0,95,102,109,111,45,62,112,77,98,65,108,108,111,99,77,97,112,0,0,0,0,0,0,0,87,101,108,115,73,110,105,116,82,101,102,76,105,115,116,40,41,58,58,80,114,101,102,101,116,99,104,80,105,99,32,102,111,114,32,69,67,32,101,114,114,111,114,115,46,0,0,0,87,101,108,115,82,101,111,114,100,101,114,82,101,102,76,105,115,116,40,41,58,58,58,58,66,65,83,69,32,76,65,89,69,82,58,58,58,58,105,83,112,115,73,100,58,37,100,44,32,114,101,102,95,115,112,115,95,105,100,58,37,100,0,0,82,101,109,97,105,110,79,110,101,66,117,102,102,101,114,73,110,68,112,98,70,111,114,69,67,40,41,58,32,101,109,112,116,121,32,111,110,101,32,68,80,66,32,102,97,105,108,101,100,32,102,111,114,32,69,67,33,0,0,0,0,0,0,0,78,111,32,114,101,102,101,114,101,110,99,101,32,112,105,99,116,117,114,101,32,105,110,32,115,104,111,114,116,32,116,101,114,109,32,108,105,115,116,32,119,104,101,110,32,115,108,105,100,105,110,103,32,119,105,110,100,111,119,0,0,0,0,0,77,77,67,79,95,83,72,79,82,84,50,85,78,85,83,69,68,58,32,100,101,108,101,116,101,32,97,32,101,109,112,116,121,32,101,110,116,114,121,32,102,114,111,109,32,115,104,111,114,116,32,116,101,114,109,32,108,105,115,116,0,0,0,0,77,77,67,79,95,76,79,78,71,50,85,78,85,83,69,68,58,32,100,101,108,101,116,101,32,97,32,101,109,112,116,121,32,101,110,116,114,121,32,102,114,111,109,32,108,111,110,103,32,116,101,114,109,32,108,105,115,116,0,0,0,0,0,0,77,77,67,79,95,76,79,78,71,50,76,79,78,71,58,32,100,101,108,101,116,101,32,97,32,101,109,112,116,121,32,101,110,116,114,121,32,102,114,111,109,32,115,104,111,114,116,32,116,101,114,109,32,108,105,115,116,0,0,0,0,0,0,0,101,120,95,109,97,114,107,95,97,118,99,40,41,58,58,58,77,77,67,79,95,83,72,79,82,84,50,76,79,78,71,58,58,58,76,84,82,32,109,97,114,107,105,110,103,46,46,46,46,105,70,114,97,109,101,78,117,109,58,32,37,100,0,0,101,120,95,109,97,114,107,95,97,118,99,40,41,58,58,58,77,77,67,79,95,76,79,78,71,58,58,58,76,84,82,32,109,97,114,107,105,110,103,46,46,46,46,105,70,114,97,109,101,78,117,109,58,32,37,100,0,0,0,0,0,0,0,0,65,99,99,101,115,115,32,85,110,105,116,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,118,101,114,116,105,99,97,108,32,109,118,32,37,100,0,0,0,255,255,0,0,4,0,8,0,12,0,16,0,0,0,12,0,12,0,16,0,16,0,0,0,255,255,0,0,15,0,29,0,44,0,47,0,0,0,44,0,44,0,47,0,47,0,0,0,255,255,15,0,14,0,15,0,3,0,14,0,63,0,3,0,3,0,14,0,14,0,0,0,0,1,2,3,4,5,5,4,4,3,3,4,4,4,5,5,4,4,4,4,3,3,6,7,7,7,8,9,10,9,8,7,7,6,11,12,13,11,6,7,8,9,14,10,9,8,6,11,12,13,11,6,9,14,10,9,11,12,13,11,14,10,12,14,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,255,255,0,0,10,0,20,0,30,0,39,0,0,0,30,0,30,0,39,0,39,0,0,0,255,255,4,0,4,0,4,0,3,0,4,0,4,0,3,0,3,0,4,0,4,0,0,0,1,0,0,0,1,2,0,0,2,0,0,0,2,2,0,0,4,0,0,0,2,1,0,0,8,0,0,0,4,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,3,1,1,1,0,0,0,0,1,1,0,0,2,0,1,0,3,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,3,0,1,0,4,1,1,1,5,1,1,1,6,1,1,1,7,0,1,0,8,1,0,0,0,0,0,0,105,110,116,101,114,32,112,97,114,115,101,58,32,105,77,111,116,105,111,110,80,114,101,100,70,108,97,103,32,61,32,49,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,32,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,118,101,114,116,105,99,97,108,32,109,118,32,37,100,0,0,0,1,0,0,0,1,2,0,0,2,0,0,0,2,2,0,0,4,0,0,0,2,1,0,0,8,0,0,0,4,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,72,46,0,0,80,46,0,0,88,46,0,0,0,0,0,0,80,80,105,99,116,117,114,101,0,0,0,0,0,0,0,0,95,112,105,99,45,62,98,117,102,102,101,114,91,48,93,0,112,80,105,99,45,62,112,66,117,102,102,101,114,91,48,93,0,0,0,0,0,0,0,0,112,80,105,99,0,0,0,0,0,0,0,0,136,64,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,67,87,101,108,115,68,101,99,111,100,101,114,40,41,32,101,110,116,114,121,0,0,0,0,0,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,126,67,87,101,108,115,68,101,99,111,100,101,114,40,41,0,0,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,73,110,105,116,105,97,108,105,122,101,40,41,44,32,105,110,118,97,108,105,100,32,105,110,112,117,116,32,97,114,103,117,109,101,110,116,46,0,0,0,0,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,85,110,105,110,105,116,68,101,99,111,100,101,114,40,41,44,32,111,112,101,110,104,50,54,52,32,99,111,100,101,99,32,118,101,114,115,105,111,110,32,61,32,37,115,46,0,0,0,0,0,52,49,99,97,102,51,56,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,85,110,105,110,105,116,68,101,99,111,100,101,114,40,41,44,32,118,101,114,105,102,121,32,109,101,109,111,114,121,32,117,115,97,103,101,32,40,37,100,32,98,121,116,101,115,41,32,97,102,116,101,114,32,102,114,101,101,46,46,0,0,0,0,0,0,109,95,112,68,101,99,67,111,110,116,101,120,116,0,0,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,105,110,105,116,95,100,101,99,111,100,101,114,40,41,44,32,111,112,101,110,104,50,54,52,32,99,111,100,101,99,32,118,101,114,115,105,111,110,32,61,32,37,115,0,0,0,0,0,0,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,83,101,116,79,112,116,105,111,110,32,102,111,114,32,100,97,116,97,32,102,111,114,109,97,116,32,109,101,97,110,105,110,103,108,101,115,115,32,102,111,114,32,112,97,114,115,101,111,110,108,121,46,0,0,0,0,0,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,83,101,116,79,112,116,105,111,110,32,102,111,114,32,69,82,82,79,82,95,67,79,78,95,73,68,67,32,61,32,37,100,32,110,111,116,32,97,108,108,111,119,100,32,102,111,114,32,112,97,114,115,101,32,111,110,108,121,33,46,0,0,0,0,0,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,83,101,116,79,112,116,105,111,110,32,102,111,114,32,69,82,82,79,82,95,67,79,78,95,73,68,67,32,61,32,37,100,46,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,83,101,116,79,112,116,105,111,110,40,41,44,32,111,112,101,110,104,50,54,52,32,99,111,100,101,99,32,118,101,114,115,105,111,110,32,61,32,37,115,46,0,67,87,101,108,115,68,101,99,111,100,101,114,58,58,83,101,116,79,112,116,105,111,110,40,41,58,68,69,67,79,68,69,82,95,79,80,84,73,79,78,95,71,69,84,95,83,84,65,84,73,83,84,73,67,83,58,32,116,104,105,115,32,111,112,116,105,111,110,32,105,115,32,103,101,116,45,111,110,108,121,33,0,0,0,0,0,0,0,100,101,99,111,100,101,32,102,97,105,108,101,100,44,32,102,97,105,108,117,114,101,32,116,121,112,101,58,37,100,32,10,0,0,0,0,0,0,0,0,99,111,110,116,105,110,117,111,117,115,32,101,114,114,111,114,32,114,101,97,99,104,101,100,32,73,78,84,95,77,65,88,33,32,82,101,115,116,97,114,116,32,97,115,32,48,46,0,78,55,87,101,108,115,68,101,99,49,50,67,87,101,108,115,68,101,99,111,100,101,114,69,0,0,0,0,0,0,0,0,49,49,73,83,86,67,68,101,99,111,100,101,114,0,0,0,232,122,0,0,112,64,0,0,16,123,0,0,80,64,0,0,128,64,0,0,0,0,0,0,0,1,4,5,2,3,6,7,8,9,12,13,10,11,14,15,16,17,20,21,18,19,22,23,9,10,17,18,11,12,19,20,25,26,33,34,27,28,35,36,14,15,22,23,38,39,46,47,20,19,25,19,20,19,25,19,19,18,24,18,19,18,24,18,25,24,32,24,25,24,32,24,19,18,24,18,19,18,24,18,20,19,25,19,20,19,25,19,19,18,24,18,19,18,24,18,25,24,32,24,25,24,32,24,19,18,24,18,19,18,24,18,22,21,28,21,22,21,28,21,21,19,26,19,21,19,26,19,28,26,35,26,28,26,35,26,21,19,26,19,21,19,26,19,22,21,28,21,22,21,28,21,21,19,26,19,21,19,26,19,28,26,35,26,28,26,35,26,21,19,26,19,21,19,26,19,26,24,33,24,26,24,33,24,24,23,31,23,24,23,31,23,33,31,42,31,33,31,42,31,24,23,31,23,24,23,31,23,26,24,33,24,26,24,33,24,24,23,31,23,24,23,31,23,33,31,42,31,33,31,42,31,24,23,31,23,24,23,31,23,28,26,35,26,28,26,35,26,26,25,33,25,26,25,33,25,35,33,45,33,35,33,45,33,26,25,33,25,26,25,33,25,28,26,35,26,28,26,35,26,26,25,33,25,26,25,33,25,35,33,45,33,35,33,45,33,26,25,33,25,26,25,33,25,32,30,40,30,32,30,40,30,30,28,38,28,30,28,38,28,40,38,51,38,40,38,51,38,30,28,38,28,30,28,38,28,32,30,40,30,32,30,40,30,30,28,38,28,30,28,38,28,40,38,51,38,40,38,51,38,30,28,38,28,30,28,38,28,36,34,46,34,36,34,46,34,34,32,43,32,34,32,43,32,46,43,58,43,46,43,58,43,34,32,43,32,34,32,43,32,36,34,46,34,36,34,46,34,34,32,43,32,34,32,43,32,46,43,58,43,46,43,58,43,34,32,43,32,34,32,43,32,7,8,13,14,9,10,15,16,19,20,25,26,21,22,27,28,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,29,30,31,32,32,33,34,34,35,35,36,36,37,37,37,38,38,38,39,39,39,39,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,13,20,28,13,20,28,32,20,28,32,37,28,32,37,42,10,14,20,24,14,20,24,27,20,24,27,30,24,27,30,34,6,10,13,16,18,23,25,27,10,11,16,18,23,25,27,29,13,16,18,23,25,27,29,31,16,18,23,25,27,29,31,33,18,23,25,27,29,31,33,36,23,25,27,29,31,33,36,38,25,27,29,31,33,36,38,40,27,29,31,33,36,38,40,42,9,13,15,17,19,21,22,24,13,13,17,19,21,22,24,25,15,17,19,21,22,24,25,27,17,19,21,22,24,25,27,28,19,21,22,24,25,27,28,30,21,22,24,25,27,28,30,32,22,24,25,27,28,30,32,33,24,25,27,28,30,32,33,35,10,0,13,0,10,0,13,0,13,0,16,0,13,0,16,0,11,0,14,0,11,0,14,0,14,0,18,0,14,0,18,0,13,0,16,0,13,0,16,0,16,0,20,0,16,0,20,0,14,0,18,0,14,0,18,0,18,0,23,0,18,0,23,0,16,0,20,0,16,0,20,0,20,0,25,0,20,0,25,0,18,0,23,0,18,0,23,0,23,0,29,0,23,0,29,0,20,0,26,0,20,0,26,0,26,0,32,0,26,0,32,0,22,0,28,0,22,0,28,0,28,0,36,0,28,0,36,0,26,0,32,0,26,0,32,0,32,0,40,0,32,0,40,0,28,0,36,0,28,0,36,0,36,0,46,0,36,0,46,0,32,0,40,0,32,0,40,0,40,0,50,0,40,0,50,0,36,0,46,0,36,0,46,0,46,0,58,0,46,0,58,0,40,0,52,0,40,0,52,0,52,0,64,0,52,0,64,0,44,0,56,0,44,0,56,0,56,0,72,0,56,0,72,0,52,0,64,0,52,0,64,0,64,0,80,0,64,0,80,0,56,0,72,0,56,0,72,0,72,0,92,0,72,0,92,0,64,0,80,0,64,0,80,0,80,0,100,0,80,0,100,0,72,0,92,0,72,0,92,0,92,0,116,0,92,0,116,0,80,0,104,0,80,0,104,0,104,0,128,0,104,0,128,0,88,0,112,0,88,0,112,0,112,0,144,0,112,0,144,0,104,0,128,0,104,0,128,0,128,0,160,0,128,0,160,0,112,0,144,0,112,0,144,0,144,0,184,0,144,0,184,0,128,0,160,0,128,0,160,0,160,0,200,0,160,0,200,0,144,0,184,0,144,0,184,0,184,0,232,0,184,0,232,0,160,0,208,0,160,0,208,0,208,0,0,1,208,0,0,1,176,0,224,0,176,0,224,0,224,0,32,1,224,0,32,1,208,0,0,1,208,0,0,1,0,1,64,1,0,1,64,1,224,0,32,1,224,0,32,1,32,1,112,1,32,1,112,1,0,1,64,1,0,1,64,1,64,1,144,1,64,1,144,1,32,1,112,1,32,1,112,1,112,1,208,1,112,1,208,1,64,1,160,1,64,1,160,1,160,1,0,2,160,1,0,2,96,1,192,1,96,1,192,1,192,1,64,2,192,1,64,2,160,1,0,2,160,1,0,2,0,2,128,2,0,2,128,2,192,1,64,2,192,1,64,2,64,2,224,2,64,2,224,2,0,2,128,2,0,2,128,2,128,2,32,3,128,2,32,3,64,2,224,2,64,2,224,2,224,2,160,3,224,2,160,3,128,2,64,3,128,2,64,3,64,3,0,4,64,3,0,4,192,2,128,3,192,2,128,3,128,3,128,4,128,3,128,4,64,3,0,4,64,3,0,4,0,4,0,5,0,4,0,5,128,3,128,4,128,3,128,4,128,4,192,5,128,4,192,5,0,4,0,5,0,4,0,5,0,5,64,6,0,5,64,6,128,4,192,5,128,4,192,5,192,5,64,7,192,5,64,7,0,5,128,6,0,5,128,6,128,6,0,8,128,6,0,8,128,5,0,7,128,5,0,7,0,7,0,9,0,7,0,9,128,6,0,8,128,6,0,8,0,8,0,10,0,8,0,10,0,7,0,9,0,7,0,9,0,9,128,11,0,9,128,11,0,8,0,10,0,8,0,10,0,10,128,12,0,10,128,12,0,9,128,11,0,9,128,11,128,11,128,14,128,11,128,14,0,10,0,13,0,10,0,13,0,13,0,16,0,13,0,16,0,11,0,14,0,11,0,14,0,14,0,18,0,14,0,18,0,13,0,16,0,13,0,16,0,16,0,20,0,16,0,20,0,14,0,18,0,14,0,18,0,18,0,23,0,18,0,23,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,0,2,224,1,128,2,224,1,0,2,224,1,128,2,224,1,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,128,2,96,2,48,3,96,2,128,2,96,2,48,3,96,2,224,1,192,1,96,2,192,1,224,1,192,1,96,2,192,1,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,2,32,2,224,2,32,2,64,2,32,2,224,2,32,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,224,2,176,2,160,3,176,2,224,2,176,2,160,3,176,2,32,2,0,2,176,2,0,2,32,2,0,2,176,2,0,2,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,64,1,48,1,144,1,48,1,64,1,48,1,144,1,48,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,144,1,128,1,0,2,128,1,144,1,128,1,0,2,128,1,48,1,32,1,128,1,32,1,48,1,32,1,128,1,32,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,96,1,80,1,192,1,80,1,96,1,80,1,192,1,80,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,80,1,48,1,160,1,48,1,80,1,48,1,160,1,48,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,160,1,128,1,16,2,128,1,160,1,128,1,16,2,128,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,16,2,240,1,160,2,240,1,16,2,240,1,160,2,240,1,128,1,112,1,240,1,112,1,128,1,112,1,240,1,112,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,192,1,160,1,48,2,160,1,192,1,160,1,48,2,160,1,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,48,2,16,2,208,2,16,2,48,2,16,2,208,2,16,2,160,1,144,1,16,2,144,1,160,1,144,1,16,2,144,1,1,0,0,0,205,5,0,0,99,0,0,0,140,1,0,0,64,0,0,0,175,0,0,0,0,255,255,0,2,0,255,127,2,0,0,0,205,5,0,0,99,0,0,0,140,1,0,0,128,0,0,0,94,1,0,0,0,255,255,0,2,0,255,127,3,0,0,0,184,11,0,0,140,1,0,0,132,3,0,0,192,0,0,0,244,1,0,0,0,254,255,1,2,0,255,127,4,0,0,0,112,23,0,0,140,1,0,0,72,9,0,0,128,1,0,0,232,3,0,0,0,254,255,1,2,0,255,127,5,0,0,0,104,46,0,0,140,1,0,0,72,9,0,0,0,3,0,0,208,7,0,0,0,254,255,1,2,0,255,127,6,0,0,0,104,46,0,0,140,1,0,0,72,9,0,0,208,7,0,0,208,7,0,0,0,254,255,1,2,0,255,127,7,0,0,0,88,77,0,0,24,3,0,0,144,18,0,0,160,15,0,0,160,15,0,0,0,252,255,3,2,0,255,127,8,0,0,0,26,79,0,0,84,6,0,0,164,31,0,0,160,15,0,0,160,15,0,0,0,252,255,3,2,0,255,127,9,0,0,0,52,158,0,0,84,6,0,0,164,31,0,0,16,39,0,0,16,39,0,0,0,252,255,3,2,0,32,0,10,0,0,0,224,165,1,0,16,14,0,0,80,70,0,0,176,54,0,0,176,54,0,0,0,248,255,7,4,0,16,0,11,0,0,0,192,75,3,0,0,20,0,0,0,80,0,0,32,78,0,0,32,78,0,0,0,248,255,7,4,0,16,0,12,0,0,0,0,192,3,0,0,32,0,0,0,128,0,0,32,78,0,0,168,97,0,0,0,248,255,7,4,0,16,0,13,0,0,0,0,192,3,0,0,32,0,0,0,128,0,0,80,195,0,0,36,244,0,0,0,248,255,7,2,0,16,0,14,0,0,0,0,248,7,0,0,34,0,0,0,136,0,0,80,195,0,0,36,244,0,0,0,248,255,7,2,0,16,0,15,0,0,0,0,0,9,0,64,86,0,0,64,175,1,0,88,15,2,0,88,15,2,0,0,248,255,7,2,0,16,0,16,0,0,0,0,0,15,0,0,144,0,0,0,208,2,0,128,169,3,0,128,169,3,0,0,248,255,7,2,0,16,0,17,0,0,0,0,164,31,0,0,144,0,0,0,208,2,0,128,169,3,0,128,169,3,0,0,248,255,7,2,0,16,0,20,241,20,241,20,241,20,241,2,54,2,54,2,54,2,54,3,74,3,74,3,74,3,74,20,241,20,241,20,241,20,241,2,54,2,54,2,54,2,54,3,74,3,74,3,74,3,74,228,127,228,127,228,127,228,127,233,104,233,104,233,104,233,104,250,53,250,53,250,53,250,53,255,54,255,54,255,54,255,54,7,51,7,51,7,51,7,51,0,0,23,33,22,25,29,16,0,0,23,2,34,0,25,0,0,0,21,0,16,0,14,0,0,0,1,9,254,9,246,51,0,0,0,49,4,41,253,62,0,0,219,118,227,118,229,99,0,0,5,57,2,65,26,16,0,0,243,78,250,71,252,85,0,0,245,65,243,79,232,102,0,0,1,62,5,52,5,57,0,0,12,49,9,50,6,57,0,0,252,73,253,70,239,73,0,0,17,50,10,54,14,57,0,0,18,64,26,34,20,40,0,0,9,43,19,22,20,10,0,0,29,0,40,0,29,0,0,0,26,67,57,2,54,0,0,0,16,90,41,36,37,42,0,0,9,104,26,69,12,97,0,0,210,127,211,127,224,127,0,0,236,104,241,101,234,117,0,0,1,67,252,76,254,74,0,0,243,78,250,71,252,85,0,0,245,65,243,79,232,102,0,0,1,62,5,52,5,57,0,0,250,86,6,69,250,93,0,0,239,95,243,90,242,88,0,0,250,61,0,52,250,44,0,0,9,45,8,43,4,55,0,0,253,69,254,69,245,89,0,0,250,81,251,82,241,103,0,0,245,96,246,96,235,116,0,0,6,55,2,59,19,57,0,0,7,67,2,75,20,58,0,0,251,86,253,87,4,84,0,0,2,88,253,100,6,96,0,0,0,58,1,56,1,63,0,0,253,76,253,74,251,85,0,0,246,94,250,85,243,106,0,0,5,54,0,59,5,63,0,0,4,69,253,81,6,75,0,0,253,81,249,86,253,90,0,0,0,88,251,95,255,101,0,0,249,67,255,66,3,55,0,0,251,74,255,77,252,79,0,0,252,74,1,70,254,75,0,0,251,80,254,86,244,97,0,0,249,72,251,72,249,50,0,0,1,58,0,61,1,60,0,41,0,41,0,41,0,41,0,63,0,63,0,63,0,63,0,63,0,63,0,63,0,63,0,63,0,63,0,63,0,63,247,83,247,83,247,83,247,83,4,86,4,86,4,86,4,86,0,97,0,97,0,97,0,97,249,72,249,72,249,72,249,72,13,41,13,41,13,41,13,41,3,62,3,62,3,62,3,62,0,11,0,45,13,15,7,34,1,55,252,78,7,51,247,88,0,69,253,96,2,80,236,127,239,127,229,126,217,127,220,127,243,102,228,98,238,91,239,91,0,82,231,101,239,96,242,95,249,74,233,67,230,81,231,84,235,107,228,82,221,98,231,86,229,127,236,94,232,102,244,89,225,127,240,83,233,97,239,91,232,127,234,110,229,119,225,127,238,95,235,91,232,99,242,76,229,127,238,102,235,110,238,103,235,114,243,93,238,102,243,90,226,127,227,127,220,127,219,127,239,123,249,92,0,80,11,80,244,115,251,89,251,89,5,76,240,122,249,96,249,94,2,84,245,115,243,108,252,92,5,78,244,63,253,46,0,39,250,55,254,68,255,65,0,65,4,61,241,84,255,57,241,84,242,83,243,104,247,93,221,127,219,127,253,70,253,74,254,73,251,79,248,93,247,92,244,104,245,104,246,90,248,87,247,91,245,91,226,127,233,126,225,127,226,127,255,74,5,54,3,55,0,65,250,97,6,60,7,56,254,79,249,91,6,59,7,55,0,72,236,127,6,69,8,61,252,92,252,56,255,48,253,53,250,56,251,82,0,68,0,68,3,68,249,76,252,69,249,74,248,71,234,125,248,88,247,88,243,98,249,93,254,85,243,103,252,86,245,87,250,78,243,91,244,88,253,77,255,75,247,89,251,82,251,71,249,77,242,92,253,72,252,63,2,54,248,76,252,67,252,68,5,50,244,87,248,72,244,84,253,68,233,110,240,89,249,62,1,50,232,105,247,69,249,65,6,42,246,78,255,59,8,61,252,81,236,112,5,66,5,56,1,63,239,99,4,57,254,66,252,70,178,127,252,71,1,64,0,67,186,127,254,71,0,61,2,57,206,127,2,58,254,78,254,76,210,127,255,74,1,50,11,35,252,66,252,44,7,52,4,64,251,78,255,69,10,35,1,61,252,71,0,62,0,44,11,35,248,72,249,51,11,38,18,25,2,59,252,47,1,45,12,24,255,55,250,42,0,46,13,29,249,70,253,41,5,44,13,36,250,75,250,53,31,17,246,93,248,89,8,76,1,51,249,73,222,119,247,78,7,50,254,73,253,75,245,83,28,19,13,46,32,20,9,52,16,33,9,49,30,22,0,67,14,62,249,100,212,127,251,90,243,108,9,53,0,54,1,67,241,100,2,53,251,61,241,72,243,101,5,53,0,58,251,75,243,91,254,61,255,60,248,80,244,94,0,56,253,61,235,83,246,88,0,56,248,67,235,64,240,84,243,63,231,84,243,31,246,86,251,60,242,74,231,64,249,83,255,62,251,65,227,94,243,87,4,57,5,52,9,75,237,94,250,69,2,57,17,63,1,70,4,57,0,61,248,74,0,72,14,39,247,69,251,35,251,74,4,51,245,70,254,27,18,59,13,68,18,55,13,91,248,102,3,64,252,71,3,65,241,100,1,61,0,58,249,69,0,95,9,63,7,61,8,77,252,75,7,50,9,41,246,66,2,72,16,39,18,25,3,62,245,75,5,44,9,32,253,68,253,71,4,52,5,43,236,81,15,46,11,48,9,47,0,30,243,69,251,60,0,44,1,7,0,62,255,59,0,51,253,23,0,65,0,59,2,46,235,74,21,37,22,33,19,38,16,66,241,72,5,44,252,66,233,124,9,57,14,43,15,38,17,37,16,54,255,78,12,42,44,238,0,62,0,60,9,34,50,222,12,72,9,69,0,89,234,127,24,0,11,28,4,45,4,39,15,9,2,40,10,28,0,42,8,25,3,44,10,31,7,34,13,18,0,49,33,245,11,29,15,9,0,46,52,213,8,31,13,19,2,44,18,15,6,37,10,37,2,51,28,0,7,42,12,18,0,47,35,234,3,40,6,29,4,39,38,231,8,33,20,33,2,62,34,0,13,43,15,30,6,46,39,238,13,36,4,45,0,54,32,244,4,47,1,58,3,54,102,162,3,55,0,62,2,58,0,0,2,58,7,61,4,63,56,241,6,60,12,38,6,51,33,252,8,44,11,45,6,57,29,10,11,44,15,39,7,53,37,251,14,42,11,42,6,52,51,227,7,48,13,44,6,55,39,247,4,56,16,45,11,45,52,222,4,52,12,41,14,36,69,198,13,37,10,49,8,53,67,193,9,49,30,34,255,82,44,251,19,58,18,42,7,55,32,7,10,48,10,55,253,78,55,227,12,45,17,51,15,46,32,1,0,69,17,46,22,31,0,0,20,33,0,89,255,84,27,36,8,63,26,237,25,7,33,231,35,238,22,239,30,249,34,226,33,231,26,239,28,3,36,228,28,253,30,231,28,4,38,228,24,10,28,236,32,0,38,229,27,0,33,233,34,255,34,238,34,242,37,229,30,6,35,240,52,212,33,233,30,6,34,242,39,232,40,228,32,9,32,248,19,17,38,239,31,19,37,250,31,25,33,245,26,27,35,0,36,29,40,241,26,30,30,10,24,33,41,250,37,20,28,18,34,15,38,1,28,34,26,25,30,20,41,17,17,70,29,41,22,73,30,250,1,67,0,75,20,34,27,3,5,59,2,72,19,31,26,22,9,67,8,77,27,44,37,240,16,30,14,35,19,16,35,252,18,32,18,31,15,36,38,248,18,35,17,35,15,36,38,253,22,29,21,30,21,28,37,3,24,31,17,45,25,21,38,5,23,38,20,42,30,20,42,0,18,43,18,45,31,12,35,16,20,41,27,26,27,16,39,22,11,63,16,54,24,42,14,48,9,59,7,66,0,93,27,37,9,64,16,56,14,56,21,60,255,94,11,73,15,57,12,68,254,89,10,67,26,38,2,97,247,108,246,116,232,127,253,71,250,76,233,112,232,115,250,42,254,44,241,71,234,82,251,50,0,45,249,61,247,62,253,54,0,52,0,53,0,53,254,62,253,64,251,66,0,59,0,58,254,59,245,77,242,85,1,63,252,70,247,80,243,89,254,72,252,75,247,84,243,94,255,74,248,82,246,87,245,92,247,91,239,102,222,127,227,127,251,67,247,77,235,101,235,100,251,27,3,24,253,39,242,57,253,39,0,42,251,53,244,67,254,44,0,48,249,61,245,71,0,46,0,55,245,75,246,77,240,64,250,59,241,77,235,85,248,68,249,71,239,91,240,88,246,78,244,83,231,107,233,104,250,77,245,87,231,111,241,98,246,86,226,119,228,122,219,127,244,92,1,58,245,76,246,82,241,55,253,29,246,44,248,48,246,60,255,36,246,52,248,61,250,62,1,38,246,57,248,66,252,65,2,43,247,58,249,70,244,73,250,55,240,72,242,75,248,76,0,58,249,69,246,79,249,80,0,64,252,69,247,83,247,88,253,74,251,74,244,92,239,110,246,90,247,86,238,108,245,97,0,70,2,66,252,79,236,84,252,29,247,34,234,69,245,79,5,31,1,32,240,75,250,73,7,42,11,31,254,58,252,74,1,59,5,52,1,58,243,86,254,58,254,55,243,78,243,96,253,72,254,67,247,83,245,97,253,81,0,73,252,81,237,117,245,97,248,89,243,99,248,78,0,58,3,52,243,81,251,33,8,5,7,4,250,38,252,48,10,14,10,8,243,62,254,53,14,18,17,8,250,58,253,62,13,27,16,19,254,59,243,71,2,40,3,37,240,73,246,79,0,58,255,61,246,76,244,86,253,70,251,73,243,86,243,90,250,79,255,70,247,83,242,97,248,85,252,78,246,87,0,0,0,0,0,0,0,0,250,93,243,106,235,126,234,127,250,84,240,106,233,124,231,127,248,79,246,87,236,110,231,120,0,66,235,114,230,126,229,127,255,71,238,110,231,124,237,114,0,62,242,98,239,105,233,117,254,60,234,110,229,121,231,118,254,59,235,106,229,117,230,117,251,75,238,103,239,102,232,113,253,62,235,107,230,117,228,118,252,58,233,108,229,116,225,120,247,66,230,112,223,122,219,124,255,79,246,96,246,95,246,94,0,71,244,95,242,100,241,102,3,68,251,91,248,95,246,99,10,44,247,93,239,111,243,106,249,62,234,94,228,114,206,127,15,36,251,86,250,89,251,92,14,40,9,67,254,80,17,57,16,27,252,80,252,82,251,86,12,29,246,85,247,85,243,94,1,44,255,70,248,81,244,91,20,36,7,60,255,72,254,77,18,32,9,58,5,64,0,71,5,42,5,61,1,67,255,73,1,48,12,50,9,56,4,64,10,62,15,50,0,69,249,81,17,46,18,49,1,69,5,64,9,64,17,54,7,69,15,57,244,104,10,41,249,69,1,67,245,97,7,46,250,67,0,68,240,96,255,51,240,77,246,67,249,88,7,49,254,64,1,68,248,85,8,52,2,61,0,77,249,85,9,41,250,67,2,64,247,85,6,47,253,64,0,68,243,88,2,55,2,57,251,78,4,66,13,41,253,65,7,55,253,77,10,44,253,66,5,59,253,76,6,50,0,62,2,65,250,76,5,53,9,51,14,54,10,58,13,49,255,66,15,44,255,76,4,63,254,71,5,60,255,83,6,64,254,75,2,70,249,99,254,69,255,70,254,76,242,95,254,59,247,72,238,86,2,95,6,70,14,60,12,70,0,76,10,44,16,37,5,64,251,74,9,31,0,47,244,70,0,70,12,43,18,35,11,55,245,75,3,53,11,37,5,56,1,68,14,34,12,41,0,69,0,65,10,38,10,41,2,65,242,73,253,52,2,48,250,74,3,62,13,40,12,41,5,54,4,62,17,32,13,41,7,54,255,68,7,44,0,59,250,76,243,75,7,38,3,50,245,82,11,55,13,50,19,40,254,77,5,64,10,57,3,66,254,77,12,70,26,43,18,50,25,42,15,6,14,11,19,250,17,243,6,19,11,14,18,250,16,247,7,16,9,11,14,0,17,244,12,14,18,11,26,244,27,235,18,13,21,9,31,240,37,226,13,11,23,254,33,231,41,216,13,15,32,241,33,234,42,215,15,16,32,241,37,228,48,209,12,23,34,235,39,226,39,224,13,23,39,233,42,226,46,216,15,20,42,223,47,214,52,205,14,26,41,225,45,220,46,215,14,44,46,228,49,222,52,217,17,40,38,244,41,239,43,237,17,47,21,29,32,9,32,11,24,17,45,232,69,185,61,201,21,21,53,211,63,193,56,210,25,22,48,230,66,192,62,206,31,27,65,213,77,182,81,189,22,29,43,237,54,217,45,236,19,35,39,246,52,221,35,254,14,50,30,9,41,246,28,15,10,57,18,26,36,0,34,1,7,63,20,27,40,255,39,1,254,77,0,57,30,14,30,17,252,82,242,82,28,26,20,38,253,94,251,75,23,37,18,45,9,69,237,97,12,55,15,54,244,109,221,125,11,65,0,79,36,221,27,0,37,223,36,240,36,222,28,0,39,220,37,242,32,230,31,252,40,219,37,239,37,226,27,6,38,226,32,1,44,224,34,8,46,223,34,15,34,238,30,10,42,226,29,15,34,241,24,22,40,232,24,25,40,241,33,19,49,227,34,22,33,249,22,32,38,244,31,16,35,251,26,31,40,246,35,18,33,0,21,41,38,253,31,28,38,2,26,44,46,251,33,41,33,13,23,47,31,20,36,28,23,35,16,65,29,30,27,47,13,58,14,71,25,44,21,62,29,253,8,60,12,48,18,31,26,0,6,63,11,49,19,26,22,30,17,65,26,45,36,24,31,249,21,24,22,22,24,23,35,241,23,20,23,22,27,16,34,253,26,23,27,21,24,30,34,3,27,32,33,20,31,29,36,255,28,23,26,28,22,41,34,5,28,24,30,24,22,42,32,11,23,40,27,34,16,60,35,5,24,32,18,42,15,52,34,12,28,29,25,39,14,60,39,11,23,42,18,50,3,78,30,29,19,57,12,70,240,123,34,26,22,53,21,54,21,53,29,39,22,61,14,71,22,56,19,66,11,86,11,83,25,61,31,21,12,40,25,32,21,33,31,31,11,51,21,49,19,50,25,50,14,59,21,54,17,61,239,120,252,79,251,85,253,78,236,112,249,71,250,81,248,74,238,114,251,69,246,77,247,72,245,85,247,70,249,81,246,72,241,92,248,66,239,80,238,75,242,89,246,68,238,73,244,71,230,71,237,73,252,74,245,63,241,81,244,69,246,83,251,70,242,80,240,70,247,71,239,75,0,68,241,67,247,67,242,72,242,70,236,62,255,61,240,67,232,56,237,70,248,66,248,53,233,68,240,66,242,66,242,59,232,50,234,65,0,59,247,52,245,74,236,63,2,59,245,68,23,243,9,254,17,246,9,254,26,243,26,247,32,243,30,246,40,241,33,247,42,247,31,252,49,242,39,249,49,251,33,255,44,3,41,254,53,0,33,7,45,6,45,3,64,3,31,12,44,34,49,9,68,10,37,23,33,54,45,27,66,27,31,38,19,82,36,59,47,57,20,64,253,75,250,66,251,71,247,71,255,23,249,35,0,24,249,37,1,34,249,42,255,36,248,44,1,43,248,45,254,42,245,49,0,54,251,48,254,52,246,56,254,55,244,56,247,57,244,59,0,61,250,60,250,63,248,63,1,64,251,62,252,65,247,67,0,68,248,66,252,67,250,68,247,92,248,76,249,82,246,79,242,106,251,85,253,81,253,78,243,97,250,81,253,76,248,74,241,90,246,77,249,72,247,72,244,90,249,81,250,78,246,72,238,88,239,80,244,72,238,75,246,73,238,73,242,68,244,71,247,79,252,74,253,70,245,63,242,86,246,83,250,76,251,70,246,73,247,71,251,66,239,75,246,70,247,67,251,62,242,72,246,69,255,61,0,57,240,67,251,66,248,66,252,61,248,53,247,64,242,66,247,60,242,59,251,58,0,59,1,54,247,52,2,59,2,59,2,58,245,68,21,246,21,243,17,246,9,254,24,245,33,242,32,243,30,246,28,248,39,249,42,247,31,252,28,255,46,254,49,251,33,255,29,3,51,2,53,0,33,7,29,9,60,6,64,3,31,12,35,20,61,17,68,10,37,23,29,36,55,34,66,27,31,38,14,67,42,62,47,57,20,64,128,176,208,240,128,167,197,227,128,158,187,216,123,150,178,205,116,142,169,195,111,135,160,185,105,128,152,175,100,122,144,166,95,116,137,158,90,110,130,150,85,104,123,142,81,99,117,135,77,94,111,128,73,89,105,122,69,85,100,116,66,80,95,110,62,76,90,104,59,72,86,99,56,69,81,94,53,65,77,89,51,62,73,85,48,59,69,80,46,56,66,76,43,53,63,72,41,50,59,69,39,48,56,65,37,45,54,62,35,43,51,59,33,41,48,56,32,39,46,53,30,37,43,50,29,35,41,48,27,33,39,45,26,31,37,43,24,30,35,41,23,28,33,39,22,27,32,37,21,26,30,35,20,24,29,33,19,23,27,31,18,22,26,30,17,21,25,28,16,20,23,27,15,19,22,25,14,18,21,24,14,17,20,23,13,16,19,22,12,15,18,21,12,14,17,20,11,14,16,19,11,13,15,18,10,12,15,17,10,12,14,16,9,11,13,15,9,11,12,14,8,10,12,14,8,9,11,13,7,9,11,12,7,9,10,12,7,8,10,11,6,8,9,11,6,7,9,10,6,7,8,9,2,2,2,2,0,1,0,2,1,3,2,4,2,5,4,6,4,7,5,8,6,9,7,10,8,11,9,12,9,13,11,14,11,15,12,16,13,17,13,18,15,19,15,20,16,21,16,22,18,23,18,24,19,25,19,26,21,27,21,28,22,29,22,30,23,31,24,32,24,33,25,34,26,35,26,36,27,37,27,38,28,39,29,40,29,41,30,42,30,43,30,44,31,45,32,46,32,47,33,48,33,49,33,50,34,51,34,52,35,53,35,54,35,55,36,56,36,57,36,58,37,59,37,60,37,61,38,62,38,62,63,63,1,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,17,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,64,0,0,0,56,8,0,0,48,16,0,0,40,24,0,0,32,32,0,0,24,40,0,0,16,48,0,0,8,56,0,0,56,0,8,0,49,7,7,1,42,14,6,2,35,21,5,3,28,28,4,4,21,35,3,5,14,42,2,6,7,49,1,7,48,0,16,0,42,6,14,2,36,12,12,4,30,18,10,6,24,24,8,8,18,30,6,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([12,36,4,12,6,42,2,14,40,0,24,0,35,5,21,3,30,10,18,6,25,15,15,9,20,20,12,12,15,25,9,15,10,30,6,18,5,35,3,21,32,0,32,0,28,4,28,4,24,8,24,8,20,12,20,12,16,16,16,16,12,20,12,20,8,24,8,24,4,28,4,28,24,0,40,0,21,3,35,5,18,6,30,10,15,9,25,15,12,12,20,20,9,15,15,25,6,18,10,30,3,21,5,35,16,0,48,0,14,2,42,6,12,4,36,12,10,6,30,18,8,8,24,24,6,10,18,30,4,12,12,36,2,14,6,42,8,0,56,0,7,1,49,7,6,2,42,14,5,3,35,21,4,4,28,28,3,5,21,35,2,6,14,42,1,7,7,49,0,0,0,0,56,121,0,0,3,0,0,0,4,0,0,0,109,95,110,77,101,109,111,114,121,85,115,97,103,101,73,110,66,121,116,101,115,32,61,61,32,48,0,0,0,0,0,0,99,111,100,101,99,47,99,111,109,109,111,110,47,115,114,99,47,109,101,109,111,114,121,95,97,108,105,103,110,46,99,112,112,0,0,0,0,0,0,0,126,67,77,101,109,111,114,121,65,108,105,103,110,0,0,0,78,49,48,87,101,108,115,67,111,109,109,111,110,49,50,67,77,101,109,111,114,121,65,108,105,103,110,69,0,0,0,0,232,122,0,0,24,121,0,0,91,79,112,101,110,72,50,54,52,93,32,116,104,105,115,32,61,32,48,120,37,112,44,32,69,114,114,111,114,58,0,0,91,79,112,101,110,72,50,54,52,93,32,116,104,105,115,32,61,32,48,120,37,112,44,32,87,97,114,110,105,110,103,58,0,0,0,0,0,0,0,0,91,79,112,101,110,72,50,54,52,93,32,116,104,105,115,32,61,32,48,120,37,112,44,32,73,110,102,111,58,0,0,0,91,79,112,101,110,72,50,54,52,93,32,116,104,105,115,32,61,32,48,120,37,112,44,32,68,101,98,117,103,58,0,0,91,79,112,101,110,72,50,54,52,93,32,116,104,105,115,32,61,32,48,120,37,112,44,32,68,101,116,97,105,108,58,0,37,115,10,0,0,0,0,0,0,0,0,0,40,122,0,0,5,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,16,123,0,0,24,122,0,0,80,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,232,122,0,0,64,122,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,232,122,0,0,88,122,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,16,123,0,0,112,122,0,0,104,122,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,16,123,0,0,168,122,0,0,152,122,0,0,0,0,0,0,0,0,0,0,208,122,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,3,0,0,0,17,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,88,123,0,0,7,0,0,0,11,0,0,0,9,0,0,0,10,0,0,0,3,0,0,0,18,0,0,0,2,0,0,0,2,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,16,123,0,0,48,123,0,0,208,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  var _BDtoIHigh=true;

   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _SItoD=true;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _ceil=Math_ceil;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

   
  Module["_strncpy"] = _strncpy;

  var _log=Math_log;

   
  Module["_i64Add"] = _i64Add;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  
  
  
  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for(i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        Runtime.warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        var stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for(l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }function _emscripten_log_js(flags, str) {
      if (flags & 24/*EM_LOG_C_STACK | EM_LOG_JS_STACK*/) {
        str = str.replace(/\s+$/, ''); // Ensure the message and the callstack are joined cleanly with exactly one newline.
        str += (str.length > 0 ? '\n' : '') + _emscripten_get_callstack_js(flags);
      }
  
      if (flags & 1 /*EM_LOG_CONSOLE*/) {
        if (flags & 4 /*EM_LOG_ERROR*/) {
          console.error(str);
        } else if (flags & 2 /*EM_LOG_WARN*/) {
          console.warn(str);
        } else {
          console.log(str);
        }
      } else if (flags & 6 /*EM_LOG_ERROR|EM_LOG_WARN*/) {
        Module.printErr(str);
      } else {
        Module.print(str);
      }
    }function _emscripten_log(flags, varargs) {
      // Extract the (optionally-existing) printf format specifier field from varargs.
      var format = HEAP32[((varargs)>>2)];
      varargs += Math.max(Runtime.getNativeFieldSize('i32'), Runtime.getAlignSize('i32', null, true));
      var str = '';
      if (format) {
        var result = __formatString(format, varargs);
        for(var i = 0 ; i < result.length; ++i) {
          str += String.fromCharCode(result[i]);
        }
      }
      _emscripten_log_js(flags, str);
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _emscripten_asm_const_int(code) {
      var args = Array.prototype.slice.call(arguments, 1);
      return Runtime.getAsmConst(code, args.length).apply(null, args) | 0;
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_send": _send, "___setErrNo": ___setErrNo, "_emscripten_asm_const_int": _emscripten_asm_const_int, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_log": _emscripten_log, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "__emscripten_traverse_stack": __emscripten_traverse_stack, "_emscripten_log_js": _emscripten_log_js, "_mkport": _mkport, "_log": _log, "_write": _write, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "___cxa_throw": ___cxa_throw, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_gettimeofday": _gettimeofday, "_ceil": _ceil, "__formatString": __formatString, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _send=env._send;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_asm_const_int=env._emscripten_asm_const_int;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_log=env._emscripten_log;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var __emscripten_traverse_stack=env.__emscripten_traverse_stack;
  var _emscripten_log_js=env._emscripten_log_js;
  var _mkport=env._mkport;
  var _log=env._log;
  var _write=env._write;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var ___cxa_throw=env.___cxa_throw;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _gettimeofday=env._gettimeofday;
  var _ceil=env._ceil;
  var __formatString=env.__formatString;
  var _emscripten_get_callstack_js=env._emscripten_get_callstack_js;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _openh264_log($ctx,$level,$msg) {
 $ctx = $ctx|0;
 $level = $level|0;
 $msg = $msg|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 8;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $level;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $msg;
 _emscripten_log(1,($vararg_buffer|0));
 STACKTOP = sp;return;
}
function _open_decoder() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cb = 0, $decParam = 0, $decoder_ = 0, $tracelevel = 0, $vararg_buffer10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer10 = sp;
 $decoder_ = sp + 48|0;
 $cb = sp + 44|0;
 $tracelevel = sp + 40|0;
 $decParam = sp + 8|0;
 HEAP32[$decoder_>>2] = 0;
 $0 = (_WelsCreateDecoder($decoder_)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  HEAP32[$vararg_buffer10>>2] = 32;
  _emscripten_log(1,($vararg_buffer10|0));
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$decoder_>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$vararg_buffer10>>2] = 56;
  _emscripten_log(1,($vararg_buffer10|0));
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$cb>>2] = 1;
 HEAP32[$tracelevel>>2] = 3;
 $4 = HEAP32[$decoder_>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 15]($4,10,$cb)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  HEAP32[$vararg_buffer10>>2] = 96;
  _emscripten_log(1,($vararg_buffer10|0));
 }
 $10 = HEAP32[$decoder_>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$13 & 15]($10,9,$tracelevel)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  HEAP32[$vararg_buffer10>>2] = 96;
  _emscripten_log(1,($vararg_buffer10|0));
 }
 ;HEAP32[$decParam+0>>2]=0|0;HEAP32[$decParam+4>>2]=0|0;HEAP32[$decParam+8>>2]=0|0;HEAP32[$decParam+12>>2]=0|0;HEAP32[$decParam+16>>2]=0|0;HEAP32[$decParam+20>>2]=0|0;HEAP32[$decParam+24>>2]=0|0;
 $16 = (($decParam) + 4|0);
 HEAP32[$16>>2] = 23;
 $17 = (($decParam) + 12|0);
 HEAP8[$17>>0] = -1;
 $18 = (($decParam) + 16|0);
 HEAP32[$18>>2] = 2;
 $19 = (($decParam) + 28|0);
 HEAP32[$19>>2] = 1;
 $20 = HEAP32[$decoder_>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_iii[$22 & 1]($20,$decParam)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = HEAP32[$decoder_>>2]|0;
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer10>>2] = 120;
  _emscripten_log(1,($vararg_buffer10|0));
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _close_decoder($dec) {
 $dec = $dec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dec|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$dec>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_ii[$3 & 3]($dec)|0);
 _WelsDestroyDecoder($dec);
 STACKTOP = sp;return;
}
function _decode_nal($dec,$nal,$nalsz) {
 $dec = $dec|0;
 $nal = $nal|0;
 $nalsz = $nalsz|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bufInfo = 0, $cond = 0, $data = 0, $endptr = 0, $endptr10 = 0, $endptr12 = 0, $endptr14 = 0, $endptr16 = 0, $endptr18 = 0, $endptr20 = 0, $endptr4 = 0, $endptr6 = 0, $endptr8 = 0, $iEndOfStreamFlag = 0;
 var $statusstr = 0, $strlen = 0, $strlen11 = 0, $strlen13 = 0, $strlen15 = 0, $strlen17 = 0, $strlen19 = 0, $strlen3 = 0, $strlen5 = 0, $strlen7 = 0, $strlen9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vararg_buffer = sp + 48|0;
 $data = sp + 64|0;
 $bufInfo = sp;
 $iEndOfStreamFlag = sp + 60|0;
 $statusstr = sp + 76|0;
 ;HEAP32[$data+0>>2]=0|0;HEAP32[$data+4>>2]=0|0;HEAP32[$data+8>>2]=0|0;
 dest=$bufInfo+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ($nalsz|0)==(0);
 if ($0) {
  HEAP32[$iEndOfStreamFlag>>2] = 1;
  $1 = HEAP32[$dec>>2]|0;
  $2 = (($1) + 28|0);
  $3 = HEAP32[$2>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 15]($dec,1,$iEndOfStreamFlag)|0);
  $$01 = 0;$$02 = 0;
 } else {
  $$01 = $nal;$$02 = $nalsz;
 }
 $4 = HEAP32[$dec>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiiiii[$6 & 3]($dec,$$01,$$02,$data,$bufInfo)|0);
 $cond = ($7|0)==(0);
 if ($cond) {
  $8 = HEAP32[$bufInfo>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $10 = HEAP32[$data>>2]|0;
  $11 = (($data) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($data) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($bufInfo) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($bufInfo) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($bufInfo) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($bufInfo) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  (_emscripten_asm_const_int((144|0),($10|0),($12|0),($14|0),($16|0),($18|0),($20|0),($22|0))|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$statusstr+0|0; stop=dest+100|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $23 = $7 & 1;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $strlen19 = (_strlen(($statusstr|0))|0);
  $endptr20 = (($statusstr) + ($strlen19)|0);
  dest=$endptr20+0|0; src=192+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $25 = $7 & 2;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $strlen17 = (_strlen(($statusstr|0))|0);
  $endptr18 = (($statusstr) + ($strlen17)|0);
  dest=$endptr18+0|0; src=208+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $27 = $7 & 4;
 $28 = ($27|0)==(0);
 if (!($28)) {
  $strlen15 = (_strlen(($statusstr|0))|0);
  $endptr16 = (($statusstr) + ($strlen15)|0);
  dest=$endptr16+0|0; src=224+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $29 = $7 & 8;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $strlen13 = (_strlen(($statusstr|0))|0);
  $endptr14 = (($statusstr) + ($strlen13)|0);
  dest=$endptr14+0|0; src=240+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $31 = $7 & 16;
 $32 = ($31|0)==(0);
 if (!($32)) {
  $strlen11 = (_strlen(($statusstr|0))|0);
  $endptr12 = (($statusstr) + ($strlen11)|0);
  dest=$endptr12+0|0; src=256+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $33 = $7 & 32;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $strlen9 = (_strlen(($statusstr|0))|0);
  $endptr10 = (($statusstr) + ($strlen9)|0);
  dest=$endptr10+0|0; src=272+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $35 = $7 & 4096;
 $36 = ($35|0)==(0);
 if (!($36)) {
  $strlen7 = (_strlen(($statusstr|0))|0);
  $endptr8 = (($statusstr) + ($strlen7)|0);
  dest=$endptr8+0|0; src=296+0|0; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $37 = $7 & 8192;
 $38 = ($37|0)==(0);
 if (!($38)) {
  $strlen5 = (_strlen(($statusstr|0))|0);
  $endptr6 = (($statusstr) + ($strlen5)|0);
  dest=$endptr6+0|0; src=320+0|0; stop=dest+21|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $39 = $7 & 16384;
 $40 = ($39|0)==(0);
 if (!($40)) {
  $strlen3 = (_strlen(($statusstr|0))|0);
  $endptr4 = (($statusstr) + ($strlen3)|0);
  dest=$endptr4+0|0; src=344+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $41 = $7 & 32768;
 $42 = ($41|0)==(0);
 if (!($42)) {
  $strlen = (_strlen(($statusstr|0))|0);
  $endptr = (($statusstr) + ($strlen)|0);
  dest=$endptr+0|0; src=360+0|0; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 HEAP32[$vararg_buffer>>2] = 384;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $statusstr;
 _emscripten_log(1,($vararg_buffer|0));
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function __Z6getnalPKhjj($mmaped,$offs,$sz) {
 $mmaped = $mmaped|0;
 $offs = $offs|0;
 $sz = $sz|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ofs$0$lcssa = 0, $ofs$02 = 0, $zerocnt$03 = 0, $zerocnt$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($offs) + 3)|0;
 $1 = ($offs>>>0)<($sz>>>0);
 if (!($1)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($0>>>0)<($sz>>>0);
 L4: do {
  if ($2) {
   $ofs$02 = $0;$zerocnt$03 = 0;
   while(1) {
    $3 = (($mmaped) + ($ofs$02)|0);
    $4 = HEAP8[$3>>0]|0;
    $5 = $4&255;
    if ((($5|0) == 1)) {
     $7 = ($zerocnt$03|0)==(3);
     if ($7) {
      break;
     } else {
      $zerocnt$1 = 0;
     }
    } else if ((($5|0) == 0)) {
     $6 = (($zerocnt$03) + 1)|0;
     $zerocnt$1 = $6;
    } else {
     $zerocnt$1 = 0;
    }
    $10 = (($ofs$02) + 1)|0;
    $11 = ($10>>>0)<($sz>>>0);
    if ($11) {
     $ofs$02 = $10;$zerocnt$03 = $zerocnt$1;
    } else {
     $ofs$0$lcssa = $10;
     break L4;
    }
   }
   $8 = (-3 - ($offs))|0;
   $9 = (($8) + ($ofs$02))|0;
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  } else {
   $ofs$0$lcssa = $0;
  }
 } while(0);
 $12 = (($ofs$0$lcssa) - ($offs))|0;
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _decode_h264buffer($h,$nalbuf,$sz) {
 $h = $h|0;
 $nalbuf = $nalbuf|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ofs$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ofs$0 = 0;
 while(1) {
  $0 = (__Z6getnalPKhjj($nalbuf,$ofs$0,$sz)|0);
  $1 = (($nalbuf) + ($ofs$0)|0);
  (_decode_nal($h,$1,$0)|0);
  $2 = (($0) + ($ofs$0))|0;
  $3 = ($0|0)>(0);
  if ($3) {
   $ofs$0 = $2;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec21DetectStartCodePrefixEPKhPii($kpBuf,$pOffset,$iBufSize) {
 $kpBuf = $kpBuf|0;
 $pOffset = $pOffset|0;
 $iBufSize = $iBufSize|0;
 var $$01 = 0, $$07 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iIdx$06 = 0, $or$cond = 0, $pBits$08 = 0, $pBits$15 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iBufSize|0)>(0);
 L1: do {
  if ($0) {
   $$07 = $iBufSize;$pBits$08 = $kpBuf;
   while(1) {
    $iIdx$06 = 0;$pBits$15 = $pBits$08;
    while(1) {
     $1 = HEAP8[$pBits$15>>0]|0;
     $2 = ($1<<24>>24)==(0);
     $3 = (($pBits$15) + 1|0);
     if (!($2)) {
      break;
     }
     $4 = (($iIdx$06) + 1)|0;
     $5 = ($4|0)<($$07|0);
     if ($5) {
      $iIdx$06 = $4;$pBits$15 = $3;
     } else {
      $$01 = 0;
      break L1;
     }
    }
    $6 = ($iIdx$06|0)>(1);
    $7 = ($1<<24>>24)==(1);
    $or$cond = $6 & $7;
    if ($or$cond) {
     break;
    }
    $$neg = (($$07) + -1)|0;
    $11 = (($$neg) - ($iIdx$06))|0;
    $12 = ($11|0)>(0);
    if ($12) {
     $$07 = $11;$pBits$08 = $3;
    } else {
     $$01 = 0;
     break L1;
    }
   }
   $8 = $3;
   $9 = $kpBuf;
   $10 = (($8) - ($9))|0;
   HEAP32[$pOffset>>2] = $10;
   $$01 = $3;
  } else {
   $$01 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function __ZN7WelsDec14ParseNalHeaderEPNS_21TagWelsDecoderContextEPN10WelsCommon16TagNalUnitHeaderEPhiS5_iPi($pCtx,$pNalUnitHeader,$pSrcRbsp,$iSrcRbspLen,$pSrcNal,$iSrcNalLen,$pConsumedBytes) {
 $pCtx = $pCtx|0;
 $pNalUnitHeader = $pNalUnitHeader|0;
 $pSrcRbsp = $pSrcRbsp|0;
 $iSrcRbspLen = $iSrcRbspLen|0;
 $pSrcNal = $pSrcNal|0;
 $iSrcNalLen = $iSrcNalLen|0;
 $pConsumedBytes = $pConsumedBytes|0;
 var $$0 = 0, $$0$i = 0, $$0$i4 = 0, $$0$i7 = 0, $$in = 0, $$in52 = 0, $$phi$trans$insert = 0, $$phi$trans$insert40 = 0, $$phi$trans$insert49 = 0, $$pre = 0, $$pre32 = 0, $$pre41 = 0, $$pre50 = 0, $$sum = 0, $$val = 0, $$val3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bExtensionFlag$0$off0 = 0, $iCurrStartByte$0 = 0, $iIndex$022 = 0, $iIndex$022$in = 0, $iNalSize$0$lcssa = 0, $iNalSize$1 = 0, $iRetNum$0$i = 0, $iRetNum$0$i6 = 0, $iStartDeltaByte$0 = 0, $iTrailingZeroByte$0 = 0, $iTrailingZeroByte5$0 = 0, $not$$i10 = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond$i9 = 0, $or$cond54 = 0, $or$cond55 = 0, $pNal$0 = 0, $scevgep$i = 0, $scevgep$i13 = 0, $storemerge = 0, $storemerge$in = 0, $storemerge$in$v = 0, $switch = 0, $uiValue$0$i = 0, $uiValue$0$i5 = 0, $vararg_buffer21 = 0, $vararg_ptr10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer21 = sp;
 $0 = (($pNalUnitHeader) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ($iSrcRbspLen|0)>(0);
 L1: do {
  if ($1) {
   $iIndex$022$in = $iSrcRbspLen;
   while(1) {
    $iIndex$022 = (($iIndex$022$in) + -1)|0;
    $2 = (($pSrcRbsp) + ($iIndex$022)|0);
    $3 = HEAP8[$2>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if (!($4)) {
     $iNalSize$0$lcssa = $iIndex$022$in;
     break L1;
    }
    $5 = HEAP32[$pConsumedBytes>>2]|0;
    $6 = (($5) + 1)|0;
    HEAP32[$pConsumedBytes>>2] = $6;
    $7 = ($iIndex$022|0)>(0);
    if ($7) {
     $iIndex$022$in = $iIndex$022;
    } else {
     $iNalSize$0$lcssa = $iIndex$022;
     break;
    }
   }
  } else {
   $iNalSize$0$lcssa = $iSrcRbspLen;
  }
 } while(0);
 $8 = HEAP8[$pSrcRbsp>>0]|0;
 $9 = ($8&255) >>> 7;
 HEAP8[$pNalUnitHeader>>0] = $9;
 $10 = ($9<<24>>24)==(0);
 if (!($10)) {
  $11 = (($pCtx) + 116|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 | 4;
  HEAP32[$11>>2] = $13;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP8[$pSrcRbsp>>0]|0;
 $15 = ($14&255) >>> 5;
 $16 = (($pNalUnitHeader) + 1|0);
 HEAP8[$16>>0] = $15;
 $17 = HEAP8[$pSrcRbsp>>0]|0;
 $18 = $17&255;
 $19 = $18 & 31;
 HEAP32[$0>>2] = $19;
 $20 = (($pSrcRbsp) + 1|0);
 $21 = (($iNalSize$0$lcssa) + -1)|0;
 $22 = HEAP32[$pConsumedBytes>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[$pConsumedBytes>>2] = $23;
 $24 = HEAP32[$0>>2]|0;
 $25 = $24 & -2;
 $switch = ($25|0)==(6);
 if (!($switch)) {
  $26 = (($pCtx) + 241954|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ($27<<24>>24)==(0);
  if ($28) {
   $29 = (($pCtx) + 317169|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = ($30<<24>>24)!=(0);
   $$phi$trans$insert49 = (($pCtx) + 241960|0);
   $$pre50 = HEAP32[$$phi$trans$insert49>>2]|0;
   $32 = ($$pre50|0)==(0);
   $or$cond = $31 & $32;
   if ($or$cond) {
    HEAP32[$vararg_buffer21>>2] = $24;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,416,$vararg_buffer21);
   } else {
    $33 = (($pCtx) + 241960|0);
    $34 = (($$pre50) + 1)|0;
    HEAP32[$33>>2] = $34;
   }
   $35 = (($pCtx) + 512320|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 1)|0;
   HEAP32[$35>>2] = $37;
   $38 = (($pCtx) + 116|0);
   HEAP32[$38>>2] = 16;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $39 = (($pCtx) + 241960|0);
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$0>>2]|0;
 if (!((($40|0) == 15) | (($40|0) == 8) | (($40|0) == 7) | (($40|0) == 6))) {
  $41 = (($pCtx) + 241956|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $44 = (($pCtx) + 317169|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)!=(0);
   $$phi$trans$insert = (($pCtx) + 241968|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $47 = ($$pre|0)==(0);
   $or$cond54 = $46 & $47;
   if ($or$cond54) {
    HEAP32[$vararg_buffer21>>2] = $40;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,520,$vararg_buffer21);
   } else {
    $48 = (($pCtx) + 241968|0);
    $49 = (($$pre) + 1)|0;
    HEAP32[$48>>2] = $49;
   }
   $50 = (($pCtx) + 512328|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$50>>2] = $52;
   $53 = (($pCtx) + 116|0);
   HEAP32[$53>>2] = 16;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $54 = (($pCtx) + 241968|0);
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$0>>2]|0;
 do {
  if ((($55|0) == 5) | (($55|0) == 1)) {
   $$in = (($pCtx) + 241954|0);
   $56 = HEAP8[$$in>>0]|0;
   $57 = ($56<<24>>24)==(0);
   if ($57) {
    $58 = (($pCtx) + 241956|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = ($59<<24>>24)==(0);
    if ($60) {
     label = 25;
     break;
    }
   }
   if ((($55|0) == 20) | (($55|0) == 14)) {
    label = 22;
   }
  } else if ((($55|0) == 20) | (($55|0) == 14)) {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$in52 = (($pCtx) + 241954|0);
  $61 = HEAP8[$$in52>>0]|0;
  $62 = ($61<<24>>24)==(0);
  if ($62) {
   $63 = (($pCtx) + 241955|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)==(0);
   if ($65) {
    $66 = (($pCtx) + 241956|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = ($67<<24>>24)==(0);
    if ($68) {
     label = 25;
    }
   }
  }
 }
 if ((label|0) == 25) {
  $69 = (($pCtx) + 317169|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = ($70<<24>>24)!=(0);
  $$phi$trans$insert40 = (($pCtx) + 241964|0);
  $$pre41 = HEAP32[$$phi$trans$insert40>>2]|0;
  $72 = ($$pre41|0)==(0);
  $or$cond55 = $71 & $72;
  if ($or$cond55) {
   HEAP32[$vararg_buffer21>>2] = $55;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,616,$vararg_buffer21);
  } else {
   $73 = (($pCtx) + 241964|0);
   $74 = (($$pre41) + 1)|0;
   HEAP32[$73>>2] = $74;
  }
  $75 = (($pCtx) + 512324|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 1)|0;
  HEAP32[$75>>2] = $77;
  $78 = (($pCtx) + 116|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $79 | 16;
  HEAP32[$78>>2] = $80;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $81 = (($pCtx) + 241964|0);
 HEAP32[$81>>2] = 0;
 $82 = HEAP32[$0>>2]|0;
 switch ($82|0) {
 case 6: case 9:  {
  $83 = (($pCtx) + 241888|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)==(0);
  if ($87) {
   $$0 = $20;
   STACKTOP = sp;return ($$0|0);
  }
  $88 = (($86) + -1)|0;
  $89 = (($84) + 20|0);
  HEAP32[$89>>2] = $88;
  $90 = (($pCtx) + 317168|0);
  HEAP8[$90>>0] = 1;
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 14:  {
  $91 = (($pCtx) + 237968|0);
  $92 = (($pCtx) + 512544|0);
  $93 = $92;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($pCtx) + 241880|0);
  $100 = $99;
  $101 = $100;
  HEAP32[$101>>2] = $95;
  $102 = (($100) + 4)|0;
  $103 = $102;
  HEAP32[$103>>2] = $98;
  $104 = ($iNalSize$0$lcssa|0)<(4);
  if ($104) {
   $105 = (($pCtx) + 241888|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($108|0)==(0);
   if (!($109)) {
    $110 = (($108) + -1)|0;
    $111 = (($106) + 20|0);
    HEAP32[$111>>2] = $110;
    $112 = (($pCtx) + 242340|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ($113|0)==(0);
    if ($114) {
     $115 = (($pCtx) + 317168|0);
     HEAP8[$115>>0] = 1;
    }
   }
   $116 = (($pCtx) + 237992|0);
   $117 = (($116) + 1063|0);
   HEAP8[$117>>0] = 0;
   $118 = (($pCtx) + 116|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 | 4;
   HEAP32[$118>>2] = $120;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  __ZN7WelsDec18DecodeNalHeaderExtEPNS_10TagNalUnitEPh($91,$20);
  $121 = (($pCtx) + 237984|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = (($pCtx) + 237986|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $122 | $124;
  $126 = ($125<<24>>24)==(0);
  if (!($126)) {
   $127 = $122&255;
   $128 = $124&255;
   HEAP32[$vararg_buffer21>>2] = $127;
   $vararg_ptr10 = (($vararg_buffer21) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $128;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,712,$vararg_buffer21);
   $129 = (($pCtx) + 241888|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($132|0)==(0);
   if (!($133)) {
    $134 = (($132) + -1)|0;
    $135 = (($130) + 20|0);
    HEAP32[$135>>2] = $134;
    $136 = (($pCtx) + 242340|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ($137|0)==(0);
    if ($138) {
     $139 = (($pCtx) + 317168|0);
     HEAP8[$139>>0] = 1;
    }
   }
   $140 = (($pCtx) + 237992|0);
   $141 = (($140) + 1063|0);
   HEAP8[$141>>0] = 0;
   $142 = (($pCtx) + 116|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $143 | 4;
   HEAP32[$142>>2] = $144;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $145 = (($pSrcRbsp) + 4|0);
  $146 = HEAP32[$pConsumedBytes>>2]|0;
  $147 = (($146) + 3)|0;
  HEAP32[$pConsumedBytes>>2] = $147;
  $148 = HEAP8[$pNalUnitHeader>>0]|0;
  HEAP8[$91>>0] = $148;
  $149 = HEAP8[$16>>0]|0;
  $150 = (($pCtx) + 237969|0);
  HEAP8[$150>>0] = $149;
  $151 = HEAP32[$0>>2]|0;
  $152 = (($pCtx) + 237972|0);
  HEAP32[$152>>2] = $151;
  $153 = HEAP8[$16>>0]|0;
  $154 = ($153<<24>>24)==(0);
  do {
   if (!($154)) {
    $155 = (($pCtx) + 6144|0);
    $156 = $iNalSize$0$lcssa << 3;
    $157 = (($156) + -32)|0;
    $158 = (($pSrcRbsp) + ($21)|0);
    $$val3 = HEAP8[$158>>0]|0;
    $159 = $$val3&255;
    $iRetNum$0$i = 0;$uiValue$0$i = $159;
    while(1) {
     $160 = $uiValue$0$i & 1;
     $161 = ($160|0)==(0);
     if (!($161)) {
      $$0$i = $iRetNum$0$i;
      break;
     }
     $162 = $uiValue$0$i >>> 1;
     $163 = (($iRetNum$0$i) + 1)|0;
     $164 = ($163|0)<(9);
     if ($164) {
      $iRetNum$0$i = $163;$uiValue$0$i = $162;
     } else {
      $$0$i = 0;
      break;
     }
    }
    $165 = (($157) - ($$0$i))|0;
    $166 = (__ZN7WelsDec11DecInitBitsEPN10WelsCommon15TagBitStringAuxEPKhi($155,$145,$165)|0);
    $167 = ($166|0)==(0);
    if ($167) {
     (__ZN7WelsDec18ParsePrefixNalUnitEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxE($pCtx,$155)|0);
     break;
    }
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,816,$vararg_buffer21);
    $168 = (($pCtx) + 116|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = $169 | 4;
    HEAP32[$168>>2] = $170;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $171 = (($pCtx) + 237992|0);
  $172 = (($171) + 1063|0);
  HEAP8[$172>>0] = 1;
  $$0 = $145;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 20:  {
  $bExtensionFlag$0$off0 = 1;
  break;
 }
 case 5: case 1:  {
  $bExtensionFlag$0$off0 = 0;
  break;
 }
 default: {
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 }
 $173 = (($pCtx) + 241888|0);
 $174 = (($pCtx) + 562528|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = (__ZN7WelsDec13MemGetNextNalEPPNS_14TagAccessUnitsEPN10WelsCommon12CMemoryAlignE($173,$175)|0);
 $177 = ($176|0)==(0|0);
 if ($177) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,872,$vararg_buffer21);
  $178 = (($pCtx) + 116|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $179 | 16384;
  HEAP32[$178>>2] = $180;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $181 = (($pCtx) + 512544|0);
 $182 = $181;
 $183 = $182;
 $184 = HEAP32[$183>>2]|0;
 $185 = (($182) + 4)|0;
 $186 = $185;
 $187 = HEAP32[$186>>2]|0;
 $188 = (($176) + 3912|0);
 $189 = $188;
 $190 = $189;
 HEAP32[$190>>2] = $184;
 $191 = (($189) + 4)|0;
 $192 = $191;
 HEAP32[$192>>2] = $187;
 $193 = HEAP8[$pNalUnitHeader>>0]|0;
 HEAP8[$176>>0] = $193;
 $194 = HEAP8[$16>>0]|0;
 $195 = (($176) + 1|0);
 HEAP8[$195>>0] = $194;
 $196 = HEAP32[$0>>2]|0;
 $197 = (($176) + 4|0);
 HEAP32[$197>>2] = $196;
 $198 = HEAP32[$173>>2]|0;
 $199 = (($198) + 4|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = HEAP32[$0>>2]|0;
 $202 = ($201|0)==(20);
 do {
  if ($202) {
   $203 = ($iNalSize$0$lcssa|0)<(4);
   if ($203) {
    __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($198);
    $204 = ($200>>>0)>(1);
    if ($204) {
     $205 = (($200) + -2)|0;
     $206 = (($198) + 20|0);
     HEAP32[$206>>2] = $205;
     $207 = (($pCtx) + 242340|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0);
     if ($209) {
      $210 = (($pCtx) + 317168|0);
      HEAP8[$210>>0] = 1;
     }
    }
    $211 = (($pCtx) + 116|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = $212 | 4;
    HEAP32[$211>>2] = $213;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   __ZN7WelsDec18DecodeNalHeaderExtEPNS_10TagNalUnitEPh($176,$20);
   $214 = (($176) + 16|0);
   $215 = HEAP8[$214>>0]|0;
   $216 = ($215<<24>>24)==(0);
   $217 = (($176) + 18|0);
   if ($216) {
    $218 = HEAP8[$217>>0]|0;
    $219 = ($218<<24>>24)==(0);
    if ($219) {
     $234 = (($pSrcRbsp) + 4|0);
     $235 = (($iNalSize$0$lcssa) + -4)|0;
     $236 = HEAP32[$pConsumedBytes>>2]|0;
     $237 = (($236) + 3)|0;
     HEAP32[$pConsumedBytes>>2] = $237;
     $238 = (($pCtx) + 242344|0);
     $239 = HEAP8[$238>>0]|0;
     $240 = ($239<<24>>24)==(0);
     if ($240) {
      $iNalSize$1 = $235;$pNal$0 = $234;
      break;
     }
     $241 = (($pCtx) + 44|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = (($176) + 3896|0);
     HEAP32[$243>>2] = $242;
     $iTrailingZeroByte$0 = 0;
     while(1) {
      $244 = (($iSrcNalLen) - ($iTrailingZeroByte$0))|0;
      $245 = (($244) + -1)|0;
      $246 = (($pSrcNal) + ($245)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = ($247<<24>>24)==(0);
      $249 = (($iTrailingZeroByte$0) + 1)|0;
      if ($248) {
       $iTrailingZeroByte$0 = $249;
      } else {
       break;
      }
     }
     $250 = (($244) + -3)|0;
     $251 = (($176) + 3900|0);
     HEAP32[$251>>2] = $250;
     $252 = HEAP8[$pSrcNal>>0]|0;
     $253 = ($252<<24>>24)==(0);
     if ($253) {
      $254 = (($pSrcNal) + 1|0);
      $255 = HEAP8[$254>>0]|0;
      $256 = ($255<<24>>24)==(0);
      if ($256) {
       $257 = (($pSrcNal) + 2|0);
       $258 = HEAP8[$257>>0]|0;
       $259 = ($258<<24>>24)==(1);
       if ($259) {
        $260 = (($244) + -2)|0;
        HEAP32[$251>>2] = $260;
        $iCurrStartByte$0 = 3;
       } else {
        $iCurrStartByte$0 = 4;
       }
      } else {
       $iCurrStartByte$0 = 4;
      }
     } else {
      $iCurrStartByte$0 = 4;
     }
     $261 = (($176) + 12|0);
     $262 = HEAP8[$261>>0]|0;
     $263 = ($262<<24>>24)==(0);
     $264 = (($pSrcNal) + ($iCurrStartByte$0)|0);
     $265 = HEAP8[$264>>0]|0;
     $266 = $265&255;
     $267 = $266 & 224;
     $storemerge$in$v = $263 ? 1 : 5;
     $storemerge$in = $267 | $storemerge$in$v;
     $storemerge = $storemerge$in&255;
     HEAP8[$264>>0] = $storemerge;
     $268 = HEAP32[$241>>2]|0;
     $269 = (($268) + 2|0);
     HEAP8[$269>>0] = 0;
     $270 = HEAP32[$241>>2]|0;
     $271 = (($270) + 1|0);
     HEAP8[$271>>0] = 0;
     $272 = HEAP32[$241>>2]|0;
     HEAP8[$272>>0] = 0;
     $273 = HEAP32[$241>>2]|0;
     $274 = (($273) + 3|0);
     HEAP8[$274>>0] = 1;
     $275 = HEAP8[$264>>0]|0;
     $276 = HEAP32[$241>>2]|0;
     $277 = (($276) + 4|0);
     HEAP8[$277>>0] = $275;
     $278 = HEAP32[$241>>2]|0;
     $279 = (($278) + 5|0);
     HEAP32[$241>>2] = $279;
     $280 = (($iCurrStartByte$0) + 4)|0;
     $281 = (($pSrcNal) + ($280)|0);
     $282 = (($244) - ($280))|0;
     _memcpy(($279|0),($281|0),($282|0))|0;
     $283 = HEAP32[$241>>2]|0;
     $284 = (($283) + ($282)|0);
     HEAP32[$241>>2] = $284;
     $iNalSize$1 = $235;$pNal$0 = $234;
     break;
    } else {
     $223 = $218;
     label = 62;
    }
   } else {
    $220 = $215&255;
    HEAP32[$vararg_buffer21>>2] = $220;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,912,$vararg_buffer21);
    $$pre32 = HEAP8[$217>>0]|0;
    $221 = ($$pre32<<24>>24)==(0);
    if (!($221)) {
     $223 = $$pre32;
     label = 62;
    }
   }
   if ((label|0) == 62) {
    $222 = $223&255;
    HEAP32[$vararg_buffer21>>2] = $222;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,976,$vararg_buffer21);
   }
   __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($198);
   $224 = ($200>>>0)>(1);
   if ($224) {
    $225 = (($200) + -2)|0;
    $226 = (($198) + 20|0);
    HEAP32[$226>>2] = $225;
    $227 = (($pCtx) + 242340|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ($228|0)==(0);
    if ($229) {
     $230 = (($pCtx) + 317168|0);
     HEAP8[$230>>0] = 1;
    }
   }
   $231 = (($pCtx) + 116|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $232 | 4;
   HEAP32[$231>>2] = $233;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $285 = (($pCtx) + 242344|0);
   $286 = HEAP8[$285>>0]|0;
   $287 = ($286<<24>>24)==(0);
   if (!($287)) {
    $288 = (($pCtx) + 44|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = (($176) + 3896|0);
    HEAP32[$290>>2] = $289;
    $iTrailingZeroByte5$0 = 0;
    while(1) {
     $291 = (($iSrcNalLen) - ($iTrailingZeroByte5$0))|0;
     $292 = (($291) + -1)|0;
     $293 = (($pSrcNal) + ($292)|0);
     $294 = HEAP8[$293>>0]|0;
     $295 = ($294<<24>>24)==(0);
     $296 = (($iTrailingZeroByte5$0) + 1)|0;
     if ($295) {
      $iTrailingZeroByte5$0 = $296;
     } else {
      break;
     }
    }
    $297 = (($176) + 3900|0);
    HEAP32[$297>>2] = $291;
    $298 = HEAP8[$pSrcNal>>0]|0;
    $299 = ($298<<24>>24)==(0);
    if ($299) {
     $300 = (($pSrcNal) + 1|0);
     $301 = HEAP8[$300>>0]|0;
     $302 = ($301<<24>>24)==(0);
     if ($302) {
      $303 = (($pSrcNal) + 2|0);
      $304 = HEAP8[$303>>0]|0;
      $305 = ($304<<24>>24)==(1);
      if ($305) {
       $306 = HEAP32[$288>>2]|0;
       HEAP8[$306>>0] = 0;
       $307 = HEAP32[$297>>2]|0;
       $308 = (($307) + 1)|0;
       HEAP32[$297>>2] = $308;
       $iStartDeltaByte$0 = 1;
      } else {
       $iStartDeltaByte$0 = 0;
      }
     } else {
      $iStartDeltaByte$0 = 0;
     }
    } else {
     $iStartDeltaByte$0 = 0;
    }
    $309 = HEAP32[$288>>2]|0;
    $310 = (($309) + ($iStartDeltaByte$0)|0);
    _memcpy(($310|0),($pSrcNal|0),($291|0))|0;
    $311 = (($iStartDeltaByte$0) + ($291))|0;
    $312 = HEAP32[$288>>2]|0;
    $313 = (($312) + ($311)|0);
    HEAP32[$288>>2] = $313;
   }
   $314 = (($pCtx) + 237968|0);
   $315 = (($pCtx) + 237972|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = ($316|0)==(14);
   if ($317) {
    $318 = (($pCtx) + 237992|0);
    $319 = (($318) + 1063|0);
    $320 = HEAP8[$319>>0]|0;
    $321 = ($320<<24>>24)==(0);
    if (!($321)) {
     (__ZN7WelsDec26PrefetchNalHeaderExtSyntaxEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitES3_($pCtx,$176,$314)|0);
    }
   }
   $322 = HEAP32[$0>>2]|0;
   $323 = ($322|0)==(5);
   $324 = (($176) + 12|0);
   $325 = $323&1;
   HEAP8[$324>>0] = $325;
   $326 = (($176) + 14|0);
   HEAP8[$326>>0] = 1;
   $iNalSize$1 = $21;$pNal$0 = $20;
  }
 } while(0);
 $327 = (($200) + -1)|0;
 $328 = HEAP32[$198>>2]|0;
 $329 = (($328) + ($327<<2)|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = (($330) + 3868|0);
 $332 = $iNalSize$1 << 3;
 $$sum = (($iNalSize$1) + -1)|0;
 $333 = (($pNal$0) + ($$sum)|0);
 $$val = HEAP8[$333>>0]|0;
 $334 = $$val&255;
 $iRetNum$0$i6 = 0;$uiValue$0$i5 = $334;
 while(1) {
  $335 = $uiValue$0$i5 & 1;
  $336 = ($335|0)==(0);
  if (!($336)) {
   $$0$i7 = $iRetNum$0$i6;
   break;
  }
  $337 = $uiValue$0$i5 >>> 1;
  $338 = (($iRetNum$0$i6) + 1)|0;
  $339 = ($338|0)<(9);
  if ($339) {
   $iRetNum$0$i6 = $338;$uiValue$0$i5 = $337;
  } else {
   $$0$i7 = 0;
   break;
  }
 }
 $340 = (($332) - ($$0$i7))|0;
 $341 = (__ZN7WelsDec11DecInitBitsEPN10WelsCommon15TagBitStringAuxEPKhi($331,$pNal$0,$340)|0);
 $342 = ($341|0)==(0);
 if (!($342)) {
  __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($198);
  $343 = ($200>>>0)>(1);
  if ($343) {
   $344 = (($200) + -2)|0;
   $345 = (($198) + 20|0);
   HEAP32[$345>>2] = $344;
   $346 = (($pCtx) + 242340|0);
   $347 = HEAP32[$346>>2]|0;
   $348 = ($347|0)==(0);
   if ($348) {
    $349 = (($pCtx) + 317168|0);
    HEAP8[$349>>0] = 1;
   }
  }
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,1048,$vararg_buffer21);
  $350 = (($pCtx) + 116|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = $351 | 4;
  HEAP32[$350>>2] = $352;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $353 = (__ZN7WelsDec23ParseSliceHeaderSyntaxsEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEb($pCtx,$331,$bExtensionFlag$0$off0)|0);
 $354 = ($353|0)==(0);
 $355 = ($200|0)==(1);
 if (!($354)) {
  do {
   if ($355) {
    $356 = (($176) + 12|0);
    $357 = HEAP8[$356>>0]|0;
    $358 = ($357<<24>>24)==(0);
    if ($358) {
     __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($198);
     break;
    }
    $359 = (($pCtx) + 242320|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = ($360|0)==(0);
    if ($361) {
     $scevgep$i13 = (($pCtx) + 241892|0);
     ;HEAP32[$scevgep$i13+0>>2]=0|0;HEAP32[$scevgep$i13+4>>2]=0|0;HEAP32[$scevgep$i13+8>>2]=0|0;HEAP32[$scevgep$i13+12>>2]=0|0;HEAP32[$scevgep$i13+16>>2]=0|0;HEAP32[$scevgep$i13+20>>2]=0|0;HEAP32[$scevgep$i13+24>>2]=0|0;HEAP32[$scevgep$i13+28>>2]=0|0;
     label = 101;
    } else {
     label = 101;
    }
   } else {
    label = 101;
   }
  } while(0);
  if ((label|0) == 101) {
   __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($198);
   $362 = ($200>>>0)>(1);
   if ($362) {
    $363 = (($200) + -2)|0;
    $364 = (($198) + 20|0);
    HEAP32[$364>>2] = $363;
    $365 = (($pCtx) + 242340|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = ($366|0)==(0);
    if ($367) {
     $368 = (($pCtx) + 317168|0);
     HEAP8[$368>>0] = 1;
    }
   }
  }
  $369 = (($pCtx) + 116|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = $370 | 4;
  HEAP32[$369>>2] = $371;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 do {
  if ($355) {
   $372 = (($176) + 88|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = (($176) + 15|0);
   $375 = HEAP8[$374>>0]|0;
   $376 = $375&255;
   $377 = ((($pCtx) + ($376<<2)|0) + 241892|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = ($378|0)==(0|0);
   $380 = ($378|0)==($373|0);
   $or$cond$i9 = $379 | $380;
   if ($or$cond$i9) {
    $381 = (($176) + 12|0);
    $382 = HEAP8[$381>>0]|0;
    $not$$i10 = ($382<<24>>24)==(0);
    if ($not$$i10) {
     break;
    }
   }
   $383 = (($pCtx) + 242320|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = ($384|0)==(0);
   if ($385) {
    $scevgep$i = (($pCtx) + 241892|0);
    ;HEAP32[$scevgep$i+0>>2]=0|0;HEAP32[$scevgep$i+4>>2]=0|0;HEAP32[$scevgep$i+8>>2]=0|0;HEAP32[$scevgep$i+12>>2]=0|0;HEAP32[$scevgep$i+16>>2]=0|0;HEAP32[$scevgep$i+20>>2]=0|0;HEAP32[$scevgep$i+24>>2]=0|0;HEAP32[$scevgep$i+28>>2]=0|0;
   }
  }
 } while(0);
 $386 = ($200>>>0)>(1);
 if (!($386)) {
  $$0 = $pNal$0;
  STACKTOP = sp;return ($$0|0);
 }
 $387 = HEAP32[$198>>2]|0;
 $388 = (($387) + ($327<<2)|0);
 $389 = HEAP32[$388>>2]|0;
 $390 = (($200) + -2)|0;
 $391 = (($387) + ($390<<2)|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = (($389) + 88|0);
 $394 = HEAP32[$393>>2]|0;
 $395 = (__ZN7WelsDec23CheckAccessUnitBoundaryEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitES3_PNS_6TagSpsE($pCtx,$389,$392,$394)|0);
 if (!($395)) {
  $$0 = $pNal$0;
  STACKTOP = sp;return ($$0|0);
 }
 $396 = (($198) + 20|0);
 HEAP32[$396>>2] = $390;
 $397 = (($pCtx) + 317168|0);
 HEAP8[$397>>0] = 1;
 $398 = (($176) + 88|0);
 $399 = HEAP32[$398>>2]|0;
 $400 = (($176) + 15|0);
 $401 = HEAP8[$400>>0]|0;
 $402 = $401&255;
 $403 = ((($pCtx) + ($402<<2)|0) + 241892|0);
 $404 = HEAP32[$403>>2]|0;
 $405 = ($404|0)==(0|0);
 $406 = ($404|0)==($399|0);
 $or$cond$i = $405 | $406;
 if ($or$cond$i) {
  $407 = (($176) + 12|0);
  $408 = HEAP8[$407>>0]|0;
  $$0$i4 = $408;
 } else {
  $$0$i4 = 1;
 }
 $409 = (($pCtx) + 242335|0);
 HEAP8[$409>>0] = $$0$i4;
 $$0 = $pNal$0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec18ParsePrefixNalUnitEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxE($pCtx,$pBs) {
 $pCtx = $pCtx|0;
 $pBs = $pBs|0;
 var $$0 = 0, $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 237969|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pCtx) + 237992|0);
 $4 = (($pBs) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pBs) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$pBs>>2]|0;
 $9 = $8;
 $10 = (($pBs) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $5 << 1;
 HEAP32[$4>>2] = $12;
 $13 = (($pBs) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 $16 = ($14|0)>(-1);
 do {
  if ($16) {
   $17 = $11;
   $18 = $7;
   $19 = (($17) - ($9))|0;
   $20 = (($18) + 1)|0;
   $21 = (($20) - ($9))|0;
   $22 = ($19|0)>($21|0);
   if ($22) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $23 = HEAP8[$11>>0]|0;
    $24 = $23&255;
    $25 = $24 << 8;
    $26 = (($11) + 1|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = $25 | $28;
    $30 = $29 << $15;
    $31 = $30 | $12;
    HEAP32[$4>>2] = $31;
    $32 = (($14) + -15)|0;
    HEAP32[$13>>2] = $32;
    $33 = (($11) + 2|0);
    HEAP32[$10>>2] = $33;
    break;
   }
  }
 } while(0);
 $34 = ($5|0)<(0);
 $35 = (($pCtx) + 239052|0);
 $$lobit = $5 >>> 31;
 $36 = $$lobit&255;
 HEAP8[$35>>0] = $36;
 $37 = (($pCtx) + 237986|0);
 $38 = HEAP8[$37>>0]|0;
 $$not = ($38<<24>>24)!=(0);
 $brmerge = $$not | $34;
 if ($brmerge) {
  $39 = (($pCtx) + 237980|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $42 = (__ZN7WelsDec22ParseRefBasePicMarkingEPN10WelsCommon15TagBitStringAuxEPNS_23TagRefBasePicMarkingSynE($pBs,$3)|0);
   $43 = ($42|0)==(0);
   if (!($43)) {
    $$0 = $42;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $44 = HEAP32[$4>>2]|0;
 $45 = HEAP32[$6>>2]|0;
 $46 = HEAP32[$pBs>>2]|0;
 $47 = $46;
 $48 = HEAP32[$10>>2]|0;
 $49 = $44 << 1;
 HEAP32[$4>>2] = $49;
 $50 = HEAP32[$13>>2]|0;
 $51 = (($50) + 1)|0;
 HEAP32[$13>>2] = $51;
 $52 = ($50|0)>(-1);
 do {
  if ($52) {
   $53 = $48;
   $54 = $45;
   $55 = (($53) - ($47))|0;
   $56 = (($54) + 1)|0;
   $57 = (($56) - ($47))|0;
   $58 = ($55|0)>($57|0);
   if ($58) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $59 = HEAP8[$48>>0]|0;
    $60 = $59&255;
    $61 = $60 << 8;
    $62 = (($48) + 1|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = $61 | $64;
    $66 = $65 << $51;
    $67 = $66 | $49;
    HEAP32[$4>>2] = $67;
    $68 = (($50) + -15)|0;
    HEAP32[$13>>2] = $68;
    $69 = (($48) + 2|0);
    HEAP32[$10>>2] = $69;
    break;
   }
  }
 } while(0);
 $70 = ($44|0)<(0);
 $71 = (($3) + 1061|0);
 $$lobit8 = $44 >>> 31;
 $72 = $$lobit8&255;
 HEAP8[$71>>0] = $72;
 if (!($70)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $73 = HEAP32[$4>>2]|0;
 $74 = HEAP32[$6>>2]|0;
 $75 = HEAP32[$pBs>>2]|0;
 $76 = $75;
 $77 = HEAP32[$10>>2]|0;
 $78 = $73 << 1;
 HEAP32[$4>>2] = $78;
 $79 = HEAP32[$13>>2]|0;
 $80 = (($79) + 1)|0;
 HEAP32[$13>>2] = $80;
 $81 = ($79|0)>(-1);
 do {
  if ($81) {
   $82 = $77;
   $83 = $74;
   $84 = (($82) - ($76))|0;
   $85 = (($83) + 1)|0;
   $86 = (($85) - ($76))|0;
   $87 = ($84|0)>($86|0);
   if ($87) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $88 = HEAP8[$77>>0]|0;
    $89 = $88&255;
    $90 = $89 << 8;
    $91 = (($77) + 1|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = $90 | $93;
    $95 = $94 << $80;
    $96 = $95 | $78;
    HEAP32[$4>>2] = $96;
    $97 = (($79) + -15)|0;
    HEAP32[$13>>2] = $97;
    $98 = (($77) + 2|0);
    HEAP32[$10>>2] = $98;
    break;
   }
  }
 } while(0);
 $99 = (($3) + 1062|0);
 $$lobit9 = $73 >>> 31;
 $100 = $$lobit9&255;
 HEAP8[$99>>0] = $100;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec23CheckAccessUnitBoundaryEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitES3_PNS_6TagSpsE($pCtx,$kpCurNal,$kpLastNal,$kpSps) {
 $pCtx = $pCtx|0;
 $kpCurNal = $kpCurNal|0;
 $kpLastNal = $kpLastNal|0;
 $kpSps = $kpSps|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($kpCurNal) + 15|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ((($pCtx) + ($2<<2)|0) + 241892|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($4|0)==($kpSps|0);
 $or$cond = $5 | $6;
 do {
  if ($or$cond) {
   $7 = (($kpLastNal) + 17|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = (($kpCurNal) + 17|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($8<<24>>24)==($10<<24>>24);
   if ($11) {
    $12 = (($kpLastNal) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($kpCurNal) + 28|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($13|0)==($15|0);
    if ($16) {
     $17 = (($kpLastNal) + 48|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($kpCurNal) + 48|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)>($20|0);
     if ($21) {
      $$0 = 1;
     } else {
      $22 = (($kpLastNal) + 15|0);
      $23 = HEAP8[$22>>0]|0;
      $24 = ($23&255)>($1&255);
      if ($24) {
       $$0 = 1;
      } else {
       $25 = ($23<<24>>24)==($1<<24>>24);
       if ($25) {
        $26 = (($kpLastNal) + 100|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = (($kpCurNal) + 100|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = ($27|0)==($29|0);
        if (!($30)) {
         $$0 = 1;
         break;
        }
       }
       $31 = (($kpLastNal) + 2761|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = (($kpCurNal) + 2761|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = ($32<<24>>24)==($34<<24>>24);
       if ($35) {
        $36 = (($kpLastNal) + 2762|0);
        $37 = HEAP8[$36>>0]|0;
        $38 = (($kpCurNal) + 2762|0);
        $39 = HEAP8[$38>>0]|0;
        $40 = ($37<<24>>24)==($39<<24>>24);
        if ($40) {
         $41 = (($kpLastNal) + 1|0);
         $42 = HEAP8[$41>>0]|0;
         $43 = ($42<<24>>24)!=(0);
         $44 = (($kpCurNal) + 1|0);
         $45 = HEAP8[$44>>0]|0;
         $46 = ($45<<24>>24)!=(0);
         $47 = $43 ^ $46;
         if ($47) {
          $$0 = 1;
         } else {
          $48 = (($kpLastNal) + 12|0);
          $49 = HEAP8[$48>>0]|0;
          $50 = (($kpCurNal) + 12|0);
          $51 = HEAP8[$50>>0]|0;
          $52 = ($49<<24>>24)==($51<<24>>24);
          if ($52) {
           $53 = ($49<<24>>24)==(0);
           if (!($53)) {
            $54 = (($kpLastNal) + 2752|0);
            $55 = HEAP16[$54>>1]|0;
            $56 = (($kpCurNal) + 2752|0);
            $57 = HEAP16[$56>>1]|0;
            $58 = ($55<<16>>16)==($57<<16>>16);
            if (!($58)) {
             $$0 = 1;
             break;
            }
           }
           $59 = (($kpSps) + 20|0);
           $60 = HEAP32[$59>>2]|0;
           if ((($60|0) == 1)) {
            $71 = (($kpLastNal) + 40|0);
            $72 = HEAP32[$71>>2]|0;
            $73 = (($kpCurNal) + 40|0);
            $74 = HEAP32[$73>>2]|0;
            $75 = ($72|0)==($74|0);
            if (!($75)) {
             $$0 = 1;
             break;
            }
            $76 = (($kpLastNal) + 44|0);
            $77 = HEAP32[$76>>2]|0;
            $78 = (($kpCurNal) + 44|0);
            $79 = HEAP32[$78>>2]|0;
            $80 = ($77|0)==($79|0);
            if (!($80)) {
             $$0 = 1;
             break;
            }
           } else if ((($60|0) == 0)) {
            $61 = (($kpLastNal) + 32|0);
            $62 = HEAP32[$61>>2]|0;
            $63 = (($kpCurNal) + 32|0);
            $64 = HEAP32[$63>>2]|0;
            $65 = ($62|0)==($64|0);
            if (!($65)) {
             $$0 = 1;
             break;
            }
            $66 = (($kpLastNal) + 36|0);
            $67 = HEAP32[$66>>2]|0;
            $68 = (($kpCurNal) + 36|0);
            $69 = HEAP32[$68>>2]|0;
            $70 = ($67|0)==($69|0);
            if (!($70)) {
             $$0 = 1;
             break;
            }
           }
           $$0 = 0;
          } else {
           $$0 = 1;
          }
         }
        } else {
         $$0 = 1;
        }
       } else {
        $$0 = 1;
       }
      }
     }
    } else {
     $$0 = 1;
    }
   } else {
    $$0 = 1;
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec26CheckAccessUnitBoundaryExtEPN10WelsCommon19TagNalUnitHeaderExtES2_PNS_15TagSliceHeadersES4_($pLastNalHdrExt,$pCurNalHeaderExt,$pLastSliceHeader,$pCurSliceHeader) {
 $pLastNalHdrExt = $pLastNalHdrExt|0;
 $pCurNalHeaderExt = $pCurNalHeaderExt|0;
 $pLastSliceHeader = $pLastSliceHeader|0;
 $pCurSliceHeader = $pCurSliceHeader|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $not$ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pCurSliceHeader) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pLastNalHdrExt) + 17|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($pCurNalHeaderExt) + 17|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($3<<24>>24)==($5<<24>>24);
 do {
  if ($6) {
   $7 = (($pLastSliceHeader) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($pCurSliceHeader) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)<($10|0);
   if ($11) {
    $$0 = 0;
   } else {
    $12 = ($8|0)>($10|0);
    if ($12) {
     $$0 = 1;
    } else {
     $13 = (($pLastNalHdrExt) + 15|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = (($pCurNalHeaderExt) + 15|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($14&255)<($16&255);
     if ($17) {
      $$0 = 0;
     } else {
      $18 = ($14&255)>($16&255);
      if ($18) {
       $$0 = 1;
      } else {
       $19 = (($pLastNalHdrExt) + 16|0);
       $20 = HEAP8[$19>>0]|0;
       $21 = (($pCurNalHeaderExt) + 16|0);
       $22 = HEAP8[$21>>0]|0;
       $23 = ($20&255)<($22&255);
       if ($23) {
        $$0 = 0;
       } else {
        $24 = ($20&255)>($22&255);
        if ($24) {
         $$0 = 1;
        } else {
         $25 = (($pLastSliceHeader) + 4|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = (($pCurSliceHeader) + 4|0);
         $28 = HEAP32[$27>>2]|0;
         $29 = ($26|0)==($28|0);
         if ($29) {
          $30 = (($pLastSliceHeader) + 76|0);
          $31 = HEAP32[$30>>2]|0;
          $32 = (($pCurSliceHeader) + 76|0);
          $33 = HEAP32[$32>>2]|0;
          $34 = ($31|0)==($33|0);
          if ($34) {
           $35 = (($pLastSliceHeader) + 64|0);
           $36 = HEAP32[$35>>2]|0;
           $37 = HEAP32[$36>>2]|0;
           $38 = HEAP32[$1>>2]|0;
           $39 = ($37|0)==($38|0);
           if ($39) {
            $40 = (($pLastSliceHeader) + 2737|0);
            $41 = HEAP8[$40>>0]|0;
            $42 = (($pCurSliceHeader) + 2737|0);
            $43 = HEAP8[$42>>0]|0;
            $44 = ($41<<24>>24)==($43<<24>>24);
            if ($44) {
             $45 = (($pLastSliceHeader) + 2738|0);
             $46 = HEAP8[$45>>0]|0;
             $47 = (($pCurSliceHeader) + 2738|0);
             $48 = HEAP8[$47>>0]|0;
             $49 = ($46<<24>>24)==($48<<24>>24);
             if ($49) {
              $50 = (($pLastNalHdrExt) + 1|0);
              $51 = HEAP8[$50>>0]|0;
              $52 = ($51<<24>>24)!=(0);
              $53 = (($pCurNalHeaderExt) + 1|0);
              $54 = HEAP8[$53>>0]|0;
              $55 = ($54<<24>>24)!=(0);
              $56 = $52 ^ $55;
              if ($56) {
               $$0 = 1;
              } else {
               $57 = (($pLastNalHdrExt) + 12|0);
               $58 = HEAP8[$57>>0]|0;
               $59 = (($pCurNalHeaderExt) + 12|0);
               $60 = HEAP8[$59>>0]|0;
               $61 = ($58<<24>>24)==($60<<24>>24);
               if ($61) {
                $62 = ($58<<24>>24)==(0);
                if (!($62)) {
                 $63 = (($pLastSliceHeader) + 2728|0);
                 $64 = HEAP16[$63>>1]|0;
                 $65 = (($pCurSliceHeader) + 2728|0);
                 $66 = HEAP16[$65>>1]|0;
                 $67 = ($64<<16>>16)==($66<<16>>16);
                 if (!($67)) {
                  $$0 = 1;
                  break;
                 }
                }
                $68 = (($1) + 20|0);
                $69 = HEAP32[$68>>2]|0;
                if ((($69|0) == 1)) {
                 $80 = (($pLastSliceHeader) + 16|0);
                 $81 = HEAP32[$80>>2]|0;
                 $82 = (($pCurSliceHeader) + 16|0);
                 $83 = HEAP32[$82>>2]|0;
                 $84 = ($81|0)==($83|0);
                 if (!($84)) {
                  $$0 = 1;
                  break;
                 }
                 $85 = (($pLastSliceHeader) + 20|0);
                 $86 = HEAP32[$85>>2]|0;
                 $87 = (($pCurSliceHeader) + 20|0);
                 $88 = HEAP32[$87>>2]|0;
                 $89 = ($86|0)==($88|0);
                 if (!($89)) {
                  $$0 = 1;
                  break;
                 }
                } else if ((($69|0) == 0)) {
                 $70 = (($pLastSliceHeader) + 8|0);
                 $71 = HEAP32[$70>>2]|0;
                 $72 = (($pCurSliceHeader) + 8|0);
                 $73 = HEAP32[$72>>2]|0;
                 $74 = ($71|0)==($73|0);
                 if (!($74)) {
                  $$0 = 1;
                  break;
                 }
                 $75 = (($pLastSliceHeader) + 12|0);
                 $76 = HEAP32[$75>>2]|0;
                 $77 = (($pCurSliceHeader) + 12|0);
                 $78 = HEAP32[$77>>2]|0;
                 $79 = ($76|0)==($78|0);
                 if (!($79)) {
                  $$0 = 1;
                  break;
                 }
                }
                $90 = (($pLastSliceHeader) + 68|0);
                $91 = HEAP32[$90>>2]|0;
                $92 = (($pCurSliceHeader) + 68|0);
                $93 = HEAP32[$92>>2]|0;
                $94 = (_memcmp($91,$93,684)|0);
                $95 = ($94|0)==(0);
                if ($95) {
                 $96 = (_memcmp($36,$1,832)|0);
                 $not$ = ($96|0)!=(0);
                 STACKTOP = sp;return ($not$|0);
                } else {
                 $$0 = 1;
                }
               } else {
                $$0 = 1;
               }
              }
             } else {
              $$0 = 1;
             }
            } else {
             $$0 = 1;
            }
           } else {
            $$0 = 1;
           }
          } else {
           $$0 = 1;
          }
         } else {
          $$0 = 1;
         }
        }
       }
      }
     }
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec14ParseNonVclNalEPNS_21TagWelsDecoderContextEPhiS2_i($pCtx,$pRbsp,$kiSrcLen,$pSrcNal,$kSrcNalLen) {
 $pCtx = $pCtx|0;
 $pRbsp = $pRbsp|0;
 $kiSrcLen = $kiSrcLen|0;
 $pSrcNal = $pSrcNal|0;
 $kSrcNalLen = $kSrcNalLen|0;
 var $$0 = 0, $$0$i = 0, $$sum = 0, $$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iPicHeight = 0, $iPicWidth = 0, $iRetNum$0$i = 0, $storemerge = 0, $storemerge$v = 0, $storemerge1 = 0, $storemerge1$v = 0, $storemerge2 = 0, $storemerge2$v = 0, $storemerge3 = 0, $storemerge3$v = 0, $uiValue$0$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iPicWidth = sp + 4|0;
 $iPicHeight = sp;
 HEAP32[$iPicWidth>>2] = 0;
 HEAP32[$iPicHeight>>2] = 0;
 $0 = ($kiSrcLen|0)<(1);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pCtx) + 6144|0);
 $2 = $kiSrcLen << 3;
 $$sum = (($kiSrcLen) + -1)|0;
 $3 = (($pRbsp) + ($$sum)|0);
 $$val = HEAP8[$3>>0]|0;
 $4 = $$val&255;
 $iRetNum$0$i = 0;$uiValue$0$i = $4;
 while(1) {
  $5 = $uiValue$0$i & 1;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0$i = $iRetNum$0$i;
   break;
  }
  $7 = $uiValue$0$i >>> 1;
  $8 = (($iRetNum$0$i) + 1)|0;
  $9 = ($8|0)<(9);
  if ($9) {
   $iRetNum$0$i = $8;$uiValue$0$i = $7;
  } else {
   $$0$i = 0;
   break;
  }
 }
 $10 = (($2) - ($$0$i))|0;
 $11 = (($pCtx) + 92|0);
 $12 = HEAP32[$11>>2]|0;
 if ((($12|0) == 8)) {
  $28 = ($10|0)>(0);
  if ($28) {
   $29 = (__ZN7WelsDec11DecInitBitsEPN10WelsCommon15TagBitStringAuxEPKhi($1,$pRbsp,$10)|0);
   $30 = ($29|0)==(0);
   if (!($30)) {
    $31 = (($pCtx) + 242340|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0);
    $34 = (($pCtx) + 116|0);
    $35 = HEAP32[$34>>2]|0;
    $storemerge1$v = $33 ? 16 : 4;
    $storemerge1 = $storemerge1$v | $35;
    HEAP32[$34>>2] = $storemerge1;
    $$0 = $29;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $36 = (__ZN7WelsDec8ParsePpsEPNS_21TagWelsDecoderContextEPNS_6TagPpsEPN10WelsCommon15TagBitStringAuxEPhi($pCtx,0,$1,$pSrcNal,$kSrcNalLen)|0);
  $37 = ($36|0)==(0);
  if ($37) {
   $43 = (($pCtx) + 241956|0);
   HEAP8[$43>>0] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $38 = (($pCtx) + 242340|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0);
   $41 = (($pCtx) + 116|0);
   $42 = HEAP32[$41>>2]|0;
   $storemerge$v = $40 ? 16 : 4;
   $storemerge = $storemerge$v | $42;
   HEAP32[$41>>2] = $storemerge;
   $$0 = $36;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($12|0) == 15) | (($12|0) == 7)) {
  $13 = ($10|0)>(0);
  if ($13) {
   $14 = (__ZN7WelsDec11DecInitBitsEPN10WelsCommon15TagBitStringAuxEPKhi($1,$pRbsp,$10)|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    $16 = (($pCtx) + 242340|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0);
    $19 = (($pCtx) + 116|0);
    $20 = HEAP32[$19>>2]|0;
    $storemerge3$v = $18 ? 16 : 4;
    $storemerge3 = $storemerge3$v | $20;
    HEAP32[$19>>2] = $storemerge3;
    $$0 = $14;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $21 = (__ZN7WelsDec8ParseSpsEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEPiS5_Phi($pCtx,$1,$iPicWidth,$iPicHeight,$pSrcNal,$kSrcNalLen)|0);
  $22 = ($21|0)==(0);
  if ($22) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $23 = (($pCtx) + 242340|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  $26 = (($pCtx) + 116|0);
  $27 = HEAP32[$26>>2]|0;
  $storemerge2$v = $25 ? 16 : 4;
  $storemerge2 = $storemerge2$v | $27;
  HEAP32[$26>>2] = $storemerge2;
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec8ParseSpsEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEPiS5_Phi($pCtx,$pBsAux,$pPicWidth,$pPicHeight,$pSrcNal,$kSrcNalLen) {
 $pCtx = $pCtx|0;
 $pBsAux = $pBsAux|0;
 $pPicWidth = $pPicWidth|0;
 $pPicHeight = $pPicHeight|0;
 $pSrcNal = $pSrcNal|0;
 $kSrcNalLen = $kSrcNalLen|0;
 var $$ = 0, $$$i = 0, $$$i109 = 0, $$$i118 = 0, $$$i130 = 0, $$$i139 = 0, $$$i15 = 0, $$$i152 = 0, $$$i161 = 0, $$$i170 = 0, $$$i179 = 0, $$$i224 = 0, $$$i24 = 0, $$$i33 = 0, $$$i50 = 0, $$$i59 = 0, $$$i70 = 0, $$$i79 = 0, $$$i88 = 0, $$$i99 = 0;
 var $$0 = 0, $$0$i225$ph = 0, $$1$i = 0, $$1$i100 = 0, $$1$i110 = 0, $$1$i119 = 0, $$1$i131 = 0, $$1$i140 = 0, $$1$i153 = 0, $$1$i16 = 0, $$1$i162 = 0, $$1$i171 = 0, $$1$i180 = 0, $$1$i25 = 0, $$1$i34 = 0, $$1$i51 = 0, $$1$i60 = 0, $$1$i71 = 0, $$1$i80 = 0, $$1$i89 = 0;
 var $$in = 0, $$in336 = 0, $$in337 = 0, $$in337$in = 0, $$ph = 0, $$ph281 = 0, $$ph283 = 0, $$ph309 = 0, $$ph310 = 0, $$pr = 0, $$pre = 0, $$pre325 = 0, $$pre326 = 0, $$pre327 = 0, $$pre328 = 0, $$pre329 = 0, $$pre330 = 0, $$pre333 = 0, $$pre334 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0;
 var $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0;
 var $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0;
 var $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0;
 var $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0;
 var $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0;
 var $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0;
 var $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0;
 var $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0;
 var $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0;
 var $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0;
 var $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0;
 var $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0;
 var $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0;
 var $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0;
 var $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0;
 var $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0;
 var $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0;
 var $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0;
 var $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0;
 var $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0;
 var $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0;
 var $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0;
 var $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0;
 var $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0;
 var $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0;
 var $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0;
 var $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0;
 var $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0;
 var $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0;
 var $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0;
 var $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0;
 var $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0;
 var $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0;
 var $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0;
 var $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0;
 var $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0;
 var $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0;
 var $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0;
 var $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0;
 var $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0;
 var $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0;
 var $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0;
 var $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0;
 var $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0;
 var $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0;
 var $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0;
 var $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0;
 var $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0;
 var $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0;
 var $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0;
 var $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0;
 var $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0;
 var $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0;
 var $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0;
 var $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0;
 var $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0;
 var $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0;
 var $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0;
 var $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $i$0318 = 0, $i37$0313 = 0, $iStartDeltaByte$0 = 0, $iTmpValue$1$i = 0, $iTmpValue$1$i101 = 0, $iTmpValue$1$i111 = 0, $iTmpValue$1$i120 = 0, $iTmpValue$1$i132 = 0, $iTmpValue$1$i141 = 0, $iTmpValue$1$i154 = 0, $iTmpValue$1$i163 = 0, $iTmpValue$1$i17 = 0;
 var $iTmpValue$1$i172 = 0, $iTmpValue$1$i181 = 0, $iTmpValue$1$i26 = 0, $iTmpValue$1$i35 = 0, $iTmpValue$1$i52 = 0, $iTmpValue$1$i61 = 0, $iTmpValue$1$i72 = 0, $iTmpValue$1$i81 = 0, $iTmpValue$1$i90 = 0, $iTrailingZeroByte$0 = 0, $n$1$i = 0, $n$1$i102 = 0, $n$1$i112 = 0, $n$1$i121 = 0, $n$1$i133 = 0, $n$1$i142 = 0, $n$1$i155 = 0, $n$1$i164 = 0, $n$1$i173 = 0, $n$1$i18 = 0;
 var $n$1$i182 = 0, $n$1$i27 = 0, $n$1$i36 = 0, $n$1$i53 = 0, $n$1$i62 = 0, $n$1$i73 = 0, $n$1$i82 = 0, $n$1$i91 = 0, $pTmpSps$0 = 0, $phitmp = 0, $phitmp291 = 0, $sTempSubsetSps = 0, $storemerge$i$i = 0, $storemerge$i$i$i = 0, $storemerge$i$i$i242 = 0, $storemerge$i$i$i243 = 0, $storemerge$i$i$i244 = 0, $storemerge$i$i$i245 = 0, $storemerge$i$i$i246 = 0, $storemerge$i$i$i249$ph = 0;
 var $storemerge$i$i$i249312 = 0, $storemerge$i$i$i250 = 0, $storemerge$i$i$i254 = 0, $storemerge$i$i$i255 = 0, $storemerge$i$i$i256 = 0, $storemerge$i$i$i257 = 0, $storemerge$i$i$i258 = 0, $storemerge$i$i$i259 = 0, $storemerge$i$i$i262 = 0, $storemerge$i$i$i263 = 0, $storemerge$i$i$i265 = 0, $storemerge$i$i150 = 0, $storemerge$i$i42 = 0, $storemerge$i$i44 = 0, $storemerge$i$i48 = 0, $storemerge$i$i68 = 0, $uiCode = 0, $uiCodeNum$i = 0, $uiCodeNum$i232 = 0, $vararg_buffer46 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0;
 $vararg_buffer46 = sp;
 $uiCodeNum$i232 = sp + 876|0;
 $uiCodeNum$i = sp + 872|0;
 $sTempSubsetSps = sp + 8|0;
 $uiCode = sp + 4|0;
 $0 = (($pCtx) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(15);
 $3 = (($pBsAux) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 24;
 $6 = (($pBsAux) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$pBsAux>>2]|0;
 $9 = $8;
 $10 = (($pBsAux) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4 << 8;
 HEAP32[$3>>2] = $12;
 $13 = (($pBsAux) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 8)|0;
 HEAP32[$13>>2] = $15;
 $16 = ($15|0)>(0);
 do {
  if ($16) {
   $17 = $11;
   $18 = $7;
   $19 = (($17) - ($9))|0;
   $20 = (($18) + 1)|0;
   $21 = (($20) - ($9))|0;
   $22 = ($19|0)>($21|0);
   if ($22) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $23 = HEAP8[$11>>0]|0;
    $24 = $23&255;
    $25 = $24 << 8;
    $26 = (($11) + 1|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = $25 | $28;
    $30 = $29 << $15;
    $31 = $30 | $12;
    HEAP32[$3>>2] = $31;
    $32 = (($14) + -8)|0;
    HEAP32[$13>>2] = $32;
    $33 = (($11) + 2|0);
    HEAP32[$10>>2] = $33;
    $36 = $31;$39 = $32;$41 = $33;
    break;
   }
  } else {
   $36 = $12;$39 = $15;$41 = $11;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $5;
 $34 = $5&255;
 $35 = $36 >>> 31;
 $37 = $36 << 1;
 HEAP32[$3>>2] = $37;
 $38 = (($39) + 1)|0;
 HEAP32[$13>>2] = $38;
 $40 = ($39|0)>(-1);
 do {
  if ($40) {
   $42 = $41;
   $43 = $7;
   $44 = (($42) - ($9))|0;
   $45 = (($43) + 1)|0;
   $46 = (($45) - ($9))|0;
   $47 = ($44|0)>($46|0);
   if ($47) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $48 = HEAP8[$41>>0]|0;
    $49 = $48&255;
    $50 = $49 << 8;
    $51 = (($41) + 1|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $50 | $53;
    $55 = $54 << $38;
    $56 = $55 | $37;
    HEAP32[$3>>2] = $56;
    $57 = (($39) + -15)|0;
    HEAP32[$13>>2] = $57;
    $58 = (($41) + 2|0);
    HEAP32[$10>>2] = $58;
    $60 = $56;$63 = $57;$65 = $58;
    break;
   }
  } else {
   $60 = $37;$63 = $38;$65 = $41;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $35;
 $59 = $60 >>> 31;
 $61 = $60 << 1;
 HEAP32[$3>>2] = $61;
 $62 = (($63) + 1)|0;
 HEAP32[$13>>2] = $62;
 $64 = ($63|0)>(-1);
 do {
  if ($64) {
   $66 = $65;
   $67 = $7;
   $68 = (($66) - ($9))|0;
   $69 = (($67) + 1)|0;
   $70 = (($69) - ($9))|0;
   $71 = ($68|0)>($70|0);
   if ($71) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $72 = HEAP8[$65>>0]|0;
    $73 = $72&255;
    $74 = $73 << 8;
    $75 = (($65) + 1|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = $74 | $77;
    $79 = $78 << $62;
    $80 = $79 | $61;
    HEAP32[$3>>2] = $80;
    $81 = (($63) + -15)|0;
    HEAP32[$13>>2] = $81;
    $82 = (($65) + 2|0);
    HEAP32[$10>>2] = $82;
    $84 = $80;$87 = $81;$89 = $82;
    break;
   }
  } else {
   $84 = $61;$87 = $62;$89 = $65;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $59;
 $83 = $84 >>> 31;
 $85 = $84 << 1;
 HEAP32[$3>>2] = $85;
 $86 = (($87) + 1)|0;
 HEAP32[$13>>2] = $86;
 $88 = ($87|0)>(-1);
 do {
  if ($88) {
   $90 = $89;
   $91 = $7;
   $92 = (($90) - ($9))|0;
   $93 = (($91) + 1)|0;
   $94 = (($93) - ($9))|0;
   $95 = ($92|0)>($94|0);
   if ($95) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $96 = HEAP8[$89>>0]|0;
    $97 = $96&255;
    $98 = $97 << 8;
    $99 = (($89) + 1|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $102 = $98 | $101;
    $103 = $102 << $86;
    $104 = $103 | $85;
    HEAP32[$3>>2] = $104;
    $105 = (($87) + -15)|0;
    HEAP32[$13>>2] = $105;
    $106 = (($89) + 2|0);
    HEAP32[$10>>2] = $106;
    $108 = $104;$111 = $105;$113 = $106;
    break;
   }
  } else {
   $108 = $85;$111 = $86;$113 = $89;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $83;
 $107 = $108 >>> 31;
 $109 = $108 << 1;
 HEAP32[$3>>2] = $109;
 $110 = (($111) + 1)|0;
 HEAP32[$13>>2] = $110;
 $112 = ($111|0)>(-1);
 do {
  if ($112) {
   $114 = $113;
   $115 = $7;
   $116 = (($114) - ($9))|0;
   $117 = (($115) + 1)|0;
   $118 = (($117) - ($9))|0;
   $119 = ($116|0)>($118|0);
   if ($119) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $120 = HEAP8[$113>>0]|0;
    $121 = $120&255;
    $122 = $121 << 8;
    $123 = (($113) + 1|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = $124&255;
    $126 = $122 | $125;
    $127 = $126 << $110;
    $128 = $127 | $109;
    HEAP32[$3>>2] = $128;
    $129 = (($111) + -15)|0;
    HEAP32[$13>>2] = $129;
    $130 = (($113) + 2|0);
    HEAP32[$10>>2] = $130;
    $133 = $128;$136 = $129;$138 = $130;
    break;
   }
  } else {
   $133 = $109;$136 = $110;$138 = $113;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $107;
 $131 = ($107|0)!=(0);
 $132 = $133 >>> 31;
 $134 = $133 << 1;
 HEAP32[$3>>2] = $134;
 $135 = (($136) + 1)|0;
 HEAP32[$13>>2] = $135;
 $137 = ($136|0)>(-1);
 do {
  if ($137) {
   $139 = $138;
   $140 = $7;
   $141 = (($139) - ($9))|0;
   $142 = (($140) + 1)|0;
   $143 = (($142) - ($9))|0;
   $144 = ($141|0)>($143|0);
   if ($144) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $145 = HEAP8[$138>>0]|0;
    $146 = $145&255;
    $147 = $146 << 8;
    $148 = (($138) + 1|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $149&255;
    $151 = $147 | $150;
    $152 = $151 << $135;
    $153 = $152 | $134;
    HEAP32[$3>>2] = $153;
    $154 = (($136) + -15)|0;
    HEAP32[$13>>2] = $154;
    $155 = (($138) + 2|0);
    HEAP32[$10>>2] = $155;
    $157 = $153;$160 = $154;$162 = $155;
    break;
   }
  } else {
   $157 = $134;$160 = $135;$162 = $138;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $132;
 $156 = $157 >>> 31;
 $158 = $157 << 1;
 HEAP32[$3>>2] = $158;
 $159 = (($160) + 1)|0;
 HEAP32[$13>>2] = $159;
 $161 = ($160|0)>(-1);
 do {
  if ($161) {
   $163 = $162;
   $164 = $7;
   $165 = (($163) - ($9))|0;
   $166 = (($164) + 1)|0;
   $167 = (($166) - ($9))|0;
   $168 = ($165|0)>($167|0);
   if ($168) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $169 = HEAP8[$162>>0]|0;
    $170 = $169&255;
    $171 = $170 << 8;
    $172 = (($162) + 1|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $175 = $171 | $174;
    $176 = $175 << $159;
    $177 = $176 | $158;
    HEAP32[$3>>2] = $177;
    $178 = (($160) + -15)|0;
    HEAP32[$13>>2] = $178;
    $179 = (($162) + 2|0);
    HEAP32[$10>>2] = $179;
    $181 = $177;$184 = $178;$186 = $179;
    break;
   }
  } else {
   $181 = $158;$184 = $159;$186 = $162;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $156;
 $180 = $181 >>> 30;
 $182 = $181 << 2;
 HEAP32[$3>>2] = $182;
 $183 = (($184) + 2)|0;
 HEAP32[$13>>2] = $183;
 $185 = ($183|0)>(0);
 do {
  if ($185) {
   $187 = $186;
   $188 = $7;
   $189 = (($187) - ($9))|0;
   $190 = (($188) + 1)|0;
   $191 = (($190) - ($9))|0;
   $192 = ($189|0)>($191|0);
   if ($192) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $193 = HEAP8[$186>>0]|0;
    $194 = $193&255;
    $195 = $194 << 8;
    $196 = (($186) + 1|0);
    $197 = HEAP8[$196>>0]|0;
    $198 = $197&255;
    $199 = $195 | $198;
    $200 = $199 << $183;
    $201 = $200 | $182;
    HEAP32[$3>>2] = $201;
    $202 = (($184) + -14)|0;
    HEAP32[$13>>2] = $202;
    $203 = (($186) + 2|0);
    HEAP32[$10>>2] = $203;
    $205 = $201;$208 = $202;$210 = $203;
    break;
   }
  } else {
   $205 = $182;$208 = $183;$210 = $186;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $180;
 $204 = $205 >>> 24;
 $206 = $205 << 8;
 HEAP32[$3>>2] = $206;
 $207 = (($208) + 8)|0;
 HEAP32[$13>>2] = $207;
 $209 = ($207|0)>(0);
 do {
  if ($209) {
   $211 = $210;
   $212 = $7;
   $213 = (($211) - ($9))|0;
   $214 = (($212) + 1)|0;
   $215 = (($214) - ($9))|0;
   $216 = ($213|0)>($215|0);
   if ($216) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $217 = HEAP8[$210>>0]|0;
    $218 = $217&255;
    $219 = $218 << 8;
    $220 = (($210) + 1|0);
    $221 = HEAP8[$220>>0]|0;
    $222 = $221&255;
    $223 = $219 | $222;
    $224 = $223 << $207;
    $225 = $224 | $206;
    HEAP32[$3>>2] = $225;
    $226 = (($208) + -8)|0;
    HEAP32[$13>>2] = $226;
    $227 = (($210) + 2|0);
    HEAP32[$10>>2] = $227;
    break;
   }
  }
 } while(0);
 HEAP32[$uiCode>>2] = $204;
 $228 = $204&255;
 $229 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $230 = ($229|0)==(0);
 if (!($230)) {
  $$0 = $229;
  STACKTOP = sp;return ($$0|0);
 }
 $231 = HEAP32[$uiCode>>2]|0;
 $232 = ($231>>>0)>(31);
 if ($232) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1416,$vararg_buffer46);
  $$0 = 263148;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($sTempSubsetSps|0),0,864)|0;
 do {
  switch ($204|0) {
  case 9:  {
   $$0$i225$ph = ((24944 + 32|0));
   break;
  }
  case 10:  {
   $$0$i225$ph = 24944;
   break;
  }
  case 11:  {
   $$$i224 = $131 ? ((24944 + 32|0)) : ((24944 + 64|0));
   $$0$i225$ph = $$$i224;
   break;
  }
  case 12:  {
   $$0$i225$ph = ((24944 + 96|0));
   break;
  }
  case 13:  {
   $$0$i225$ph = ((24944 + 128|0));
   break;
  }
  case 20:  {
   $$0$i225$ph = ((24944 + 160|0));
   break;
  }
  case 21:  {
   $$0$i225$ph = ((24944 + 192|0));
   break;
  }
  case 22:  {
   $$0$i225$ph = ((24944 + 224|0));
   break;
  }
  case 30:  {
   $$0$i225$ph = ((24944 + 256|0));
   break;
  }
  case 31:  {
   $$0$i225$ph = ((24944 + 288|0));
   break;
  }
  case 32:  {
   $$0$i225$ph = ((24944 + 320|0));
   break;
  }
  case 40:  {
   $$0$i225$ph = ((24944 + 352|0));
   break;
  }
  case 41:  {
   $$0$i225$ph = ((24944 + 384|0));
   break;
  }
  case 42:  {
   $$0$i225$ph = ((24944 + 416|0));
   break;
  }
  case 50:  {
   $$0$i225$ph = ((24944 + 448|0));
   break;
  }
  case 51:  {
   $$0$i225$ph = ((24944 + 480|0));
   break;
  }
  case 52:  {
   $$0$i225$ph = ((24944 + 512|0));
   break;
  }
  default: {
   HEAP32[$vararg_buffer46>>2] = $204;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1448,$vararg_buffer46);
   $$0 = 263203;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 $233 = (($sTempSubsetSps) + 828|0);
 HEAP32[$233>>2] = $$0$i225$ph;
 $234 = (($sTempSubsetSps) + 318|0);
 HEAP8[$234>>0] = 1;
 $235 = (($sTempSubsetSps) + 316|0);
 HEAP8[$235>>0] = $34;
 $236 = (($sTempSubsetSps) + 317|0);
 HEAP8[$236>>0] = $228;
 HEAP32[$sTempSubsetSps>>2] = $231;
 L82: do {
  switch ($5|0) {
  case 44: case 83: case 86: case 100: case 110: case 122: case 144: case 244:  {
   $237 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
   $238 = ($237|0)==(0);
   if (!($238)) {
    $$0 = $237;
    STACKTOP = sp;return ($$0|0);
   }
   $239 = HEAP32[$uiCode>>2]|0;
   $240 = $239&255;
   HEAP8[$234>>0] = $240;
   $241 = $239 & 255;
   $242 = ($241>>>0)>(1);
   if ($242) {
    HEAP32[$vararg_buffer46>>2] = $241;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1480,$vararg_buffer46);
    $$0 = 263203;
    STACKTOP = sp;return ($$0|0);
   }
   $243 = (($sTempSubsetSps) + 319|0);
   HEAP8[$243>>0] = $240;
   $244 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
   $245 = ($244|0)==(0);
   if (!($245)) {
    $$0 = $244;
    STACKTOP = sp;return ($$0|0);
   }
   $246 = HEAP32[$uiCode>>2]|0;
   $247 = ($246|0)==(0);
   if (!($247)) {
    $248 = (($246) + 8)|0;
    HEAP32[$vararg_buffer46>>2] = $248;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1536,$vararg_buffer46);
    $$0 = 263203;
    STACKTOP = sp;return ($$0|0);
   }
   $249 = (($sTempSubsetSps) + 320|0);
   HEAP8[$249>>0] = 8;
   $250 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
   $251 = ($250|0)==(0);
   if (!($251)) {
    $$0 = $250;
    STACKTOP = sp;return ($$0|0);
   }
   $252 = HEAP32[$uiCode>>2]|0;
   $253 = ($252|0)==(0);
   if (!($253)) {
    $254 = (($252) + 8)|0;
    HEAP32[$vararg_buffer46>>2] = $254;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1592,$vararg_buffer46);
    $$0 = 263203;
    STACKTOP = sp;return ($$0|0);
   }
   $255 = (($sTempSubsetSps) + 321|0);
   HEAP8[$255>>0] = 8;
   $256 = HEAP32[$3>>2]|0;
   $257 = $256 >>> 31;
   $258 = HEAP32[$6>>2]|0;
   $259 = HEAP32[$pBsAux>>2]|0;
   $260 = $259;
   $261 = HEAP32[$10>>2]|0;
   $262 = $256 << 1;
   HEAP32[$3>>2] = $262;
   $263 = HEAP32[$13>>2]|0;
   $264 = (($263) + 1)|0;
   HEAP32[$13>>2] = $264;
   $265 = ($263|0)>(-1);
   do {
    if ($265) {
     $266 = $261;
     $267 = $258;
     $268 = (($266) - ($260))|0;
     $269 = (($267) + 1)|0;
     $270 = (($269) - ($260))|0;
     $271 = ($268|0)>($270|0);
     if ($271) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $272 = HEAP8[$261>>0]|0;
      $273 = $272&255;
      $274 = $273 << 8;
      $275 = (($261) + 1|0);
      $276 = HEAP8[$275>>0]|0;
      $277 = $276&255;
      $278 = $274 | $277;
      $279 = $278 << $264;
      $280 = $279 | $262;
      HEAP32[$3>>2] = $280;
      $281 = (($263) + -15)|0;
      HEAP32[$13>>2] = $281;
      $282 = (($261) + 2|0);
      HEAP32[$10>>2] = $282;
      $286 = $280;$289 = $281;$291 = $282;
      break;
     }
    } else {
     $286 = $262;$289 = $264;$291 = $261;
    }
   } while(0);
   HEAP32[$uiCode>>2] = $257;
   $283 = (($sTempSubsetSps) + 334|0);
   $284 = $257&255;
   HEAP8[$283>>0] = $284;
   $285 = $286 >>> 31;
   $287 = $286 << 1;
   HEAP32[$3>>2] = $287;
   $288 = (($289) + 1)|0;
   HEAP32[$13>>2] = $288;
   $290 = ($289|0)>(-1);
   do {
    if ($290) {
     $292 = $291;
     $293 = $258;
     $294 = (($292) - ($260))|0;
     $295 = (($293) + 1)|0;
     $296 = (($295) - ($260))|0;
     $297 = ($294|0)>($296|0);
     if ($297) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $298 = HEAP8[$291>>0]|0;
      $299 = $298&255;
      $300 = $299 << 8;
      $301 = (($291) + 1|0);
      $302 = HEAP8[$301>>0]|0;
      $303 = $302&255;
      $304 = $300 | $303;
      $305 = $304 << $288;
      $306 = $305 | $287;
      HEAP32[$3>>2] = $306;
      $307 = (($289) + -15)|0;
      HEAP32[$13>>2] = $307;
      $308 = (($291) + 2|0);
      HEAP32[$10>>2] = $308;
      break;
     }
    }
   } while(0);
   HEAP32[$uiCode>>2] = $285;
   $309 = ($285|0)==(0);
   $310 = (($sTempSubsetSps) + 335|0);
   $311 = $285&255;
   HEAP8[$310>>0] = $311;
   if ($309) {
    break L82;
   }
   $312 = (($sTempSubsetSps) + 336|0);
   $313 = (($sTempSubsetSps) + 348|0);
   $314 = (($sTempSubsetSps) + 444|0);
   $315 = (__ZN7WelsDec16ParseScalingListEPNS_6TagSpsEPN10WelsCommon15TagBitStringAuxEbPbPA16_hPA64_h($sTempSubsetSps,$pBsAux,0,$312,$313,$314)|0);
   $316 = ($315|0)==(0);
   if ($316) {
    break L82;
   } else {
    $$0 = $315;
   }
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $317 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $318 = ($317|0)==(0);
 if (!($318)) {
  $$0 = $317;
  STACKTOP = sp;return ($$0|0);
 }
 $319 = HEAP32[$uiCode>>2]|0;
 $320 = ($319>>>0)>(12);
 if ($320) {
  HEAP32[$vararg_buffer46>>2] = $319;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,1656,$vararg_buffer46);
  $$0 = 263175;
  STACKTOP = sp;return ($$0|0);
 }
 $321 = (($319) + 4)|0;
 $322 = (($sTempSubsetSps) + 16|0);
 HEAP32[$322>>2] = $321;
 $323 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $324 = ($323|0)==(0);
 if (!($324)) {
  $$0 = $323;
  STACKTOP = sp;return ($$0|0);
 }
 $325 = HEAP32[$uiCode>>2]|0;
 $326 = (($sTempSubsetSps) + 20|0);
 HEAP32[$326>>2] = $325;
 L130: do {
  if ((($325|0) == 0)) {
   $327 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
   $328 = ($327|0)==(0);
   if (!($328)) {
    $$0 = $327;
    STACKTOP = sp;return ($$0|0);
   }
   $329 = HEAP32[$uiCode>>2]|0;
   $330 = ($329>>>0)>(12);
   if (!($330)) {
    $331 = (($329) + 4)|0;
    $332 = (($sTempSubsetSps) + 24|0);
    HEAP32[$332>>2] = $331;
    label = 97;
    break;
   }
   HEAP32[$vararg_buffer46>>2] = $329;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,1704,$vararg_buffer46);
   $$0 = 263176;
   STACKTOP = sp;return ($$0|0);
  } else if ((($325|0) == 1)) {
   $333 = HEAP32[$3>>2]|0;
   $334 = $333 >>> 31;
   $335 = HEAP32[$6>>2]|0;
   $336 = HEAP32[$pBsAux>>2]|0;
   $337 = $336;
   $338 = HEAP32[$10>>2]|0;
   $339 = $333 << 1;
   HEAP32[$3>>2] = $339;
   $340 = HEAP32[$13>>2]|0;
   $341 = (($340) + 1)|0;
   HEAP32[$13>>2] = $341;
   $342 = ($340|0)>(-1);
   do {
    if ($342) {
     $343 = $338;
     $344 = $335;
     $345 = (($343) - ($337))|0;
     $346 = (($344) + 1)|0;
     $347 = (($346) - ($337))|0;
     $348 = ($345|0)>($347|0);
     if ($348) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $349 = HEAP8[$338>>0]|0;
      $350 = $349&255;
      $351 = $350 << 8;
      $352 = (($338) + 1|0);
      $353 = HEAP8[$352>>0]|0;
      $354 = $353&255;
      $355 = $351 | $354;
      $356 = $355 << $341;
      $357 = $356 | $339;
      HEAP32[$3>>2] = $357;
      $358 = (($340) + -15)|0;
      HEAP32[$13>>2] = $358;
      $359 = (($338) + 2|0);
      HEAP32[$10>>2] = $359;
      break;
     }
    }
   } while(0);
   HEAP32[$uiCode>>2] = $334;
   $360 = (($sTempSubsetSps) + 322|0);
   $361 = $334&255;
   HEAP8[$360>>0] = $361;
   $362 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$vararg_buffer46)|0);
   $363 = ($362|0)==(0);
   if (!($363)) {
    $$0 = $362;
    STACKTOP = sp;return ($$0|0);
   }
   $364 = HEAP32[$vararg_buffer46>>2]|0;
   $365 = $364 & 1;
   $366 = ($365|0)==(0);
   if ($366) {
    $369 = $364 >>> 1;
    $370 = (0 - ($369))|0;
    $$ph = $370;
   } else {
    $367 = (($364) + 1)|0;
    $368 = $367 >>> 1;
    $$ph = $368;
   }
   $371 = (($sTempSubsetSps) + 28|0);
   HEAP32[$371>>2] = $$ph;
   $372 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCodeNum$i232)|0);
   $373 = ($372|0)==(0);
   if (!($373)) {
    $$0 = $372;
    STACKTOP = sp;return ($$0|0);
   }
   $374 = HEAP32[$uiCodeNum$i232>>2]|0;
   $375 = $374 & 1;
   $376 = ($375|0)==(0);
   if ($376) {
    $379 = $374 >>> 1;
    $380 = (0 - ($379))|0;
    $$ph281 = $380;
   } else {
    $377 = (($374) + 1)|0;
    $378 = $377 >>> 1;
    $$ph281 = $378;
   }
   $381 = (($sTempSubsetSps) + 32|0);
   HEAP32[$381>>2] = $$ph281;
   $382 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
   $383 = ($382|0)==(0);
   if (!($383)) {
    $$0 = $382;
    STACKTOP = sp;return ($$0|0);
   }
   $384 = HEAP32[$uiCode>>2]|0;
   $385 = ($384>>>0)>(255);
   if ($385) {
    HEAP32[$vararg_buffer46>>2] = $384;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,1760,$vararg_buffer46);
    $$0 = 263177;
    STACKTOP = sp;return ($$0|0);
   }
   $386 = (($sTempSubsetSps) + 36|0);
   HEAP32[$386>>2] = $384;
   $387 = ($384|0)>(0);
   if (!($387)) {
    label = 97;
    break;
   }
   $i$0318 = 0;
   while(1) {
    $388 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCodeNum$i)|0);
    $389 = ($388|0)==(0);
    if (!($389)) {
     $$0 = $388;
     break;
    }
    $390 = HEAP32[$uiCodeNum$i>>2]|0;
    $391 = $390 & 1;
    $392 = ($391|0)==(0);
    if ($392) {
     $395 = $390 >>> 1;
     $396 = (0 - ($395))|0;
     $$ph283 = $396;
    } else {
     $393 = (($390) + 1)|0;
     $394 = $393 >>> 1;
     $$ph283 = $394;
    }
    $397 = $$ph283&255;
    $398 = ((($sTempSubsetSps) + ($i$0318)|0) + 40|0);
    HEAP8[$398>>0] = $397;
    $399 = (($i$0318) + 1)|0;
    $400 = HEAP32[$386>>2]|0;
    $401 = ($399|0)<($400|0);
    if ($401) {
     $i$0318 = $399;
    } else {
     label = 97;
     break L130;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $402 = $325;
  }
 } while(0);
 if ((label|0) == 97) {
  $$pr = HEAP32[$326>>2]|0;
  $402 = $$pr;
 }
 $403 = ($402>>>0)>(2);
 if ($403) {
  HEAP32[$vararg_buffer46>>2] = $402;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1816,$vararg_buffer46);
  $$0 = 263152;
  STACKTOP = sp;return ($$0|0);
 }
 $404 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $405 = ($404|0)==(0);
 if (!($405)) {
  $$0 = $404;
  STACKTOP = sp;return ($$0|0);
 }
 $406 = HEAP32[$uiCode>>2]|0;
 $407 = (($sTempSubsetSps) + 296|0);
 HEAP32[$407>>2] = $406;
 $408 = HEAP32[$3>>2]|0;
 $409 = $408 >>> 31;
 $410 = HEAP32[$6>>2]|0;
 $411 = HEAP32[$pBsAux>>2]|0;
 $412 = $411;
 $413 = HEAP32[$10>>2]|0;
 $414 = $408 << 1;
 HEAP32[$3>>2] = $414;
 $415 = HEAP32[$13>>2]|0;
 $416 = (($415) + 1)|0;
 HEAP32[$13>>2] = $416;
 $417 = ($415|0)>(-1);
 do {
  if ($417) {
   $418 = $413;
   $419 = $410;
   $420 = (($418) - ($412))|0;
   $421 = (($419) + 1)|0;
   $422 = (($421) - ($412))|0;
   $423 = ($420|0)>($422|0);
   if ($423) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $424 = HEAP8[$413>>0]|0;
    $425 = $424&255;
    $426 = $425 << 8;
    $427 = (($413) + 1|0);
    $428 = HEAP8[$427>>0]|0;
    $429 = $428&255;
    $430 = $426 | $429;
    $431 = $430 << $416;
    $432 = $431 | $414;
    HEAP32[$3>>2] = $432;
    $433 = (($415) + -15)|0;
    HEAP32[$13>>2] = $433;
    $434 = (($413) + 2|0);
    HEAP32[$10>>2] = $434;
    break;
   }
  }
 } while(0);
 HEAP32[$uiCode>>2] = $409;
 $435 = (($sTempSubsetSps) + 323|0);
 $436 = $409&255;
 HEAP8[$435>>0] = $436;
 $437 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $438 = ($437|0)==(0);
 if (!($438)) {
  $$0 = $437;
  STACKTOP = sp;return ($$0|0);
 }
 $439 = HEAP32[$uiCode>>2]|0;
 $440 = (($439) + 1)|0;
 $441 = (($sTempSubsetSps) + 4|0);
 HEAP32[$441>>2] = $440;
 $442 = ($440>>>0)>(36864);
 if ($442) {
  HEAP32[$vararg_buffer46>>2] = $440;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,1856,$vararg_buffer46);
  $$0 = 263163;
  STACKTOP = sp;return ($$0|0);
 }
 $443 = (___muldi3(($440|0),0,($440|0),0)|0);
 $444 = tempRet0;
 $445 = (($$0$i225$ph) + 8|0);
 $446 = HEAP32[$445>>2]|0;
 $447 = $446 << 3;
 $448 = ($444>>>0)>(0);
 $449 = ($443>>>0)>($447>>>0);
 $450 = ($444|0)==(0);
 $451 = $450 & $449;
 $452 = $448 | $451;
 if ($452) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1912,$vararg_buffer46);
 }
 $453 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $454 = ($453|0)==(0);
 if (!($454)) {
  $$0 = $453;
  STACKTOP = sp;return ($$0|0);
 }
 $455 = HEAP32[$uiCode>>2]|0;
 $456 = (($455) + 1)|0;
 $457 = (($sTempSubsetSps) + 8|0);
 HEAP32[$457>>2] = $456;
 $458 = ($456>>>0)>(36864);
 if ($458) {
  HEAP32[$vararg_buffer46>>2] = $456;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,1960,$vararg_buffer46);
  $$0 = 263163;
  STACKTOP = sp;return ($$0|0);
 }
 $459 = (___muldi3(($456|0),0,($456|0),0)|0);
 $460 = tempRet0;
 $461 = HEAP32[$445>>2]|0;
 $462 = $461 << 3;
 $463 = ($460>>>0)>(0);
 $464 = ($459>>>0)>($462>>>0);
 $465 = ($460|0)==(0);
 $466 = $465 & $464;
 $467 = $463 | $466;
 if ($467) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,2016,$vararg_buffer46);
  $$pre = HEAP32[$457>>2]|0;
  $$pre325 = HEAP32[$445>>2]|0;
  $470 = $$pre;$472 = $$pre325;
 } else {
  $470 = $456;$472 = $461;
 }
 $468 = HEAP32[$441>>2]|0;
 $469 = Math_imul($470, $468)|0;
 $471 = ($469>>>0)>($472>>>0);
 if ($471) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,2072,$vararg_buffer46);
 }
 $473 = (($sTempSubsetSps) + 12|0);
 HEAP32[$473>>2] = $469;
 $474 = HEAP32[$407>>2]|0;
 $475 = ($474|0)>(16);
 if ($475) {
  HEAP32[$vararg_buffer46>>2] = $474;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,2128,$vararg_buffer46);
  $$0 = 263162;
  STACKTOP = sp;return ($$0|0);
 }
 $476 = (($$0$i225$ph) + 12|0);
 $477 = HEAP32[$476>>2]|0;
 $478 = (($477>>>0) / ($469>>>0))&-1;
 $479 = ($478>>>0)>(16);
 $$ = $479 ? 16 : $478;
 $480 = ($474>>>0)>($$>>>0);
 if ($480) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,2168,$vararg_buffer46);
 }
 $481 = HEAP32[$3>>2]|0;
 $482 = $481 >>> 31;
 $483 = HEAP32[$6>>2]|0;
 $484 = HEAP32[$pBsAux>>2]|0;
 $485 = $484;
 $486 = HEAP32[$10>>2]|0;
 $487 = $481 << 1;
 HEAP32[$3>>2] = $487;
 $488 = HEAP32[$13>>2]|0;
 $489 = (($488) + 1)|0;
 HEAP32[$13>>2] = $489;
 $490 = ($488|0)>(-1);
 do {
  if ($490) {
   $491 = $486;
   $492 = $483;
   $493 = (($491) - ($485))|0;
   $494 = (($492) + 1)|0;
   $495 = (($494) - ($485))|0;
   $496 = ($493|0)>($495|0);
   if ($496) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $497 = HEAP8[$486>>0]|0;
    $498 = $497&255;
    $499 = $498 << 8;
    $500 = (($486) + 1|0);
    $501 = HEAP8[$500>>0]|0;
    $502 = $501&255;
    $503 = $499 | $502;
    $504 = $503 << $489;
    $505 = $504 | $487;
    HEAP32[$3>>2] = $505;
    $506 = (($488) + -15)|0;
    HEAP32[$13>>2] = $506;
    $507 = (($486) + 2|0);
    HEAP32[$10>>2] = $507;
    $512 = $505;$515 = $506;$517 = $507;
    break;
   }
  } else {
   $512 = $487;$515 = $489;$517 = $486;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $482;
 $508 = ($482|0)==(0);
 $509 = (($sTempSubsetSps) + 324|0);
 $510 = $482&255;
 HEAP8[$509>>0] = $510;
 if ($508) {
  HEAP32[$vararg_buffer46>>2] = 0;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,2216,$vararg_buffer46);
  $$0 = 263205;
  STACKTOP = sp;return ($$0|0);
 }
 $511 = $512 >>> 31;
 $513 = $512 << 1;
 HEAP32[$3>>2] = $513;
 $514 = (($515) + 1)|0;
 HEAP32[$13>>2] = $514;
 $516 = ($515|0)>(-1);
 do {
  if ($516) {
   $518 = $517;
   $519 = $483;
   $520 = (($518) - ($485))|0;
   $521 = (($519) + 1)|0;
   $522 = (($521) - ($485))|0;
   $523 = ($520|0)>($522|0);
   if ($523) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $524 = HEAP8[$517>>0]|0;
    $525 = $524&255;
    $526 = $525 << 8;
    $527 = (($517) + 1|0);
    $528 = HEAP8[$527>>0]|0;
    $529 = $528&255;
    $530 = $526 | $529;
    $531 = $530 << $514;
    $532 = $531 | $513;
    HEAP32[$3>>2] = $532;
    $533 = (($515) + -15)|0;
    HEAP32[$13>>2] = $533;
    $534 = (($517) + 2|0);
    HEAP32[$10>>2] = $534;
    $538 = $532;$541 = $533;$543 = $534;
    break;
   }
  } else {
   $538 = $513;$541 = $514;$543 = $517;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $511;
 $535 = (($sTempSubsetSps) + 326|0);
 $536 = $511&255;
 HEAP8[$535>>0] = $536;
 $537 = $538 >>> 31;
 $539 = $538 << 1;
 HEAP32[$3>>2] = $539;
 $540 = (($541) + 1)|0;
 HEAP32[$13>>2] = $540;
 $542 = ($541|0)>(-1);
 do {
  if ($542) {
   $544 = $543;
   $545 = $483;
   $546 = (($544) - ($485))|0;
   $547 = (($545) + 1)|0;
   $548 = (($547) - ($485))|0;
   $549 = ($546|0)>($548|0);
   if ($549) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $550 = HEAP8[$543>>0]|0;
    $551 = $550&255;
    $552 = $551 << 8;
    $553 = (($543) + 1|0);
    $554 = HEAP8[$553>>0]|0;
    $555 = $554&255;
    $556 = $552 | $555;
    $557 = $556 << $540;
    $558 = $557 | $539;
    HEAP32[$3>>2] = $558;
    $559 = (($541) + -15)|0;
    HEAP32[$13>>2] = $559;
    $560 = (($543) + 2|0);
    HEAP32[$10>>2] = $560;
    $2283 = $559;$2284 = $560;$2285 = $558;
    break;
   }
  } else {
   $2283 = $540;$2284 = $543;$2285 = $539;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $537;
 $561 = ($537|0)==(0);
 $562 = (($sTempSubsetSps) + 327|0);
 $563 = $537&255;
 HEAP8[$562>>0] = $563;
 do {
  if ($561) {
   $592 = (($sTempSubsetSps) + 300|0);
   ;HEAP32[$592+0>>2]=0|0;HEAP32[$592+4>>2]=0|0;HEAP32[$592+8>>2]=0|0;HEAP32[$592+12>>2]=0|0;
   $594 = $2285;$595 = $484;$599 = $2283;$601 = $2284;$603 = $483;
  } else {
   $564 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
   $565 = ($564|0)==(0);
   if (!($565)) {
    $$0 = $564;
    STACKTOP = sp;return ($$0|0);
   }
   $566 = HEAP32[$uiCode>>2]|0;
   $567 = (($sTempSubsetSps) + 300|0);
   HEAP32[$567>>2] = $566;
   $568 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
   $569 = ($568|0)==(0);
   if (!($569)) {
    $$0 = $568;
    STACKTOP = sp;return ($$0|0);
   }
   $570 = HEAP32[$uiCode>>2]|0;
   $571 = (($sTempSubsetSps) + 308|0);
   HEAP32[$571>>2] = $570;
   $572 = HEAP32[$567>>2]|0;
   $573 = (($572) + ($570))|0;
   $574 = HEAP32[$441>>2]|0;
   $575 = $574 << 4;
   $576 = (($575|0) / 2)&-1;
   $577 = ($573|0)>($576|0);
   if ($577) {
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,2272,$vararg_buffer46);
    $$0 = 263156;
    STACKTOP = sp;return ($$0|0);
   }
   $578 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
   $579 = ($578|0)==(0);
   if (!($579)) {
    $$0 = $578;
    STACKTOP = sp;return ($$0|0);
   }
   $580 = HEAP32[$uiCode>>2]|0;
   $581 = (($sTempSubsetSps) + 304|0);
   HEAP32[$581>>2] = $580;
   $582 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
   $583 = ($582|0)==(0);
   if (!($583)) {
    $$0 = $582;
    STACKTOP = sp;return ($$0|0);
   }
   $584 = HEAP32[$uiCode>>2]|0;
   $585 = (($sTempSubsetSps) + 312|0);
   HEAP32[$585>>2] = $584;
   $586 = HEAP32[$581>>2]|0;
   $587 = (($586) + ($584))|0;
   $588 = HEAP32[$457>>2]|0;
   $589 = $588 << 4;
   $590 = (($589|0) / 2)&-1;
   $591 = ($587|0)>($590|0);
   if (!($591)) {
    $$pre326 = HEAP32[$3>>2]|0;
    $$pre327 = HEAP32[$6>>2]|0;
    $$pre328 = HEAP32[$pBsAux>>2]|0;
    $$pre329 = HEAP32[$10>>2]|0;
    $$pre330 = HEAP32[$13>>2]|0;
    $594 = $$pre326;$595 = $$pre328;$599 = $$pre330;$601 = $$pre329;$603 = $$pre327;
    break;
   }
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,2344,$vararg_buffer46);
   $$0 = 263156;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $593 = $594 >>> 31;
 $596 = $595;
 $597 = $594 << 1;
 HEAP32[$3>>2] = $597;
 $598 = (($599) + 1)|0;
 HEAP32[$13>>2] = $598;
 $600 = ($599|0)>(-1);
 do {
  if ($600) {
   $602 = $601;
   $604 = $603;
   $605 = (($602) - ($596))|0;
   $606 = (($604) + 1)|0;
   $607 = (($606) - ($596))|0;
   $608 = ($605|0)>($607|0);
   if ($608) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $609 = HEAP8[$601>>0]|0;
    $610 = $609&255;
    $611 = $610 << 8;
    $612 = (($601) + 1|0);
    $613 = HEAP8[$612>>0]|0;
    $614 = $613&255;
    $615 = $611 | $614;
    $616 = $615 << $598;
    $617 = $616 | $597;
    HEAP32[$3>>2] = $617;
    $618 = (($599) + -15)|0;
    HEAP32[$13>>2] = $618;
    $619 = (($601) + 2|0);
    HEAP32[$10>>2] = $619;
    break;
   }
  }
 } while(0);
 HEAP32[$uiCode>>2] = $593;
 $620 = (($sTempSubsetSps) + 328|0);
 $621 = $593&255;
 HEAP8[$620>>0] = $621;
 $622 = (($pCtx) + 242344|0);
 $623 = HEAP8[$622>>0]|0;
 $624 = ($623<<24>>24)==(0);
 do {
  if (!($624)) {
   $625 = ($kSrcNalLen|0)>(123);
   if ($625) {
    $626 = (($pCtx) + 116|0);
    $627 = HEAP32[$626>>2]|0;
    $628 = $627 | 16384;
    HEAP32[$626>>2] = $628;
    $$0 = 262145;
    STACKTOP = sp;return ($$0|0);
   }
   if (!($2)) {
    $629 = ((($pCtx) + (($231*136)|0)|0) + 242992|0);
    HEAP32[$629>>2] = $231;
    $iTrailingZeroByte$0 = 0;
    while(1) {
     $630 = (($kSrcNalLen) - ($iTrailingZeroByte$0))|0;
     $631 = (($630) + -1)|0;
     $632 = (($pSrcNal) + ($631)|0);
     $633 = HEAP8[$632>>0]|0;
     $634 = ($633<<24>>24)==(0);
     $635 = (($iTrailingZeroByte$0) + 1)|0;
     if ($634) {
      $iTrailingZeroByte$0 = $635;
     } else {
      break;
     }
    }
    $636 = $630&65535;
    $637 = ((($pCtx) + (($231*136)|0)|0) + 242996|0);
    HEAP16[$637>>1] = $636;
    $638 = HEAP8[$pSrcNal>>0]|0;
    $639 = ($638<<24>>24)==(0);
    do {
     if ($639) {
      $640 = (($pSrcNal) + 1|0);
      $641 = HEAP8[$640>>0]|0;
      $642 = ($641<<24>>24)==(0);
      if (!($642)) {
       $iStartDeltaByte$0 = 0;
       break;
      }
      $643 = (($pSrcNal) + 2|0);
      $644 = HEAP8[$643>>0]|0;
      $645 = ($644<<24>>24)==(1);
      if (!($645)) {
       $iStartDeltaByte$0 = 0;
       break;
      }
      $646 = ((($pCtx) + (($231*136)|0)|0) + 242864|0);
      HEAP8[$646>>0] = 0;
      $647 = (($636) + 1)<<16>>16;
      HEAP16[$637>>1] = $647;
      $iStartDeltaByte$0 = 1;
     } else {
      $iStartDeltaByte$0 = 0;
     }
    } while(0);
    $648 = (((($pCtx) + (($231*136)|0)|0) + ($iStartDeltaByte$0)|0) + 242864|0);
    _memcpy(($648|0),($pSrcNal|0),($630|0))|0;
    break;
   }
   $649 = ((($pCtx) + (($231*136)|0)|0) + 247344|0);
   HEAP32[$649>>2] = $231;
   $650 = ((($pCtx) + (($231*136)|0)|0) + 247218|0);
   HEAP8[$650>>0] = 0;
   $651 = ((($pCtx) + (($231*136)|0)|0) + 247217|0);
   HEAP8[$651>>0] = 0;
   $652 = ((($pCtx) + (($231*136)|0)|0) + 247216|0);
   HEAP8[$652>>0] = 0;
   $653 = ((($pCtx) + (($231*136)|0)|0) + 247219|0);
   HEAP8[$653>>0] = 1;
   $654 = ((($pCtx) + (($231*136)|0)|0) + 247220|0);
   HEAP8[$654>>0] = 103;
   $655 = (($pCtx) + 562528|0);
   $656 = HEAP32[$655>>2]|0;
   $657 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($656,132,2408)|0);
   $658 = ($657|0)==(0|0);
   if ($658) {
    $659 = (($pCtx) + 116|0);
    $660 = HEAP32[$659>>2]|0;
    $661 = $660 | 16384;
    HEAP32[$659>>2] = $661;
    $$0 = $661;
    STACKTOP = sp;return ($$0|0);
   }
   $662 = (($sTempSubsetSps) + 329|0);
   $663 = HEAP8[$662>>0]|0;
   $664 = (($sTempSubsetSps) + 330|0);
   $665 = $663&255;
   $666 = HEAP16[$664>>1]|0;
   $667 = $666&65535;
   $668 = $665 << 1;
   $669 = $667 & 255;
   $670 = ($666&65535) >>> 8;
   $671 = $670&65535;
   $672 = $668 | $669;
   $673 = (($sTempSubsetSps) + 332|0);
   $674 = $672 << 1;
   $675 = HEAP8[$673>>0]|0;
   $phitmp = $671 | $674;
   $676 = $phitmp << 1;
   $677 = $675&255;
   $phitmp291 = $676 | $677;
   $678 = $phitmp291 << 12;
   $679 = $678 | 5046272;
   $680 = HEAP8[$236>>0]|0;
   $681 = $680&255;
   $682 = $681 | $679;
   $683 = HEAP32[$sTempSubsetSps>>2]|0;
   $684 = (($683) + 1)|0;
   $685 = ($683>>>0)<(256);
   do {
    if ($685) {
     $686 = (29552 + ($683<<2)|0);
     $687 = HEAP32[$686>>2]|0;
     $688 = ($687|0)<(8);
     if ($688) {
      $689 = $682 << $687;
      $690 = $689 | $684;
      $691 = (8 - ($687))|0;
      $754 = $690;$763 = $657;$storemerge$i$i$i254 = $691;
      break;
     } else {
      $692 = (($687) + -8)|0;
      $693 = $682 << 8;
      $694 = $684 >>> $692;
      $695 = $694 | $693;
      $696 = $695 >>> 24;
      $697 = $696&255;
      HEAP8[$657>>0] = $697;
      $698 = $695 >>> 16;
      $699 = $698&255;
      $700 = (($657) + 1|0);
      HEAP8[$700>>0] = $699;
      $701 = $695 >>> 8;
      $702 = $701&255;
      $703 = (($657) + 2|0);
      HEAP8[$703>>0] = $702;
      $704 = $694&255;
      $705 = (($657) + 3|0);
      HEAP8[$705>>0] = $704;
      $706 = (($657) + 4|0);
      $707 = 1 << $692;
      $708 = (($707) + -1)|0;
      $709 = $708 & $684;
      $710 = (40 - ($687))|0;
      $754 = $709;$763 = $706;$storemerge$i$i$i254 = $710;
      break;
     }
    } else {
     $711 = ($684>>>0)>(65535);
     $712 = $684 >>> 16;
     $$$i179 = $711 ? $712 : $684;
     $$1$i180 = $711 ? 16 : 0;
     $713 = $$$i179 & 65280;
     $714 = ($713|0)==(0);
     if ($714) {
      $iTmpValue$1$i181 = $$$i179;$n$1$i182 = $$1$i180;
     } else {
      $715 = $$$i179 >>> 8;
      $716 = $$1$i180 | 8;
      $iTmpValue$1$i181 = $715;$n$1$i182 = $716;
     }
     $717 = (($iTmpValue$1$i181) + -1)|0;
     $718 = (29552 + ($717<<2)|0);
     $719 = HEAP32[$718>>2]|0;
     $720 = $n$1$i182 << 1;
     $721 = (($720) + ($719))|0;
     $722 = $721 | 1;
     $723 = ($722|0)<(8);
     if ($723) {
      $724 = $682 << $722;
      $725 = $724 | $684;
      $726 = (8 - ($722))|0;
      $754 = $725;$763 = $657;$storemerge$i$i$i254 = $726;
      break;
     } else {
      $727 = (($722) + -8)|0;
      $728 = $682 << 8;
      $729 = $684 >>> $727;
      $730 = $729 | $728;
      $731 = $730 >>> 24;
      $732 = $731&255;
      HEAP8[$657>>0] = $732;
      $733 = $730 >>> 16;
      $734 = $733&255;
      $735 = (($657) + 1|0);
      HEAP8[$735>>0] = $734;
      $736 = $730 >>> 8;
      $737 = $736&255;
      $738 = (($657) + 2|0);
      HEAP8[$738>>0] = $737;
      $739 = $729&255;
      $740 = (($657) + 3|0);
      HEAP8[$740>>0] = $739;
      $741 = (($657) + 4|0);
      $742 = 1 << $727;
      $743 = (($742) + -1)|0;
      $744 = $743 & $684;
      $745 = (40 - ($722))|0;
      $754 = $744;$763 = $741;$storemerge$i$i$i254 = $745;
      break;
     }
    }
   } while(0);
   $746 = HEAP32[$322>>2]|0;
   $747 = (($746) + -4)|0;
   $748 = (($746) + -3)|0;
   $749 = ($747>>>0)<(256);
   do {
    if ($749) {
     $750 = (29552 + ($747<<2)|0);
     $751 = HEAP32[$750>>2]|0;
     $752 = ($storemerge$i$i$i254|0)>($751|0);
     if ($752) {
      $753 = $754 << $751;
      $755 = $753 | $748;
      $756 = (($storemerge$i$i$i254) - ($751))|0;
      $819 = $755;$828 = $763;$storemerge$i$i$i257 = $756;
      break;
     } else {
      $757 = (($751) - ($storemerge$i$i$i254))|0;
      $758 = $754 << $storemerge$i$i$i254;
      $759 = $748 >>> $757;
      $760 = $759 | $758;
      $761 = $760 >>> 24;
      $762 = $761&255;
      HEAP8[$763>>0] = $762;
      $764 = $760 >>> 16;
      $765 = $764&255;
      $766 = (($763) + 1|0);
      HEAP8[$766>>0] = $765;
      $767 = $760 >>> 8;
      $768 = $767&255;
      $769 = (($763) + 2|0);
      HEAP8[$769>>0] = $768;
      $770 = $760&255;
      $771 = (($763) + 3|0);
      HEAP8[$771>>0] = $770;
      $772 = (($763) + 4|0);
      $773 = 1 << $757;
      $774 = (($773) + -1)|0;
      $775 = $774 & $748;
      $776 = (32 - ($757))|0;
      $819 = $775;$828 = $772;$storemerge$i$i$i257 = $776;
      break;
     }
    } else {
     $777 = ($748>>>0)>(65535);
     $778 = $748 >>> 16;
     $$$i170 = $777 ? $778 : $748;
     $$1$i171 = $777 ? 16 : 0;
     $779 = $$$i170 & 65280;
     $780 = ($779|0)==(0);
     if ($780) {
      $iTmpValue$1$i172 = $$$i170;$n$1$i173 = $$1$i171;
     } else {
      $781 = $$$i170 >>> 8;
      $782 = $$1$i171 | 8;
      $iTmpValue$1$i172 = $781;$n$1$i173 = $782;
     }
     $783 = (($iTmpValue$1$i172) + -1)|0;
     $784 = (29552 + ($783<<2)|0);
     $785 = HEAP32[$784>>2]|0;
     $786 = $n$1$i173 << 1;
     $787 = (($786) + ($785))|0;
     $788 = $787 | 1;
     $789 = ($storemerge$i$i$i254|0)>($788|0);
     if ($789) {
      $790 = $754 << $788;
      $791 = $790 | $748;
      $792 = (($storemerge$i$i$i254) - ($788))|0;
      $819 = $791;$828 = $763;$storemerge$i$i$i257 = $792;
      break;
     } else {
      $793 = (($788) - ($storemerge$i$i$i254))|0;
      $794 = $754 << $storemerge$i$i$i254;
      $795 = $748 >>> $793;
      $796 = $795 | $794;
      $797 = $796 >>> 24;
      $798 = $797&255;
      HEAP8[$763>>0] = $798;
      $799 = $796 >>> 16;
      $800 = $799&255;
      $801 = (($763) + 1|0);
      HEAP8[$801>>0] = $800;
      $802 = $796 >>> 8;
      $803 = $802&255;
      $804 = (($763) + 2|0);
      HEAP8[$804>>0] = $803;
      $805 = $796&255;
      $806 = (($763) + 3|0);
      HEAP8[$806>>0] = $805;
      $807 = (($763) + 4|0);
      $808 = 1 << $793;
      $809 = (($808) + -1)|0;
      $810 = $809 & $748;
      $811 = (32 - ($793))|0;
      $819 = $810;$828 = $807;$storemerge$i$i$i257 = $811;
      break;
     }
    }
   } while(0);
   $812 = HEAP32[$326>>2]|0;
   $813 = (($812) + 1)|0;
   $814 = ($812>>>0)<(256);
   do {
    if ($814) {
     $815 = (29552 + ($812<<2)|0);
     $816 = HEAP32[$815>>2]|0;
     $817 = ($storemerge$i$i$i257|0)>($816|0);
     if ($817) {
      $818 = $819 << $816;
      $820 = $818 | $813;
      $821 = (($storemerge$i$i$i257) - ($816))|0;
      $887 = $820;$896 = $828;$storemerge$i$i$i255 = $821;
      break;
     } else {
      $822 = (($816) - ($storemerge$i$i$i257))|0;
      $823 = $819 << $storemerge$i$i$i257;
      $824 = $813 >>> $822;
      $825 = $824 | $823;
      $826 = $825 >>> 24;
      $827 = $826&255;
      HEAP8[$828>>0] = $827;
      $829 = $825 >>> 16;
      $830 = $829&255;
      $831 = (($828) + 1|0);
      HEAP8[$831>>0] = $830;
      $832 = $825 >>> 8;
      $833 = $832&255;
      $834 = (($828) + 2|0);
      HEAP8[$834>>0] = $833;
      $835 = $825&255;
      $836 = (($828) + 3|0);
      HEAP8[$836>>0] = $835;
      $837 = (($828) + 4|0);
      $838 = 1 << $822;
      $839 = (($838) + -1)|0;
      $840 = $839 & $813;
      $841 = (32 - ($822))|0;
      $887 = $840;$896 = $837;$storemerge$i$i$i255 = $841;
      break;
     }
    } else {
     $842 = ($813>>>0)>(65535);
     $843 = $813 >>> 16;
     $$$i161 = $842 ? $843 : $813;
     $$1$i162 = $842 ? 16 : 0;
     $844 = $$$i161 & 65280;
     $845 = ($844|0)==(0);
     if ($845) {
      $iTmpValue$1$i163 = $$$i161;$n$1$i164 = $$1$i162;
     } else {
      $846 = $$$i161 >>> 8;
      $847 = $$1$i162 | 8;
      $iTmpValue$1$i163 = $846;$n$1$i164 = $847;
     }
     $848 = (($iTmpValue$1$i163) + -1)|0;
     $849 = (29552 + ($848<<2)|0);
     $850 = HEAP32[$849>>2]|0;
     $851 = $n$1$i164 << 1;
     $852 = (($851) + ($850))|0;
     $853 = $852 | 1;
     $854 = ($storemerge$i$i$i257|0)>($853|0);
     if ($854) {
      $855 = $819 << $853;
      $856 = $855 | $813;
      $857 = (($storemerge$i$i$i257) - ($853))|0;
      $887 = $856;$896 = $828;$storemerge$i$i$i255 = $857;
      break;
     } else {
      $858 = (($853) - ($storemerge$i$i$i257))|0;
      $859 = $819 << $storemerge$i$i$i257;
      $860 = $813 >>> $858;
      $861 = $860 | $859;
      $862 = $861 >>> 24;
      $863 = $862&255;
      HEAP8[$828>>0] = $863;
      $864 = $861 >>> 16;
      $865 = $864&255;
      $866 = (($828) + 1|0);
      HEAP8[$866>>0] = $865;
      $867 = $861 >>> 8;
      $868 = $867&255;
      $869 = (($828) + 2|0);
      HEAP8[$869>>0] = $868;
      $870 = $861&255;
      $871 = (($828) + 3|0);
      HEAP8[$871>>0] = $870;
      $872 = (($828) + 4|0);
      $873 = 1 << $858;
      $874 = (($873) + -1)|0;
      $875 = $874 & $813;
      $876 = (32 - ($858))|0;
      $887 = $875;$896 = $872;$storemerge$i$i$i255 = $876;
      break;
     }
    }
   } while(0);
   $877 = HEAP32[$326>>2]|0;
   do {
    if ((($877|0) == 0)) {
     $878 = (($sTempSubsetSps) + 24|0);
     $879 = HEAP32[$878>>2]|0;
     $880 = (($879) + -4)|0;
     $881 = (($879) + -3)|0;
     $882 = ($880>>>0)<(256);
     if ($882) {
      $883 = (29552 + ($880<<2)|0);
      $884 = HEAP32[$883>>2]|0;
      $885 = ($storemerge$i$i$i255|0)>($884|0);
      if ($885) {
       $886 = $887 << $884;
       $888 = $886 | $881;
       $889 = (($storemerge$i$i$i255) - ($884))|0;
       $1521 = $888;$1530 = $896;$storemerge$i$i$i263 = $889;
       break;
      } else {
       $890 = (($884) - ($storemerge$i$i$i255))|0;
       $891 = $887 << $storemerge$i$i$i255;
       $892 = $881 >>> $890;
       $893 = $892 | $891;
       $894 = $893 >>> 24;
       $895 = $894&255;
       HEAP8[$896>>0] = $895;
       $897 = $893 >>> 16;
       $898 = $897&255;
       $899 = (($896) + 1|0);
       HEAP8[$899>>0] = $898;
       $900 = $893 >>> 8;
       $901 = $900&255;
       $902 = (($896) + 2|0);
       HEAP8[$902>>0] = $901;
       $903 = $893&255;
       $904 = (($896) + 3|0);
       HEAP8[$904>>0] = $903;
       $905 = (($896) + 4|0);
       $906 = 1 << $890;
       $907 = (($906) + -1)|0;
       $908 = $907 & $881;
       $909 = (32 - ($890))|0;
       $1521 = $908;$1530 = $905;$storemerge$i$i$i263 = $909;
       break;
      }
     }
     $910 = ($881>>>0)>(65535);
     $911 = $881 >>> 16;
     $$$i152 = $910 ? $911 : $881;
     $$1$i153 = $910 ? 16 : 0;
     $912 = $$$i152 & 65280;
     $913 = ($912|0)==(0);
     if ($913) {
      $iTmpValue$1$i154 = $$$i152;$n$1$i155 = $$1$i153;
     } else {
      $914 = $$$i152 >>> 8;
      $915 = $$1$i153 | 8;
      $iTmpValue$1$i154 = $914;$n$1$i155 = $915;
     }
     $916 = (($iTmpValue$1$i154) + -1)|0;
     $917 = (29552 + ($916<<2)|0);
     $918 = HEAP32[$917>>2]|0;
     $919 = $n$1$i155 << 1;
     $920 = (($919) + ($918))|0;
     $921 = $920 | 1;
     $922 = ($storemerge$i$i$i255|0)>($921|0);
     if ($922) {
      $923 = $887 << $921;
      $924 = $923 | $881;
      $925 = (($storemerge$i$i$i255) - ($921))|0;
      $1521 = $924;$1530 = $896;$storemerge$i$i$i263 = $925;
      break;
     } else {
      $926 = (($921) - ($storemerge$i$i$i255))|0;
      $927 = $887 << $storemerge$i$i$i255;
      $928 = $881 >>> $926;
      $929 = $928 | $927;
      $930 = $929 >>> 24;
      $931 = $930&255;
      HEAP8[$896>>0] = $931;
      $932 = $929 >>> 16;
      $933 = $932&255;
      $934 = (($896) + 1|0);
      HEAP8[$934>>0] = $933;
      $935 = $929 >>> 8;
      $936 = $935&255;
      $937 = (($896) + 2|0);
      HEAP8[$937>>0] = $936;
      $938 = $929&255;
      $939 = (($896) + 3|0);
      HEAP8[$939>>0] = $938;
      $940 = (($896) + 4|0);
      $941 = 1 << $926;
      $942 = (($941) + -1)|0;
      $943 = $942 & $881;
      $944 = (32 - ($926))|0;
      $1521 = $943;$1530 = $940;$storemerge$i$i$i263 = $944;
      break;
     }
    } else if ((($877|0) == 1)) {
     $945 = (($sTempSubsetSps) + 322|0);
     $946 = HEAP8[$945>>0]|0;
     $947 = $946&255;
     $948 = ($storemerge$i$i$i255|0)>(1);
     if ($948) {
      $949 = $887 << 1;
      $950 = $947 | $949;
      $951 = (($storemerge$i$i$i255) + -1)|0;
      $976 = $950;$985 = $896;$storemerge$i$i150 = $951;
     } else {
      $952 = (1 - ($storemerge$i$i$i255))|0;
      $953 = $887 << $storemerge$i$i$i255;
      $954 = $947 >>> $952;
      $955 = $954 | $953;
      $956 = $955 >>> 24;
      $957 = $956&255;
      HEAP8[$896>>0] = $957;
      $958 = $955 >>> 16;
      $959 = $958&255;
      $960 = (($896) + 1|0);
      HEAP8[$960>>0] = $959;
      $961 = $955 >>> 8;
      $962 = $961&255;
      $963 = (($896) + 2|0);
      HEAP8[$963>>0] = $962;
      $964 = $955&255;
      $965 = (($896) + 3|0);
      HEAP8[$965>>0] = $964;
      $966 = (($896) + 4|0);
      $967 = 1 << $952;
      $968 = (($967) + 1)|0;
      $969 = $947 & $968;
      $970 = (32 - ($952))|0;
      $976 = $969;$985 = $966;$storemerge$i$i150 = $970;
     }
     $971 = (($sTempSubsetSps) + 28|0);
     $972 = HEAP32[$971>>2]|0;
     $973 = ($972|0)==(0);
     do {
      if ($973) {
       $974 = ($storemerge$i$i150|0)>(1);
       if ($974) {
        $975 = $976 << 1;
        $977 = $975 | 1;
        $978 = (($storemerge$i$i150) + -1)|0;
        $1133 = $977;$1142 = $985;$storemerge$i$i$i246 = $978;
        break;
       } else {
        $979 = (1 - ($storemerge$i$i150))|0;
        $980 = $976 << $storemerge$i$i150;
        $981 = 1 >>> $979;
        $982 = $981 | $980;
        $983 = $982 >>> 24;
        $984 = $983&255;
        HEAP8[$985>>0] = $984;
        $986 = $982 >>> 16;
        $987 = $986&255;
        $988 = (($985) + 1|0);
        HEAP8[$988>>0] = $987;
        $989 = $982 >>> 8;
        $990 = $989&255;
        $991 = (($985) + 2|0);
        HEAP8[$991>>0] = $990;
        $992 = $982&255;
        $993 = (($985) + 3|0);
        HEAP8[$993>>0] = $992;
        $994 = (($985) + 4|0);
        $995 = ($storemerge$i$i150|0)!=(1);
        $996 = $995&1;
        $997 = (32 - ($979))|0;
        $1133 = $996;$1142 = $994;$storemerge$i$i$i246 = $997;
        break;
       }
      } else {
       $998 = ($972|0)>(0);
       if ($998) {
        $999 = $972 << 1;
        $1000 = (($999) + -1)|0;
        $1001 = ($1000>>>0)<(256);
        if ($1001) {
         $1002 = (29552 + ($1000<<2)|0);
         $1003 = HEAP32[$1002>>2]|0;
         $1004 = ($storemerge$i$i150|0)>($1003|0);
         if ($1004) {
          $1005 = $976 << $1003;
          $1006 = $1005 | $999;
          $1007 = (($storemerge$i$i150) - ($1003))|0;
          $1133 = $1006;$1142 = $985;$storemerge$i$i$i246 = $1007;
          break;
         } else {
          $1008 = (($1003) - ($storemerge$i$i150))|0;
          $1009 = $976 << $storemerge$i$i150;
          $1010 = $999 >>> $1008;
          $1011 = $1010 | $1009;
          $1012 = $1011 >>> 24;
          $1013 = $1012&255;
          HEAP8[$985>>0] = $1013;
          $1014 = $1011 >>> 16;
          $1015 = $1014&255;
          $1016 = (($985) + 1|0);
          HEAP8[$1016>>0] = $1015;
          $1017 = $1011 >>> 8;
          $1018 = $1017&255;
          $1019 = (($985) + 2|0);
          HEAP8[$1019>>0] = $1018;
          $1020 = $1011&255;
          $1021 = (($985) + 3|0);
          HEAP8[$1021>>0] = $1020;
          $1022 = (($985) + 4|0);
          $1023 = 1 << $1008;
          $1024 = (($1023) + -1)|0;
          $1025 = $1024 & $999;
          $1026 = (32 - ($1008))|0;
          $1133 = $1025;$1142 = $1022;$storemerge$i$i$i246 = $1026;
          break;
         }
        }
        $1027 = ($999>>>0)>(65535);
        $1028 = $972 >>> 15;
        $1029 = $1028 & 65535;
        $$$i139 = $1027 ? $1029 : $999;
        $$1$i140 = $1027 ? 16 : 0;
        $1030 = $$$i139 & 65280;
        $1031 = ($1030|0)==(0);
        if ($1031) {
         $iTmpValue$1$i141 = $$$i139;$n$1$i142 = $$1$i140;
        } else {
         $1032 = $$$i139 >>> 8;
         $1033 = $$1$i140 | 8;
         $iTmpValue$1$i141 = $1032;$n$1$i142 = $1033;
        }
        $1034 = (($iTmpValue$1$i141) + -1)|0;
        $1035 = (29552 + ($1034<<2)|0);
        $1036 = HEAP32[$1035>>2]|0;
        $1037 = $n$1$i142 << 1;
        $1038 = (($1037) + ($1036))|0;
        $1039 = $1038 | 1;
        $1040 = ($storemerge$i$i150|0)>($1039|0);
        if ($1040) {
         $1041 = $976 << $1039;
         $1042 = $1041 | $999;
         $1043 = (($storemerge$i$i150) - ($1039))|0;
         $1133 = $1042;$1142 = $985;$storemerge$i$i$i246 = $1043;
         break;
        } else {
         $1044 = (($1039) - ($storemerge$i$i150))|0;
         $1045 = $976 << $storemerge$i$i150;
         $1046 = $999 >>> $1044;
         $1047 = $1046 | $1045;
         $1048 = $1047 >>> 24;
         $1049 = $1048&255;
         HEAP8[$985>>0] = $1049;
         $1050 = $1047 >>> 16;
         $1051 = $1050&255;
         $1052 = (($985) + 1|0);
         HEAP8[$1052>>0] = $1051;
         $1053 = $1047 >>> 8;
         $1054 = $1053&255;
         $1055 = (($985) + 2|0);
         HEAP8[$1055>>0] = $1054;
         $1056 = $1047&255;
         $1057 = (($985) + 3|0);
         HEAP8[$1057>>0] = $1056;
         $1058 = (($985) + 4|0);
         $1059 = 1 << $1044;
         $1060 = (($1059) + -1)|0;
         $1061 = $1060 & $999;
         $1062 = (32 - ($1044))|0;
         $1133 = $1061;$1142 = $1058;$storemerge$i$i$i246 = $1062;
         break;
        }
       } else {
        $1063 = (0 - ($972))|0;
        $1064 = $1063 << 1;
        $1065 = $1064 | 1;
        $1066 = ($1064>>>0)<(256);
        if ($1066) {
         $1067 = (29552 + ($1064<<2)|0);
         $1068 = HEAP32[$1067>>2]|0;
         $1069 = ($storemerge$i$i150|0)>($1068|0);
         if ($1069) {
          $1070 = $976 << $1068;
          $1071 = $1070 | $1065;
          $1072 = (($storemerge$i$i150) - ($1068))|0;
          $1133 = $1071;$1142 = $985;$storemerge$i$i$i246 = $1072;
          break;
         } else {
          $1073 = (($1068) - ($storemerge$i$i150))|0;
          $1074 = $976 << $storemerge$i$i150;
          $1075 = $1065 >>> $1073;
          $1076 = $1075 | $1074;
          $1077 = $1076 >>> 24;
          $1078 = $1077&255;
          HEAP8[$985>>0] = $1078;
          $1079 = $1076 >>> 16;
          $1080 = $1079&255;
          $1081 = (($985) + 1|0);
          HEAP8[$1081>>0] = $1080;
          $1082 = $1076 >>> 8;
          $1083 = $1082&255;
          $1084 = (($985) + 2|0);
          HEAP8[$1084>>0] = $1083;
          $1085 = $1076&255;
          $1086 = (($985) + 3|0);
          HEAP8[$1086>>0] = $1085;
          $1087 = (($985) + 4|0);
          $1088 = 1 << $1073;
          $1089 = (($1088) + -1)|0;
          $1090 = $1089 & $1065;
          $1091 = (32 - ($1073))|0;
          $1133 = $1090;$1142 = $1087;$storemerge$i$i$i246 = $1091;
          break;
         }
        }
        $1092 = ($1065>>>0)>(65535);
        $1093 = $1063 >>> 15;
        $1094 = $1093 & 65535;
        $$$i130 = $1092 ? $1094 : $1065;
        $$1$i131 = $1092 ? 16 : 0;
        $1095 = $$$i130 & 65280;
        $1096 = ($1095|0)==(0);
        if ($1096) {
         $iTmpValue$1$i132 = $$$i130;$n$1$i133 = $$1$i131;
        } else {
         $1097 = $$$i130 >>> 8;
         $1098 = $$1$i131 | 8;
         $iTmpValue$1$i132 = $1097;$n$1$i133 = $1098;
        }
        $1099 = (($iTmpValue$1$i132) + -1)|0;
        $1100 = (29552 + ($1099<<2)|0);
        $1101 = HEAP32[$1100>>2]|0;
        $1102 = $n$1$i133 << 1;
        $1103 = (($1102) + ($1101))|0;
        $1104 = $1103 | 1;
        $1105 = ($storemerge$i$i150|0)>($1104|0);
        if ($1105) {
         $1106 = $976 << $1104;
         $1107 = $1106 | $1065;
         $1108 = (($storemerge$i$i150) - ($1104))|0;
         $1133 = $1107;$1142 = $985;$storemerge$i$i$i246 = $1108;
         break;
        } else {
         $1109 = (($1104) - ($storemerge$i$i150))|0;
         $1110 = $976 << $storemerge$i$i150;
         $1111 = $1065 >>> $1109;
         $1112 = $1111 | $1110;
         $1113 = $1112 >>> 24;
         $1114 = $1113&255;
         HEAP8[$985>>0] = $1114;
         $1115 = $1112 >>> 16;
         $1116 = $1115&255;
         $1117 = (($985) + 1|0);
         HEAP8[$1117>>0] = $1116;
         $1118 = $1112 >>> 8;
         $1119 = $1118&255;
         $1120 = (($985) + 2|0);
         HEAP8[$1120>>0] = $1119;
         $1121 = $1112&255;
         $1122 = (($985) + 3|0);
         HEAP8[$1122>>0] = $1121;
         $1123 = (($985) + 4|0);
         $1124 = 1 << $1109;
         $1125 = (($1124) + -1)|0;
         $1126 = $1125 & $1065;
         $1127 = (32 - ($1109))|0;
         $1133 = $1126;$1142 = $1123;$storemerge$i$i$i246 = $1127;
         break;
        }
       }
      }
     } while(0);
     $1128 = (($sTempSubsetSps) + 32|0);
     $1129 = HEAP32[$1128>>2]|0;
     $1130 = ($1129|0)==(0);
     do {
      if ($1130) {
       $1131 = ($storemerge$i$i$i246|0)>(1);
       if ($1131) {
        $1132 = $1133 << 1;
        $1134 = $1132 | 1;
        $1135 = (($storemerge$i$i$i246) + -1)|0;
        $1293 = $1134;$1302 = $1142;$storemerge$i$i$i259 = $1135;
        break;
       } else {
        $1136 = (1 - ($storemerge$i$i$i246))|0;
        $1137 = $1133 << $storemerge$i$i$i246;
        $1138 = 1 >>> $1136;
        $1139 = $1137 | $1138;
        $1140 = $1139 >>> 24;
        $1141 = $1140&255;
        HEAP8[$1142>>0] = $1141;
        $1143 = $1139 >>> 16;
        $1144 = $1143&255;
        $1145 = (($1142) + 1|0);
        HEAP8[$1145>>0] = $1144;
        $1146 = $1139 >>> 8;
        $1147 = $1146&255;
        $1148 = (($1142) + 2|0);
        HEAP8[$1148>>0] = $1147;
        $1149 = $1139&255;
        $1150 = (($1142) + 3|0);
        HEAP8[$1150>>0] = $1149;
        $1151 = (($1142) + 4|0);
        $1152 = ($storemerge$i$i$i246|0)!=(1);
        $1153 = $1152&1;
        $1154 = (32 - ($1136))|0;
        $1293 = $1153;$1302 = $1151;$storemerge$i$i$i259 = $1154;
        break;
       }
      } else {
       $1155 = ($1129|0)>(0);
       if ($1155) {
        $1156 = $1129 << 1;
        $1157 = (($1156) + -1)|0;
        $1158 = ($1157>>>0)<(256);
        if ($1158) {
         $1159 = (29552 + ($1157<<2)|0);
         $1160 = HEAP32[$1159>>2]|0;
         $1161 = ($storemerge$i$i$i246|0)>($1160|0);
         if ($1161) {
          $1162 = $1133 << $1160;
          $1163 = $1162 | $1156;
          $1164 = (($storemerge$i$i$i246) - ($1160))|0;
          $1293 = $1163;$1302 = $1142;$storemerge$i$i$i259 = $1164;
          break;
         } else {
          $1165 = (($1160) - ($storemerge$i$i$i246))|0;
          $1166 = $1133 << $storemerge$i$i$i246;
          $1167 = $1156 >>> $1165;
          $1168 = $1167 | $1166;
          $1169 = $1168 >>> 24;
          $1170 = $1169&255;
          HEAP8[$1142>>0] = $1170;
          $1171 = $1168 >>> 16;
          $1172 = $1171&255;
          $1173 = (($1142) + 1|0);
          HEAP8[$1173>>0] = $1172;
          $1174 = $1168 >>> 8;
          $1175 = $1174&255;
          $1176 = (($1142) + 2|0);
          HEAP8[$1176>>0] = $1175;
          $1177 = $1168&255;
          $1178 = (($1142) + 3|0);
          HEAP8[$1178>>0] = $1177;
          $1179 = (($1142) + 4|0);
          $1180 = 1 << $1165;
          $1181 = (($1180) + -1)|0;
          $1182 = $1181 & $1156;
          $1183 = (32 - ($1165))|0;
          $1293 = $1182;$1302 = $1179;$storemerge$i$i$i259 = $1183;
          break;
         }
        }
        $1184 = ($1156>>>0)>(65535);
        $1185 = $1129 >>> 15;
        $1186 = $1185 & 65535;
        $$$i118 = $1184 ? $1186 : $1156;
        $$1$i119 = $1184 ? 16 : 0;
        $1187 = $$$i118 & 65280;
        $1188 = ($1187|0)==(0);
        if ($1188) {
         $iTmpValue$1$i120 = $$$i118;$n$1$i121 = $$1$i119;
        } else {
         $1189 = $$$i118 >>> 8;
         $1190 = $$1$i119 | 8;
         $iTmpValue$1$i120 = $1189;$n$1$i121 = $1190;
        }
        $1191 = (($iTmpValue$1$i120) + -1)|0;
        $1192 = (29552 + ($1191<<2)|0);
        $1193 = HEAP32[$1192>>2]|0;
        $1194 = $n$1$i121 << 1;
        $1195 = (($1194) + ($1193))|0;
        $1196 = $1195 | 1;
        $1197 = ($storemerge$i$i$i246|0)>($1196|0);
        if ($1197) {
         $1198 = $1133 << $1196;
         $1199 = $1198 | $1156;
         $1200 = (($storemerge$i$i$i246) - ($1196))|0;
         $1293 = $1199;$1302 = $1142;$storemerge$i$i$i259 = $1200;
         break;
        } else {
         $1201 = (($1196) - ($storemerge$i$i$i246))|0;
         $1202 = $1133 << $storemerge$i$i$i246;
         $1203 = $1156 >>> $1201;
         $1204 = $1203 | $1202;
         $1205 = $1204 >>> 24;
         $1206 = $1205&255;
         HEAP8[$1142>>0] = $1206;
         $1207 = $1204 >>> 16;
         $1208 = $1207&255;
         $1209 = (($1142) + 1|0);
         HEAP8[$1209>>0] = $1208;
         $1210 = $1204 >>> 8;
         $1211 = $1210&255;
         $1212 = (($1142) + 2|0);
         HEAP8[$1212>>0] = $1211;
         $1213 = $1204&255;
         $1214 = (($1142) + 3|0);
         HEAP8[$1214>>0] = $1213;
         $1215 = (($1142) + 4|0);
         $1216 = 1 << $1201;
         $1217 = (($1216) + -1)|0;
         $1218 = $1217 & $1156;
         $1219 = (32 - ($1201))|0;
         $1293 = $1218;$1302 = $1215;$storemerge$i$i$i259 = $1219;
         break;
        }
       } else {
        $1220 = (0 - ($1129))|0;
        $1221 = $1220 << 1;
        $1222 = $1221 | 1;
        $1223 = ($1221>>>0)<(256);
        if ($1223) {
         $1224 = (29552 + ($1221<<2)|0);
         $1225 = HEAP32[$1224>>2]|0;
         $1226 = ($storemerge$i$i$i246|0)>($1225|0);
         if ($1226) {
          $1227 = $1133 << $1225;
          $1228 = $1227 | $1222;
          $1229 = (($storemerge$i$i$i246) - ($1225))|0;
          $1293 = $1228;$1302 = $1142;$storemerge$i$i$i259 = $1229;
          break;
         } else {
          $1230 = (($1225) - ($storemerge$i$i$i246))|0;
          $1231 = $1133 << $storemerge$i$i$i246;
          $1232 = $1222 >>> $1230;
          $1233 = $1232 | $1231;
          $1234 = $1233 >>> 24;
          $1235 = $1234&255;
          HEAP8[$1142>>0] = $1235;
          $1236 = $1233 >>> 16;
          $1237 = $1236&255;
          $1238 = (($1142) + 1|0);
          HEAP8[$1238>>0] = $1237;
          $1239 = $1233 >>> 8;
          $1240 = $1239&255;
          $1241 = (($1142) + 2|0);
          HEAP8[$1241>>0] = $1240;
          $1242 = $1233&255;
          $1243 = (($1142) + 3|0);
          HEAP8[$1243>>0] = $1242;
          $1244 = (($1142) + 4|0);
          $1245 = 1 << $1230;
          $1246 = (($1245) + -1)|0;
          $1247 = $1246 & $1222;
          $1248 = (32 - ($1230))|0;
          $1293 = $1247;$1302 = $1244;$storemerge$i$i$i259 = $1248;
          break;
         }
        }
        $1249 = ($1222>>>0)>(65535);
        $1250 = $1220 >>> 15;
        $1251 = $1250 & 65535;
        $$$i109 = $1249 ? $1251 : $1222;
        $$1$i110 = $1249 ? 16 : 0;
        $1252 = $$$i109 & 65280;
        $1253 = ($1252|0)==(0);
        if ($1253) {
         $iTmpValue$1$i111 = $$$i109;$n$1$i112 = $$1$i110;
        } else {
         $1254 = $$$i109 >>> 8;
         $1255 = $$1$i110 | 8;
         $iTmpValue$1$i111 = $1254;$n$1$i112 = $1255;
        }
        $1256 = (($iTmpValue$1$i111) + -1)|0;
        $1257 = (29552 + ($1256<<2)|0);
        $1258 = HEAP32[$1257>>2]|0;
        $1259 = $n$1$i112 << 1;
        $1260 = (($1259) + ($1258))|0;
        $1261 = $1260 | 1;
        $1262 = ($storemerge$i$i$i246|0)>($1261|0);
        if ($1262) {
         $1263 = $1133 << $1261;
         $1264 = $1263 | $1222;
         $1265 = (($storemerge$i$i$i246) - ($1261))|0;
         $1293 = $1264;$1302 = $1142;$storemerge$i$i$i259 = $1265;
         break;
        } else {
         $1266 = (($1261) - ($storemerge$i$i$i246))|0;
         $1267 = $1133 << $storemerge$i$i$i246;
         $1268 = $1222 >>> $1266;
         $1269 = $1268 | $1267;
         $1270 = $1269 >>> 24;
         $1271 = $1270&255;
         HEAP8[$1142>>0] = $1271;
         $1272 = $1269 >>> 16;
         $1273 = $1272&255;
         $1274 = (($1142) + 1|0);
         HEAP8[$1274>>0] = $1273;
         $1275 = $1269 >>> 8;
         $1276 = $1275&255;
         $1277 = (($1142) + 2|0);
         HEAP8[$1277>>0] = $1276;
         $1278 = $1269&255;
         $1279 = (($1142) + 3|0);
         HEAP8[$1279>>0] = $1278;
         $1280 = (($1142) + 4|0);
         $1281 = 1 << $1266;
         $1282 = (($1281) + -1)|0;
         $1283 = $1282 & $1222;
         $1284 = (32 - ($1266))|0;
         $1293 = $1283;$1302 = $1280;$storemerge$i$i$i259 = $1284;
         break;
        }
       }
      }
     } while(0);
     $1285 = (($sTempSubsetSps) + 36|0);
     $1286 = HEAP32[$1285>>2]|0;
     $1287 = (($1286) + 1)|0;
     $1288 = ($1286>>>0)<(256);
     do {
      if ($1288) {
       $1289 = (29552 + ($1286<<2)|0);
       $1290 = HEAP32[$1289>>2]|0;
       $1291 = ($storemerge$i$i$i259|0)>($1290|0);
       if ($1291) {
        $1292 = $1293 << $1290;
        $1294 = $1292 | $1287;
        $1295 = (($storemerge$i$i$i259) - ($1290))|0;
        $$ph309 = $1294;$$ph310 = $1302;$storemerge$i$i$i249$ph = $1295;
        break;
       } else {
        $1296 = (($1290) - ($storemerge$i$i$i259))|0;
        $1297 = $1293 << $storemerge$i$i$i259;
        $1298 = $1287 >>> $1296;
        $1299 = $1298 | $1297;
        $1300 = $1299 >>> 24;
        $1301 = $1300&255;
        HEAP8[$1302>>0] = $1301;
        $1303 = $1299 >>> 16;
        $1304 = $1303&255;
        $1305 = (($1302) + 1|0);
        HEAP8[$1305>>0] = $1304;
        $1306 = $1299 >>> 8;
        $1307 = $1306&255;
        $1308 = (($1302) + 2|0);
        HEAP8[$1308>>0] = $1307;
        $1309 = $1299&255;
        $1310 = (($1302) + 3|0);
        HEAP8[$1310>>0] = $1309;
        $1311 = (($1302) + 4|0);
        $1312 = 1 << $1296;
        $1313 = (($1312) + -1)|0;
        $1314 = $1313 & $1287;
        $1315 = (32 - ($1296))|0;
        $$ph309 = $1314;$$ph310 = $1311;$storemerge$i$i$i249$ph = $1315;
        break;
       }
      } else {
       $1316 = ($1287>>>0)>(65535);
       $1317 = $1287 >>> 16;
       $$$i99 = $1316 ? $1317 : $1287;
       $$1$i100 = $1316 ? 16 : 0;
       $1318 = $$$i99 & 65280;
       $1319 = ($1318|0)==(0);
       if ($1319) {
        $iTmpValue$1$i101 = $$$i99;$n$1$i102 = $$1$i100;
       } else {
        $1320 = $$$i99 >>> 8;
        $1321 = $$1$i100 | 8;
        $iTmpValue$1$i101 = $1320;$n$1$i102 = $1321;
       }
       $1322 = (($iTmpValue$1$i101) + -1)|0;
       $1323 = (29552 + ($1322<<2)|0);
       $1324 = HEAP32[$1323>>2]|0;
       $1325 = $n$1$i102 << 1;
       $1326 = (($1325) + ($1324))|0;
       $1327 = $1326 | 1;
       $1328 = ($storemerge$i$i$i259|0)>($1327|0);
       if ($1328) {
        $1329 = $1293 << $1327;
        $1330 = $1329 | $1287;
        $1331 = (($storemerge$i$i$i259) - ($1327))|0;
        $$ph309 = $1330;$$ph310 = $1302;$storemerge$i$i$i249$ph = $1331;
        break;
       } else {
        $1332 = (($1327) - ($storemerge$i$i$i259))|0;
        $1333 = $1293 << $storemerge$i$i$i259;
        $1334 = $1287 >>> $1332;
        $1335 = $1334 | $1333;
        $1336 = $1335 >>> 24;
        $1337 = $1336&255;
        HEAP8[$1302>>0] = $1337;
        $1338 = $1335 >>> 16;
        $1339 = $1338&255;
        $1340 = (($1302) + 1|0);
        HEAP8[$1340>>0] = $1339;
        $1341 = $1335 >>> 8;
        $1342 = $1341&255;
        $1343 = (($1302) + 2|0);
        HEAP8[$1343>>0] = $1342;
        $1344 = $1335&255;
        $1345 = (($1302) + 3|0);
        HEAP8[$1345>>0] = $1344;
        $1346 = (($1302) + 4|0);
        $1347 = 1 << $1332;
        $1348 = (($1347) + -1)|0;
        $1349 = $1348 & $1287;
        $1350 = (32 - ($1332))|0;
        $$ph309 = $1349;$$ph310 = $1346;$storemerge$i$i$i249$ph = $1350;
        break;
       }
      }
     } while(0);
     $1351 = HEAP32[$1285>>2]|0;
     $1352 = ($1351|0)>(0);
     if ($1352) {
      $1359 = $$ph309;$1368 = $$ph310;$i37$0313 = 0;$storemerge$i$i$i249312 = $storemerge$i$i$i249$ph;
     } else {
      $1521 = $$ph309;$1530 = $$ph310;$storemerge$i$i$i263 = $storemerge$i$i$i249$ph;
      break;
     }
     while(1) {
      $1353 = ((($sTempSubsetSps) + ($i37$0313)|0) + 40|0);
      $1354 = HEAP8[$1353>>0]|0;
      $1355 = $1354 << 24 >> 24;
      $1356 = ($1354<<24>>24)==(0);
      do {
       if ($1356) {
        $1357 = ($storemerge$i$i$i249312|0)>(1);
        if ($1357) {
         $1358 = $1359 << 1;
         $1360 = $1358 | 1;
         $1361 = (($storemerge$i$i$i249312) + -1)|0;
         $2286 = $1360;$2287 = $1368;$storemerge$i$i$i250 = $1361;
         break;
        } else {
         $1362 = (1 - ($storemerge$i$i$i249312))|0;
         $1363 = $1359 << $storemerge$i$i$i249312;
         $1364 = 1 >>> $1362;
         $1365 = $1363 | $1364;
         $1366 = $1365 >>> 24;
         $1367 = $1366&255;
         HEAP8[$1368>>0] = $1367;
         $1369 = $1365 >>> 16;
         $1370 = $1369&255;
         $1371 = (($1368) + 1|0);
         HEAP8[$1371>>0] = $1370;
         $1372 = $1365 >>> 8;
         $1373 = $1372&255;
         $1374 = (($1368) + 2|0);
         HEAP8[$1374>>0] = $1373;
         $1375 = $1365&255;
         $1376 = (($1368) + 3|0);
         HEAP8[$1376>>0] = $1375;
         $1377 = (($1368) + 4|0);
         $1378 = ($storemerge$i$i$i249312|0)!=(1);
         $1379 = $1378&1;
         $1380 = (32 - ($1362))|0;
         $2286 = $1379;$2287 = $1377;$storemerge$i$i$i250 = $1380;
         break;
        }
       } else {
        $1381 = ($1354<<24>>24)>(0);
        if ($1381) {
         $1382 = $1355 << 1;
         $1383 = (($1382) + -1)|0;
         $1384 = ($1383>>>0)<(256);
         if ($1384) {
          $1385 = (29552 + ($1383<<2)|0);
          $1386 = HEAP32[$1385>>2]|0;
          $1387 = ($storemerge$i$i$i249312|0)>($1386|0);
          if ($1387) {
           $1388 = $1359 << $1386;
           $1389 = $1388 | $1382;
           $1390 = (($storemerge$i$i$i249312) - ($1386))|0;
           $2286 = $1389;$2287 = $1368;$storemerge$i$i$i250 = $1390;
           break;
          } else {
           $1391 = (($1386) - ($storemerge$i$i$i249312))|0;
           $1392 = $1359 << $storemerge$i$i$i249312;
           $1393 = $1382 >>> $1391;
           $1394 = $1393 | $1392;
           $1395 = $1394 >>> 24;
           $1396 = $1395&255;
           HEAP8[$1368>>0] = $1396;
           $1397 = $1394 >>> 16;
           $1398 = $1397&255;
           $1399 = (($1368) + 1|0);
           HEAP8[$1399>>0] = $1398;
           $1400 = $1394 >>> 8;
           $1401 = $1400&255;
           $1402 = (($1368) + 2|0);
           HEAP8[$1402>>0] = $1401;
           $1403 = $1394&255;
           $1404 = (($1368) + 3|0);
           HEAP8[$1404>>0] = $1403;
           $1405 = (($1368) + 4|0);
           $1406 = 1 << $1391;
           $1407 = (($1406) + -1)|0;
           $1408 = $1407 & $1382;
           $1409 = (32 - ($1391))|0;
           $2286 = $1408;$2287 = $1405;$storemerge$i$i$i250 = $1409;
           break;
          }
         }
         $1410 = ($1382>>>0)>(65535);
         $1411 = $1355 >>> 15;
         $1412 = $1411 & 65535;
         $$$i88 = $1410 ? $1412 : $1382;
         $$1$i89 = $1410 ? 16 : 0;
         $1413 = $$$i88 & 65280;
         $1414 = ($1413|0)==(0);
         if ($1414) {
          $iTmpValue$1$i90 = $$$i88;$n$1$i91 = $$1$i89;
         } else {
          $1415 = $$$i88 >>> 8;
          $1416 = $$1$i89 | 8;
          $iTmpValue$1$i90 = $1415;$n$1$i91 = $1416;
         }
         $1417 = (($iTmpValue$1$i90) + -1)|0;
         $1418 = (29552 + ($1417<<2)|0);
         $1419 = HEAP32[$1418>>2]|0;
         $1420 = $n$1$i91 << 1;
         $1421 = (($1420) + ($1419))|0;
         $1422 = $1421 | 1;
         $1423 = ($storemerge$i$i$i249312|0)>($1422|0);
         if ($1423) {
          $1424 = $1359 << $1422;
          $1425 = $1424 | $1382;
          $1426 = (($storemerge$i$i$i249312) - ($1422))|0;
          $2286 = $1425;$2287 = $1368;$storemerge$i$i$i250 = $1426;
          break;
         } else {
          $1427 = (($1422) - ($storemerge$i$i$i249312))|0;
          $1428 = $1359 << $storemerge$i$i$i249312;
          $1429 = $1382 >>> $1427;
          $1430 = $1429 | $1428;
          $1431 = $1430 >>> 24;
          $1432 = $1431&255;
          HEAP8[$1368>>0] = $1432;
          $1433 = $1430 >>> 16;
          $1434 = $1433&255;
          $1435 = (($1368) + 1|0);
          HEAP8[$1435>>0] = $1434;
          $1436 = $1430 >>> 8;
          $1437 = $1436&255;
          $1438 = (($1368) + 2|0);
          HEAP8[$1438>>0] = $1437;
          $1439 = $1430&255;
          $1440 = (($1368) + 3|0);
          HEAP8[$1440>>0] = $1439;
          $1441 = (($1368) + 4|0);
          $1442 = 1 << $1427;
          $1443 = (($1442) + -1)|0;
          $1444 = $1443 & $1382;
          $1445 = (32 - ($1427))|0;
          $2286 = $1444;$2287 = $1441;$storemerge$i$i$i250 = $1445;
          break;
         }
        } else {
         $1446 = (0 - ($1355))|0;
         $1447 = $1446 << 1;
         $1448 = $1447 | 1;
         $1449 = ($1447>>>0)<(256);
         if ($1449) {
          $1450 = (29552 + ($1447<<2)|0);
          $1451 = HEAP32[$1450>>2]|0;
          $1452 = ($storemerge$i$i$i249312|0)>($1451|0);
          if ($1452) {
           $1453 = $1359 << $1451;
           $1454 = $1453 | $1448;
           $1455 = (($storemerge$i$i$i249312) - ($1451))|0;
           $2286 = $1454;$2287 = $1368;$storemerge$i$i$i250 = $1455;
           break;
          } else {
           $1456 = (($1451) - ($storemerge$i$i$i249312))|0;
           $1457 = $1359 << $storemerge$i$i$i249312;
           $1458 = $1448 >>> $1456;
           $1459 = $1458 | $1457;
           $1460 = $1459 >>> 24;
           $1461 = $1460&255;
           HEAP8[$1368>>0] = $1461;
           $1462 = $1459 >>> 16;
           $1463 = $1462&255;
           $1464 = (($1368) + 1|0);
           HEAP8[$1464>>0] = $1463;
           $1465 = $1459 >>> 8;
           $1466 = $1465&255;
           $1467 = (($1368) + 2|0);
           HEAP8[$1467>>0] = $1466;
           $1468 = $1459&255;
           $1469 = (($1368) + 3|0);
           HEAP8[$1469>>0] = $1468;
           $1470 = (($1368) + 4|0);
           $1471 = 1 << $1456;
           $1472 = (($1471) + -1)|0;
           $1473 = $1472 & $1448;
           $1474 = (32 - ($1456))|0;
           $2286 = $1473;$2287 = $1470;$storemerge$i$i$i250 = $1474;
           break;
          }
         }
         $1475 = ($1448>>>0)>(65535);
         $1476 = $1446 >>> 15;
         $1477 = $1476 & 65535;
         $$$i79 = $1475 ? $1477 : $1448;
         $$1$i80 = $1475 ? 16 : 0;
         $1478 = $$$i79 & 65280;
         $1479 = ($1478|0)==(0);
         if ($1479) {
          $iTmpValue$1$i81 = $$$i79;$n$1$i82 = $$1$i80;
         } else {
          $1480 = $$$i79 >>> 8;
          $1481 = $$1$i80 | 8;
          $iTmpValue$1$i81 = $1480;$n$1$i82 = $1481;
         }
         $1482 = (($iTmpValue$1$i81) + -1)|0;
         $1483 = (29552 + ($1482<<2)|0);
         $1484 = HEAP32[$1483>>2]|0;
         $1485 = $n$1$i82 << 1;
         $1486 = (($1485) + ($1484))|0;
         $1487 = $1486 | 1;
         $1488 = ($storemerge$i$i$i249312|0)>($1487|0);
         if ($1488) {
          $1489 = $1359 << $1487;
          $1490 = $1489 | $1448;
          $1491 = (($storemerge$i$i$i249312) - ($1487))|0;
          $2286 = $1490;$2287 = $1368;$storemerge$i$i$i250 = $1491;
          break;
         } else {
          $1492 = (($1487) - ($storemerge$i$i$i249312))|0;
          $1493 = $1359 << $storemerge$i$i$i249312;
          $1494 = $1448 >>> $1492;
          $1495 = $1494 | $1493;
          $1496 = $1495 >>> 24;
          $1497 = $1496&255;
          HEAP8[$1368>>0] = $1497;
          $1498 = $1495 >>> 16;
          $1499 = $1498&255;
          $1500 = (($1368) + 1|0);
          HEAP8[$1500>>0] = $1499;
          $1501 = $1495 >>> 8;
          $1502 = $1501&255;
          $1503 = (($1368) + 2|0);
          HEAP8[$1503>>0] = $1502;
          $1504 = $1495&255;
          $1505 = (($1368) + 3|0);
          HEAP8[$1505>>0] = $1504;
          $1506 = (($1368) + 4|0);
          $1507 = 1 << $1492;
          $1508 = (($1507) + -1)|0;
          $1509 = $1508 & $1448;
          $1510 = (32 - ($1492))|0;
          $2286 = $1509;$2287 = $1506;$storemerge$i$i$i250 = $1510;
          break;
         }
        }
       }
      } while(0);
      $1511 = (($i37$0313) + 1)|0;
      $1512 = HEAP32[$1285>>2]|0;
      $1513 = ($1511|0)<($1512|0);
      if ($1513) {
       $1359 = $2286;$1368 = $2287;$i37$0313 = $1511;$storemerge$i$i$i249312 = $storemerge$i$i$i250;
      } else {
       $1521 = $2286;$1530 = $2287;$storemerge$i$i$i263 = $storemerge$i$i$i250;
       break;
      }
     }
    } else {
     $1521 = $887;$1530 = $896;$storemerge$i$i$i263 = $storemerge$i$i$i255;
    }
   } while(0);
   $1514 = HEAP32[$407>>2]|0;
   $1515 = (($1514) + 1)|0;
   $1516 = ($1514>>>0)<(256);
   do {
    if ($1516) {
     $1517 = (29552 + ($1514<<2)|0);
     $1518 = HEAP32[$1517>>2]|0;
     $1519 = ($storemerge$i$i$i263|0)>($1518|0);
     if ($1519) {
      $1520 = $1521 << $1518;
      $1522 = $1520 | $1515;
      $1523 = (($storemerge$i$i$i263) - ($1518))|0;
      $1583 = $1522;$1592 = $1530;$storemerge$i$i$i243 = $1523;
      break;
     } else {
      $1524 = (($1518) - ($storemerge$i$i$i263))|0;
      $1525 = $1521 << $storemerge$i$i$i263;
      $1526 = $1515 >>> $1524;
      $1527 = $1526 | $1525;
      $1528 = $1527 >>> 24;
      $1529 = $1528&255;
      HEAP8[$1530>>0] = $1529;
      $1531 = $1527 >>> 16;
      $1532 = $1531&255;
      $1533 = (($1530) + 1|0);
      HEAP8[$1533>>0] = $1532;
      $1534 = $1527 >>> 8;
      $1535 = $1534&255;
      $1536 = (($1530) + 2|0);
      HEAP8[$1536>>0] = $1535;
      $1537 = $1527&255;
      $1538 = (($1530) + 3|0);
      HEAP8[$1538>>0] = $1537;
      $1539 = (($1530) + 4|0);
      $1540 = 1 << $1524;
      $1541 = (($1540) + -1)|0;
      $1542 = $1541 & $1515;
      $1543 = (32 - ($1524))|0;
      $1583 = $1542;$1592 = $1539;$storemerge$i$i$i243 = $1543;
      break;
     }
    } else {
     $1544 = ($1515>>>0)>(65535);
     $1545 = $1515 >>> 16;
     $$$i70 = $1544 ? $1545 : $1515;
     $$1$i71 = $1544 ? 16 : 0;
     $1546 = $$$i70 & 65280;
     $1547 = ($1546|0)==(0);
     if ($1547) {
      $iTmpValue$1$i72 = $$$i70;$n$1$i73 = $$1$i71;
     } else {
      $1548 = $$$i70 >>> 8;
      $1549 = $$1$i71 | 8;
      $iTmpValue$1$i72 = $1548;$n$1$i73 = $1549;
     }
     $1550 = (($iTmpValue$1$i72) + -1)|0;
     $1551 = (29552 + ($1550<<2)|0);
     $1552 = HEAP32[$1551>>2]|0;
     $1553 = $n$1$i73 << 1;
     $1554 = (($1553) + ($1552))|0;
     $1555 = $1554 | 1;
     $1556 = ($storemerge$i$i$i263|0)>($1555|0);
     if ($1556) {
      $1557 = $1521 << $1555;
      $1558 = $1557 | $1515;
      $1559 = (($storemerge$i$i$i263) - ($1555))|0;
      $1583 = $1558;$1592 = $1530;$storemerge$i$i$i243 = $1559;
      break;
     } else {
      $1560 = (($1555) - ($storemerge$i$i$i263))|0;
      $1561 = $1521 << $storemerge$i$i$i263;
      $1562 = $1515 >>> $1560;
      $1563 = $1562 | $1561;
      $1564 = $1563 >>> 24;
      $1565 = $1564&255;
      HEAP8[$1530>>0] = $1565;
      $1566 = $1563 >>> 16;
      $1567 = $1566&255;
      $1568 = (($1530) + 1|0);
      HEAP8[$1568>>0] = $1567;
      $1569 = $1563 >>> 8;
      $1570 = $1569&255;
      $1571 = (($1530) + 2|0);
      HEAP8[$1571>>0] = $1570;
      $1572 = $1563&255;
      $1573 = (($1530) + 3|0);
      HEAP8[$1573>>0] = $1572;
      $1574 = (($1530) + 4|0);
      $1575 = 1 << $1560;
      $1576 = (($1575) + -1)|0;
      $1577 = $1576 & $1515;
      $1578 = (32 - ($1560))|0;
      $1583 = $1577;$1592 = $1574;$storemerge$i$i$i243 = $1578;
      break;
     }
    }
   } while(0);
   $1579 = HEAP8[$435>>0]|0;
   $1580 = $1579&255;
   $1581 = ($storemerge$i$i$i243|0)>(1);
   if ($1581) {
    $1582 = $1583 << 1;
    $1584 = $1580 | $1582;
    $1585 = (($storemerge$i$i$i243) + -1)|0;
    $1613 = $1584;$1622 = $1592;$storemerge$i$i68 = $1585;
   } else {
    $1586 = (1 - ($storemerge$i$i$i243))|0;
    $1587 = $1583 << $storemerge$i$i$i243;
    $1588 = $1580 >>> $1586;
    $1589 = $1588 | $1587;
    $1590 = $1589 >>> 24;
    $1591 = $1590&255;
    HEAP8[$1592>>0] = $1591;
    $1593 = $1589 >>> 16;
    $1594 = $1593&255;
    $1595 = (($1592) + 1|0);
    HEAP8[$1595>>0] = $1594;
    $1596 = $1589 >>> 8;
    $1597 = $1596&255;
    $1598 = (($1592) + 2|0);
    HEAP8[$1598>>0] = $1597;
    $1599 = $1589&255;
    $1600 = (($1592) + 3|0);
    HEAP8[$1600>>0] = $1599;
    $1601 = (($1592) + 4|0);
    $1602 = 1 << $1586;
    $1603 = (($1602) + 1)|0;
    $1604 = $1580 & $1603;
    $1605 = (32 - ($1586))|0;
    $1613 = $1604;$1622 = $1601;$storemerge$i$i68 = $1605;
   }
   $1606 = HEAP32[$441>>2]|0;
   $1607 = (($1606) + -1)|0;
   $1608 = ($1607>>>0)<(256);
   do {
    if ($1608) {
     $1609 = (29552 + ($1607<<2)|0);
     $1610 = HEAP32[$1609>>2]|0;
     $1611 = ($storemerge$i$i68|0)>($1610|0);
     if ($1611) {
      $1612 = $1613 << $1610;
      $1614 = $1612 | $1606;
      $1615 = (($storemerge$i$i68) - ($1610))|0;
      $1678 = $1614;$1687 = $1622;$storemerge$i$i$i245 = $1615;
      break;
     } else {
      $1616 = (($1610) - ($storemerge$i$i68))|0;
      $1617 = $1613 << $storemerge$i$i68;
      $1618 = $1606 >>> $1616;
      $1619 = $1618 | $1617;
      $1620 = $1619 >>> 24;
      $1621 = $1620&255;
      HEAP8[$1622>>0] = $1621;
      $1623 = $1619 >>> 16;
      $1624 = $1623&255;
      $1625 = (($1622) + 1|0);
      HEAP8[$1625>>0] = $1624;
      $1626 = $1619 >>> 8;
      $1627 = $1626&255;
      $1628 = (($1622) + 2|0);
      HEAP8[$1628>>0] = $1627;
      $1629 = $1619&255;
      $1630 = (($1622) + 3|0);
      HEAP8[$1630>>0] = $1629;
      $1631 = (($1622) + 4|0);
      $1632 = 1 << $1616;
      $1633 = (($1632) + -1)|0;
      $1634 = $1633 & $1606;
      $1635 = (32 - ($1616))|0;
      $1678 = $1634;$1687 = $1631;$storemerge$i$i$i245 = $1635;
      break;
     }
    } else {
     $1636 = ($1606>>>0)>(65535);
     $1637 = $1606 >>> 16;
     $$$i59 = $1636 ? $1637 : $1606;
     $$1$i60 = $1636 ? 16 : 0;
     $1638 = $$$i59 & 65280;
     $1639 = ($1638|0)==(0);
     if ($1639) {
      $iTmpValue$1$i61 = $$$i59;$n$1$i62 = $$1$i60;
     } else {
      $1640 = $$$i59 >>> 8;
      $1641 = $$1$i60 | 8;
      $iTmpValue$1$i61 = $1640;$n$1$i62 = $1641;
     }
     $1642 = (($iTmpValue$1$i61) + -1)|0;
     $1643 = (29552 + ($1642<<2)|0);
     $1644 = HEAP32[$1643>>2]|0;
     $1645 = $n$1$i62 << 1;
     $1646 = (($1645) + ($1644))|0;
     $1647 = $1646 | 1;
     $1648 = ($storemerge$i$i68|0)>($1647|0);
     if ($1648) {
      $1649 = $1613 << $1647;
      $1650 = $1649 | $1606;
      $1651 = (($storemerge$i$i68) - ($1647))|0;
      $1678 = $1650;$1687 = $1622;$storemerge$i$i$i245 = $1651;
      break;
     } else {
      $1652 = (($1647) - ($storemerge$i$i68))|0;
      $1653 = $1613 << $storemerge$i$i68;
      $1654 = $1606 >>> $1652;
      $1655 = $1654 | $1653;
      $1656 = $1655 >>> 24;
      $1657 = $1656&255;
      HEAP8[$1622>>0] = $1657;
      $1658 = $1655 >>> 16;
      $1659 = $1658&255;
      $1660 = (($1622) + 1|0);
      HEAP8[$1660>>0] = $1659;
      $1661 = $1655 >>> 8;
      $1662 = $1661&255;
      $1663 = (($1622) + 2|0);
      HEAP8[$1663>>0] = $1662;
      $1664 = $1655&255;
      $1665 = (($1622) + 3|0);
      HEAP8[$1665>>0] = $1664;
      $1666 = (($1622) + 4|0);
      $1667 = 1 << $1652;
      $1668 = (($1667) + -1)|0;
      $1669 = $1668 & $1606;
      $1670 = (32 - ($1652))|0;
      $1678 = $1669;$1687 = $1666;$storemerge$i$i$i245 = $1670;
      break;
     }
    }
   } while(0);
   $1671 = HEAP32[$457>>2]|0;
   $1672 = (($1671) + -1)|0;
   $1673 = ($1672>>>0)<(256);
   do {
    if ($1673) {
     $1674 = (29552 + ($1672<<2)|0);
     $1675 = HEAP32[$1674>>2]|0;
     $1676 = ($storemerge$i$i$i245|0)>($1675|0);
     if ($1676) {
      $1677 = $1678 << $1675;
      $1679 = $1677 | $1671;
      $1680 = (($storemerge$i$i$i245) - ($1675))|0;
      $1740 = $1679;$1749 = $1687;$storemerge$i$i$i244 = $1680;
      break;
     } else {
      $1681 = (($1675) - ($storemerge$i$i$i245))|0;
      $1682 = $1678 << $storemerge$i$i$i245;
      $1683 = $1671 >>> $1681;
      $1684 = $1683 | $1682;
      $1685 = $1684 >>> 24;
      $1686 = $1685&255;
      HEAP8[$1687>>0] = $1686;
      $1688 = $1684 >>> 16;
      $1689 = $1688&255;
      $1690 = (($1687) + 1|0);
      HEAP8[$1690>>0] = $1689;
      $1691 = $1684 >>> 8;
      $1692 = $1691&255;
      $1693 = (($1687) + 2|0);
      HEAP8[$1693>>0] = $1692;
      $1694 = $1684&255;
      $1695 = (($1687) + 3|0);
      HEAP8[$1695>>0] = $1694;
      $1696 = (($1687) + 4|0);
      $1697 = 1 << $1681;
      $1698 = (($1697) + -1)|0;
      $1699 = $1698 & $1671;
      $1700 = (32 - ($1681))|0;
      $1740 = $1699;$1749 = $1696;$storemerge$i$i$i244 = $1700;
      break;
     }
    } else {
     $1701 = ($1671>>>0)>(65535);
     $1702 = $1671 >>> 16;
     $$$i50 = $1701 ? $1702 : $1671;
     $$1$i51 = $1701 ? 16 : 0;
     $1703 = $$$i50 & 65280;
     $1704 = ($1703|0)==(0);
     if ($1704) {
      $iTmpValue$1$i52 = $$$i50;$n$1$i53 = $$1$i51;
     } else {
      $1705 = $$$i50 >>> 8;
      $1706 = $$1$i51 | 8;
      $iTmpValue$1$i52 = $1705;$n$1$i53 = $1706;
     }
     $1707 = (($iTmpValue$1$i52) + -1)|0;
     $1708 = (29552 + ($1707<<2)|0);
     $1709 = HEAP32[$1708>>2]|0;
     $1710 = $n$1$i53 << 1;
     $1711 = (($1710) + ($1709))|0;
     $1712 = $1711 | 1;
     $1713 = ($storemerge$i$i$i245|0)>($1712|0);
     if ($1713) {
      $1714 = $1678 << $1712;
      $1715 = $1714 | $1671;
      $1716 = (($storemerge$i$i$i245) - ($1712))|0;
      $1740 = $1715;$1749 = $1687;$storemerge$i$i$i244 = $1716;
      break;
     } else {
      $1717 = (($1712) - ($storemerge$i$i$i245))|0;
      $1718 = $1678 << $storemerge$i$i$i245;
      $1719 = $1671 >>> $1717;
      $1720 = $1719 | $1718;
      $1721 = $1720 >>> 24;
      $1722 = $1721&255;
      HEAP8[$1687>>0] = $1722;
      $1723 = $1720 >>> 16;
      $1724 = $1723&255;
      $1725 = (($1687) + 1|0);
      HEAP8[$1725>>0] = $1724;
      $1726 = $1720 >>> 8;
      $1727 = $1726&255;
      $1728 = (($1687) + 2|0);
      HEAP8[$1728>>0] = $1727;
      $1729 = $1720&255;
      $1730 = (($1687) + 3|0);
      HEAP8[$1730>>0] = $1729;
      $1731 = (($1687) + 4|0);
      $1732 = 1 << $1717;
      $1733 = (($1732) + -1)|0;
      $1734 = $1733 & $1671;
      $1735 = (32 - ($1717))|0;
      $1740 = $1734;$1749 = $1731;$storemerge$i$i$i244 = $1735;
      break;
     }
    }
   } while(0);
   $1736 = HEAP32[$509>>2]|0;
   $1737 = $1736 & 255;
   $1738 = ($storemerge$i$i$i244|0)>(1);
   if ($1738) {
    $1739 = $1740 << 1;
    $1741 = $1737 | $1739;
    $1742 = (($storemerge$i$i$i244) + -1)|0;
    $$in337$in = $1736;$1770 = $1741;$1779 = $1749;$storemerge$i$i48 = $1742;
   } else {
    $1743 = (1 - ($storemerge$i$i$i244))|0;
    $1744 = $1740 << $storemerge$i$i$i244;
    $1745 = $1737 >>> $1743;
    $1746 = $1745 | $1744;
    $1747 = $1746 >>> 24;
    $1748 = $1747&255;
    HEAP8[$1749>>0] = $1748;
    $1750 = $1746 >>> 16;
    $1751 = $1750&255;
    $1752 = (($1749) + 1|0);
    HEAP8[$1752>>0] = $1751;
    $1753 = $1746 >>> 8;
    $1754 = $1753&255;
    $1755 = (($1749) + 2|0);
    HEAP8[$1755>>0] = $1754;
    $1756 = $1746&255;
    $1757 = (($1749) + 3|0);
    HEAP8[$1757>>0] = $1756;
    $1758 = (($1749) + 4|0);
    $1759 = 1 << $1743;
    $1760 = (($1759) + 1)|0;
    $1761 = $1737 & $1760;
    $1762 = (32 - ($1743))|0;
    $1763 = HEAP32[$509>>2]|0;
    $$in337$in = $1763;$1770 = $1761;$1779 = $1758;$storemerge$i$i48 = $1762;
   }
   $$in337 = $$in337$in >>> 24;
   $1764 = $$in337&255;
   $1765 = $$in337$in&255;
   $$in = $$in337$in >>> 16;
   $1766 = ($1765<<24>>24)==(0);
   do {
    if ($1766) {
     $$in336 = $$in337$in >>> 8;
     $1767 = $$in336 & 255;
     $1768 = ($storemerge$i$i48|0)>(1);
     if ($1768) {
      $1769 = $1770 << 1;
      $1771 = $1767 | $1769;
      $1772 = (($storemerge$i$i48) + -1)|0;
      $1798 = $$in;$1801 = $1771;$1810 = $1779;$2288 = $1764;$storemerge$i$i$i256 = $1772;
      break;
     } else {
      $1773 = (1 - ($storemerge$i$i48))|0;
      $1774 = $1770 << $storemerge$i$i48;
      $1775 = $1767 >>> $1773;
      $1776 = $1775 | $1774;
      $1777 = $1776 >>> 24;
      $1778 = $1777&255;
      HEAP8[$1779>>0] = $1778;
      $1780 = $1776 >>> 16;
      $1781 = $1780&255;
      $1782 = (($1779) + 1|0);
      HEAP8[$1782>>0] = $1781;
      $1783 = $1776 >>> 8;
      $1784 = $1783&255;
      $1785 = (($1779) + 2|0);
      HEAP8[$1785>>0] = $1784;
      $1786 = $1776&255;
      $1787 = (($1779) + 3|0);
      HEAP8[$1787>>0] = $1786;
      $1788 = (($1779) + 4|0);
      $1789 = 1 << $1773;
      $1790 = (($1789) + 1)|0;
      $1791 = $1767 & $1790;
      $1792 = (32 - ($1773))|0;
      $1793 = HEAP16[$535>>1]|0;
      $1794 = $1793&65535;
      $1795 = ($1793&65535) >>> 8;
      $1796 = $1795&255;
      $1798 = $1794;$1801 = $1791;$1810 = $1788;$2288 = $1796;$storemerge$i$i$i256 = $1792;
      break;
     }
    } else {
     $1798 = $$in;$1801 = $1770;$1810 = $1779;$2288 = $1764;$storemerge$i$i$i256 = $storemerge$i$i48;
    }
   } while(0);
   $1797 = $1798 & 255;
   $1799 = ($storemerge$i$i$i256|0)>(1);
   if ($1799) {
    $1800 = $1801 << 1;
    $1802 = $1797 | $1800;
    $1803 = (($storemerge$i$i$i256) + -1)|0;
    $1825 = $2288;$1828 = $1802;$1837 = $1810;$storemerge$i$i44 = $1803;
   } else {
    $1804 = (1 - ($storemerge$i$i$i256))|0;
    $1805 = $1801 << $storemerge$i$i$i256;
    $1806 = $1797 >>> $1804;
    $1807 = $1806 | $1805;
    $1808 = $1807 >>> 24;
    $1809 = $1808&255;
    HEAP8[$1810>>0] = $1809;
    $1811 = $1807 >>> 16;
    $1812 = $1811&255;
    $1813 = (($1810) + 1|0);
    HEAP8[$1813>>0] = $1812;
    $1814 = $1807 >>> 8;
    $1815 = $1814&255;
    $1816 = (($1810) + 2|0);
    HEAP8[$1816>>0] = $1815;
    $1817 = $1807&255;
    $1818 = (($1810) + 3|0);
    HEAP8[$1818>>0] = $1817;
    $1819 = (($1810) + 4|0);
    $1820 = 1 << $1804;
    $1821 = (($1820) + 1)|0;
    $1822 = $1797 & $1821;
    $1823 = (32 - ($1804))|0;
    $$pre333 = HEAP8[$562>>0]|0;
    $1825 = $$pre333;$1828 = $1822;$1837 = $1819;$storemerge$i$i44 = $1823;
   }
   $1824 = $1825&255;
   $1826 = ($storemerge$i$i44|0)>(1);
   if ($1826) {
    $1827 = $1828 << 1;
    $1829 = $1824 | $1827;
    $1830 = (($storemerge$i$i44) + -1)|0;
    $1851 = $1825;$1861 = $1829;$1870 = $1837;$storemerge$i$i42 = $1830;
   } else {
    $1831 = (1 - ($storemerge$i$i44))|0;
    $1832 = $1828 << $storemerge$i$i44;
    $1833 = $1824 >>> $1831;
    $1834 = $1833 | $1832;
    $1835 = $1834 >>> 24;
    $1836 = $1835&255;
    HEAP8[$1837>>0] = $1836;
    $1838 = $1834 >>> 16;
    $1839 = $1838&255;
    $1840 = (($1837) + 1|0);
    HEAP8[$1840>>0] = $1839;
    $1841 = $1834 >>> 8;
    $1842 = $1841&255;
    $1843 = (($1837) + 2|0);
    HEAP8[$1843>>0] = $1842;
    $1844 = $1834&255;
    $1845 = (($1837) + 3|0);
    HEAP8[$1845>>0] = $1844;
    $1846 = (($1837) + 4|0);
    $1847 = 1 << $1831;
    $1848 = (($1847) + 1)|0;
    $1849 = $1848 & $1824;
    $1850 = (32 - ($1831))|0;
    $$pre334 = HEAP8[$562>>0]|0;
    $1851 = $$pre334;$1861 = $1849;$1870 = $1846;$storemerge$i$i42 = $1850;
   }
   $1852 = ($1851<<24>>24)==(0);
   do {
    if ($1852) {
     $2119 = $1861;$2124 = $1870;$storemerge$i$i$i265 = $storemerge$i$i42;
    } else {
     $1853 = (($sTempSubsetSps) + 300|0);
     $1854 = HEAP32[$1853>>2]|0;
     $1855 = (($1854) + 1)|0;
     $1856 = ($1854>>>0)<(256);
     do {
      if ($1856) {
       $1857 = (29552 + ($1854<<2)|0);
       $1858 = HEAP32[$1857>>2]|0;
       $1859 = ($storemerge$i$i42|0)>($1858|0);
       if ($1859) {
        $1860 = $1861 << $1858;
        $1862 = $1860 | $1855;
        $1863 = (($storemerge$i$i42) - ($1858))|0;
        $1927 = $1862;$1936 = $1870;$storemerge$i$i$i242 = $1863;
        break;
       } else {
        $1864 = (($1858) - ($storemerge$i$i42))|0;
        $1865 = $1861 << $storemerge$i$i42;
        $1866 = $1855 >>> $1864;
        $1867 = $1866 | $1865;
        $1868 = $1867 >>> 24;
        $1869 = $1868&255;
        HEAP8[$1870>>0] = $1869;
        $1871 = $1867 >>> 16;
        $1872 = $1871&255;
        $1873 = (($1870) + 1|0);
        HEAP8[$1873>>0] = $1872;
        $1874 = $1867 >>> 8;
        $1875 = $1874&255;
        $1876 = (($1870) + 2|0);
        HEAP8[$1876>>0] = $1875;
        $1877 = $1867&255;
        $1878 = (($1870) + 3|0);
        HEAP8[$1878>>0] = $1877;
        $1879 = (($1870) + 4|0);
        $1880 = 1 << $1864;
        $1881 = (($1880) + -1)|0;
        $1882 = $1881 & $1855;
        $1883 = (32 - ($1864))|0;
        $1927 = $1882;$1936 = $1879;$storemerge$i$i$i242 = $1883;
        break;
       }
      } else {
       $1884 = ($1855>>>0)>(65535);
       $1885 = $1855 >>> 16;
       $$$i33 = $1884 ? $1885 : $1855;
       $$1$i34 = $1884 ? 16 : 0;
       $1886 = $$$i33 & 65280;
       $1887 = ($1886|0)==(0);
       if ($1887) {
        $iTmpValue$1$i35 = $$$i33;$n$1$i36 = $$1$i34;
       } else {
        $1888 = $$$i33 >>> 8;
        $1889 = $$1$i34 | 8;
        $iTmpValue$1$i35 = $1888;$n$1$i36 = $1889;
       }
       $1890 = (($iTmpValue$1$i35) + -1)|0;
       $1891 = (29552 + ($1890<<2)|0);
       $1892 = HEAP32[$1891>>2]|0;
       $1893 = $n$1$i36 << 1;
       $1894 = (($1893) + ($1892))|0;
       $1895 = $1894 | 1;
       $1896 = ($storemerge$i$i42|0)>($1895|0);
       if ($1896) {
        $1897 = $1861 << $1895;
        $1898 = $1897 | $1855;
        $1899 = (($storemerge$i$i42) - ($1895))|0;
        $1927 = $1898;$1936 = $1870;$storemerge$i$i$i242 = $1899;
        break;
       } else {
        $1900 = (($1895) - ($storemerge$i$i42))|0;
        $1901 = $1861 << $storemerge$i$i42;
        $1902 = $1855 >>> $1900;
        $1903 = $1902 | $1901;
        $1904 = $1903 >>> 24;
        $1905 = $1904&255;
        HEAP8[$1870>>0] = $1905;
        $1906 = $1903 >>> 16;
        $1907 = $1906&255;
        $1908 = (($1870) + 1|0);
        HEAP8[$1908>>0] = $1907;
        $1909 = $1903 >>> 8;
        $1910 = $1909&255;
        $1911 = (($1870) + 2|0);
        HEAP8[$1911>>0] = $1910;
        $1912 = $1903&255;
        $1913 = (($1870) + 3|0);
        HEAP8[$1913>>0] = $1912;
        $1914 = (($1870) + 4|0);
        $1915 = 1 << $1900;
        $1916 = (($1915) + -1)|0;
        $1917 = $1916 & $1855;
        $1918 = (32 - ($1900))|0;
        $1927 = $1917;$1936 = $1914;$storemerge$i$i$i242 = $1918;
        break;
       }
      }
     } while(0);
     $1919 = (($sTempSubsetSps) + 308|0);
     $1920 = HEAP32[$1919>>2]|0;
     $1921 = (($1920) + 1)|0;
     $1922 = ($1920>>>0)<(256);
     do {
      if ($1922) {
       $1923 = (29552 + ($1920<<2)|0);
       $1924 = HEAP32[$1923>>2]|0;
       $1925 = ($storemerge$i$i$i242|0)>($1924|0);
       if ($1925) {
        $1926 = $1927 << $1924;
        $1928 = $1926 | $1921;
        $1929 = (($storemerge$i$i$i242) - ($1924))|0;
        $1993 = $1928;$2002 = $1936;$storemerge$i$i$i258 = $1929;
        break;
       } else {
        $1930 = (($1924) - ($storemerge$i$i$i242))|0;
        $1931 = $1927 << $storemerge$i$i$i242;
        $1932 = $1921 >>> $1930;
        $1933 = $1932 | $1931;
        $1934 = $1933 >>> 24;
        $1935 = $1934&255;
        HEAP8[$1936>>0] = $1935;
        $1937 = $1933 >>> 16;
        $1938 = $1937&255;
        $1939 = (($1936) + 1|0);
        HEAP8[$1939>>0] = $1938;
        $1940 = $1933 >>> 8;
        $1941 = $1940&255;
        $1942 = (($1936) + 2|0);
        HEAP8[$1942>>0] = $1941;
        $1943 = $1933&255;
        $1944 = (($1936) + 3|0);
        HEAP8[$1944>>0] = $1943;
        $1945 = (($1936) + 4|0);
        $1946 = 1 << $1930;
        $1947 = (($1946) + -1)|0;
        $1948 = $1947 & $1921;
        $1949 = (32 - ($1930))|0;
        $1993 = $1948;$2002 = $1945;$storemerge$i$i$i258 = $1949;
        break;
       }
      } else {
       $1950 = ($1921>>>0)>(65535);
       $1951 = $1921 >>> 16;
       $$$i24 = $1950 ? $1951 : $1921;
       $$1$i25 = $1950 ? 16 : 0;
       $1952 = $$$i24 & 65280;
       $1953 = ($1952|0)==(0);
       if ($1953) {
        $iTmpValue$1$i26 = $$$i24;$n$1$i27 = $$1$i25;
       } else {
        $1954 = $$$i24 >>> 8;
        $1955 = $$1$i25 | 8;
        $iTmpValue$1$i26 = $1954;$n$1$i27 = $1955;
       }
       $1956 = (($iTmpValue$1$i26) + -1)|0;
       $1957 = (29552 + ($1956<<2)|0);
       $1958 = HEAP32[$1957>>2]|0;
       $1959 = $n$1$i27 << 1;
       $1960 = (($1959) + ($1958))|0;
       $1961 = $1960 | 1;
       $1962 = ($storemerge$i$i$i242|0)>($1961|0);
       if ($1962) {
        $1963 = $1927 << $1961;
        $1964 = $1963 | $1921;
        $1965 = (($storemerge$i$i$i242) - ($1961))|0;
        $1993 = $1964;$2002 = $1936;$storemerge$i$i$i258 = $1965;
        break;
       } else {
        $1966 = (($1961) - ($storemerge$i$i$i242))|0;
        $1967 = $1927 << $storemerge$i$i$i242;
        $1968 = $1921 >>> $1966;
        $1969 = $1968 | $1967;
        $1970 = $1969 >>> 24;
        $1971 = $1970&255;
        HEAP8[$1936>>0] = $1971;
        $1972 = $1969 >>> 16;
        $1973 = $1972&255;
        $1974 = (($1936) + 1|0);
        HEAP8[$1974>>0] = $1973;
        $1975 = $1969 >>> 8;
        $1976 = $1975&255;
        $1977 = (($1936) + 2|0);
        HEAP8[$1977>>0] = $1976;
        $1978 = $1969&255;
        $1979 = (($1936) + 3|0);
        HEAP8[$1979>>0] = $1978;
        $1980 = (($1936) + 4|0);
        $1981 = 1 << $1966;
        $1982 = (($1981) + -1)|0;
        $1983 = $1982 & $1921;
        $1984 = (32 - ($1966))|0;
        $1993 = $1983;$2002 = $1980;$storemerge$i$i$i258 = $1984;
        break;
       }
      }
     } while(0);
     $1985 = (($sTempSubsetSps) + 304|0);
     $1986 = HEAP32[$1985>>2]|0;
     $1987 = (($1986) + 1)|0;
     $1988 = ($1986>>>0)<(256);
     do {
      if ($1988) {
       $1989 = (29552 + ($1986<<2)|0);
       $1990 = HEAP32[$1989>>2]|0;
       $1991 = ($storemerge$i$i$i258|0)>($1990|0);
       if ($1991) {
        $1992 = $1993 << $1990;
        $1994 = $1992 | $1987;
        $1995 = (($storemerge$i$i$i258) - ($1990))|0;
        $2059 = $1994;$2068 = $2002;$storemerge$i$i$i262 = $1995;
        break;
       } else {
        $1996 = (($1990) - ($storemerge$i$i$i258))|0;
        $1997 = $1993 << $storemerge$i$i$i258;
        $1998 = $1987 >>> $1996;
        $1999 = $1998 | $1997;
        $2000 = $1999 >>> 24;
        $2001 = $2000&255;
        HEAP8[$2002>>0] = $2001;
        $2003 = $1999 >>> 16;
        $2004 = $2003&255;
        $2005 = (($2002) + 1|0);
        HEAP8[$2005>>0] = $2004;
        $2006 = $1999 >>> 8;
        $2007 = $2006&255;
        $2008 = (($2002) + 2|0);
        HEAP8[$2008>>0] = $2007;
        $2009 = $1999&255;
        $2010 = (($2002) + 3|0);
        HEAP8[$2010>>0] = $2009;
        $2011 = (($2002) + 4|0);
        $2012 = 1 << $1996;
        $2013 = (($2012) + -1)|0;
        $2014 = $2013 & $1987;
        $2015 = (32 - ($1996))|0;
        $2059 = $2014;$2068 = $2011;$storemerge$i$i$i262 = $2015;
        break;
       }
      } else {
       $2016 = ($1987>>>0)>(65535);
       $2017 = $1987 >>> 16;
       $$$i15 = $2016 ? $2017 : $1987;
       $$1$i16 = $2016 ? 16 : 0;
       $2018 = $$$i15 & 65280;
       $2019 = ($2018|0)==(0);
       if ($2019) {
        $iTmpValue$1$i17 = $$$i15;$n$1$i18 = $$1$i16;
       } else {
        $2020 = $$$i15 >>> 8;
        $2021 = $$1$i16 | 8;
        $iTmpValue$1$i17 = $2020;$n$1$i18 = $2021;
       }
       $2022 = (($iTmpValue$1$i17) + -1)|0;
       $2023 = (29552 + ($2022<<2)|0);
       $2024 = HEAP32[$2023>>2]|0;
       $2025 = $n$1$i18 << 1;
       $2026 = (($2025) + ($2024))|0;
       $2027 = $2026 | 1;
       $2028 = ($storemerge$i$i$i258|0)>($2027|0);
       if ($2028) {
        $2029 = $1993 << $2027;
        $2030 = $2029 | $1987;
        $2031 = (($storemerge$i$i$i258) - ($2027))|0;
        $2059 = $2030;$2068 = $2002;$storemerge$i$i$i262 = $2031;
        break;
       } else {
        $2032 = (($2027) - ($storemerge$i$i$i258))|0;
        $2033 = $1993 << $storemerge$i$i$i258;
        $2034 = $1987 >>> $2032;
        $2035 = $2034 | $2033;
        $2036 = $2035 >>> 24;
        $2037 = $2036&255;
        HEAP8[$2002>>0] = $2037;
        $2038 = $2035 >>> 16;
        $2039 = $2038&255;
        $2040 = (($2002) + 1|0);
        HEAP8[$2040>>0] = $2039;
        $2041 = $2035 >>> 8;
        $2042 = $2041&255;
        $2043 = (($2002) + 2|0);
        HEAP8[$2043>>0] = $2042;
        $2044 = $2035&255;
        $2045 = (($2002) + 3|0);
        HEAP8[$2045>>0] = $2044;
        $2046 = (($2002) + 4|0);
        $2047 = 1 << $2032;
        $2048 = (($2047) + -1)|0;
        $2049 = $2048 & $1987;
        $2050 = (32 - ($2032))|0;
        $2059 = $2049;$2068 = $2046;$storemerge$i$i$i262 = $2050;
        break;
       }
      }
     } while(0);
     $2051 = (($sTempSubsetSps) + 312|0);
     $2052 = HEAP32[$2051>>2]|0;
     $2053 = (($2052) + 1)|0;
     $2054 = ($2052>>>0)<(256);
     if ($2054) {
      $2055 = (29552 + ($2052<<2)|0);
      $2056 = HEAP32[$2055>>2]|0;
      $2057 = ($storemerge$i$i$i262|0)>($2056|0);
      if ($2057) {
       $2058 = $2059 << $2056;
       $2060 = $2058 | $2053;
       $2061 = (($storemerge$i$i$i262) - ($2056))|0;
       $2119 = $2060;$2124 = $2068;$storemerge$i$i$i265 = $2061;
       break;
      } else {
       $2062 = (($2056) - ($storemerge$i$i$i262))|0;
       $2063 = $2059 << $storemerge$i$i$i262;
       $2064 = $2053 >>> $2062;
       $2065 = $2064 | $2063;
       $2066 = $2065 >>> 24;
       $2067 = $2066&255;
       HEAP8[$2068>>0] = $2067;
       $2069 = $2065 >>> 16;
       $2070 = $2069&255;
       $2071 = (($2068) + 1|0);
       HEAP8[$2071>>0] = $2070;
       $2072 = $2065 >>> 8;
       $2073 = $2072&255;
       $2074 = (($2068) + 2|0);
       HEAP8[$2074>>0] = $2073;
       $2075 = $2065&255;
       $2076 = (($2068) + 3|0);
       HEAP8[$2076>>0] = $2075;
       $2077 = (($2068) + 4|0);
       $2078 = 1 << $2062;
       $2079 = (($2078) + -1)|0;
       $2080 = $2079 & $2053;
       $2081 = (32 - ($2062))|0;
       $2119 = $2080;$2124 = $2077;$storemerge$i$i$i265 = $2081;
       break;
      }
     }
     $2082 = ($2053>>>0)>(65535);
     $2083 = $2053 >>> 16;
     $$$i = $2082 ? $2083 : $2053;
     $$1$i = $2082 ? 16 : 0;
     $2084 = $$$i & 65280;
     $2085 = ($2084|0)==(0);
     if ($2085) {
      $iTmpValue$1$i = $$$i;$n$1$i = $$1$i;
     } else {
      $2086 = $$$i >>> 8;
      $2087 = $$1$i | 8;
      $iTmpValue$1$i = $2086;$n$1$i = $2087;
     }
     $2088 = (($iTmpValue$1$i) + -1)|0;
     $2089 = (29552 + ($2088<<2)|0);
     $2090 = HEAP32[$2089>>2]|0;
     $2091 = $n$1$i << 1;
     $2092 = (($2091) + ($2090))|0;
     $2093 = $2092 | 1;
     $2094 = ($storemerge$i$i$i262|0)>($2093|0);
     if ($2094) {
      $2095 = $2059 << $2093;
      $2096 = $2095 | $2053;
      $2097 = (($storemerge$i$i$i262) - ($2093))|0;
      $2119 = $2096;$2124 = $2068;$storemerge$i$i$i265 = $2097;
      break;
     } else {
      $2098 = (($2093) - ($storemerge$i$i$i262))|0;
      $2099 = $2059 << $storemerge$i$i$i262;
      $2100 = $2053 >>> $2098;
      $2101 = $2100 | $2099;
      $2102 = $2101 >>> 24;
      $2103 = $2102&255;
      HEAP8[$2068>>0] = $2103;
      $2104 = $2101 >>> 16;
      $2105 = $2104&255;
      $2106 = (($2068) + 1|0);
      HEAP8[$2106>>0] = $2105;
      $2107 = $2101 >>> 8;
      $2108 = $2107&255;
      $2109 = (($2068) + 2|0);
      HEAP8[$2109>>0] = $2108;
      $2110 = $2101&255;
      $2111 = (($2068) + 3|0);
      HEAP8[$2111>>0] = $2110;
      $2112 = (($2068) + 4|0);
      $2113 = 1 << $2098;
      $2114 = (($2113) + -1)|0;
      $2115 = $2114 & $2053;
      $2116 = (32 - ($2098))|0;
      $2119 = $2115;$2124 = $2112;$storemerge$i$i$i265 = $2116;
      break;
     }
    }
   } while(0);
   $2117 = ($storemerge$i$i$i265|0)>(1);
   if ($2117) {
    $2118 = $2119 << 1;
    $2120 = (($storemerge$i$i$i265) + -1)|0;
    $2137 = $2118;$2146 = $2124;$storemerge$i$i = $2120;
   } else {
    $2121 = $2119 << $storemerge$i$i$i265;
    $2122 = $2121 >>> 24;
    $2123 = $2122&255;
    HEAP8[$2124>>0] = $2123;
    $2125 = $2121 >>> 16;
    $2126 = $2125&255;
    $2127 = (($2124) + 1|0);
    HEAP8[$2127>>0] = $2126;
    $2128 = $2121 >>> 8;
    $2129 = $2128&255;
    $2130 = (($2124) + 2|0);
    HEAP8[$2130>>0] = $2129;
    $2131 = $2121&255;
    $2132 = (($2124) + 3|0);
    HEAP8[$2132>>0] = $2131;
    $2133 = (($2124) + 4|0);
    $2134 = (($storemerge$i$i$i265) + 31)|0;
    $2137 = 0;$2146 = $2133;$storemerge$i$i = $2134;
   }
   $2135 = ($storemerge$i$i|0)>(1);
   if ($2135) {
    $2136 = $2137 << 1;
    $2138 = $2136 | 1;
    $2139 = (($storemerge$i$i) + -1)|0;
    $2160 = $2138;$2163 = $2146;$storemerge$i$i$i = $2139;
   } else {
    $2140 = (1 - ($storemerge$i$i))|0;
    $2141 = $2137 << $storemerge$i$i;
    $2142 = 1 >>> $2140;
    $2143 = $2142 | $2141;
    $2144 = $2143 >>> 24;
    $2145 = $2144&255;
    HEAP8[$2146>>0] = $2145;
    $2147 = $2143 >>> 16;
    $2148 = $2147&255;
    $2149 = (($2146) + 1|0);
    HEAP8[$2149>>0] = $2148;
    $2150 = $2143 >>> 8;
    $2151 = $2150&255;
    $2152 = (($2146) + 2|0);
    HEAP8[$2152>>0] = $2151;
    $2153 = $2143&255;
    $2154 = (($2146) + 3|0);
    HEAP8[$2154>>0] = $2153;
    $2155 = (($2146) + 4|0);
    $2156 = ($storemerge$i$i|0)!=(1);
    $2157 = $2156&1;
    $2158 = (32 - ($2140))|0;
    $2160 = $2157;$2163 = $2155;$storemerge$i$i$i = $2158;
   }
   $2159 = $2160 << $storemerge$i$i$i;
   $2161 = $2159 >>> 24;
   $2162 = $2161&255;
   HEAP8[$2163>>0] = $2162;
   $2164 = $2159 >>> 16;
   $2165 = $2164&255;
   $2166 = (($2163) + 1|0);
   HEAP8[$2166>>0] = $2165;
   $2167 = $2159 >>> 8;
   $2168 = $2167&255;
   $2169 = (($2163) + 2|0);
   HEAP8[$2169>>0] = $2168;
   $2170 = $2159&255;
   $2171 = (($2163) + 3|0);
   HEAP8[$2171>>0] = $2170;
   $2172 = (($storemerge$i$i$i|0) / 8)&-1;
   $2173 = (4 - ($2172))|0;
   $2174 = (($2163) + ($2173)|0);
   $2175 = $2174;
   $2176 = $657;
   $2177 = (($2175) - ($2176))|0;
   $2178 = ((($pCtx) + (($231*136)|0)|0) + 247221|0);
   __ZN7WelsDec9RBSP2EBSPEPhS0_i($2178,$657,$2177);
   $2179 = (($2177) + 5)|0;
   $2180 = $2179&65535;
   $2181 = ((($pCtx) + (($231*136)|0)|0) + 247348|0);
   HEAP16[$2181>>1] = $2180;
   __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($656,$657,2448);
  }
 } while(0);
 do {
  if ($2) {
   if (!((($5|0) == 83) | (($5|0) == 86))) {
    $2182 = HEAP32[$441>>2]|0;
    $2183 = $2182 << 4;
    HEAP32[$pPicWidth>>2] = $2183;
    $2184 = HEAP32[$457>>2]|0;
    $2185 = $2184 << 4;
    HEAP32[$pPicHeight>>2] = $2185;
    label = 376;
    break;
   }
   $2186 = (__ZN7WelsDec15DecodeSpsSvcExtEPNS_21TagWelsDecoderContextEPNS_12TagSubsetSpsEPN10WelsCommon15TagBitStringAuxE($pCtx,$sTempSubsetSps,$pBsAux)|0);
   $2187 = ($2186|0)==(0);
   if (!($2187)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $2188 = HEAP32[$3>>2]|0;
   $2189 = $2188 >>> 31;
   $2190 = HEAP32[$6>>2]|0;
   $2191 = HEAP32[$pBsAux>>2]|0;
   $2192 = $2191;
   $2193 = HEAP32[$10>>2]|0;
   $2194 = $2188 << 1;
   HEAP32[$3>>2] = $2194;
   $2195 = HEAP32[$13>>2]|0;
   $2196 = (($2195) + 1)|0;
   HEAP32[$13>>2] = $2196;
   $2197 = ($2195|0)>(-1);
   do {
    if ($2197) {
     $2198 = $2193;
     $2199 = $2190;
     $2200 = (($2198) - ($2192))|0;
     $2201 = (($2199) + 1)|0;
     $2202 = (($2201) - ($2192))|0;
     $2203 = ($2200|0)>($2202|0);
     if ($2203) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $2204 = HEAP8[$2193>>0]|0;
      $2205 = $2204&255;
      $2206 = $2205 << 8;
      $2207 = (($2193) + 1|0);
      $2208 = HEAP8[$2207>>0]|0;
      $2209 = $2208&255;
      $2210 = $2206 | $2209;
      $2211 = $2210 << $2196;
      $2212 = $2211 | $2194;
      HEAP32[$3>>2] = $2212;
      $2213 = (($2195) + -15)|0;
      HEAP32[$13>>2] = $2213;
      $2214 = (($2193) + 2|0);
      HEAP32[$10>>2] = $2214;
      break;
     }
    }
   } while(0);
   HEAP32[$uiCode>>2] = $2189;
   $2215 = (($sTempSubsetSps) + 860|0);
   $2216 = $2189&255;
   HEAP8[$2215>>0] = $2216;
   label = 373;
  } else {
   label = 373;
  }
 } while(0);
 do {
  if ((label|0) == 373) {
   if ((($5|0) == 83) | (($5|0) == 86)) {
    $2217 = (($pCtx) + 241949|0);
    HEAP8[$2217>>0] = 0;
   }
   $2218 = HEAP32[$441>>2]|0;
   $2219 = $2218 << 4;
   HEAP32[$pPicWidth>>2] = $2219;
   $2220 = HEAP32[$457>>2]|0;
   $2221 = $2220 << 4;
   HEAP32[$pPicHeight>>2] = $2221;
   if ($2) {
    label = 376;
    break;
   }
   $2223 = ((($pCtx) + (($231*832)|0)|0) + 6192|0);
   $pTmpSps$0 = $2223;
  }
 } while(0);
 if ((label|0) == 376) {
  $2222 = ((($pCtx) + (($231*864)|0)|0) + 209452|0);
  $pTmpSps$0 = $2222;
 }
 $2224 = (__ZN7WelsDec14CheckSpsActiveEPNS_21TagWelsDecoderContextEPNS_6TagSpsEb($pCtx,$pTmpSps$0,$2)|0);
 if (!($2224)) {
  if ($2) {
   $2277 = ((($pCtx) + (($231*864)|0)|0) + 209452|0);
   _memcpy(($2277|0),($sTempSubsetSps|0),864)|0;
   $2278 = ((($pCtx) + ($231)|0) + 242004|0);
   HEAP8[$2278>>0] = 1;
   $2279 = (($pCtx) + 241955|0);
   HEAP8[$2279>>0] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $2280 = ((($pCtx) + (($231*832)|0)|0) + 6192|0);
   _memcpy(($2280|0),($sTempSubsetSps|0),832)|0;
   $2281 = ((($pCtx) + ($231)|0) + 241972|0);
   HEAP8[$2281>>0] = 1;
   $2282 = (($pCtx) + 241954|0);
   HEAP8[$2282>>0] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 if ($2) {
  $2225 = ((($pCtx) + (($231*864)|0)|0) + 209452|0);
  $2226 = (_memcmp($2225,$sTempSubsetSps,864)|0);
  $2227 = ($2226|0)==(0);
  if ($2227) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $2228 = (($pCtx) + 241888|0);
  $2229 = HEAP32[$2228>>2]|0;
  $2230 = (($2229) + 4|0);
  $2231 = HEAP32[$2230>>2]|0;
  $2232 = ($2231|0)==(0);
  if (!($2232)) {
   $2233 = (($pCtx) + 237100|0);
   _memcpy(($2233|0),($sTempSubsetSps|0),864)|0;
   $2234 = (($pCtx) + 317168|0);
   HEAP8[$2234>>0] = 1;
   $2235 = HEAP32[$2230>>2]|0;
   $2236 = (($2235) + -1)|0;
   $2237 = (($2229) + 20|0);
   HEAP32[$2237>>2] = $2236;
   $2238 = (($pCtx) + 242336|0);
   $2239 = HEAP32[$2238>>2]|0;
   $2240 = $2239 | 4;
   HEAP32[$2238>>2] = $2240;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $2241 = (($pCtx) + 241924|0);
  $2242 = HEAP32[$2241>>2]|0;
  $2243 = ($2242|0)==(0|0);
  do {
   if (!($2243)) {
    $2244 = HEAP32[$2242>>2]|0;
    $2245 = HEAP32[$sTempSubsetSps>>2]|0;
    $2246 = ($2244|0)==($2245|0);
    if (!($2246)) {
     break;
    }
    $2247 = (($pCtx) + 237100|0);
    _memcpy(($2247|0),($sTempSubsetSps|0),864)|0;
    $2248 = (($pCtx) + 242336|0);
    $2249 = HEAP32[$2248>>2]|0;
    $2250 = $2249 | 4;
    HEAP32[$2248>>2] = $2250;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  _memcpy(($2225|0),($sTempSubsetSps|0),864)|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $2251 = ((($pCtx) + (($231*832)|0)|0) + 6192|0);
  $2252 = (_memcmp($2251,$sTempSubsetSps,832)|0);
  $2253 = ($2252|0)==(0);
  if ($2253) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $2254 = (($pCtx) + 241888|0);
  $2255 = HEAP32[$2254>>2]|0;
  $2256 = (($2255) + 4|0);
  $2257 = HEAP32[$2256>>2]|0;
  $2258 = ($2257|0)==(0);
  if (!($2258)) {
   $2259 = (($pCtx) + 32816|0);
   _memcpy(($2259|0),($sTempSubsetSps|0),832)|0;
   $2260 = (($pCtx) + 242336|0);
   $2261 = HEAP32[$2260>>2]|0;
   $2262 = $2261 | 2;
   HEAP32[$2260>>2] = $2262;
   $2263 = (($pCtx) + 317168|0);
   HEAP8[$2263>>0] = 1;
   $2264 = HEAP32[$2256>>2]|0;
   $2265 = (($2264) + -1)|0;
   $2266 = (($2255) + 20|0);
   HEAP32[$2266>>2] = $2265;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $2267 = (($pCtx) + 241924|0);
  $2268 = HEAP32[$2267>>2]|0;
  $2269 = ($2268|0)==(0|0);
  do {
   if (!($2269)) {
    $2270 = HEAP32[$2268>>2]|0;
    $2271 = HEAP32[$sTempSubsetSps>>2]|0;
    $2272 = ($2270|0)==($2271|0);
    if (!($2272)) {
     break;
    }
    $2273 = (($pCtx) + 32816|0);
    _memcpy(($2273|0),($sTempSubsetSps|0),832)|0;
    $2274 = (($pCtx) + 242336|0);
    $2275 = HEAP32[$2274>>2]|0;
    $2276 = $2275 | 2;
    HEAP32[$2274>>2] = $2276;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  _memcpy(($2251|0),($sTempSubsetSps|0),832)|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec8ParsePpsEPNS_21TagWelsDecoderContextEPNS_6TagPpsEPN10WelsCommon15TagBitStringAuxEPhi($pCtx,$pPpsList,$pBsAux,$pSrcNal,$kSrcNalLen) {
 $pCtx = $pCtx|0;
 $pPpsList = $pPpsList|0;
 $pBsAux = $pBsAux|0;
 $pSrcNal = $pSrcNal|0;
 $kSrcNalLen = $kSrcNalLen|0;
 var $$0 = 0, $$neg1$i = 0, $$ph = 0, $$ph37 = 0, $$ph39 = 0, $$ph39$off = 0, $$ph46 = 0, $$ph46$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $iStartDeltaByte$0 = 0, $iTmp$059 = 0, $iTrailingZeroByte$0 = 0, $or$cond = 0, $or$cond63 = 0, $sTempPps = 0, $uiCode = 0, $uiCodeNum$i = 0, $uiCodeNum$i20 = 0, $uiCodeNum$i24 = 0, $vararg_buffer13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0;
 $vararg_buffer13 = sp;
 $uiCodeNum$i24 = sp + 700|0;
 $uiCodeNum$i20 = sp + 696|0;
 $uiCodeNum$i = sp + 692|0;
 $sTempPps = sp + 8|0;
 $uiCode = sp + 4|0;
 $0 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$uiCode>>2]|0;
 $3 = ($2>>>0)>(255);
 if ($3) {
  $$0 = 1005;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($sTempPps|0),0,684)|0;
 $4 = (($sTempPps) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$uiCode>>2]|0;
 HEAP32[$sTempPps>>2] = $7;
 $8 = ($7|0)>(31);
 if ($8) {
  $$0 = 1004;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($pBsAux) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >>> 31;
 $12 = (($pBsAux) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$pBsAux>>2]|0;
 $15 = $14;
 $16 = (($pBsAux) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $10 << 1;
 HEAP32[$9>>2] = $18;
 $19 = (($pBsAux) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$19>>2] = $21;
 $22 = ($20|0)>(-1);
 do {
  if ($22) {
   $23 = $17;
   $24 = $13;
   $25 = (($23) - ($15))|0;
   $26 = (($24) + 1)|0;
   $27 = (($26) - ($15))|0;
   $28 = ($25|0)>($27|0);
   if ($28) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $29 = HEAP8[$17>>0]|0;
    $30 = $29&255;
    $31 = $30 << 8;
    $32 = (($17) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = $31 | $34;
    $36 = $35 << $21;
    $37 = $36 | $18;
    HEAP32[$9>>2] = $37;
    $38 = (($20) + -15)|0;
    HEAP32[$19>>2] = $38;
    $39 = (($17) + 2|0);
    HEAP32[$16>>2] = $39;
    $43 = $37;$46 = $38;$48 = $39;
    break;
   }
  } else {
   $43 = $18;$46 = $21;$48 = $17;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $11;
 $40 = (($sTempPps) + 176|0);
 $41 = $11&255;
 HEAP8[$40>>0] = $41;
 $42 = $43 >>> 31;
 $44 = $43 << 1;
 HEAP32[$9>>2] = $44;
 $45 = (($46) + 1)|0;
 HEAP32[$19>>2] = $45;
 $47 = ($46|0)>(-1);
 do {
  if ($47) {
   $49 = $48;
   $50 = $13;
   $51 = (($49) - ($15))|0;
   $52 = (($50) + 1)|0;
   $53 = (($52) - ($15))|0;
   $54 = ($51|0)>($53|0);
   if ($54) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $55 = HEAP8[$48>>0]|0;
    $56 = $55&255;
    $57 = $56 << 8;
    $58 = (($48) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $57 | $60;
    $62 = $61 << $45;
    $63 = $62 | $44;
    HEAP32[$9>>2] = $63;
    $64 = (($46) + -15)|0;
    HEAP32[$19>>2] = $64;
    $65 = (($48) + 2|0);
    HEAP32[$16>>2] = $65;
    break;
   }
  }
 } while(0);
 HEAP32[$uiCode>>2] = $42;
 $66 = (($sTempPps) + 177|0);
 $67 = $42&255;
 HEAP8[$66>>0] = $67;
 $68 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $69 = ($68|0)==(0);
 if (!($69)) {
  $$0 = $68;
  STACKTOP = sp;return ($$0|0);
 }
 $70 = HEAP32[$uiCode>>2]|0;
 $71 = (($70) + 1)|0;
 $72 = (($sTempPps) + 8|0);
 HEAP32[$72>>2] = $71;
 $73 = ($71>>>0)>(8);
 if ($73) {
  $$0 = 1013;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = ($71>>>0)>(1);
 L31: do {
  if ($74) {
   $75 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
   $76 = ($75|0)==(0);
   if (!($76)) {
    $$0 = $75;
    STACKTOP = sp;return ($$0|0);
   }
   $77 = HEAP32[$uiCode>>2]|0;
   $78 = (($sTempPps) + 12|0);
   HEAP32[$78>>2] = $77;
   $79 = ($77>>>0)>(1);
   if ($79) {
    HEAP32[$vararg_buffer13>>2] = $77;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,2480,$vararg_buffer13);
    $$0 = 263204;
    STACKTOP = sp;return ($$0|0);
   }
   $cond = ($77|0)!=(0);
   $80 = HEAP32[$72>>2]|0;
   $81 = ($80|0)==(0);
   $or$cond63 = $cond | $81;
   if (!($or$cond63)) {
    $iTmp$059 = 0;
    while(1) {
     $82 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
     $83 = ($82|0)==(0);
     if (!($83)) {
      $$0 = $82;
      break;
     }
     $84 = HEAP32[$uiCode>>2]|0;
     $85 = (($84) + 1)|0;
     $86 = ((($sTempPps) + ($iTmp$059<<2)|0) + 16|0);
     HEAP32[$86>>2] = $85;
     $87 = (($iTmp$059) + 1)|0;
     $88 = HEAP32[$72>>2]|0;
     $89 = ($87>>>0)<($88>>>0);
     if ($89) {
      $iTmp$059 = $87;
     } else {
      break L31;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $90 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $91 = ($90|0)==(0);
 if (!($91)) {
  $$0 = $90;
  STACKTOP = sp;return ($$0|0);
 }
 $92 = HEAP32[$uiCode>>2]|0;
 $93 = (($92) + 1)|0;
 $94 = (($sTempPps) + 152|0);
 HEAP32[$94>>2] = $93;
 $95 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCode)|0);
 $96 = ($95|0)==(0);
 if (!($96)) {
  $$0 = $95;
  STACKTOP = sp;return ($$0|0);
 }
 $97 = HEAP32[$uiCode>>2]|0;
 $98 = (($97) + 1)|0;
 $99 = (($sTempPps) + 156|0);
 HEAP32[$99>>2] = $98;
 $100 = HEAP32[$94>>2]|0;
 $101 = ($100>>>0)>(16);
 $102 = ($98>>>0)>(16);
 $or$cond = $101 | $102;
 if ($or$cond) {
  $$0 = 1010;
  STACKTOP = sp;return ($$0|0);
 }
 $103 = HEAP32[$9>>2]|0;
 $104 = $103 >>> 31;
 $105 = HEAP32[$12>>2]|0;
 $106 = HEAP32[$pBsAux>>2]|0;
 $107 = $106;
 $108 = HEAP32[$16>>2]|0;
 $109 = $103 << 1;
 HEAP32[$9>>2] = $109;
 $110 = HEAP32[$19>>2]|0;
 $111 = (($110) + 1)|0;
 HEAP32[$19>>2] = $111;
 $112 = ($110|0)>(-1);
 do {
  if ($112) {
   $113 = $108;
   $114 = $105;
   $115 = (($113) - ($107))|0;
   $116 = (($114) + 1)|0;
   $117 = (($116) - ($107))|0;
   $118 = ($115|0)>($117|0);
   if ($118) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $119 = HEAP8[$108>>0]|0;
    $120 = $119&255;
    $121 = $120 << 8;
    $122 = (($108) + 1|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = $121 | $124;
    $126 = $125 << $111;
    $127 = $126 | $109;
    HEAP32[$9>>2] = $127;
    $128 = (($110) + -15)|0;
    HEAP32[$19>>2] = $128;
    $129 = (($108) + 2|0);
    HEAP32[$16>>2] = $129;
    $133 = $127;$136 = $128;$138 = $129;
    break;
   }
  } else {
   $133 = $109;$136 = $111;$138 = $108;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $104;
 $130 = (($sTempPps) + 182|0);
 $131 = $104&255;
 HEAP8[$130>>0] = $131;
 $132 = $133 >>> 30;
 $134 = $133 << 2;
 HEAP32[$9>>2] = $134;
 $135 = (($136) + 2)|0;
 HEAP32[$19>>2] = $135;
 $137 = ($135|0)>(0);
 do {
  if ($137) {
   $139 = $138;
   $140 = $105;
   $141 = (($139) - ($107))|0;
   $142 = (($140) + 1)|0;
   $143 = (($142) - ($107))|0;
   $144 = ($141|0)>($143|0);
   if ($144) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $145 = HEAP8[$138>>0]|0;
    $146 = $145&255;
    $147 = $146 << 8;
    $148 = (($138) + 1|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $149&255;
    $151 = $147 | $150;
    $152 = $151 << $135;
    $153 = $152 | $134;
    HEAP32[$9>>2] = $153;
    $154 = (($136) + -14)|0;
    HEAP32[$19>>2] = $154;
    $155 = (($138) + 2|0);
    HEAP32[$16>>2] = $155;
    break;
   }
  }
 } while(0);
 HEAP32[$uiCode>>2] = $132;
 $156 = $132&255;
 $157 = (($sTempPps) + 183|0);
 HEAP8[$157>>0] = $156;
 $158 = ($132|0)==(0);
 if (!($158)) {
  HEAP32[$vararg_buffer13>>2] = $132;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,2544,$vararg_buffer13);
  $$0 = 263211;
  STACKTOP = sp;return ($$0|0);
 }
 $159 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCodeNum$i24)|0);
 $160 = ($159|0)==(0);
 if (!($160)) {
  $$0 = $159;
  STACKTOP = sp;return ($$0|0);
 }
 $161 = HEAP32[$uiCodeNum$i24>>2]|0;
 $162 = $161 & 1;
 $163 = ($162|0)==(0);
 if ($163) {
  $166 = $161 >>> 1;
  $167 = (0 - ($166))|0;
  $$ph = $167;
 } else {
  $164 = (($161) + 1)|0;
  $165 = $164 >>> 1;
  $$ph = $165;
 }
 $168 = (($$ph) + 26)|0;
 $169 = (($sTempPps) + 160|0);
 HEAP32[$169>>2] = $168;
 $170 = ($168>>>0)>(51);
 if ($170) {
  HEAP32[$vararg_buffer13>>2] = $168;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,2600,$vararg_buffer13);
  $$0 = 263174;
  STACKTOP = sp;return ($$0|0);
 }
 $171 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$vararg_buffer13)|0);
 $172 = ($171|0)==(0);
 if (!($172)) {
  $$0 = $171;
  STACKTOP = sp;return ($$0|0);
 }
 $173 = HEAP32[$vararg_buffer13>>2]|0;
 $174 = $173 & 1;
 $175 = ($174|0)==(0);
 if ($175) {
  $178 = $173 >>> 1;
  $179 = (0 - ($178))|0;
  $$ph37 = $179;
 } else {
  $176 = (($173) + 1)|0;
  $177 = $176 >>> 1;
  $$ph37 = $177;
 }
 $180 = (($$ph37) + 26)|0;
 $181 = (($sTempPps) + 164|0);
 HEAP32[$181>>2] = $180;
 $182 = ($180>>>0)>(51);
 if ($182) {
  HEAP32[$vararg_buffer13>>2] = $180;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,2648,$vararg_buffer13);
  $$0 = 263172;
  STACKTOP = sp;return ($$0|0);
 }
 $183 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCodeNum$i20)|0);
 $184 = ($183|0)==(0);
 if (!($184)) {
  $$0 = $183;
  STACKTOP = sp;return ($$0|0);
 }
 $185 = HEAP32[$uiCodeNum$i20>>2]|0;
 $186 = $185 & 1;
 $187 = ($186|0)==(0);
 if ($187) {
  $190 = $185 >>> 1;
  $191 = (0 - ($190))|0;
  $$ph39 = $191;
 } else {
  $188 = (($185) + 1)|0;
  $189 = $188 >>> 1;
  $$ph39 = $189;
 }
 $192 = (($sTempPps) + 168|0);
 HEAP32[$192>>2] = $$ph39;
 $$ph39$off = (($$ph39) + 12)|0;
 $193 = ($$ph39$off>>>0)>(24);
 if ($193) {
  HEAP32[$vararg_buffer13>>2] = $$ph39;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,2696,$vararg_buffer13);
  $$0 = 263173;
  STACKTOP = sp;return ($$0|0);
 }
 $194 = (($sTempPps) + 172|0);
 HEAP32[$194>>2] = $$ph39;
 $195 = HEAP32[$9>>2]|0;
 $196 = $195 >>> 31;
 $197 = HEAP32[$12>>2]|0;
 $198 = HEAP32[$pBsAux>>2]|0;
 $199 = $198;
 $200 = HEAP32[$16>>2]|0;
 $201 = $195 << 1;
 HEAP32[$9>>2] = $201;
 $202 = HEAP32[$19>>2]|0;
 $203 = (($202) + 1)|0;
 HEAP32[$19>>2] = $203;
 $204 = ($202|0)>(-1);
 do {
  if ($204) {
   $205 = $200;
   $206 = $197;
   $207 = (($205) - ($199))|0;
   $208 = (($206) + 1)|0;
   $209 = (($208) - ($199))|0;
   $210 = ($207|0)>($209|0);
   if ($210) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $211 = HEAP8[$200>>0]|0;
    $212 = $211&255;
    $213 = $212 << 8;
    $214 = (($200) + 1|0);
    $215 = HEAP8[$214>>0]|0;
    $216 = $215&255;
    $217 = $213 | $216;
    $218 = $217 << $203;
    $219 = $218 | $201;
    HEAP32[$9>>2] = $219;
    $220 = (($202) + -15)|0;
    HEAP32[$19>>2] = $220;
    $221 = (($200) + 2|0);
    HEAP32[$16>>2] = $221;
    $225 = $219;$228 = $220;$230 = $221;
    break;
   }
  } else {
   $225 = $201;$228 = $203;$230 = $200;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $196;
 $222 = (($sTempPps) + 179|0);
 $223 = $196&255;
 HEAP8[$222>>0] = $223;
 $224 = $225 >>> 31;
 $226 = $225 << 1;
 HEAP32[$9>>2] = $226;
 $227 = (($228) + 1)|0;
 HEAP32[$19>>2] = $227;
 $229 = ($228|0)>(-1);
 do {
  if ($229) {
   $231 = $230;
   $232 = $197;
   $233 = (($231) - ($199))|0;
   $234 = (($232) + 1)|0;
   $235 = (($234) - ($199))|0;
   $236 = ($233|0)>($235|0);
   if ($236) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $237 = HEAP8[$230>>0]|0;
    $238 = $237&255;
    $239 = $238 << 8;
    $240 = (($230) + 1|0);
    $241 = HEAP8[$240>>0]|0;
    $242 = $241&255;
    $243 = $239 | $242;
    $244 = $243 << $227;
    $245 = $244 | $226;
    HEAP32[$9>>2] = $245;
    $246 = (($228) + -15)|0;
    HEAP32[$19>>2] = $246;
    $247 = (($230) + 2|0);
    HEAP32[$16>>2] = $247;
    $251 = $245;$254 = $246;$256 = $247;
    break;
   }
  } else {
   $251 = $226;$254 = $227;$256 = $230;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $224;
 $248 = (($sTempPps) + 180|0);
 $249 = $224&255;
 HEAP8[$248>>0] = $249;
 $250 = $251 >>> 31;
 $252 = $251 << 1;
 HEAP32[$9>>2] = $252;
 $253 = (($254) + 1)|0;
 HEAP32[$19>>2] = $253;
 $255 = ($254|0)>(-1);
 do {
  if ($255) {
   $257 = $256;
   $258 = $197;
   $259 = (($257) - ($199))|0;
   $260 = (($258) + 1)|0;
   $261 = (($260) - ($199))|0;
   $262 = ($259|0)>($261|0);
   if ($262) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $263 = HEAP8[$256>>0]|0;
    $264 = $263&255;
    $265 = $264 << 8;
    $266 = (($256) + 1|0);
    $267 = HEAP8[$266>>0]|0;
    $268 = $267&255;
    $269 = $265 | $268;
    $270 = $269 << $253;
    $271 = $270 | $252;
    HEAP32[$9>>2] = $271;
    $272 = (($254) + -15)|0;
    HEAP32[$19>>2] = $272;
    $273 = (($256) + 2|0);
    HEAP32[$16>>2] = $273;
    $278 = $273;$283 = $272;$287 = $271;
    break;
   }
  } else {
   $278 = $256;$283 = $253;$287 = $252;
  }
 } while(0);
 HEAP32[$uiCode>>2] = $250;
 $274 = (($sTempPps) + 181|0);
 $275 = $250&255;
 HEAP8[$274>>0] = $275;
 $276 = (($pBsAux) + 8|0);
 $277 = HEAP32[$276>>2]|0;
 $279 = $278;
 $280 = (($279) - ($199))|0;
 $281 = $280 << 3;
 $$neg1$i = (($277) + 16)|0;
 $282 = (($$neg1$i) - ($283))|0;
 $284 = (($282) - ($281))|0;
 $285 = ($284|0)>(1);
 do {
  if ($285) {
   $286 = $287 >>> 31;
   $288 = $287 << 1;
   HEAP32[$9>>2] = $288;
   $289 = (($283) + 1)|0;
   HEAP32[$19>>2] = $289;
   $290 = ($283|0)>(-1);
   do {
    if ($290) {
     $291 = $197;
     $292 = (1 - ($199))|0;
     $293 = (($292) + ($291))|0;
     $294 = ($280|0)>($293|0);
     if ($294) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $295 = HEAP8[$278>>0]|0;
      $296 = $295&255;
      $297 = $296 << 8;
      $298 = (($278) + 1|0);
      $299 = HEAP8[$298>>0]|0;
      $300 = $299&255;
      $301 = $297 | $300;
      $302 = $301 << $289;
      $303 = $302 | $288;
      HEAP32[$9>>2] = $303;
      $304 = (($283) + -15)|0;
      HEAP32[$19>>2] = $304;
      $305 = (($278) + 2|0);
      HEAP32[$16>>2] = $305;
      $309 = $303;$312 = $304;$314 = $305;
      break;
     }
    } else {
     $309 = $288;$312 = $289;$314 = $278;
    }
   } while(0);
   HEAP32[$uiCode>>2] = $286;
   $306 = (($sTempPps) + 184|0);
   $307 = $286&255;
   HEAP8[$306>>0] = $307;
   $308 = $309 >>> 31;
   $310 = $309 << 1;
   HEAP32[$9>>2] = $310;
   $311 = (($312) + 1)|0;
   HEAP32[$19>>2] = $311;
   $313 = ($312|0)>(-1);
   do {
    if ($313) {
     $315 = $314;
     $316 = $197;
     $317 = (($315) - ($199))|0;
     $318 = (($316) + 1)|0;
     $319 = (($318) - ($199))|0;
     $320 = ($317|0)>($319|0);
     if ($320) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $321 = HEAP8[$314>>0]|0;
      $322 = $321&255;
      $323 = $322 << 8;
      $324 = (($314) + 1|0);
      $325 = HEAP8[$324>>0]|0;
      $326 = $325&255;
      $327 = $323 | $326;
      $328 = $327 << $311;
      $329 = $328 | $310;
      HEAP32[$9>>2] = $329;
      $330 = (($312) + -15)|0;
      HEAP32[$19>>2] = $330;
      $331 = (($314) + 2|0);
      HEAP32[$16>>2] = $331;
      break;
     }
    }
   } while(0);
   HEAP32[$uiCode>>2] = $308;
   $332 = ($308|0)==(0);
   $333 = (($sTempPps) + 185|0);
   $334 = $308&255;
   HEAP8[$333>>0] = $334;
   do {
    if (!($332)) {
     $335 = HEAP32[$sTempPps>>2]|0;
     $336 = ((($pCtx) + ($335)|0) + 241972|0);
     $337 = HEAP8[$336>>0]|0;
     $338 = ($337<<24>>24)==(0);
     if ($338) {
      $345 = (($pCtx) + 562525|0);
      HEAP8[$345>>0] = 1;
      $346 = (($sTempPps) + 186|0);
      $347 = (($sTempPps) + 198|0);
      $348 = (($sTempPps) + 294|0);
      $349 = (__ZN7WelsDec16ParseScalingListEPNS_6TagSpsEPN10WelsCommon15TagBitStringAuxEbPbPA16_hPA64_h(0,$pBsAux,1,$346,$347,$348)|0);
      $350 = ($349|0)==(0);
      if ($350) {
       break;
      } else {
       $$0 = $349;
      }
      STACKTOP = sp;return ($$0|0);
     } else {
      $339 = ((($pCtx) + (($335*832)|0)|0) + 6192|0);
      $340 = (($sTempPps) + 186|0);
      $341 = (($sTempPps) + 198|0);
      $342 = (($sTempPps) + 294|0);
      $343 = (__ZN7WelsDec16ParseScalingListEPNS_6TagSpsEPN10WelsCommon15TagBitStringAuxEbPbPA16_hPA64_h($339,$pBsAux,1,$340,$341,$342)|0);
      $344 = ($343|0)==(0);
      if ($344) {
       break;
      } else {
       $$0 = $343;
      }
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   $351 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBsAux,$uiCodeNum$i)|0);
   $352 = ($351|0)==(0);
   if (!($352)) {
    $$0 = $351;
    STACKTOP = sp;return ($$0|0);
   }
   $353 = HEAP32[$uiCodeNum$i>>2]|0;
   $354 = $353 & 1;
   $355 = ($354|0)==(0);
   if ($355) {
    $358 = $353 >>> 1;
    $359 = (0 - ($358))|0;
    $$ph46 = $359;
   } else {
    $356 = (($353) + 1)|0;
    $357 = $356 >>> 1;
    $$ph46 = $357;
   }
   HEAP32[$194>>2] = $$ph46;
   $$ph46$off = (($$ph46) + 12)|0;
   $360 = ($$ph46$off>>>0)>(24);
   if (!($360)) {
    break;
   }
   HEAP32[$vararg_buffer13>>2] = $$ph46;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,2696,$vararg_buffer13);
   $$0 = 263173;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $361 = (($pCtx) + 241888|0);
 $362 = HEAP32[$361>>2]|0;
 $363 = (($362) + 4|0);
 $364 = HEAP32[$363>>2]|0;
 $365 = ($364|0)==(0);
 L153: do {
  if ($365) {
   $385 = ((($pCtx) + (($2*684)|0)|0) + 33648|0);
   _memcpy(($385|0),($sTempPps|0),684)|0;
   $386 = ((($pCtx) + ($2)|0) + 242036|0);
   HEAP8[$386>>0] = 1;
  } else {
   $366 = (($364) + -1)|0;
   $367 = HEAP32[$362>>2]|0;
   $368 = (($367) + ($366<<2)|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = (($369) + 92|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = ((($pCtx) + (($2*684)|0)|0) + 33648|0);
   $373 = ($371|0)==($372|0);
   do {
    if ($373) {
     $374 = (_memcmp($372,$sTempPps,684)|0);
     $375 = ($374|0)==(0);
     if ($375) {
      break;
     }
     $376 = (($pCtx) + 208752|0);
     _memcpy(($376|0),($sTempPps|0),684)|0;
     $377 = (($pCtx) + 242336|0);
     $378 = HEAP32[$377>>2]|0;
     $379 = $378 | 1;
     HEAP32[$377>>2] = $379;
     $380 = (($pCtx) + 317168|0);
     HEAP8[$380>>0] = 1;
     $381 = HEAP32[$363>>2]|0;
     $382 = (($381) + -1)|0;
     $383 = (($362) + 20|0);
     HEAP32[$383>>2] = $382;
     break L153;
    }
   } while(0);
   _memcpy(($372|0),($sTempPps|0),684)|0;
   $384 = ((($pCtx) + ($2)|0) + 242036|0);
   HEAP8[$384>>0] = 1;
  }
 } while(0);
 $387 = (($pCtx) + 242344|0);
 $388 = HEAP8[$387>>0]|0;
 $389 = ($388<<24>>24)==(0);
 if ($389) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $390 = ($kSrcNalLen|0)>(123);
 if ($390) {
  $391 = (($pCtx) + 116|0);
  $392 = HEAP32[$391>>2]|0;
  $393 = $392 | 16384;
  HEAP32[$391>>2] = $393;
  $$0 = 262145;
  STACKTOP = sp;return ($$0|0);
 }
 $394 = ((($pCtx) + (($2*136)|0)|0) + 282160|0);
 HEAP32[$394>>2] = $2;
 $iTrailingZeroByte$0 = 0;
 while(1) {
  $395 = (($kSrcNalLen) - ($iTrailingZeroByte$0))|0;
  $396 = (($395) + -1)|0;
  $397 = (($pSrcNal) + ($396)|0);
  $398 = HEAP8[$397>>0]|0;
  $399 = ($398<<24>>24)==(0);
  $400 = (($iTrailingZeroByte$0) + 1)|0;
  if ($399) {
   $iTrailingZeroByte$0 = $400;
  } else {
   break;
  }
 }
 $401 = $395&65535;
 $402 = ((($pCtx) + (($2*136)|0)|0) + 282164|0);
 HEAP16[$402>>1] = $401;
 $403 = HEAP8[$pSrcNal>>0]|0;
 $404 = ($403<<24>>24)==(0);
 do {
  if ($404) {
   $405 = (($pSrcNal) + 1|0);
   $406 = HEAP8[$405>>0]|0;
   $407 = ($406<<24>>24)==(0);
   if (!($407)) {
    $iStartDeltaByte$0 = 0;
    break;
   }
   $408 = (($pSrcNal) + 2|0);
   $409 = HEAP8[$408>>0]|0;
   $410 = ($409<<24>>24)==(1);
   if (!($410)) {
    $iStartDeltaByte$0 = 0;
    break;
   }
   $411 = ((($pCtx) + (($2*136)|0)|0) + 282032|0);
   HEAP8[$411>>0] = 0;
   $412 = (($401) + 1)<<16>>16;
   HEAP16[$402>>1] = $412;
   $iStartDeltaByte$0 = 1;
  } else {
   $iStartDeltaByte$0 = 0;
  }
 } while(0);
 $413 = (((($pCtx) + (($2*136)|0)|0) + ($iStartDeltaByte$0)|0) + 282032|0);
 _memcpy(($413|0),($pSrcNal|0),($395|0))|0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec22ParseRefBasePicMarkingEPN10WelsCommon15TagBitStringAuxEPNS_23TagRefBasePicMarkingSynE($pBs,$pRefBasePicMarking) {
 $pBs = $pBs|0;
 $pRefBasePicMarking = $pRefBasePicMarking|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iIdx$0 = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 $0 = (($pBs) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 31;
 $3 = (($pBs) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$pBs>>2]|0;
 $6 = $5;
 $7 = (($pBs) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1 << 1;
 HEAP32[$0>>2] = $9;
 $10 = (($pBs) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$10>>2] = $12;
 $13 = ($11|0)>(-1);
 do {
  if ($13) {
   $14 = $8;
   $15 = $4;
   $16 = (($14) - ($6))|0;
   $17 = (($15) + 1)|0;
   $18 = (($17) - ($6))|0;
   $19 = ($16|0)>($18|0);
   if ($19) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $20 = HEAP8[$8>>0]|0;
    $21 = $20&255;
    $22 = $21 << 8;
    $23 = (($8) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = $22 | $25;
    $27 = $26 << $12;
    $28 = $27 | $9;
    HEAP32[$0>>2] = $28;
    $29 = (($11) + -15)|0;
    HEAP32[$10>>2] = $29;
    $30 = (($8) + 2|0);
    HEAP32[$7>>2] = $30;
    break;
   }
  }
 } while(0);
 HEAP32[$uiCode>>2] = $2;
 $31 = ($2|0)==(0);
 $32 = (($pRefBasePicMarking) + 1056|0);
 $33 = $2&255;
 HEAP8[$32>>0] = $33;
 if ($31) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $iIdx$0 = 0;
 }
 while(1) {
  $34 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBs,$uiCode)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $$0 = $34;
   label = 12;
   break;
  }
  $36 = HEAP32[$uiCode>>2]|0;
  $37 = (($pRefBasePicMarking) + ($iIdx$0<<4)|0);
  HEAP32[$37>>2] = $36;
  if ((($36|0) == 2)) {
   $44 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBs,$uiCode)|0);
   $45 = ($44|0)==(0);
   if (!($45)) {
    $$0 = $44;
    label = 12;
    break;
   }
   $46 = HEAP32[$uiCode>>2]|0;
   $47 = ((($pRefBasePicMarking) + ($iIdx$0<<4)|0) + 12|0);
   HEAP32[$47>>2] = $46;
  } else if ((($36|0) == 1)) {
   $38 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBs,$uiCode)|0);
   $39 = ($38|0)==(0);
   if (!($39)) {
    $$0 = $38;
    label = 12;
    break;
   }
   $40 = HEAP32[$uiCode>>2]|0;
   $41 = (($40) + 1)|0;
   $42 = ((($pRefBasePicMarking) + ($iIdx$0<<4)|0) + 8|0);
   HEAP32[$42>>2] = $41;
   $43 = ((($pRefBasePicMarking) + ($iIdx$0<<4)|0) + 4|0);
   HEAP32[$43>>2] = 0;
  } else if ((($36|0) == 0)) {
   $$0 = 0;
   label = 12;
   break;
  }
  $48 = (($iIdx$0) + 1)|0;
  $49 = ($48|0)<(66);
  if ($49) {
   $iIdx$0 = $48;
  } else {
   $$0 = 0;
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec15DecodeSpsSvcExtEPNS_21TagWelsDecoderContextEPNS_12TagSubsetSpsEPN10WelsCommon15TagBitStringAuxE($pCtx,$pSpsExt,$pBs) {
 $pCtx = $pCtx|0;
 $pSpsExt = $pSpsExt|0;
 $pBs = $pBs|0;
 var $$0 = 0, $$lobit = 0, $$lobit47 = 0, $$lobit48 = 0, $$lobit49 = 0, $$ph = 0, $$ph$off = 0, $$ph38 = 0, $$ph38$off = 0, $$ph40 = 0, $$ph40$off = 0, $$ph42 = 0, $$ph42$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $uiCodeNum$i = 0, $uiCodeNum$i11 = 0, $uiCodeNum$i17 = 0, $vararg_buffer10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer10 = sp;
 $uiCodeNum$i17 = sp + 12|0;
 $uiCodeNum$i11 = sp + 8|0;
 $uiCodeNum$i = sp + 4|0;
 $0 = (($pSpsExt) + 832|0);
 $1 = (($pBs) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pBs) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$pBs>>2]|0;
 $6 = $5;
 $7 = (($pBs) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2 << 1;
 HEAP32[$1>>2] = $9;
 $10 = (($pBs) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$10>>2] = $12;
 $13 = ($11|0)>(-1);
 do {
  if ($13) {
   $14 = $8;
   $15 = $4;
   $16 = (($14) - ($6))|0;
   $17 = (($15) + 1)|0;
   $18 = (($17) - ($6))|0;
   $19 = ($16|0)>($18|0);
   if ($19) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $20 = HEAP8[$8>>0]|0;
    $21 = $20&255;
    $22 = $21 << 8;
    $23 = (($8) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = $22 | $25;
    $27 = $26 << $12;
    $28 = $27 | $9;
    HEAP32[$1>>2] = $28;
    $29 = (($11) + -15)|0;
    HEAP32[$10>>2] = $29;
    $30 = (($8) + 2|0);
    HEAP32[$7>>2] = $30;
    break;
   }
  }
 } while(0);
 $31 = (($pSpsExt) + 853|0);
 $$lobit = $2 >>> 31;
 $32 = $$lobit&255;
 HEAP8[$31>>0] = $32;
 $33 = HEAP32[$1>>2]|0;
 $34 = $33 >>> 30;
 $35 = HEAP32[$3>>2]|0;
 $36 = HEAP32[$pBs>>2]|0;
 $37 = $36;
 $38 = HEAP32[$7>>2]|0;
 $39 = $33 << 2;
 HEAP32[$1>>2] = $39;
 $40 = HEAP32[$10>>2]|0;
 $41 = (($40) + 2)|0;
 HEAP32[$10>>2] = $41;
 $42 = ($41|0)>(0);
 do {
  if ($42) {
   $43 = $38;
   $44 = $35;
   $45 = (($43) - ($37))|0;
   $46 = (($44) + 1)|0;
   $47 = (($46) - ($37))|0;
   $48 = ($45|0)>($47|0);
   if ($48) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $49 = HEAP8[$38>>0]|0;
    $50 = $49&255;
    $51 = $50 << 8;
    $52 = (($38) + 1|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = $51 | $54;
    $56 = $55 << $41;
    $57 = $56 | $39;
    HEAP32[$1>>2] = $57;
    $58 = (($40) + -14)|0;
    HEAP32[$10>>2] = $58;
    $59 = (($38) + 2|0);
    HEAP32[$7>>2] = $59;
    break;
   }
  }
 } while(0);
 $60 = $34&255;
 $61 = (($pSpsExt) + 848|0);
 HEAP8[$61>>0] = $60;
 $62 = ($34|0)==(3);
 if ($62) {
  HEAP32[$vararg_buffer10>>2] = 3;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1112,$vararg_buffer10);
  $$0 = 263220;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = (($pSpsExt) + 849|0);
 HEAP8[$63>>0] = 0;
 $64 = (($pSpsExt) + 850|0);
 HEAP8[$64>>0] = 1;
 $65 = HEAP32[$1>>2]|0;
 $66 = $65 >>> 31;
 $67 = HEAP32[$3>>2]|0;
 $68 = HEAP32[$pBs>>2]|0;
 $69 = $68;
 $70 = HEAP32[$7>>2]|0;
 $71 = $65 << 1;
 HEAP32[$1>>2] = $71;
 $72 = HEAP32[$10>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[$10>>2] = $73;
 $74 = ($72|0)>(-1);
 do {
  if ($74) {
   $75 = $70;
   $76 = $67;
   $77 = (($75) - ($69))|0;
   $78 = (($76) + 1)|0;
   $79 = (($78) - ($69))|0;
   $80 = ($77|0)>($79|0);
   if ($80) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $81 = HEAP8[$70>>0]|0;
    $82 = $81&255;
    $83 = $82 << 8;
    $84 = (($70) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = $83 | $86;
    $88 = $87 << $73;
    $89 = $88 | $71;
    HEAP32[$1>>2] = $89;
    $90 = (($72) + -15)|0;
    HEAP32[$10>>2] = $90;
    $91 = (($70) + 2|0);
    HEAP32[$7>>2] = $91;
    break;
   }
  }
 } while(0);
 $92 = $66&255;
 HEAP8[$63>>0] = $92;
 $93 = HEAP32[$1>>2]|0;
 $94 = $93 >>> 30;
 $95 = HEAP32[$3>>2]|0;
 $96 = HEAP32[$pBs>>2]|0;
 $97 = $96;
 $98 = HEAP32[$7>>2]|0;
 $99 = $93 << 2;
 HEAP32[$1>>2] = $99;
 $100 = HEAP32[$10>>2]|0;
 $101 = (($100) + 2)|0;
 HEAP32[$10>>2] = $101;
 $102 = ($101|0)>(0);
 do {
  if ($102) {
   $103 = $98;
   $104 = $95;
   $105 = (($103) - ($97))|0;
   $106 = (($104) + 1)|0;
   $107 = (($106) - ($97))|0;
   $108 = ($105|0)>($107|0);
   if ($108) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $109 = HEAP8[$98>>0]|0;
    $110 = $109&255;
    $111 = $110 << 8;
    $112 = (($98) + 1|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $115 = $111 | $114;
    $116 = $115 << $101;
    $117 = $116 | $99;
    HEAP32[$1>>2] = $117;
    $118 = (($100) + -14)|0;
    HEAP32[$10>>2] = $118;
    $119 = (($98) + 2|0);
    HEAP32[$7>>2] = $119;
    break;
   }
  }
 } while(0);
 $120 = $94&255;
 HEAP8[$64>>0] = $120;
 $121 = HEAP8[$63>>0]|0;
 $122 = (($pSpsExt) + 851|0);
 HEAP8[$122>>0] = $121;
 $123 = (($pSpsExt) + 852|0);
 HEAP8[$123>>0] = $120;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 $124 = HEAP8[$61>>0]|0;
 $125 = ($124<<24>>24)==(1);
 do {
  if ($125) {
   $126 = HEAP32[$1>>2]|0;
   $127 = $126 >>> 31;
   $128 = HEAP32[$3>>2]|0;
   $129 = HEAP32[$pBs>>2]|0;
   $130 = $129;
   $131 = HEAP32[$7>>2]|0;
   $132 = $126 << 1;
   HEAP32[$1>>2] = $132;
   $133 = HEAP32[$10>>2]|0;
   $134 = (($133) + 1)|0;
   HEAP32[$10>>2] = $134;
   $135 = ($133|0)>(-1);
   do {
    if ($135) {
     $136 = $131;
     $137 = $128;
     $138 = (($136) - ($130))|0;
     $139 = (($137) + 1)|0;
     $140 = (($139) - ($130))|0;
     $141 = ($138|0)>($140|0);
     if ($141) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $142 = HEAP8[$131>>0]|0;
      $143 = $142&255;
      $144 = $143 << 8;
      $145 = (($131) + 1|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = $146&255;
      $148 = $144 | $147;
      $149 = $148 << $134;
      $150 = $149 | $132;
      HEAP32[$1>>2] = $150;
      $151 = (($133) + -15)|0;
      HEAP32[$10>>2] = $151;
      $152 = (($131) + 2|0);
      HEAP32[$7>>2] = $152;
      break;
     }
    }
   } while(0);
   $153 = $127&255;
   HEAP8[$122>>0] = $153;
   $154 = HEAP32[$1>>2]|0;
   $155 = $154 >>> 30;
   $156 = HEAP32[$3>>2]|0;
   $157 = HEAP32[$pBs>>2]|0;
   $158 = $157;
   $159 = HEAP32[$7>>2]|0;
   $160 = $154 << 2;
   HEAP32[$1>>2] = $160;
   $161 = HEAP32[$10>>2]|0;
   $162 = (($161) + 2)|0;
   HEAP32[$10>>2] = $162;
   $163 = ($162|0)>(0);
   do {
    if ($163) {
     $164 = $159;
     $165 = $156;
     $166 = (($164) - ($158))|0;
     $167 = (($165) + 1)|0;
     $168 = (($167) - ($158))|0;
     $169 = ($166|0)>($168|0);
     if ($169) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $170 = HEAP8[$159>>0]|0;
      $171 = $170&255;
      $172 = $171 << 8;
      $173 = (($159) + 1|0);
      $174 = HEAP8[$173>>0]|0;
      $175 = $174&255;
      $176 = $172 | $175;
      $177 = $176 << $162;
      $178 = $177 | $160;
      HEAP32[$1>>2] = $178;
      $179 = (($161) + -14)|0;
      HEAP32[$10>>2] = $179;
      $180 = (($159) + 2|0);
      HEAP32[$7>>2] = $180;
      break;
     }
    }
   } while(0);
   $181 = $155&255;
   HEAP8[$123>>0] = $181;
   $182 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBs,$vararg_buffer10)|0);
   $183 = ($182|0)==(0);
   if (!($183)) {
    $$0 = $182;
    STACKTOP = sp;return ($$0|0);
   }
   $184 = HEAP32[$vararg_buffer10>>2]|0;
   $185 = $184 & 1;
   $186 = ($185|0)==(0);
   if ($186) {
    $189 = $184 >>> 1;
    $190 = (0 - ($189))|0;
    $$ph = $190;
   } else {
    $187 = (($184) + 1)|0;
    $188 = $187 >>> 1;
    $$ph = $188;
   }
   HEAP32[$0>>2] = $$ph;
   $$ph$off = (($$ph) + 32768)|0;
   $191 = ($$ph$off>>>0)>(65535);
   if ($191) {
    HEAP32[$vararg_buffer10>>2] = $$ph;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1192,$vararg_buffer10);
   }
   $192 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBs,$uiCodeNum$i17)|0);
   $193 = ($192|0)==(0);
   if (!($193)) {
    $$0 = $192;
    STACKTOP = sp;return ($$0|0);
   }
   $194 = HEAP32[$uiCodeNum$i17>>2]|0;
   $195 = $194 & 1;
   $196 = ($195|0)==(0);
   if ($196) {
    $199 = $194 >>> 1;
    $200 = (0 - ($199))|0;
    $$ph38 = $200;
   } else {
    $197 = (($194) + 1)|0;
    $198 = $197 >>> 1;
    $$ph38 = $198;
   }
   $201 = (($pSpsExt) + 836|0);
   HEAP32[$201>>2] = $$ph38;
   $$ph38$off = (($$ph38) + 32768)|0;
   $202 = ($$ph38$off>>>0)>(65535);
   if ($202) {
    HEAP32[$vararg_buffer10>>2] = $$ph38;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1248,$vararg_buffer10);
   }
   $203 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBs,$uiCodeNum$i11)|0);
   $204 = ($203|0)==(0);
   if (!($204)) {
    $$0 = $203;
    STACKTOP = sp;return ($$0|0);
   }
   $205 = HEAP32[$uiCodeNum$i11>>2]|0;
   $206 = $205 & 1;
   $207 = ($206|0)==(0);
   if ($207) {
    $210 = $205 >>> 1;
    $211 = (0 - ($210))|0;
    $$ph40 = $211;
   } else {
    $208 = (($205) + 1)|0;
    $209 = $208 >>> 1;
    $$ph40 = $209;
   }
   $212 = (($pSpsExt) + 840|0);
   HEAP32[$212>>2] = $$ph40;
   $$ph40$off = (($$ph40) + 32768)|0;
   $213 = ($$ph40$off>>>0)>(65535);
   if ($213) {
    HEAP32[$vararg_buffer10>>2] = $$ph40;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1304,$vararg_buffer10);
   }
   $214 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBs,$uiCodeNum$i)|0);
   $215 = ($214|0)==(0);
   if (!($215)) {
    $$0 = $214;
    STACKTOP = sp;return ($$0|0);
   }
   $216 = HEAP32[$uiCodeNum$i>>2]|0;
   $217 = $216 & 1;
   $218 = ($217|0)==(0);
   if ($218) {
    $221 = $216 >>> 1;
    $222 = (0 - ($221))|0;
    $$ph42 = $222;
   } else {
    $219 = (($216) + 1)|0;
    $220 = $219 >>> 1;
    $$ph42 = $220;
   }
   $223 = (($pSpsExt) + 844|0);
   HEAP32[$223>>2] = $$ph42;
   $$ph42$off = (($$ph42) + 32768)|0;
   $224 = ($$ph42$off>>>0)>(65535);
   if (!($224)) {
    break;
   }
   HEAP32[$vararg_buffer10>>2] = $$ph42;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,1360,$vararg_buffer10);
  }
 } while(0);
 $225 = HEAP32[$1>>2]|0;
 $226 = HEAP32[$3>>2]|0;
 $227 = HEAP32[$pBs>>2]|0;
 $228 = $227;
 $229 = HEAP32[$7>>2]|0;
 $230 = $225 << 1;
 HEAP32[$1>>2] = $230;
 $231 = HEAP32[$10>>2]|0;
 $232 = (($231) + 1)|0;
 HEAP32[$10>>2] = $232;
 $233 = ($231|0)>(-1);
 do {
  if ($233) {
   $234 = $229;
   $235 = $226;
   $236 = (($234) - ($228))|0;
   $237 = (($235) + 1)|0;
   $238 = (($237) - ($228))|0;
   $239 = ($236|0)>($238|0);
   if ($239) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $240 = HEAP8[$229>>0]|0;
    $241 = $240&255;
    $242 = $241 << 8;
    $243 = (($229) + 1|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = $242 | $245;
    $247 = $246 << $232;
    $248 = $247 | $230;
    HEAP32[$1>>2] = $248;
    $249 = (($231) + -15)|0;
    HEAP32[$10>>2] = $249;
    $250 = (($229) + 2|0);
    HEAP32[$7>>2] = $250;
    break;
   }
  }
 } while(0);
 $251 = (($pSpsExt) + 854|0);
 $$lobit47 = $225 >>> 31;
 $252 = $$lobit47&255;
 HEAP8[$251>>0] = $252;
 $253 = (($pSpsExt) + 855|0);
 HEAP8[$253>>0] = 0;
 $254 = ($252<<24>>24)==(0);
 if (!($254)) {
  $255 = HEAP32[$1>>2]|0;
  $256 = HEAP32[$3>>2]|0;
  $257 = HEAP32[$pBs>>2]|0;
  $258 = $257;
  $259 = HEAP32[$7>>2]|0;
  $260 = $255 << 1;
  HEAP32[$1>>2] = $260;
  $261 = HEAP32[$10>>2]|0;
  $262 = (($261) + 1)|0;
  HEAP32[$10>>2] = $262;
  $263 = ($261|0)>(-1);
  do {
   if ($263) {
    $264 = $259;
    $265 = $256;
    $266 = (($264) - ($258))|0;
    $267 = (($265) + 1)|0;
    $268 = (($267) - ($258))|0;
    $269 = ($266|0)>($268|0);
    if ($269) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $270 = HEAP8[$259>>0]|0;
     $271 = $270&255;
     $272 = $271 << 8;
     $273 = (($259) + 1|0);
     $274 = HEAP8[$273>>0]|0;
     $275 = $274&255;
     $276 = $272 | $275;
     $277 = $276 << $262;
     $278 = $277 | $260;
     HEAP32[$1>>2] = $278;
     $279 = (($261) + -15)|0;
     HEAP32[$10>>2] = $279;
     $280 = (($259) + 2|0);
     HEAP32[$7>>2] = $280;
     break;
    }
   }
  } while(0);
  $$lobit48 = $255 >>> 31;
  $281 = $$lobit48&255;
  HEAP8[$253>>0] = $281;
 }
 $282 = HEAP32[$1>>2]|0;
 $283 = HEAP32[$3>>2]|0;
 $284 = HEAP32[$pBs>>2]|0;
 $285 = $284;
 $286 = HEAP32[$7>>2]|0;
 $287 = $282 << 1;
 HEAP32[$1>>2] = $287;
 $288 = HEAP32[$10>>2]|0;
 $289 = (($288) + 1)|0;
 HEAP32[$10>>2] = $289;
 $290 = ($288|0)>(-1);
 do {
  if ($290) {
   $291 = $286;
   $292 = $283;
   $293 = (($291) - ($285))|0;
   $294 = (($292) + 1)|0;
   $295 = (($294) - ($285))|0;
   $296 = ($293|0)>($295|0);
   if ($296) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $297 = HEAP8[$286>>0]|0;
    $298 = $297&255;
    $299 = $298 << 8;
    $300 = (($286) + 1|0);
    $301 = HEAP8[$300>>0]|0;
    $302 = $301&255;
    $303 = $299 | $302;
    $304 = $303 << $289;
    $305 = $304 | $287;
    HEAP32[$1>>2] = $305;
    $306 = (($288) + -15)|0;
    HEAP32[$10>>2] = $306;
    $307 = (($286) + 2|0);
    HEAP32[$7>>2] = $307;
    break;
   }
  }
 } while(0);
 $308 = (($pSpsExt) + 856|0);
 $$lobit49 = $282 >>> 31;
 $309 = $$lobit49&255;
 HEAP8[$308>>0] = $309;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec14CheckSpsActiveEPNS_21TagWelsDecoderContextEPNS_6TagSpsEb($pCtx,$pSps,$bUseSubsetFlag) {
 $pCtx = $pCtx|0;
 $pSps = $pSps|0;
 $bUseSubsetFlag = $bUseSubsetFlag|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$09 = 0, $i1$01 = 0, $i2$05 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $i$09 = 0;
 while(1) {
  $2 = ((($pCtx) + ($i$09<<2)|0) + 241892|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==($pSps|0);
  $0 = (($i$09) + 1)|0;
  if ($4) {
   $$0 = 1;
   break;
  }
  $1 = ($0|0)<(8);
  if ($1) {
   $i$09 = $0;
  } else {
   label = 4;
   break;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = (($pSps) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)!=(0);
   if ($bUseSubsetFlag) {
    if (!($7)) {
     $$0 = 0;
     break;
    }
    $8 = (($pSps) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0);
    if ($10) {
     $$0 = 0;
     break;
    }
    $11 = HEAP32[$pSps>>2]|0;
    $12 = ((($pCtx) + ($11)|0) + 242004|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if ($14) {
     $$0 = 0;
     break;
    }
    $15 = (($pCtx) + 241888|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)>(0);
    if (!($19)) {
     $$0 = 0;
     break;
    }
    $20 = HEAP32[$16>>2]|0;
    $i1$01 = 0;
    while(1) {
     $21 = (($20) + ($i1$01<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + 3904|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if (!($25)) {
      $26 = (($22) + 88|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($11|0);
      if ($29) {
       $$0 = 1;
       break L4;
      }
     }
     $30 = (($i1$01) + 1)|0;
     $31 = ($30|0)<($18|0);
     if ($31) {
      $i1$01 = $30;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    if (!($7)) {
     $$0 = 0;
     break;
    }
    $32 = (($pSps) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0);
    if ($34) {
     $$0 = 0;
     break;
    }
    $35 = HEAP32[$pSps>>2]|0;
    $36 = ((($pCtx) + ($35)|0) + 241972|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = ($37<<24>>24)==(0);
    if ($38) {
     $$0 = 0;
     break;
    }
    $39 = (($pCtx) + 241888|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)>(0);
    if (!($43)) {
     $$0 = 0;
     break;
    }
    $44 = HEAP32[$40>>2]|0;
    $i2$05 = 0;
    while(1) {
     $45 = (($44) + ($i2$05<<2)|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + 3904|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48<<24>>24)==(0);
     if ($49) {
      $50 = (($46) + 88|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = HEAP32[$51>>2]|0;
      $53 = ($52|0)==($35|0);
      if ($53) {
       $$0 = 1;
       break L4;
      }
     }
     $54 = (($i2$05) + 1)|0;
     $55 = ($54|0)<($42|0);
     if ($55) {
      $i2$05 = $54;
     } else {
      $$0 = 0;
      break;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec16ParseScalingListEPNS_6TagSpsEPN10WelsCommon15TagBitStringAuxEbPbPA16_hPA64_h($pSps,$pBs,$bPPS,$pScalingListPresentFlag,$iScalingList4x4,$iScalingList8x8) {
 $pSps = $pSps|0;
 $pBs = $pBs|0;
 $bPPS = $bPPS|0;
 $pScalingListPresentFlag = $pScalingListPresentFlag|0;
 $iScalingList4x4 = $iScalingList4x4|0;
 $iScalingList8x8 = $iScalingList8x8|0;
 var $$0 = 0, $$off$i = 0, $$off$us$i = 0, $$ph = 0, $$ph$i = 0, $$ph$us$i = 0, $$ph10 = 0, $$pre$i = 0, $$pre6$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bInit$0$off0 = 0, $defaultScaling = 0, $i$017 = 0, $iLastScale$04$i = 0, $iLastScale$04$us$i = 0, $iNextScale$03$i = 0, $iNextScale$03$us$i = 0, $iNextScale$1$i = 0, $iNextScale$1$us$i = 0, $j$05$i = 0, $j$05$us$i = 0, $phitmp$i = 0, $phitmp$us$i = 0, $uiCodeNum$i$i = 0, $uiCodeNum$i$i4 = 0, $uiScalingListNum$0 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $uiCodeNum$i$i4 = sp + 20|0;
 $uiCodeNum$i$i = sp + 16|0;
 $defaultScaling = sp;
 $0 = ($pSps|0)==(0|0);
 if ($0) {
  $bInit$0$off0 = 0;$uiScalingListNum$0 = 12;
 } else {
  $1 = (($pSps) + 318|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(3);
  $4 = $3 ? 8 : 12;
  if ($bPPS) {
   $5 = (($pSps) + 335|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)!=(0);
   $bInit$0$off0 = $7;$uiScalingListNum$0 = $4;
  } else {
   $bInit$0$off0 = 0;$uiScalingListNum$0 = $4;
  }
 }
 $8 = (($pSps) + 348|0);
 $9 = $bInit$0$off0 ? $8 : 17296;
 HEAP32[$defaultScaling>>2] = $9;
 $10 = (($pSps) + 396|0);
 $11 = $bInit$0$off0 ? $10 : ((17296 + 16|0));
 $12 = (($defaultScaling) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = (($pSps) + 444|0);
 $14 = $bInit$0$off0 ? $13 : 17328;
 $15 = (($defaultScaling) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = (($pSps) + 508|0);
 $17 = $bInit$0$off0 ? $16 : ((17328 + 64|0));
 $18 = (($defaultScaling) + 12|0);
 HEAP32[$18>>2] = $17;
 $19 = (($pBs) + 20|0);
 $20 = (($pBs) + 4|0);
 $21 = (($pBs) + 16|0);
 $22 = (($pBs) + 24|0);
 $i$017 = 0;
 L5: while(1) {
  $23 = HEAP32[$19>>2]|0;
  $24 = $23 >>> 31;
  $25 = HEAP32[$20>>2]|0;
  $26 = HEAP32[$pBs>>2]|0;
  $27 = $26;
  $28 = HEAP32[$21>>2]|0;
  $29 = $23 << 1;
  HEAP32[$19>>2] = $29;
  $30 = HEAP32[$22>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$22>>2] = $31;
  $32 = ($30|0)>(-1);
  if ($32) {
   $33 = $28;
   $34 = $25;
   $35 = (($33) - ($27))|0;
   $36 = (($34) + 1)|0;
   $37 = (($36) - ($27))|0;
   $38 = ($35|0)>($37|0);
   if ($38) {
    $$0 = 11;
    label = 42;
    break;
   }
   $39 = HEAP8[$28>>0]|0;
   $40 = $39&255;
   $41 = $40 << 8;
   $42 = (($28) + 1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = $41 | $44;
   $46 = $45 << $31;
   $47 = $46 | $29;
   HEAP32[$19>>2] = $47;
   $48 = (($30) + -15)|0;
   HEAP32[$22>>2] = $48;
   $49 = (($28) + 2|0);
   HEAP32[$21>>2] = $49;
  }
  $50 = (($pScalingListPresentFlag) + ($i$017)|0);
  $51 = $24&255;
  HEAP8[$50>>0] = $51;
  $52 = ($24|0)==(0);
  $53 = ($i$017>>>0)<(6);
  do {
   if ($52) {
    if ($53) {
     $113 = (($iScalingList4x4) + ($i$017<<4)|0);
     if ((($i$017|0) == 0) | (($i$017|0) == 3)) {
      $116 = (($i$017>>>0) / 3)&-1;
      $117 = (($defaultScaling) + ($116<<2)|0);
      $118 = HEAP32[$117>>2]|0;
      dest=$113+0|0; src=$118+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      break;
     } else {
      $114 = (($i$017) + -1)|0;
      $115 = (($iScalingList4x4) + ($114<<4)|0);
      dest=$113+0|0; src=$115+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      break;
     }
    } else {
     $119 = $i$017 & -2;
     $120 = ($119|0)==(6);
     $121 = (($i$017) + -6)|0;
     $122 = (($iScalingList8x8) + ($121<<6)|0);
     if ($120) {
      $123 = $i$017 & 1;
      $124 = $123 | 2;
      $125 = (($defaultScaling) + ($124<<2)|0);
      $126 = HEAP32[$125>>2]|0;
      dest=$122+0|0; src=$126+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      break;
     } else {
      $127 = (($i$017) + -8)|0;
      $128 = (($iScalingList8x8) + ($127<<6)|0);
      dest=$122+0|0; src=$128+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      break;
     }
    }
   } else {
    if ($53) {
     $54 = (($iScalingList4x4) + ($i$017<<4)|0);
     $131 = 0;$iLastScale$04$us$i = 8;$iNextScale$03$us$i = 8;$j$05$us$i = 0;
     while(1) {
      $55 = ($iNextScale$03$us$i|0)==(0);
      if ($55) {
       $132 = $131;$iNextScale$1$us$i = 0;
      } else {
       $56 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBs,$uiCodeNum$i$i4)|0);
       $57 = ($56|0)==(0);
       if (!($57)) {
        $$0 = $56;
        label = 42;
        break L5;
       }
       $58 = HEAP32[$uiCodeNum$i$i4>>2]|0;
       $59 = $58 & 1;
       $60 = ($59|0)==(0);
       if ($60) {
        $63 = $58 >>> 1;
        $64 = (0 - ($63))|0;
        $$ph$us$i = $64;
       } else {
        $61 = (($58) + 1)|0;
        $62 = $61 >>> 1;
        $$ph$us$i = $62;
       }
       $$off$us$i = (($$ph$us$i) + 128)|0;
       $65 = ($$off$us$i>>>0)>(255);
       if ($65) {
        $$0 = 10013;
        label = 42;
        break L5;
       }
       $66 = $iLastScale$04$us$i | 256;
       $67 = (($$ph$us$i) + ($66))|0;
       $68 = (($67|0) % 256)&-1;
       $69 = ($j$05$us$i|0)==(0);
       if ($69) {
        $70 = ($68|0)==(0);
        $phitmp$us$i = $70&1;
        if ($70) {
         $$ph = $phitmp$us$i;
         break;
        } else {
         $132 = $phitmp$us$i;$iNextScale$1$us$i = $68;
        }
       } else {
        $132 = 0;$iNextScale$1$us$i = $68;
       }
      }
      $71 = (2744 + ($j$05$us$i)|0);
      $$pre$i = HEAP8[$71>>0]|0;
      $72 = $$pre$i&255;
      $73 = ($iNextScale$1$us$i|0)==(0);
      $74 = $73 ? $iLastScale$04$us$i : $iNextScale$1$us$i;
      $75 = $74&255;
      $76 = ((($iScalingList4x4) + ($i$017<<4)|0) + ($72)|0);
      HEAP8[$76>>0] = $75;
      $77 = $74 & 255;
      $78 = (($j$05$us$i) + 1)|0;
      $79 = ($78|0)<(16);
      if ($79) {
       $131 = $132;$iLastScale$04$us$i = $77;$iNextScale$03$us$i = $iNextScale$1$us$i;$j$05$us$i = $78;
      } else {
       $$ph = $132;
       break;
      }
     }
     $80 = ($$ph<<24>>24)==(0);
     if ($80) {
      break;
     }
     $81 = (($i$017>>>0) / 3)&-1;
     $82 = (17296 + ($81<<4)|0);
     dest=$54+0|0; src=$82+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     break;
    } else {
     $83 = (($i$017) + -6)|0;
     $84 = (($iScalingList8x8) + ($83<<6)|0);
     $133 = 0;$iLastScale$04$i = 8;$iNextScale$03$i = 8;$j$05$i = 0;
     while(1) {
      $85 = ($iNextScale$03$i|0)==(0);
      if ($85) {
       $134 = $133;$iNextScale$1$i = 0;
      } else {
       $86 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBs,$uiCodeNum$i$i)|0);
       $87 = ($86|0)==(0);
       if (!($87)) {
        $$0 = $86;
        label = 42;
        break L5;
       }
       $88 = HEAP32[$uiCodeNum$i$i>>2]|0;
       $89 = $88 & 1;
       $90 = ($89|0)==(0);
       if ($90) {
        $93 = $88 >>> 1;
        $94 = (0 - ($93))|0;
        $$ph$i = $94;
       } else {
        $91 = (($88) + 1)|0;
        $92 = $91 >>> 1;
        $$ph$i = $92;
       }
       $$off$i = (($$ph$i) + 128)|0;
       $95 = ($$off$i>>>0)>(255);
       if ($95) {
        $$0 = 10013;
        label = 42;
        break L5;
       }
       $96 = $iLastScale$04$i | 256;
       $97 = (($$ph$i) + ($96))|0;
       $98 = (($97|0) % 256)&-1;
       $99 = ($j$05$i|0)==(0);
       if ($99) {
        $100 = ($98|0)==(0);
        $phitmp$i = $100&1;
        if ($100) {
         $$ph10 = $phitmp$i;
         break;
        } else {
         $134 = $phitmp$i;$iNextScale$1$i = $98;
        }
       } else {
        $134 = 0;$iNextScale$1$i = $98;
       }
      }
      $101 = (2760 + ($j$05$i)|0);
      $$pre6$i = HEAP8[$101>>0]|0;
      $102 = $$pre6$i&255;
      $103 = ($iNextScale$1$i|0)==(0);
      $104 = $103 ? $iLastScale$04$i : $iNextScale$1$i;
      $105 = $104&255;
      $106 = ((($iScalingList8x8) + ($83<<6)|0) + ($102)|0);
      HEAP8[$106>>0] = $105;
      $107 = $104 & 255;
      $108 = (($j$05$i) + 1)|0;
      $109 = ($108|0)<(64);
      if ($109) {
       $133 = $134;$iLastScale$04$i = $107;$iNextScale$03$i = $iNextScale$1$i;$j$05$i = $108;
      } else {
       $$ph10 = $134;
       break;
      }
     }
     $110 = ($$ph10<<24>>24)==(0);
     if ($110) {
      break;
     }
     $111 = $83 & 1;
     $112 = (17328 + ($111<<6)|0);
     dest=$84+0|0; src=$112+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     break;
    }
   }
  } while(0);
  $129 = (($i$017) + 1)|0;
  $130 = ($129>>>0)<($uiScalingListNum$0>>>0);
  if ($130) {
   $i$017 = $129;
  } else {
   $$0 = 0;
   label = 42;
   break;
  }
 }
 if ((label|0) == 42) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec12ResetFmoListEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $iCountNum$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCtx|0)==(0|0);
 if ($0) {
  $iCountNum$0 = 0;
  STACKTOP = sp;return ($iCountNum$0|0);
 }
 $1 = (($pCtx) + 120|0);
 $2 = (($pCtx) + 5244|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCtx) + 562528|0);
 $5 = HEAP32[$4>>2]|0;
 __ZN7WelsDec13UninitFmoListEPNS_6TagFmoEiiPN10WelsCommon12CMemoryAlignE($1,256,$3,$5);
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $iCountNum$0 = $6;
 STACKTOP = sp;return ($iCountNum$0|0);
}
function __ZN7WelsDec12InitReadBitsEPN10WelsCommon15TagBitStringAuxEi($pBitString,$iEndOffset) {
 $pBitString = $pBitString|0;
 $iEndOffset = $iEndOffset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBitString) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pBitString) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (0 - ($iEndOffset))|0;
 $5 = (($3) + ($4)|0);
 $6 = ($1>>>0)<($5>>>0);
 if (!($6)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP8[$1>>0]|0;
 $8 = $7&255;
 $9 = $8 << 24;
 $10 = (($1) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 16;
 $14 = $13 | $9;
 $15 = (($1) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 << 8;
 $19 = $14 | $18;
 $20 = (($1) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $19 | $22;
 $24 = (($pBitString) + 20|0);
 HEAP32[$24>>2] = $23;
 $25 = (($1) + 4|0);
 HEAP32[$0>>2] = $25;
 $26 = (($pBitString) + 24|0);
 HEAP32[$26>>2] = -16;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec11DecInitBitsEPN10WelsCommon15TagBitStringAuxEPKhi($pBitString,$kpBuf,$kiSize) {
 $pBitString = $pBitString|0;
 $kpBuf = $kpBuf|0;
 $kiSize = $kiSize|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kpBuf|0)==(0|0);
 if ($0) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($kiSize) + 7)|0;
 $2 = $1 >> 3;
 HEAP32[$pBitString>>2] = $kpBuf;
 $3 = (($kpBuf) + ($2)|0);
 $4 = (($pBitString) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = (($pBitString) + 8|0);
 HEAP32[$5>>2] = $kiSize;
 $6 = (($pBitString) + 16|0);
 HEAP32[$6>>2] = $kpBuf;
 $7 = ($2|0)>(0);
 if (!($7)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP8[$kpBuf>>0]|0;
 $9 = $8&255;
 $10 = $9 << 24;
 $11 = (($kpBuf) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 16;
 $15 = $14 | $10;
 $16 = (($kpBuf) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 8;
 $20 = $15 | $19;
 $21 = (($kpBuf) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $20 | $23;
 $25 = (($pBitString) + 20|0);
 HEAP32[$25>>2] = $24;
 $26 = (($kpBuf) + 4|0);
 HEAP32[$6>>2] = $26;
 $27 = (($pBitString) + 24|0);
 HEAP32[$27>>2] = -16;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec9RBSP2EBSPEPhS0_i($pDstBuf,$pSrcBuf,$kiSize) {
 $pDstBuf = $pDstBuf|0;
 $pSrcBuf = $pSrcBuf|0;
 $kiSize = $kiSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iZeroCount$03 = 0, $iZeroCount$1 = 0, $iZeroCount$2 = 0, $pDstPointer$01 = 0, $pDstPointer$1 = 0, $pSrcPointer$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pSrcBuf) + ($kiSize)|0);
 $1 = ($kiSize|0)>(0);
 if ($1) {
  $iZeroCount$03 = 0;$pDstPointer$01 = $pDstBuf;$pSrcPointer$02 = $pSrcBuf;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $2 = ($iZeroCount$03|0)==(2);
  if ($2) {
   $3 = HEAP8[$pSrcPointer$02>>0]|0;
   $4 = ($3&255)<(4);
   if ($4) {
    $5 = (($pDstPointer$01) + 1|0);
    HEAP8[$pDstPointer$01>>0] = 3;
    $iZeroCount$1 = 0;$pDstPointer$1 = $5;
   } else {
    $iZeroCount$1 = 2;$pDstPointer$1 = $pDstPointer$01;
   }
  } else {
   $iZeroCount$1 = $iZeroCount$03;$pDstPointer$1 = $pDstPointer$01;
  }
  $6 = HEAP8[$pSrcPointer$02>>0]|0;
  $7 = ($6<<24>>24)==(0);
  $8 = (($iZeroCount$1) + 1)|0;
  $iZeroCount$2 = $7 ? $8 : 0;
  $9 = (($pSrcPointer$02) + 1|0);
  $10 = (($pDstPointer$1) + 1|0);
  HEAP8[$pDstPointer$1>>0] = $6;
  $11 = ($9>>>0)<($0>>>0);
  if ($11) {
   $iZeroCount$03 = $iZeroCount$2;$pDstPointer$01 = $10;$pSrcPointer$02 = $9;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec19WelsCabacGlobalInitEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$ = 0, $$$1 = 0, $$$2 = 0, $$$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond$3 = 0, $exitcond5 = 0, $exitcond5$1 = 0, $exitcond5$2 = 0, $exitcond5$3 = 0, $iIdx$01 = 0, $iIdx$01$1 = 0, $iIdx$01$2 = 0, $iIdx$01$3 = 0, $iQp$03 = 0, $iQp$03$1 = 0, $iQp$03$2 = 0;
 var $iQp$03$3 = 0, $uiStateIdx$0 = 0, $uiStateIdx$0$1 = 0, $uiStateIdx$0$2 = 0, $uiStateIdx$0$3 = 0, $uiStateIdx$0$in = 0, $uiStateIdx$0$in$1 = 0, $uiStateIdx$0$in$2 = 0, $uiStateIdx$0$in$3 = 0, $uiValMps$0 = 0, $uiValMps$0$1 = 0, $uiValMps$0$2 = 0, $uiValMps$0$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $iQp$03 = 0;
 while(1) {
  $iIdx$01 = 0;
  while(1) {
   $0 = (25488 + ($iIdx$01<<3)|0);
   $1 = HEAP8[$0>>0]|0;
   $2 = $1 << 24 >> 24;
   $3 = ((25488 + ($iIdx$01<<3)|0) + 1|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = Math_imul($2, $iQp$03)|0;
   $7 = $6 >> 4;
   $8 = (($7) + ($5))|0;
   $9 = ($8|0)<(1);
   if ($9) {
    $11 = 1;
   } else {
    $10 = ($8|0)>(126);
    $$ = $10 ? 126 : $8;
    $11 = $$;
   }
   $12 = ($11|0)<(64);
   $13 = (63 - ($11))|0;
   $14 = (($11) + 192)|0;
   $15 = $12&1;
   $uiValMps$0 = $15 ^ 1;
   $uiStateIdx$0$in = $12 ? $13 : $14;
   $uiStateIdx$0 = $uiStateIdx$0$in&255;
   $16 = (((($pCtx) + (($iQp$03*920)|0)|0) + ($iIdx$01<<1)|0) + 319948|0);
   HEAP8[$16>>0] = $uiStateIdx$0;
   $17 = (((($pCtx) + (($iQp$03*920)|0)|0) + ($iIdx$01<<1)|0) + 319949|0);
   HEAP8[$17>>0] = $uiValMps$0;
   $18 = (($iIdx$01) + 1)|0;
   $exitcond = ($18|0)==(460);
   if ($exitcond) {
    break;
   } else {
    $iIdx$01 = $18;
   }
  }
  $19 = (($iQp$03) + 1)|0;
  $exitcond5 = ($19|0)==(52);
  if ($exitcond5) {
   $iQp$03$1 = 0;
   break;
  } else {
   $iQp$03 = $19;
  }
 }
 while(1) {
  $iIdx$01$1 = 0;
  while(1) {
   $20 = ((25488 + ($iIdx$01$1<<3)|0) + 2|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ((25488 + ($iIdx$01$1<<3)|0) + 3|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = Math_imul($22, $iQp$03$1)|0;
   $27 = $26 >> 4;
   $28 = (($27) + ($25))|0;
   $29 = ($28|0)<(1);
   if ($29) {
    $31 = 1;
   } else {
    $30 = ($28|0)>(126);
    $$$1 = $30 ? 126 : $28;
    $31 = $$$1;
   }
   $32 = ($31|0)<(64);
   $33 = (63 - ($31))|0;
   $34 = (($31) + 192)|0;
   $35 = $32&1;
   $uiValMps$0$1 = $35 ^ 1;
   $uiStateIdx$0$in$1 = $32 ? $33 : $34;
   $uiStateIdx$0$1 = $uiStateIdx$0$in$1&255;
   $36 = (((($pCtx) + (($iQp$03$1*920)|0)|0) + ($iIdx$01$1<<1)|0) + 367788|0);
   HEAP8[$36>>0] = $uiStateIdx$0$1;
   $37 = (((($pCtx) + (($iQp$03$1*920)|0)|0) + ($iIdx$01$1<<1)|0) + 367789|0);
   HEAP8[$37>>0] = $uiValMps$0$1;
   $38 = (($iIdx$01$1) + 1)|0;
   $exitcond$1 = ($38|0)==(460);
   if ($exitcond$1) {
    break;
   } else {
    $iIdx$01$1 = $38;
   }
  }
  $39 = (($iQp$03$1) + 1)|0;
  $exitcond5$1 = ($39|0)==(52);
  if ($exitcond5$1) {
   $iQp$03$2 = 0;
   break;
  } else {
   $iQp$03$1 = $39;
  }
 }
 while(1) {
  $iIdx$01$2 = 0;
  while(1) {
   $40 = ((25488 + ($iIdx$01$2<<3)|0) + 4|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = ((25488 + ($iIdx$01$2<<3)|0) + 5|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = Math_imul($42, $iQp$03$2)|0;
   $47 = $46 >> 4;
   $48 = (($47) + ($45))|0;
   $49 = ($48|0)<(1);
   if ($49) {
    $51 = 1;
   } else {
    $50 = ($48|0)>(126);
    $$$2 = $50 ? 126 : $48;
    $51 = $$$2;
   }
   $52 = ($51|0)<(64);
   $53 = (63 - ($51))|0;
   $54 = (($51) + 192)|0;
   $55 = $52&1;
   $uiValMps$0$2 = $55 ^ 1;
   $uiStateIdx$0$in$2 = $52 ? $53 : $54;
   $uiStateIdx$0$2 = $uiStateIdx$0$in$2&255;
   $56 = (((($pCtx) + (($iQp$03$2*920)|0)|0) + ($iIdx$01$2<<1)|0) + 415628|0);
   HEAP8[$56>>0] = $uiStateIdx$0$2;
   $57 = (((($pCtx) + (($iQp$03$2*920)|0)|0) + ($iIdx$01$2<<1)|0) + 415629|0);
   HEAP8[$57>>0] = $uiValMps$0$2;
   $58 = (($iIdx$01$2) + 1)|0;
   $exitcond$2 = ($58|0)==(460);
   if ($exitcond$2) {
    break;
   } else {
    $iIdx$01$2 = $58;
   }
  }
  $59 = (($iQp$03$2) + 1)|0;
  $exitcond5$2 = ($59|0)==(52);
  if ($exitcond5$2) {
   $iQp$03$3 = 0;
   break;
  } else {
   $iQp$03$2 = $59;
  }
 }
 while(1) {
  $iIdx$01$3 = 0;
  while(1) {
   $60 = ((25488 + ($iIdx$01$3<<3)|0) + 6|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   $63 = ((25488 + ($iIdx$01$3<<3)|0) + 7|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64 << 24 >> 24;
   $66 = Math_imul($62, $iQp$03$3)|0;
   $67 = $66 >> 4;
   $68 = (($67) + ($65))|0;
   $69 = ($68|0)<(1);
   if ($69) {
    $71 = 1;
   } else {
    $70 = ($68|0)>(126);
    $$$3 = $70 ? 126 : $68;
    $71 = $$$3;
   }
   $72 = ($71|0)<(64);
   $73 = (63 - ($71))|0;
   $74 = (($71) + 192)|0;
   $75 = $72&1;
   $uiValMps$0$3 = $75 ^ 1;
   $uiStateIdx$0$in$3 = $72 ? $73 : $74;
   $uiStateIdx$0$3 = $uiStateIdx$0$in$3&255;
   $76 = (((($pCtx) + (($iQp$03$3*920)|0)|0) + ($iIdx$01$3<<1)|0) + 463468|0);
   HEAP8[$76>>0] = $uiStateIdx$0$3;
   $77 = (((($pCtx) + (($iQp$03$3*920)|0)|0) + ($iIdx$01$3<<1)|0) + 463469|0);
   HEAP8[$77>>0] = $uiValMps$0$3;
   $78 = (($iIdx$01$3) + 1)|0;
   $exitcond$3 = ($78|0)==(460);
   if ($exitcond$3) {
    break;
   } else {
    $iIdx$01$3 = $78;
   }
  }
  $79 = (($iQp$03$3) + 1)|0;
  $exitcond5$3 = ($79|0)==(52);
  if ($exitcond5$3) {
   break;
  } else {
   $iQp$03$3 = $79;
  }
 }
 $80 = (($pCtx) + 511308|0);
 HEAP8[$80>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsCabacContextInitEPNS_21TagWelsDecoderContextEhii($pCtx,$eSliceType,$iCabacInitIdc,$iQp) {
 $pCtx = $pCtx|0;
 $eSliceType = $eSliceType|0;
 $iCabacInitIdc = $iCabacInitIdc|0;
 $iQp = $iQp|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(2);
 $3 = (($iCabacInitIdc) + 1)|0;
 $$ = $2 ? 0 : $3;
 $4 = (($pCtx) + 511308|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  __ZN7WelsDec19WelsCabacGlobalInitEPNS_21TagWelsDecoderContextE($pCtx);
 }
 $7 = (($pCtx) + 511309|0);
 $8 = (((($pCtx) + (($$*47840)|0)|0) + (($iQp*920)|0)|0) + 319948|0);
 _memcpy(($7|0),($8|0),920)|0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec24InitCabacDecEngineFromBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($pDecEngine,$pBsAux) {
 $pDecEngine = $pDecEngine|0;
 $pBsAux = $pBsAux|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBsAux) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (0 - ($1))|0;
 $3 = $2 >> 3;
 $4 = (($pBsAux) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (-2 - ($3))|0;
 $7 = (($5) + ($6)|0);
 $8 = (($pBsAux) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -1|0);
 $11 = ($7>>>0)<($10>>>0);
 if (!($11)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP8[$7>>0]|0;
 $13 = $12&255;
 $14 = $13 << 16;
 $$sum = (($6) + 1)|0;
 $15 = (($5) + ($$sum)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 << 8;
 $19 = $18 | $14;
 $$sum1 = (($6) + 2)|0;
 $20 = (($5) + ($$sum1)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $19 | $22;
 $24 = (($pDecEngine) + 8|0);
 $25 = (_bitshift64Shl(($23|0),0,16)|0);
 $26 = tempRet0;
 $27 = $24;
 $28 = $27;
 HEAP32[$28>>2] = $25;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $$sum2 = (($6) + 3)|0;
 $31 = (($5) + ($$sum2)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $$sum3 = (($6) + 4)|0;
 $35 = (($5) + ($$sum3)|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $34 | $37;
 $39 = $25 | $38;
 $40 = $24;
 $41 = $40;
 HEAP32[$41>>2] = $39;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $26;
 $44 = (($pDecEngine) + 16|0);
 HEAP32[$44>>2] = 31;
 $$sum4 = (($6) + 5)|0;
 $45 = (($5) + ($$sum4)|0);
 $46 = (($pDecEngine) + 24|0);
 HEAP32[$46>>2] = $45;
 $47 = $pDecEngine;
 $48 = $47;
 HEAP32[$48>>2] = 510;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = 0;
 $51 = HEAP32[$pBsAux>>2]|0;
 $52 = (($pDecEngine) + 20|0);
 HEAP32[$52>>2] = $51;
 $53 = HEAP32[$8>>2]|0;
 $54 = (($pDecEngine) + 28|0);
 HEAP32[$54>>2] = $53;
 HEAP32[$0>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($pDecEngine,$pBsAux) {
 $pDecEngine = $pDecEngine|0;
 $pBsAux = $pBsAux|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pDecEngine) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 3;
 $3 = (($pDecEngine) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (0 - ($2))|0;
 $6 = (($4) + ($5)|0);
 HEAP32[$3>>2] = $6;
 HEAP32[$0>>2] = 0;
 $7 = (($pBsAux) + 24|0);
 HEAP32[$7>>2] = 0;
 $8 = (($pDecEngine) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$pBsAux>>2] = $9;
 $10 = HEAP32[$3>>2]|0;
 $11 = (($pBsAux) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($pBsAux) + 20|0);
 HEAP32[$12>>2] = 0;
 $13 = (($pBsAux) + 12|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec15Read32BitsCabacEPNS_19SWelsCabacDecEngineERjRi($pDecEngine,$uiValue,$iNumBitsRead) {
 $pDecEngine = $pDecEngine|0;
 $uiValue = $uiValue|0;
 $iNumBitsRead = $iNumBitsRead|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pDecEngine) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pDecEngine) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 HEAP32[$iNumBitsRead>>2] = 0;
 HEAP32[$uiValue>>2] = 0;
 $7 = ($6|0)<(1);
 if ($7) {
  $$0 = 10012;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($6|0) == 3)) {
  $8 = HEAP32[$2>>2]|0;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $10 << 16;
  $12 = (($8) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = $15 | $11;
  $17 = (($8) + 2|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $16 | $19;
  HEAP32[$uiValue>>2] = $20;
  $21 = HEAP32[$2>>2]|0;
  $22 = (($21) + 3|0);
  HEAP32[$2>>2] = $22;
  HEAP32[$iNumBitsRead>>2] = 24;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($6|0) == 2)) {
  $23 = HEAP32[$2>>2]|0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 << 8;
  $27 = (($23) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $26 | $29;
  HEAP32[$uiValue>>2] = $30;
  $31 = HEAP32[$2>>2]|0;
  $32 = (($31) + 2|0);
  HEAP32[$2>>2] = $32;
  HEAP32[$iNumBitsRead>>2] = 16;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($6|0) == 1)) {
  $33 = HEAP32[$2>>2]|0;
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  HEAP32[$uiValue>>2] = $35;
  $36 = HEAP32[$2>>2]|0;
  $37 = (($36) + 1|0);
  HEAP32[$2>>2] = $37;
  HEAP32[$iNumBitsRead>>2] = 8;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $38 = HEAP32[$2>>2]|0;
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $40 << 24;
  $42 = (($38) + 1|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $44 << 16;
  $46 = $45 | $41;
  $47 = (($38) + 2|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $49 << 8;
  $51 = $46 | $50;
  $52 = (($38) + 3|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $51 | $54;
  HEAP32[$uiValue>>2] = $55;
  $56 = HEAP32[$2>>2]|0;
  $57 = (($56) + 4|0);
  HEAP32[$2>>2] = $57;
  HEAP32[$iNumBitsRead>>2] = 32;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($pDecEngine,$pBinCtx,$uiBinVal) {
 $pDecEngine = $pDecEngine|0;
 $pBinCtx = $pBinCtx|0;
 $uiBinVal = $uiBinVal|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $iNumBitsRead = 0, $iRenorm$0 = 0, $or$cond = 0, $uiVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiVal = sp + 4|0;
 $iNumBitsRead = sp;
 $0 = HEAP8[$pBinCtx>>0]|0;
 $1 = $0&255;
 $2 = (($pBinCtx) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 HEAP32[$uiBinVal>>2] = $4;
 $5 = (($pDecEngine) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $pDecEngine;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_bitshift64Lshr(($14|0),($17|0),6)|0);
 $19 = tempRet0;
 $20 = $18 & 3;
 $21 = ((29168 + ($1<<2)|0) + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $22&255;
 $25 = (_i64Subtract(($14|0),($17|0),($24|0),0)|0);
 $26 = tempRet0;
 $27 = (($pDecEngine) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_bitshift64Shl(($25|0),($26|0),($28|0))|0);
 $30 = tempRet0;
 $31 = ($11>>>0)<($30>>>0);
 $32 = ($8>>>0)<($29>>>0);
 $33 = ($11|0)==($30|0);
 $34 = $33 & $32;
 $35 = $31 | $34;
 do {
  if ($35) {
   $50 = ((29424 + ($1<<1)|0) + 1|0);
   $51 = HEAP8[$50>>0]|0;
   HEAP8[$pBinCtx>>0] = $51;
   $52 = ($26>>>0)>(0);
   $53 = ($25>>>0)>(255);
   $54 = ($26|0)==(0);
   $55 = $54 & $53;
   $56 = $52 | $55;
   if (!($56)) {
    $61 = (_bitshift64Shl(($25|0),($26|0),1)|0);
    $62 = tempRet0;
    $65 = $61;$68 = $62;$74 = $8;$77 = $11;$iRenorm$0 = 1;
    break;
   }
   $57 = $pDecEngine;
   $58 = $57;
   HEAP32[$58>>2] = $25;
   $59 = (($57) + 4)|0;
   $60 = $59;
   HEAP32[$60>>2] = $26;
   STACKTOP = sp;return 0;
  } else {
   $36 = (_i64Subtract(($8|0),($11|0),($29|0),($30|0))|0);
   $37 = tempRet0;
   $38 = $4 ^ 1;
   HEAP32[$uiBinVal>>2] = $38;
   $39 = ($0<<24>>24)==(0);
   if ($39) {
    $40 = HEAP8[$2>>0]|0;
    $41 = $40&255;
    $42 = $41 ^ 1;
    $43 = $42&255;
    HEAP8[$2>>0] = $43;
   }
   $44 = (29424 + ($1<<1)|0);
   $45 = HEAP8[$44>>0]|0;
   HEAP8[$pBinCtx>>0] = $45;
   $46 = (2824 + ($23)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = $23 << $48;
   $65 = $49;$68 = 0;$74 = $36;$77 = $37;$iRenorm$0 = $48;
  }
 } while(0);
 $63 = $pDecEngine;
 $64 = $63;
 HEAP32[$64>>2] = $65;
 $66 = (($63) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = $68;
 $69 = HEAP32[$27>>2]|0;
 $70 = (($69) - ($iRenorm$0))|0;
 HEAP32[$27>>2] = $70;
 $71 = ($70|0)>(0);
 if (!($71)) {
  HEAP32[$uiVal>>2] = 0;
  HEAP32[$iNumBitsRead>>2] = 0;
  $78 = (__ZN7WelsDec15Read32BitsCabacEPNS_19SWelsCabacDecEngineERjRi($pDecEngine,$uiVal,$iNumBitsRead)|0);
  $79 = HEAP32[$iNumBitsRead>>2]|0;
  $80 = (_bitshift64Shl(($74|0),($77|0),($79|0))|0);
  $81 = tempRet0;
  $82 = HEAP32[$uiVal>>2]|0;
  $83 = $80 | $82;
  $84 = $5;
  $85 = $84;
  HEAP32[$85>>2] = $83;
  $86 = (($84) + 4)|0;
  $87 = $86;
  HEAP32[$87>>2] = $81;
  $88 = HEAP32[$27>>2]|0;
  $89 = (($88) + ($79))|0;
  HEAP32[$27>>2] = $89;
  $90 = ($78|0)!=(0);
  $91 = ($89|0)<(0);
  $or$cond = $90 & $91;
  $$ = $or$cond ? $78 : 0;
  STACKTOP = sp;return ($$|0);
 }
 $72 = $5;
 $73 = $72;
 HEAP32[$73>>2] = $74;
 $75 = (($72) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = $77;
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec17DecodeBypassCabacEPNS_19SWelsCabacDecEngineERj($pDecEngine,$uiBinVal) {
 $pDecEngine = $pDecEngine|0;
 $uiBinVal = $uiBinVal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iBitsLeft$0 = 0, $iNumBitsRead = 0, $or$cond = 0, $uiVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiVal = sp + 4|0;
 $iNumBitsRead = sp;
 $0 = (($pDecEngine) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pDecEngine) + 8|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($1|0)<(1);
 if ($9) {
  HEAP32[$uiVal>>2] = 0;
  HEAP32[$iNumBitsRead>>2] = 0;
  $10 = (__ZN7WelsDec15Read32BitsCabacEPNS_19SWelsCabacDecEngineERjRi($pDecEngine,$uiVal,$iNumBitsRead)|0);
  $11 = HEAP32[$iNumBitsRead>>2]|0;
  $12 = (_bitshift64Shl(($5|0),($8|0),($11|0))|0);
  $13 = tempRet0;
  $14 = HEAP32[$uiVal>>2]|0;
  $15 = $12 | $14;
  $16 = ($10|0)!=(0);
  $17 = ($11|0)==(0);
  $or$cond = $16 & $17;
  if ($or$cond) {
   $$0 = $10;
   STACKTOP = sp;return ($$0|0);
  } else {
   $27 = $13;$29 = $15;$iBitsLeft$0 = $11;
  }
 } else {
  $27 = $8;$29 = $5;$iBitsLeft$0 = $1;
 }
 $18 = (($iBitsLeft$0) + -1)|0;
 $19 = $pDecEngine;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_bitshift64Shl(($21|0),($24|0),($18|0))|0);
 $26 = tempRet0;
 $28 = ($27>>>0)<($26>>>0);
 $30 = ($29>>>0)<($25>>>0);
 $31 = ($27|0)==($26|0);
 $32 = $31 & $30;
 $33 = $28 | $32;
 HEAP32[$0>>2] = $18;
 if ($33) {
  $40 = $2;
  $41 = $40;
  HEAP32[$41>>2] = $29;
  $42 = (($40) + 4)|0;
  $43 = $42;
  HEAP32[$43>>2] = $27;
  HEAP32[$uiBinVal>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $34 = (_i64Subtract(($29|0),($27|0),($25|0),($26|0))|0);
  $35 = tempRet0;
  $36 = $2;
  $37 = $36;
  HEAP32[$37>>2] = $34;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
  HEAP32[$uiBinVal>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec20DecodeTerminateCabacEPNS_19SWelsCabacDecEngineERj($pDecEngine,$uiBinVal) {
 $pDecEngine = $pDecEngine|0;
 $uiBinVal = $uiBinVal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $iNumBitsRead = 0, $or$cond = 0, $uiVal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiVal = sp + 4|0;
 $iNumBitsRead = sp;
 $0 = $pDecEngine;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_i64Add(($2|0),($5|0),-2,-1)|0);
 $7 = tempRet0;
 $8 = (($pDecEngine) + 8|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($pDecEngine) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_bitshift64Shl(($6|0),($7|0),($16|0))|0);
 $18 = tempRet0;
 $19 = ($14>>>0)<($18>>>0);
 $20 = ($11>>>0)<($17>>>0);
 $21 = ($14|0)==($18|0);
 $22 = $21 & $20;
 $23 = $19 | $22;
 if (!($23)) {
  HEAP32[$uiBinVal>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$uiBinVal>>2] = 0;
 $24 = ($7>>>0)<(0);
 $25 = ($6>>>0)<(256);
 $26 = ($7|0)==(0);
 $27 = $26 & $25;
 $28 = $24 | $27;
 if (!($28)) {
  $62 = $pDecEngine;
  $63 = $62;
  HEAP32[$63>>2] = $6;
  $64 = (($62) + 4)|0;
  $65 = $64;
  HEAP32[$65>>2] = $7;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (2824 + ($6)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $30&255;
 $33 = (_bitshift64Shl(($6|0),($7|0),($32|0))|0);
 $34 = tempRet0;
 $35 = $pDecEngine;
 $36 = $35;
 HEAP32[$36>>2] = $33;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $34;
 $39 = HEAP32[$15>>2]|0;
 $40 = (($39) - ($31))|0;
 HEAP32[$15>>2] = $40;
 $41 = ($40|0)<(0);
 if ($41) {
  HEAP32[$uiVal>>2] = 0;
  HEAP32[$iNumBitsRead>>2] = 0;
  $42 = (__ZN7WelsDec15Read32BitsCabacEPNS_19SWelsCabacDecEngineERjRi($pDecEngine,$uiVal,$iNumBitsRead)|0);
  $43 = $8;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($43) + 4)|0;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$iNumBitsRead>>2]|0;
  $50 = (_bitshift64Shl(($45|0),($48|0),($49|0))|0);
  $51 = tempRet0;
  $52 = HEAP32[$uiVal>>2]|0;
  $53 = $50 | $52;
  $54 = $8;
  $55 = $54;
  HEAP32[$55>>2] = $53;
  $56 = (($54) + 4)|0;
  $57 = $56;
  HEAP32[$57>>2] = $51;
  $58 = HEAP32[$15>>2]|0;
  $59 = (($58) + ($49))|0;
  HEAP32[$15>>2] = $59;
  $60 = ($42|0)!=(0);
  $61 = ($59|0)<(0);
  $or$cond = $60 & $61;
  if ($or$cond) {
   $$0 = $42;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec19DecodeUnaryBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEiRj($pDecEngine,$pBinCtx,$iCtxOffset,$uiSymVal) {
 $pDecEngine = $pDecEngine|0;
 $pBinCtx = $pBinCtx|0;
 $iCtxOffset = $iCtxOffset|0;
 $uiSymVal = $uiSymVal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 HEAP32[$uiSymVal>>2] = 0;
 $0 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($pDecEngine,$pBinCtx,$uiSymVal)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$uiSymVal>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pBinCtx) + ($iCtxOffset<<1)|0);
 HEAP32[$uiSymVal>>2] = 0;
 while(1) {
  $5 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($pDecEngine,$4,$uiCode)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0 = $5;
   label = 6;
   break;
  }
  $7 = HEAP32[$uiSymVal>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$uiSymVal>>2] = $8;
  $9 = HEAP32[$uiCode>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec20DecodeExpBypassCabacEPNS_19SWelsCabacDecEngineEiRj($pDecEngine,$iCount,$uiSymVal) {
 $pDecEngine = $pDecEngine|0;
 $iCount = $iCount|0;
 $uiSymVal = $uiSymVal|0;
 var $$0 = 0, $$01$ph = 0, $$2 = 0, $$2$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $iBitsLeft$0$i = 0, $iBitsLeft$0$i5 = 0;
 var $iNumBitsRead$i = 0, $iNumBitsRead$i3 = 0, $iSymTmp$0$ph = 0, $iSymTmp2$0$ph = 0, $or$cond$i = 0, $or$cond$i4 = 0, $uiVal$i = 0, $uiVal$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiVal$i2 = sp + 12|0;
 $iNumBitsRead$i3 = sp + 8|0;
 $uiVal$i = sp + 4|0;
 $iNumBitsRead$i = sp;
 HEAP32[$uiSymVal>>2] = 0;
 $0 = (($pDecEngine) + 16|0);
 $1 = (($pDecEngine) + 8|0);
 $$01$ph = $iCount;$iSymTmp$0$ph = 0;
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = $1;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($2|0)<(1);
  if ($9) {
   HEAP32[$uiVal$i>>2] = 0;
   HEAP32[$iNumBitsRead$i>>2] = 0;
   $10 = (__ZN7WelsDec15Read32BitsCabacEPNS_19SWelsCabacDecEngineERjRi($pDecEngine,$uiVal$i,$iNumBitsRead$i)|0);
   $11 = HEAP32[$iNumBitsRead$i>>2]|0;
   $12 = (_bitshift64Shl(($5|0),($8|0),($11|0))|0);
   $13 = tempRet0;
   $14 = HEAP32[$uiVal$i>>2]|0;
   $15 = $12 | $14;
   $16 = ($10|0)!=(0);
   $17 = ($11|0)==(0);
   $or$cond$i = $16 & $17;
   if ($or$cond$i) {
    $$0 = $10;
    label = 15;
    break;
   } else {
    $27 = $13;$29 = $15;$iBitsLeft$0$i = $11;
   }
  } else {
   $27 = $8;$29 = $5;$iBitsLeft$0$i = $2;
  }
  $18 = (($iBitsLeft$0$i) + -1)|0;
  $19 = $pDecEngine;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_bitshift64Shl(($21|0),($24|0),($18|0))|0);
  $26 = tempRet0;
  $28 = ($27>>>0)<($26>>>0);
  $30 = ($29>>>0)<($25>>>0);
  $31 = ($27|0)==($26|0);
  $32 = $31 & $30;
  $33 = $28 | $32;
  HEAP32[$0>>2] = $18;
  if ($33) {
   break;
  }
  $38 = (_i64Subtract(($29|0),($27|0),($25|0),($26|0))|0);
  $39 = tempRet0;
  $40 = $1;
  $41 = $40;
  HEAP32[$41>>2] = $38;
  $42 = (($40) + 4)|0;
  $43 = $42;
  HEAP32[$43>>2] = $39;
  $44 = 1 << $$01$ph;
  $45 = (($44) + ($iSymTmp$0$ph))|0;
  $46 = (($$01$ph) + 1)|0;
  $$01$ph = $46;$iSymTmp$0$ph = $45;
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return ($$0|0);
 }
 $34 = $1;
 $35 = $34;
 HEAP32[$35>>2] = $29;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $27;
 $$2$ph = $$01$ph;$iSymTmp2$0$ph = 0;
 L10: while(1) {
  $$2 = $$2$ph;
  while(1) {
   $47 = (($$2) + -1)|0;
   $48 = ($$2|0)==(0);
   if ($48) {
    break L10;
   }
   $49 = HEAP32[$0>>2]|0;
   $50 = $1;
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   $53 = (($50) + 4)|0;
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $56 = ($49|0)<(1);
   if ($56) {
    HEAP32[$uiVal$i2>>2] = 0;
    HEAP32[$iNumBitsRead$i3>>2] = 0;
    $57 = (__ZN7WelsDec15Read32BitsCabacEPNS_19SWelsCabacDecEngineERjRi($pDecEngine,$uiVal$i2,$iNumBitsRead$i3)|0);
    $58 = HEAP32[$iNumBitsRead$i3>>2]|0;
    $59 = (_bitshift64Shl(($52|0),($55|0),($58|0))|0);
    $60 = tempRet0;
    $61 = HEAP32[$uiVal$i2>>2]|0;
    $62 = $59 | $61;
    $63 = ($57|0)!=(0);
    $64 = ($58|0)==(0);
    $or$cond$i4 = $63 & $64;
    if ($or$cond$i4) {
     $$0 = $57;
     label = 15;
     break L10;
    } else {
     $74 = $60;$76 = $62;$iBitsLeft$0$i5 = $58;
    }
   } else {
    $74 = $55;$76 = $52;$iBitsLeft$0$i5 = $49;
   }
   $65 = (($iBitsLeft$0$i5) + -1)|0;
   $66 = $pDecEngine;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($66) + 4)|0;
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = (_bitshift64Shl(($68|0),($71|0),($65|0))|0);
   $73 = tempRet0;
   $75 = ($74>>>0)<($73>>>0);
   $77 = ($76>>>0)<($72>>>0);
   $78 = ($74|0)==($73|0);
   $79 = $78 & $77;
   $80 = $75 | $79;
   HEAP32[$0>>2] = $65;
   if (!($80)) {
    break;
   }
   $81 = $1;
   $82 = $81;
   HEAP32[$82>>2] = $76;
   $83 = (($81) + 4)|0;
   $84 = $83;
   HEAP32[$84>>2] = $74;
   $$2 = $47;
  }
  $85 = (_i64Subtract(($76|0),($74|0),($72|0),($73|0))|0);
  $86 = tempRet0;
  $87 = $1;
  $88 = $87;
  HEAP32[$88>>2] = $85;
  $89 = (($87) + 4)|0;
  $90 = $89;
  HEAP32[$90>>2] = $86;
  $91 = 1 << $47;
  $92 = $91 | $iSymTmp2$0$ph;
  $$2$ph = $47;$iSymTmp2$0$ph = $92;
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return ($$0|0);
 }
 $93 = (($iSymTmp2$0$ph) + ($iSymTmp$0$ph))|0;
 HEAP32[$uiSymVal>>2] = $93;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec19DecodeUEGLevelCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($pDecEngine,$pBinCtx,$uiCode) {
 $pDecEngine = $pDecEngine|0;
 $pBinCtx = $pBinCtx|0;
 $uiCode = $uiCode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $uiCount$0 = 0, $uiTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiTmp = sp;
 HEAP32[$uiCode>>2] = 0;
 $0 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($pDecEngine,$pBinCtx,$uiCode)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$uiCode>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$uiCode>>2] = 0;
 $uiCount$0 = 1;
 while(1) {
  $4 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($pDecEngine,$pBinCtx,$uiTmp)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = $4;
   label = 9;
   break;
  }
  $6 = HEAP32[$uiCode>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[$uiCode>>2] = $7;
  $8 = (($uiCount$0) + 1)|0;
  $9 = HEAP32[$uiTmp>>2]|0;
  $10 = ($9|0)!=(0);
  $11 = ($8|0)!=(13);
  $or$cond = $10 & $11;
  if ($or$cond) {
   $uiCount$0 = $8;
  } else {
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($$0|0);
 }
 if (!($10)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (__ZN7WelsDec20DecodeExpBypassCabacEPNS_19SWelsCabacDecEngineEiRj($pDecEngine,0,$uiTmp)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$uiTmp>>2]|0;
 $15 = (($14) + 1)|0;
 $16 = HEAP32[$uiCode>>2]|0;
 $17 = (($15) + ($16))|0;
 HEAP32[$uiCode>>2] = $17;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec16DecodeUEGMvCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEjRj($pDecEngine,$pBinCtx,$iMaxBin,$uiCode) {
 $pDecEngine = $pDecEngine|0;
 $pBinCtx = $pBinCtx|0;
 $iMaxBin = $iMaxBin|0;
 $uiCode = $uiCode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $uiCount$0 = 0, $uiTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiTmp = sp;
 $0 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($pDecEngine,$pBinCtx,$uiCode)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$uiCode>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$uiCode>>2] = 0;
 $uiCount$0 = 1;
 while(1) {
  $4 = (($uiCount$0) + 1)|0;
  $5 = (3080 + ($uiCount$0<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = (($pBinCtx) + ($7<<1)|0);
  $9 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($pDecEngine,$8,$uiTmp)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $$0 = $9;
   label = 9;
   break;
  }
  $11 = HEAP32[$uiCode>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$uiCode>>2] = $12;
  $13 = HEAP32[$uiTmp>>2]|0;
  $14 = ($13|0)!=(0);
  $15 = ($4|0)!=(8);
  $or$cond = $14 & $15;
  if ($or$cond) {
   $uiCount$0 = $4;
  } else {
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($$0|0);
 }
 if (!($14)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (__ZN7WelsDec20DecodeExpBypassCabacEPNS_19SWelsCabacDecEngineEiRj($pDecEngine,3,$uiTmp)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = HEAP32[$uiTmp>>2]|0;
 $19 = (($18) + 1)|0;
 $20 = HEAP32[$uiCode>>2]|0;
 $21 = (($19) + ($20))|0;
 HEAP32[$uiCode>>2] = $21;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec29DeblockingBsMarginalMBAvcbaseEPNS_10TagDqLayerEiii($pCurDqLayer,$iEdge,$iNeighMb,$iMbXy) {
 $pCurDqLayer = $pCurDqLayer|0;
 $iEdge = $iEdge|0;
 $iNeighMb = $iNeighMb|0;
 $iMbXy = $iMbXy|0;
 var $$pre = 0, $$sum = 0, $$sum62 = 0, $$sum63 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond50 = 0, $exitcond55 = 0, $i$136 = 0, $i$224 = 0, $i$311 = 0, $j$040 = 0, $j$040$1 = 0, $j$129 = 0, $j$317 = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond3 = 0, $or$cond5 = 0, $pB8x8Idx$138 = 0, $pBIdx$025 = 0, $pBIdx$213 = 0;
 var $pBn8x8Idx$126 = 0, $pBnIdx$037 = 0, $pBnIdx$214 = 0, $phitmp = 0, $phitmp10 = 0, $phitmp10$1 = 0, $phitmp7 = 0, $phitmp7$1 = 0, $phitmp9 = 0, $phitmp9$1 = 0, $scevgep = 0, $scevgep53 = 0, $storemerge = 0, $uiBSx4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiBSx4 = sp;
 $0 = (3096 + ($iEdge<<3)|0);
 $1 = ((3096 + ($iEdge<<3)|0) + 4|0);
 $2 = (3112 + ($iEdge<<4)|0);
 $3 = ((3112 + ($iEdge<<4)|0) + 8|0);
 $4 = (($pCurDqLayer) + 3944|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($iMbXy)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 $9 = (($5) + ($iNeighMb)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $12 = (($pCurDqLayer) + 3964|0);
 $13 = (($pCurDqLayer) + 3932|0);
 $14 = (($pCurDqLayer) + 3916|0);
 $$pre = HEAP32[$12>>2]|0;
 if ($8) {
  if ($11) {
   $i$311 = 0;$pBIdx$213 = $0;$pBnIdx$214 = $1;
   while(1) {
    $185 = HEAP8[$pBIdx$213>>0]|0;
    $186 = $185&255;
    $187 = ((($$pre) + (($iMbXy*24)|0)|0) + ($186)|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = HEAP8[$pBnIdx$214>>0]|0;
    $190 = $189&255;
    $191 = ((($$pre) + (($iNeighMb*24)|0)|0) + ($190)|0);
    $192 = HEAP8[$191>>0]|0;
    $193 = $192 | $188;
    $194 = ($193<<24>>24)==(0);
    if ($194) {
     $196 = HEAP32[$13>>2]|0;
     $197 = ((($196) + ($iMbXy<<4)|0) + ($186)|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = ((($196) + ($iNeighMb<<4)|0) + ($190)|0);
     $200 = HEAP8[$199>>0]|0;
     $201 = ($198<<24>>24)==($200<<24>>24);
     if ($201) {
      $202 = HEAP32[$14>>2]|0;
      $203 = ((($202) + ($iMbXy<<6)|0) + ($186<<2)|0);
      $204 = HEAP16[$203>>1]|0;
      $205 = $204 << 16 >> 16;
      $206 = ((($202) + ($iNeighMb<<6)|0) + ($190<<2)|0);
      $207 = HEAP16[$206>>1]|0;
      $208 = $207 << 16 >> 16;
      $209 = (($205) - ($208))|0;
      $210 = $209 >> 31;
      $211 = $210 ^ $209;
      $212 = (($211) - ($210))|0;
      $213 = ($212|0)>(3);
      if ($213) {
       $226 = 1;
      } else {
       $214 = (((($202) + ($iMbXy<<6)|0) + ($186<<2)|0) + 2|0);
       $215 = HEAP16[$214>>1]|0;
       $216 = $215 << 16 >> 16;
       $217 = (((($202) + ($iNeighMb<<6)|0) + ($190<<2)|0) + 2|0);
       $218 = HEAP16[$217>>1]|0;
       $219 = $218 << 16 >> 16;
       $220 = (($216) - ($219))|0;
       $221 = $220 >> 31;
       $222 = $221 ^ $220;
       $223 = (($222) - ($221))|0;
       $224 = ($223|0)>(3);
       $phitmp = $224&1;
       $226 = $phitmp;
      }
     } else {
      $226 = 1;
     }
     $225 = (($uiBSx4) + ($i$311)|0);
     HEAP8[$225>>0] = $226;
    } else {
     $195 = (($uiBSx4) + ($i$311)|0);
     HEAP8[$195>>0] = 2;
    }
    $227 = (($pBIdx$213) + 1|0);
    $228 = (($pBnIdx$214) + 1|0);
    $229 = (($i$311) + 1)|0;
    $exitcond = ($229|0)==(4);
    if ($exitcond) {
     break;
    } else {
     $i$311 = $229;$pBIdx$213 = $227;$pBnIdx$214 = $228;
    }
   }
   $230 = HEAP32[$uiBSx4>>2]|0;
   STACKTOP = sp;return ($230|0);
  } else {
   $i$224 = 0;$pBIdx$025 = $0;$pBn8x8Idx$126 = $3;
  }
  while(1) {
   $j$317 = 0;
   while(1) {
    $126 = (($pBn8x8Idx$126) + ($j$317)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&255;
    $129 = ((($$pre) + (($iNeighMb*24)|0)|0) + ($128)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = (($j$317) + 1)|0;
    $133 = ($130<<24>>24)==(0);
    $134 = ($132|0)<(4);
    $or$cond5 = $133 & $134;
    if ($or$cond5) {
     $j$317 = $132;
    } else {
     break;
    }
   }
   $135 = $i$224 << 1;
   $136 = HEAP8[$pBIdx$025>>0]|0;
   $137 = $136&255;
   $138 = ((($$pre) + (($iMbXy*24)|0)|0) + ($137)|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = $139 << 24 >> 24;
   $141 = $140 | $131;
   $142 = ($141|0)==(0);
   if ($142) {
    $144 = HEAP32[$13>>2]|0;
    $145 = ((($144) + ($iMbXy<<4)|0) + ($137)|0);
    $146 = HEAP8[$145>>0]|0;
    $147 = HEAP8[$pBn8x8Idx$126>>0]|0;
    $148 = $147&255;
    $149 = ((($144) + ($iNeighMb<<4)|0) + ($148)|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = ($146<<24>>24)==($150<<24>>24);
    if ($151) {
     $152 = HEAP32[$14>>2]|0;
     $153 = ((($152) + ($iMbXy<<6)|0) + ($137<<2)|0);
     $154 = HEAP16[$153>>1]|0;
     $155 = $154 << 16 >> 16;
     $156 = ((($152) + ($iNeighMb<<6)|0) + ($148<<2)|0);
     $157 = HEAP16[$156>>1]|0;
     $158 = $157 << 16 >> 16;
     $159 = (($155) - ($158))|0;
     $160 = $159 >> 31;
     $161 = $160 ^ $159;
     $162 = (($161) - ($160))|0;
     $163 = ($162|0)>(3);
     if ($163) {
      $176 = 1;
     } else {
      $164 = (((($152) + ($iMbXy<<6)|0) + ($137<<2)|0) + 2|0);
      $165 = HEAP16[$164>>1]|0;
      $166 = $165 << 16 >> 16;
      $167 = (((($152) + ($iNeighMb<<6)|0) + ($148<<2)|0) + 2|0);
      $168 = HEAP16[$167>>1]|0;
      $169 = $168 << 16 >> 16;
      $170 = (($166) - ($169))|0;
      $171 = $170 >> 31;
      $172 = $171 ^ $170;
      $173 = (($172) - ($171))|0;
      $174 = ($173|0)>(3);
      $phitmp7 = $174&1;
      $176 = $phitmp7;
     }
    } else {
     $176 = 1;
    }
    $175 = (($uiBSx4) + ($135)|0);
    HEAP8[$175>>0] = $176;
   } else {
    $143 = (($uiBSx4) + ($135)|0);
    HEAP8[$143>>0] = 2;
   }
   $177 = (($pBIdx$025) + 1|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = ((($$pre) + (($iMbXy*24)|0)|0) + ($179)|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181 << 24 >> 24;
   $183 = $182 | $131;
   $184 = ($183|0)==(0);
   if ($184) {
    $233 = HEAP32[$13>>2]|0;
    $234 = ((($233) + ($iMbXy<<4)|0) + ($179)|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = HEAP8[$pBn8x8Idx$126>>0]|0;
    $237 = $236&255;
    $238 = ((($233) + ($iNeighMb<<4)|0) + ($237)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = ($235<<24>>24)==($239<<24>>24);
    if ($240) {
     $241 = HEAP32[$14>>2]|0;
     $242 = ((($241) + ($iMbXy<<6)|0) + ($179<<2)|0);
     $243 = HEAP16[$242>>1]|0;
     $244 = $243 << 16 >> 16;
     $245 = ((($241) + ($iNeighMb<<6)|0) + ($237<<2)|0);
     $246 = HEAP16[$245>>1]|0;
     $247 = $246 << 16 >> 16;
     $248 = (($244) - ($247))|0;
     $249 = $248 >> 31;
     $250 = $249 ^ $248;
     $251 = (($250) - ($249))|0;
     $252 = ($251|0)>(3);
     if ($252) {
      $266 = 1;
     } else {
      $253 = (((($241) + ($iMbXy<<6)|0) + ($179<<2)|0) + 2|0);
      $254 = HEAP16[$253>>1]|0;
      $255 = $254 << 16 >> 16;
      $256 = (((($241) + ($iNeighMb<<6)|0) + ($237<<2)|0) + 2|0);
      $257 = HEAP16[$256>>1]|0;
      $258 = $257 << 16 >> 16;
      $259 = (($255) - ($258))|0;
      $260 = $259 >> 31;
      $261 = $260 ^ $259;
      $262 = (($261) - ($260))|0;
      $263 = ($262|0)>(3);
      $phitmp7$1 = $263&1;
      $266 = $phitmp7$1;
     }
    } else {
     $266 = 1;
    }
    $264 = $135 | 1;
    $265 = (($uiBSx4) + ($264)|0);
    HEAP8[$265>>0] = $266;
   } else {
    $231 = $135 | 1;
    $232 = (($uiBSx4) + ($231)|0);
    HEAP8[$232>>0] = 2;
   }
   $scevgep = (($pBIdx$025) + 2|0);
   $267 = (($pBn8x8Idx$126) + 4|0);
   $268 = (($i$224) + 1)|0;
   $exitcond50 = ($268|0)==(2);
   if ($exitcond50) {
    break;
   } else {
    $i$224 = $268;$pBIdx$025 = $scevgep;$pBn8x8Idx$126 = $267;
   }
  }
  $230 = HEAP32[$uiBSx4>>2]|0;
  STACKTOP = sp;return ($230|0);
 }
 if ($11) {
  $i$136 = 0;$pB8x8Idx$138 = $2;$pBnIdx$037 = $1;
  while(1) {
   $j$129 = 0;
   while(1) {
    $67 = (($pB8x8Idx$138) + ($j$129)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = ((($$pre) + (($iMbXy*24)|0)|0) + ($69)|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = (($j$129) + 1)|0;
    $74 = ($71<<24>>24)==(0);
    $75 = ($73|0)<(4);
    $or$cond3 = $74 & $75;
    if ($or$cond3) {
     $j$129 = $73;
    } else {
     break;
    }
   }
   $76 = $i$136 << 1;
   $77 = HEAP8[$pBnIdx$037>>0]|0;
   $78 = $77&255;
   $79 = ((($$pre) + (($iNeighMb*24)|0)|0) + ($78)|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80 << 24 >> 24;
   $82 = $81 | $72;
   $83 = ($82|0)==(0);
   if ($83) {
    $85 = HEAP8[$pB8x8Idx$138>>0]|0;
    $86 = $85&255;
    $87 = HEAP32[$13>>2]|0;
    $88 = ((($87) + ($iMbXy<<4)|0) + ($86)|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = ((($87) + ($iNeighMb<<4)|0) + ($78)|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = ($89<<24>>24)==($91<<24>>24);
    if ($92) {
     $93 = HEAP32[$14>>2]|0;
     $94 = ((($93) + ($iMbXy<<6)|0) + ($86<<2)|0);
     $95 = HEAP16[$94>>1]|0;
     $96 = $95 << 16 >> 16;
     $97 = ((($93) + ($iNeighMb<<6)|0) + ($78<<2)|0);
     $98 = HEAP16[$97>>1]|0;
     $99 = $98 << 16 >> 16;
     $100 = (($96) - ($99))|0;
     $101 = $100 >> 31;
     $102 = $101 ^ $100;
     $103 = (($102) - ($101))|0;
     $104 = ($103|0)>(3);
     if ($104) {
      $117 = 1;
     } else {
      $105 = (((($93) + ($iMbXy<<6)|0) + ($86<<2)|0) + 2|0);
      $106 = HEAP16[$105>>1]|0;
      $107 = $106 << 16 >> 16;
      $108 = (((($93) + ($iNeighMb<<6)|0) + ($78<<2)|0) + 2|0);
      $109 = HEAP16[$108>>1]|0;
      $110 = $109 << 16 >> 16;
      $111 = (($107) - ($110))|0;
      $112 = $111 >> 31;
      $113 = $112 ^ $111;
      $114 = (($113) - ($112))|0;
      $115 = ($114|0)>(3);
      $phitmp9 = $115&1;
      $117 = $phitmp9;
     }
    } else {
     $117 = 1;
    }
    $116 = (($uiBSx4) + ($76)|0);
    HEAP8[$116>>0] = $117;
   } else {
    $84 = (($uiBSx4) + ($76)|0);
    HEAP8[$84>>0] = 2;
   }
   $118 = (($pBnIdx$037) + 1|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ((($$pre) + (($iNeighMb*24)|0)|0) + ($120)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122 << 24 >> 24;
   $124 = $123 | $72;
   $125 = ($124|0)==(0);
   if ($125) {
    $271 = HEAP8[$pB8x8Idx$138>>0]|0;
    $272 = $271&255;
    $273 = HEAP32[$13>>2]|0;
    $274 = ((($273) + ($iMbXy<<4)|0) + ($272)|0);
    $275 = HEAP8[$274>>0]|0;
    $276 = ((($273) + ($iNeighMb<<4)|0) + ($120)|0);
    $277 = HEAP8[$276>>0]|0;
    $278 = ($275<<24>>24)==($277<<24>>24);
    if ($278) {
     $279 = HEAP32[$14>>2]|0;
     $280 = ((($279) + ($iMbXy<<6)|0) + ($272<<2)|0);
     $281 = HEAP16[$280>>1]|0;
     $282 = $281 << 16 >> 16;
     $283 = ((($279) + ($iNeighMb<<6)|0) + ($120<<2)|0);
     $284 = HEAP16[$283>>1]|0;
     $285 = $284 << 16 >> 16;
     $286 = (($282) - ($285))|0;
     $287 = $286 >> 31;
     $288 = $287 ^ $286;
     $289 = (($288) - ($287))|0;
     $290 = ($289|0)>(3);
     if ($290) {
      $304 = 1;
     } else {
      $291 = (((($279) + ($iMbXy<<6)|0) + ($272<<2)|0) + 2|0);
      $292 = HEAP16[$291>>1]|0;
      $293 = $292 << 16 >> 16;
      $294 = (((($279) + ($iNeighMb<<6)|0) + ($120<<2)|0) + 2|0);
      $295 = HEAP16[$294>>1]|0;
      $296 = $295 << 16 >> 16;
      $297 = (($293) - ($296))|0;
      $298 = $297 >> 31;
      $299 = $298 ^ $297;
      $300 = (($299) - ($298))|0;
      $301 = ($300|0)>(3);
      $phitmp9$1 = $301&1;
      $304 = $phitmp9$1;
     }
    } else {
     $304 = 1;
    }
    $302 = $76 | 1;
    $303 = (($uiBSx4) + ($302)|0);
    HEAP8[$303>>0] = $304;
   } else {
    $269 = $76 | 1;
    $270 = (($uiBSx4) + ($269)|0);
    HEAP8[$270>>0] = 2;
   }
   $scevgep53 = (($pBnIdx$037) + 2|0);
   $305 = (($pB8x8Idx$138) + 4|0);
   $306 = (($i$136) + 1)|0;
   $exitcond55 = ($306|0)==(2);
   if ($exitcond55) {
    break;
   } else {
    $i$136 = $306;$pB8x8Idx$138 = $305;$pBnIdx$037 = $scevgep53;
   }
  }
  $230 = HEAP32[$uiBSx4>>2]|0;
  STACKTOP = sp;return ($230|0);
 } else {
  $j$040 = 0;
 }
 while(1) {
  $15 = ((3112 + ($iEdge<<4)|0) + ($j$040)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ((($$pre) + (($iMbXy*24)|0)|0) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $$sum = (($j$040) + 8)|0;
  $20 = ((3112 + ($iEdge<<4)|0) + ($$sum)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ((($$pre) + (($iNeighMb*24)|0)|0) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $19 | $24;
  $26 = (($j$040) + 1)|0;
  $27 = ($25<<24>>24)==(0);
  $28 = ($26|0)<(4);
  $or$cond = $27 & $28;
  if ($or$cond) {
   $j$040 = $26;
  } else {
   break;
  }
 }
 if ($27) {
  $30 = HEAP8[$2>>0]|0;
  $31 = $30&255;
  $32 = HEAP32[$13>>2]|0;
  $33 = ((($32) + ($iMbXy<<4)|0) + ($31)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = HEAP8[$3>>0]|0;
  $36 = $35&255;
  $37 = ((($32) + ($iNeighMb<<4)|0) + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = ($34<<24>>24)==($38<<24>>24);
  if ($39) {
   $40 = HEAP32[$14>>2]|0;
   $41 = ((($40) + ($iMbXy<<6)|0) + ($31<<2)|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42 << 16 >> 16;
   $44 = ((($40) + ($iNeighMb<<6)|0) + ($36<<2)|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $45 << 16 >> 16;
   $47 = (($43) - ($46))|0;
   $48 = $47 >> 31;
   $49 = $48 ^ $47;
   $50 = (($49) - ($48))|0;
   $51 = ($50|0)>(3);
   if ($51) {
    $64 = 1;
   } else {
    $52 = (((($40) + ($iMbXy<<6)|0) + ($31<<2)|0) + 2|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = $53 << 16 >> 16;
    $55 = (((($40) + ($iNeighMb<<6)|0) + ($36<<2)|0) + 2|0);
    $56 = HEAP16[$55>>1]|0;
    $57 = $56 << 16 >> 16;
    $58 = (($54) - ($57))|0;
    $59 = $58 >> 31;
    $60 = $59 ^ $58;
    $61 = (($60) - ($59))|0;
    $62 = ($61|0)>(3);
    $phitmp10 = $62&1;
    $64 = $phitmp10;
   }
  } else {
   $64 = 1;
  }
  $63 = (($uiBSx4) + 1|0);
  HEAP8[$63>>0] = $64;
  $storemerge = $64;
 } else {
  $29 = (($uiBSx4) + 1|0);
  HEAP8[$29>>0] = 2;
  $storemerge = 2;
 }
 HEAP8[$uiBSx4>>0] = $storemerge;
 $65 = ((3112 + ($iEdge<<4)|0) + 4|0);
 $66 = ((3112 + ($iEdge<<4)|0) + 12|0);
 $j$040$1 = 0;
 while(1) {
  $$sum62 = (($j$040$1) + 4)|0;
  $307 = ((3112 + ($iEdge<<4)|0) + ($$sum62)|0);
  $308 = HEAP8[$307>>0]|0;
  $309 = $308&255;
  $310 = ((($$pre) + (($iMbXy*24)|0)|0) + ($309)|0);
  $311 = HEAP8[$310>>0]|0;
  $$sum63 = (($j$040$1) + 12)|0;
  $312 = ((3112 + ($iEdge<<4)|0) + ($$sum63)|0);
  $313 = HEAP8[$312>>0]|0;
  $314 = $313&255;
  $315 = ((($$pre) + (($iNeighMb*24)|0)|0) + ($314)|0);
  $316 = HEAP8[$315>>0]|0;
  $317 = $311 | $316;
  $318 = (($j$040$1) + 1)|0;
  $319 = ($317<<24>>24)==(0);
  $320 = ($318|0)<(4);
  $or$cond$1 = $319 & $320;
  if ($or$cond$1) {
   $j$040$1 = $318;
  } else {
   break;
  }
 }
 if (!($319)) {
  $321 = (($uiBSx4) + 3|0);
  HEAP8[$321>>0] = 2;
  $322 = (($uiBSx4) + 2|0);
  HEAP8[$322>>0] = 2;
  $230 = HEAP32[$uiBSx4>>2]|0;
  STACKTOP = sp;return ($230|0);
 }
 $323 = HEAP8[$65>>0]|0;
 $324 = $323&255;
 $325 = HEAP32[$13>>2]|0;
 $326 = ((($325) + ($iMbXy<<4)|0) + ($324)|0);
 $327 = HEAP8[$326>>0]|0;
 $328 = HEAP8[$66>>0]|0;
 $329 = $328&255;
 $330 = ((($325) + ($iNeighMb<<4)|0) + ($329)|0);
 $331 = HEAP8[$330>>0]|0;
 $332 = ($327<<24>>24)==($331<<24>>24);
 if ($332) {
  $333 = HEAP32[$14>>2]|0;
  $334 = ((($333) + ($iMbXy<<6)|0) + ($324<<2)|0);
  $335 = HEAP16[$334>>1]|0;
  $336 = $335 << 16 >> 16;
  $337 = ((($333) + ($iNeighMb<<6)|0) + ($329<<2)|0);
  $338 = HEAP16[$337>>1]|0;
  $339 = $338 << 16 >> 16;
  $340 = (($336) - ($339))|0;
  $341 = $340 >> 31;
  $342 = $341 ^ $340;
  $343 = (($342) - ($341))|0;
  $344 = ($343|0)>(3);
  if ($344) {
   $357 = 1;
  } else {
   $345 = (((($333) + ($iMbXy<<6)|0) + ($324<<2)|0) + 2|0);
   $346 = HEAP16[$345>>1]|0;
   $347 = $346 << 16 >> 16;
   $348 = (((($333) + ($iNeighMb<<6)|0) + ($329<<2)|0) + 2|0);
   $349 = HEAP16[$348>>1]|0;
   $350 = $349 << 16 >> 16;
   $351 = (($347) - ($350))|0;
   $352 = $351 >> 31;
   $353 = $352 ^ $351;
   $354 = (($353) - ($352))|0;
   $355 = ($354|0)>(3);
   $phitmp10$1 = $355&1;
   $357 = $phitmp10$1;
  }
 } else {
  $357 = 1;
 }
 $356 = (($uiBSx4) + 3|0);
 HEAP8[$356>>0] = $357;
 $358 = (($uiBSx4) + 2|0);
 HEAP8[$358>>0] = $357;
 $230 = HEAP32[$uiBSx4>>2]|0;
 STACKTOP = sp;return ($230|0);
}
function __ZN7WelsDec20FilteringEdgeChromaHEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$pPixCb,$pPixCr,$iStride,$pBS) {
 $pFilter = $pFilter|0;
 $pPixCb = $pPixCb|0;
 $pPixCr = $pPixCr|0;
 $iStride = $iStride|0;
 $pBS = $pBS|0;
 var $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tc_tEmP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $tc_tEmP = sp;
 $0 = (($tc_tEmP) + 15|0);
 $1 = $0;
 $2 = $1 & 15;
 $3 = $2 ^ 15;
 $4 = (($tc_tEmP) + ($3)|0);
 $5 = (($pFilter) + 26|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($pFilter) + 27|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($6<<24>>24)==($9<<24>>24);
 $11 = (($pFilter) + 24|0);
 if ($10) {
  $35 = HEAP8[$11>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = (($7) + 12)|0;
  $38 = (($37) + ($36))|0;
  $39 = (3144 + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = (($pFilter) + 25|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $45 = (($37) + ($44))|0;
  $46 = (3224 + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = $48 | $41;
  $50 = ($49|0)==(0);
  if ($50) {
   STACKTOP = sp;return;
  }
  $51 = HEAP8[$pBS>>0]|0;
  $52 = $51&255;
  $53 = ((3304 + ($38<<2)|0) + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (($55) + 1)|0;
  $57 = $56&255;
  HEAP8[$4>>0] = $57;
  $58 = (($pBS) + 1|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = ((3304 + ($38<<2)|0) + ($60)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = (($63) + 1)|0;
  $65 = $64&255;
  $$sum3 = (($3) + 1)|0;
  $66 = (($tc_tEmP) + ($$sum3)|0);
  HEAP8[$66>>0] = $65;
  $67 = (($pBS) + 2|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = ((3304 + ($38<<2)|0) + ($69)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = (($72) + 1)|0;
  $74 = $73&255;
  $$sum4 = (($3) + 2)|0;
  $75 = (($tc_tEmP) + ($$sum4)|0);
  HEAP8[$75>>0] = $74;
  $76 = (($pBS) + 3|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = ((3304 + ($38<<2)|0) + ($78)|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = (($81) + 1)|0;
  $83 = $82&255;
  $$sum5 = (($3) + 3)|0;
  $84 = (($tc_tEmP) + ($$sum5)|0);
  HEAP8[$84>>0] = $83;
  $85 = (($pFilter) + 32|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + 16|0);
  $88 = HEAP32[$87>>2]|0;
  FUNCTION_TABLE_viiiiii[$88 & 31]($pPixCb,$pPixCr,$iStride,$41,$48,$4);
  STACKTOP = sp;return;
 }
 $12 = (($pFilter) + 25|0);
 $13 = (($pBS) + 1|0);
 $$sum = (($3) + 1)|0;
 $14 = (($tc_tEmP) + ($$sum)|0);
 $15 = (($pBS) + 2|0);
 $$sum1 = (($3) + 2)|0;
 $16 = (($tc_tEmP) + ($$sum1)|0);
 $17 = (($pBS) + 3|0);
 $$sum2 = (($3) + 3)|0;
 $18 = (($tc_tEmP) + ($$sum2)|0);
 $19 = (($pFilter) + 32|0);
 $20 = HEAP8[$11>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = (($7) + 12)|0;
 $23 = (($22) + ($21))|0;
 $24 = (3144 + ($23)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = HEAP8[$12>>0]|0;
 $28 = $27 << 24 >> 24;
 $29 = (($22) + ($28))|0;
 $30 = (3224 + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 $33 = $32 | $26;
 $34 = ($33|0)==(0);
 if ($34) {
  $121 = $9;$123 = $20;$130 = $27;
 } else {
  $89 = HEAP8[$pBS>>0]|0;
  $90 = $89&255;
  $91 = ((3304 + ($23<<2)|0) + ($90)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = (($93) + 1)|0;
  $95 = $94&255;
  HEAP8[$4>>0] = $95;
  $96 = HEAP8[$13>>0]|0;
  $97 = $96&255;
  $98 = ((3304 + ($23<<2)|0) + ($97)|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($100) + 1)|0;
  $102 = $101&255;
  HEAP8[$14>>0] = $102;
  $103 = HEAP8[$15>>0]|0;
  $104 = $103&255;
  $105 = ((3304 + ($23<<2)|0) + ($104)|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = (($107) + 1)|0;
  $109 = $108&255;
  HEAP8[$16>>0] = $109;
  $110 = HEAP8[$17>>0]|0;
  $111 = $110&255;
  $112 = ((3304 + ($23<<2)|0) + ($111)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = (($114) + 1)|0;
  $116 = $115&255;
  HEAP8[$18>>0] = $116;
  $117 = HEAP32[$19>>2]|0;
  $118 = (($117) + 32|0);
  $119 = HEAP32[$118>>2]|0;
  FUNCTION_TABLE_viiiii[$119 & 15]($pPixCb,$iStride,$26,$32,$4);
  $$pre = HEAP8[$8>>0]|0;
  $$pre8 = HEAP8[$11>>0]|0;
  $$pre9 = HEAP8[$12>>0]|0;
  $121 = $$pre;$123 = $$pre8;$130 = $$pre9;
 }
 $120 = $121 << 24 >> 24;
 $122 = $123 << 24 >> 24;
 $124 = (($120) + 12)|0;
 $125 = (($124) + ($122))|0;
 $126 = (3144 + ($125)|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&255;
 $129 = $130 << 24 >> 24;
 $131 = (($124) + ($129))|0;
 $132 = (3224 + ($131)|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133 << 24 >> 24;
 $135 = $134 | $128;
 $136 = ($135|0)==(0);
 if ($136) {
  STACKTOP = sp;return;
 }
 $137 = HEAP8[$pBS>>0]|0;
 $138 = $137&255;
 $139 = ((3304 + ($125<<2)|0) + ($138)|0);
 $140 = HEAP8[$139>>0]|0;
 $141 = $140&255;
 $142 = (($141) + 1)|0;
 $143 = $142&255;
 HEAP8[$4>>0] = $143;
 $144 = HEAP8[$13>>0]|0;
 $145 = $144&255;
 $146 = ((3304 + ($125<<2)|0) + ($145)|0);
 $147 = HEAP8[$146>>0]|0;
 $148 = $147&255;
 $149 = (($148) + 1)|0;
 $150 = $149&255;
 HEAP8[$14>>0] = $150;
 $151 = HEAP8[$15>>0]|0;
 $152 = $151&255;
 $153 = ((3304 + ($125<<2)|0) + ($152)|0);
 $154 = HEAP8[$153>>0]|0;
 $155 = $154&255;
 $156 = (($155) + 1)|0;
 $157 = $156&255;
 HEAP8[$16>>0] = $157;
 $158 = HEAP8[$17>>0]|0;
 $159 = $158&255;
 $160 = ((3304 + ($125<<2)|0) + ($159)|0);
 $161 = HEAP8[$160>>0]|0;
 $162 = $161&255;
 $163 = (($162) + 1)|0;
 $164 = $163&255;
 HEAP8[$18>>0] = $164;
 $165 = HEAP32[$19>>2]|0;
 $166 = (($165) + 32|0);
 $167 = HEAP32[$166>>2]|0;
 FUNCTION_TABLE_viiiii[$167 & 15]($pPixCr,$iStride,$128,$134,$4);
 STACKTOP = sp;return;
}
function __ZN7WelsDec20FilteringEdgeChromaVEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$pPixCb,$pPixCr,$iStride,$pBS) {
 $pFilter = $pFilter|0;
 $pPixCb = $pPixCb|0;
 $pPixCr = $pPixCr|0;
 $iStride = $iStride|0;
 $pBS = $pBS|0;
 var $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tc_tEmP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $tc_tEmP = sp;
 $0 = (($tc_tEmP) + 15|0);
 $1 = $0;
 $2 = $1 & 15;
 $3 = $2 ^ 15;
 $4 = (($tc_tEmP) + ($3)|0);
 $5 = (($pFilter) + 26|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($pFilter) + 27|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($6<<24>>24)==($9<<24>>24);
 $11 = (($pFilter) + 24|0);
 if ($10) {
  $35 = HEAP8[$11>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = (($7) + 12)|0;
  $38 = (($37) + ($36))|0;
  $39 = (3144 + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = (($pFilter) + 25|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $45 = (($37) + ($44))|0;
  $46 = (3224 + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = $48 | $41;
  $50 = ($49|0)==(0);
  if ($50) {
   STACKTOP = sp;return;
  }
  $51 = HEAP8[$pBS>>0]|0;
  $52 = $51&255;
  $53 = ((3304 + ($38<<2)|0) + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (($55) + 1)|0;
  $57 = $56&255;
  HEAP8[$4>>0] = $57;
  $58 = (($pBS) + 1|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = ((3304 + ($38<<2)|0) + ($60)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = (($63) + 1)|0;
  $65 = $64&255;
  $$sum3 = (($3) + 1)|0;
  $66 = (($tc_tEmP) + ($$sum3)|0);
  HEAP8[$66>>0] = $65;
  $67 = (($pBS) + 2|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = ((3304 + ($38<<2)|0) + ($69)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = (($72) + 1)|0;
  $74 = $73&255;
  $$sum4 = (($3) + 2)|0;
  $75 = (($tc_tEmP) + ($$sum4)|0);
  HEAP8[$75>>0] = $74;
  $76 = (($pBS) + 3|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = ((3304 + ($38<<2)|0) + ($78)|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = (($81) + 1)|0;
  $83 = $82&255;
  $$sum5 = (($3) + 3)|0;
  $84 = (($tc_tEmP) + ($$sum5)|0);
  HEAP8[$84>>0] = $83;
  $85 = (($pFilter) + 32|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + 24|0);
  $88 = HEAP32[$87>>2]|0;
  FUNCTION_TABLE_viiiiii[$88 & 31]($pPixCb,$pPixCr,$iStride,$41,$48,$4);
  STACKTOP = sp;return;
 }
 $12 = (($pFilter) + 25|0);
 $13 = (($pBS) + 1|0);
 $$sum = (($3) + 1)|0;
 $14 = (($tc_tEmP) + ($$sum)|0);
 $15 = (($pBS) + 2|0);
 $$sum1 = (($3) + 2)|0;
 $16 = (($tc_tEmP) + ($$sum1)|0);
 $17 = (($pBS) + 3|0);
 $$sum2 = (($3) + 3)|0;
 $18 = (($tc_tEmP) + ($$sum2)|0);
 $19 = (($pFilter) + 32|0);
 $20 = HEAP8[$11>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = (($7) + 12)|0;
 $23 = (($22) + ($21))|0;
 $24 = (3144 + ($23)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = HEAP8[$12>>0]|0;
 $28 = $27 << 24 >> 24;
 $29 = (($22) + ($28))|0;
 $30 = (3224 + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 $33 = $32 | $26;
 $34 = ($33|0)==(0);
 if ($34) {
  $121 = $9;$123 = $20;$130 = $27;
 } else {
  $89 = HEAP8[$pBS>>0]|0;
  $90 = $89&255;
  $91 = ((3304 + ($23<<2)|0) + ($90)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = (($93) + 1)|0;
  $95 = $94&255;
  HEAP8[$4>>0] = $95;
  $96 = HEAP8[$13>>0]|0;
  $97 = $96&255;
  $98 = ((3304 + ($23<<2)|0) + ($97)|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($100) + 1)|0;
  $102 = $101&255;
  HEAP8[$14>>0] = $102;
  $103 = HEAP8[$15>>0]|0;
  $104 = $103&255;
  $105 = ((3304 + ($23<<2)|0) + ($104)|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = (($107) + 1)|0;
  $109 = $108&255;
  HEAP8[$16>>0] = $109;
  $110 = HEAP8[$17>>0]|0;
  $111 = $110&255;
  $112 = ((3304 + ($23<<2)|0) + ($111)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = (($114) + 1)|0;
  $116 = $115&255;
  HEAP8[$18>>0] = $116;
  $117 = HEAP32[$19>>2]|0;
  $118 = (($117) + 40|0);
  $119 = HEAP32[$118>>2]|0;
  FUNCTION_TABLE_viiiii[$119 & 15]($pPixCb,$iStride,$26,$32,$4);
  $$pre = HEAP8[$8>>0]|0;
  $$pre8 = HEAP8[$11>>0]|0;
  $$pre9 = HEAP8[$12>>0]|0;
  $121 = $$pre;$123 = $$pre8;$130 = $$pre9;
 }
 $120 = $121 << 24 >> 24;
 $122 = $123 << 24 >> 24;
 $124 = (($120) + 12)|0;
 $125 = (($124) + ($122))|0;
 $126 = (3144 + ($125)|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&255;
 $129 = $130 << 24 >> 24;
 $131 = (($124) + ($129))|0;
 $132 = (3224 + ($131)|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133 << 24 >> 24;
 $135 = $134 | $128;
 $136 = ($135|0)==(0);
 if ($136) {
  STACKTOP = sp;return;
 }
 $137 = HEAP8[$pBS>>0]|0;
 $138 = $137&255;
 $139 = ((3304 + ($125<<2)|0) + ($138)|0);
 $140 = HEAP8[$139>>0]|0;
 $141 = $140&255;
 $142 = (($141) + 1)|0;
 $143 = $142&255;
 HEAP8[$4>>0] = $143;
 $144 = HEAP8[$13>>0]|0;
 $145 = $144&255;
 $146 = ((3304 + ($125<<2)|0) + ($145)|0);
 $147 = HEAP8[$146>>0]|0;
 $148 = $147&255;
 $149 = (($148) + 1)|0;
 $150 = $149&255;
 HEAP8[$14>>0] = $150;
 $151 = HEAP8[$15>>0]|0;
 $152 = $151&255;
 $153 = ((3304 + ($125<<2)|0) + ($152)|0);
 $154 = HEAP8[$153>>0]|0;
 $155 = $154&255;
 $156 = (($155) + 1)|0;
 $157 = $156&255;
 HEAP8[$16>>0] = $157;
 $158 = HEAP8[$17>>0]|0;
 $159 = $158&255;
 $160 = ((3304 + ($125<<2)|0) + ($159)|0);
 $161 = HEAP8[$160>>0]|0;
 $162 = $161&255;
 $163 = (($162) + 1)|0;
 $164 = $163&255;
 HEAP8[$18>>0] = $164;
 $165 = HEAP32[$19>>2]|0;
 $166 = (($165) + 40|0);
 $167 = HEAP32[$166>>2]|0;
 FUNCTION_TABLE_viiiii[$167 & 15]($pPixCr,$iStride,$128,$134,$4);
 STACKTOP = sp;return;
}
function __ZN7WelsDec25FilteringEdgeChromaIntraHEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$pPixCb,$pPixCr,$iStride,$pBS) {
 $pFilter = $pFilter|0;
 $pPixCb = $pPixCb|0;
 $pPixCr = $pPixCr|0;
 $iStride = $iStride|0;
 $pBS = $pBS|0;
 var $$pre = 0, $$pre3 = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pFilter) + 26|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($pFilter) + 27|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($1<<24>>24)==($4<<24>>24);
 $6 = (($pFilter) + 24|0);
 if ($5) {
  $24 = HEAP8[$6>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = (($2) + 12)|0;
  $27 = (($26) + ($25))|0;
  $28 = (3144 + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = (($pFilter) + 25|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = (($26) + ($33))|0;
  $35 = (3224 + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = $37 | $30;
  $39 = ($38|0)==(0);
  if ($39) {
   STACKTOP = sp;return;
  }
  $40 = (($pFilter) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 20|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_viiiii[$43 & 15]($pPixCb,$pPixCr,$iStride,$30,$37);
  STACKTOP = sp;return;
 }
 $7 = (($pFilter) + 25|0);
 $8 = (($pFilter) + 32|0);
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = (($2) + 12)|0;
 $12 = (($11) + ($10))|0;
 $13 = (3144 + ($12)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = HEAP8[$7>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = (($11) + ($17))|0;
 $19 = (3224 + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = $21 | $15;
 $23 = ($22|0)==(0);
 if ($23) {
  $48 = $4;$50 = $9;$57 = $16;
 } else {
  $44 = HEAP32[$8>>2]|0;
  $45 = (($44) + 36|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_viiii[$46 & 31]($pPixCb,$iStride,$15,$21);
  $$pre = HEAP8[$3>>0]|0;
  $$pre3 = HEAP8[$6>>0]|0;
  $$pre4 = HEAP8[$7>>0]|0;
  $48 = $$pre;$50 = $$pre3;$57 = $$pre4;
 }
 $47 = $48 << 24 >> 24;
 $49 = $50 << 24 >> 24;
 $51 = (($47) + 12)|0;
 $52 = (($51) + ($49))|0;
 $53 = (3144 + ($52)|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $57 << 24 >> 24;
 $58 = (($51) + ($56))|0;
 $59 = (3224 + ($58)|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60 << 24 >> 24;
 $62 = $61 | $55;
 $63 = ($62|0)==(0);
 if ($63) {
  STACKTOP = sp;return;
 }
 $64 = HEAP32[$8>>2]|0;
 $65 = (($64) + 36|0);
 $66 = HEAP32[$65>>2]|0;
 FUNCTION_TABLE_viiii[$66 & 31]($pPixCr,$iStride,$55,$61);
 STACKTOP = sp;return;
}
function __ZN7WelsDec25FilteringEdgeChromaIntraVEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$pPixCb,$pPixCr,$iStride,$pBS) {
 $pFilter = $pFilter|0;
 $pPixCb = $pPixCb|0;
 $pPixCr = $pPixCr|0;
 $iStride = $iStride|0;
 $pBS = $pBS|0;
 var $$pre = 0, $$pre3 = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pFilter) + 26|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($pFilter) + 27|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($1<<24>>24)==($4<<24>>24);
 $6 = (($pFilter) + 24|0);
 if ($5) {
  $24 = HEAP8[$6>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = (($2) + 12)|0;
  $27 = (($26) + ($25))|0;
  $28 = (3144 + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = (($pFilter) + 25|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = (($26) + ($33))|0;
  $35 = (3224 + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = $37 | $30;
  $39 = ($38|0)==(0);
  if ($39) {
   STACKTOP = sp;return;
  }
  $40 = (($pFilter) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 28|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_viiiii[$43 & 15]($pPixCb,$pPixCr,$iStride,$30,$37);
  STACKTOP = sp;return;
 }
 $7 = (($pFilter) + 25|0);
 $8 = (($pFilter) + 32|0);
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = (($2) + 12)|0;
 $12 = (($11) + ($10))|0;
 $13 = (3144 + ($12)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = HEAP8[$7>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = (($11) + ($17))|0;
 $19 = (3224 + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = $21 | $15;
 $23 = ($22|0)==(0);
 if ($23) {
  $48 = $4;$50 = $9;$57 = $16;
 } else {
  $44 = HEAP32[$8>>2]|0;
  $45 = (($44) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_viiii[$46 & 31]($pPixCb,$iStride,$15,$21);
  $$pre = HEAP8[$3>>0]|0;
  $$pre3 = HEAP8[$6>>0]|0;
  $$pre4 = HEAP8[$7>>0]|0;
  $48 = $$pre;$50 = $$pre3;$57 = $$pre4;
 }
 $47 = $48 << 24 >> 24;
 $49 = $50 << 24 >> 24;
 $51 = (($47) + 12)|0;
 $52 = (($51) + ($49))|0;
 $53 = (3144 + ($52)|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $57 << 24 >> 24;
 $58 = (($51) + ($56))|0;
 $59 = (3224 + ($58)|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60 << 24 >> 24;
 $62 = $61 | $55;
 $63 = ($62|0)==(0);
 if ($63) {
  STACKTOP = sp;return;
 }
 $64 = HEAP32[$8>>2]|0;
 $65 = (($64) + 44|0);
 $66 = HEAP32[$65>>2]|0;
 FUNCTION_TABLE_viiii[$66 & 31]($pPixCr,$iStride,$55,$61);
 STACKTOP = sp;return;
}
function __ZN7WelsDec17DeblockingInterMbEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEPA4_A4_hi($pCurDqLayer,$pFilter,$nBS,$iBoundryFlag) {
 $pCurDqLayer = $pCurDqLayer|0;
 $pFilter = $pFilter|0;
 $nBS = $nBS|0;
 $iBoundryFlag = $iBoundryFlag|0;
 var $$pre = 0, $$pre$phi52Z2D = 0, $$pre$phi54Z2D = 0, $$pre$phi56Z2D = 0, $$pre$phiZ2D = 0, $$pre51 = 0, $$pre53 = 0, $$pre55 = 0, $$sum = 0, $$sum$i = 0, $$sum$i16 = 0, $$sum$i21 = 0, $$sum$i26 = 0, $$sum$i31 = 0, $$sum$i35 = 0, $$sum$i40 = 0, $$sum$i45 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i17 = 0;
 var $$sum1$i22 = 0, $$sum1$i27 = 0, $$sum1$i32 = 0, $$sum1$i36 = 0, $$sum1$i41 = 0, $$sum1$i46 = 0, $$sum1314 = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i18 = 0, $$sum2$i23 = 0, $$sum2$i28 = 0, $$sum2$i33 = 0, $$sum2$i37 = 0, $$sum2$i42 = 0, $$sum2$i47 = 0, $$sum4 = 0, $$sum56 = 0, $$sum78 = 0, $$sum910 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, $sext57 = 0, $sext58 = 0, $sext59 = 0, $tc_tEmP$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $tc_tEmP$i = sp;
 $0 = (($pCurDqLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCurDqLayer) + 4032|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCurDqLayer) + 4036|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCurDqLayer) + 3948|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = (($pCurDqLayer) + 3952|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($1<<1)|0);
 $14 = (($pFilter) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($pFilter) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$pFilter>>2]|0;
 $19 = Math_imul($15, $5)|0;
 $20 = (($19) + ($3))|0;
 $21 = $20 << 4;
 $22 = (($18) + ($21)|0);
 $23 = (($pFilter) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = Math_imul($17, $5)|0;
 $26 = (($25) + ($3))|0;
 $27 = $26 << 3;
 $28 = (($24) + ($27)|0);
 $29 = (($pFilter) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($27)|0);
 $32 = $iBoundryFlag & 1;
 $33 = ($32|0)==(0);
 do {
  if ($33) {
   $$pre = (($pFilter) + 28|0);
   $$pre51 = (($pFilter) + 26|0);
   $$pre53 = ((($12) + ($1<<1)|0) + 1|0);
   $$pre55 = (($pFilter) + 27|0);
   $$pre$phi52Z2D = $$pre51;$$pre$phi54Z2D = $$pre53;$$pre$phi56Z2D = $$pre55;$$pre$phiZ2D = $$pre;
  } else {
   $34 = (($1) + -1)|0;
   $35 = (($7) + ($34)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36 << 24 >> 24;
   $38 = (($10) + 1)|0;
   $39 = (($38) + ($37))|0;
   $40 = $39 >>> 1;
   $41 = $40&255;
   $42 = (($pFilter) + 28|0);
   HEAP8[$42>>0] = $41;
   $43 = HEAP8[$13>>0]|0;
   $44 = $43 << 24 >> 24;
   $45 = HEAP32[$11>>2]|0;
   $46 = (($45) + ($34<<1)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47 << 24 >> 24;
   $49 = (($44) + 1)|0;
   $50 = (($49) + ($48))|0;
   $51 = $50 >>> 1;
   $52 = $51&255;
   $53 = (($pFilter) + 26|0);
   HEAP8[$53>>0] = $52;
   $54 = ((($12) + ($1<<1)|0) + 1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55 << 24 >> 24;
   $57 = HEAP32[$11>>2]|0;
   $58 = ((($57) + ($34<<1)|0) + 1|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59 << 24 >> 24;
   $61 = (($56) + 1)|0;
   $62 = (($61) + ($60))|0;
   $63 = $62 >>> 1;
   $64 = $63&255;
   $65 = (($pFilter) + 27|0);
   HEAP8[$65>>0] = $64;
   $66 = HEAP8[$nBS>>0]|0;
   $67 = ($66<<24>>24)==(4);
   if ($67) {
    $sext59 = $40 << 24;
    $68 = $sext59 >> 24;
    $69 = (($pFilter) + 24|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70 << 24 >> 24;
    $72 = (($68) + 12)|0;
    $73 = (($72) + ($71))|0;
    $74 = (3144 + ($73)|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $77 = (($pFilter) + 25|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78 << 24 >> 24;
    $80 = (($79) + ($72))|0;
    $81 = (3224 + ($80)|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82 << 24 >> 24;
    $84 = $83 | $76;
    $85 = ($84|0)==(0);
    if (!($85)) {
     $86 = (($pFilter) + 32|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($87) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     FUNCTION_TABLE_viiii[$89 & 31]($22,$15,$76,$83);
    }
    __ZN7WelsDec25FilteringEdgeChromaIntraVEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$28,$31,$17,0);
    $$pre$phi52Z2D = $53;$$pre$phi54Z2D = $54;$$pre$phi56Z2D = $65;$$pre$phiZ2D = $42;
    break;
   }
   $90 = HEAP32[$nBS>>2]|0;
   $91 = ($90|0)==(0);
   if ($91) {
    $$pre$phi52Z2D = $53;$$pre$phi54Z2D = $54;$$pre$phi56Z2D = $65;$$pre$phiZ2D = $42;
   } else {
    $92 = (($tc_tEmP$i) + 15|0);
    $93 = $92;
    $94 = $93 & 15;
    $95 = $94 ^ 15;
    $96 = (($tc_tEmP$i) + ($95)|0);
    $sext = $40 << 24;
    $97 = $sext >> 24;
    $98 = (($pFilter) + 24|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99 << 24 >> 24;
    $101 = (($97) + 12)|0;
    $102 = (($101) + ($100))|0;
    $103 = (3144 + ($102)|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = (($pFilter) + 25|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107 << 24 >> 24;
    $109 = (($108) + ($101))|0;
    $110 = (3224 + ($109)|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $113 = $112 | $105;
    $114 = ($113|0)==(0);
    if (!($114)) {
     $115 = $90 & 255;
     $116 = ((3304 + ($102<<2)|0) + ($115)|0);
     $117 = HEAP8[$116>>0]|0;
     HEAP8[$96>>0] = $117;
     $118 = (($nBS) + 1|0);
     $119 = HEAP8[$118>>0]|0;
     $120 = $119&255;
     $121 = ((3304 + ($102<<2)|0) + ($120)|0);
     $122 = HEAP8[$121>>0]|0;
     $$sum$i = (($95) + 1)|0;
     $123 = (($tc_tEmP$i) + ($$sum$i)|0);
     HEAP8[$123>>0] = $122;
     $124 = (($nBS) + 2|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = $125&255;
     $127 = ((3304 + ($102<<2)|0) + ($126)|0);
     $128 = HEAP8[$127>>0]|0;
     $$sum1$i = (($95) + 2)|0;
     $129 = (($tc_tEmP$i) + ($$sum1$i)|0);
     HEAP8[$129>>0] = $128;
     $130 = (($nBS) + 3|0);
     $131 = HEAP8[$130>>0]|0;
     $132 = $131&255;
     $133 = ((3304 + ($102<<2)|0) + ($132)|0);
     $134 = HEAP8[$133>>0]|0;
     $$sum2$i = (($95) + 3)|0;
     $135 = (($tc_tEmP$i) + ($$sum2$i)|0);
     HEAP8[$135>>0] = $134;
     $136 = (($pFilter) + 32|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (($137) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     FUNCTION_TABLE_viiiii[$139 & 15]($22,$15,$105,$112,$96);
    }
    __ZN7WelsDec20FilteringEdgeChromaVEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$28,$31,$17,$nBS);
    $$pre$phi52Z2D = $53;$$pre$phi54Z2D = $54;$$pre$phi56Z2D = $65;$$pre$phiZ2D = $42;
   }
  }
 } while(0);
 HEAP8[$$pre$phiZ2D>>0] = $9;
 $140 = HEAP8[$13>>0]|0;
 HEAP8[$$pre$phi52Z2D>>0] = $140;
 $141 = HEAP8[$$pre$phi54Z2D>>0]|0;
 HEAP8[$$pre$phi56Z2D>>0] = $141;
 $142 = (($nBS) + 4|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = ($143|0)==(0);
 if (!($144)) {
  $145 = (($pCurDqLayer) + 3944|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + ($1)|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = ($148<<24>>24)==(0);
  if ($149) {
   $150 = (($tc_tEmP$i) + 15|0);
   $151 = $150;
   $152 = $151 & 15;
   $153 = $152 ^ 15;
   $154 = (($tc_tEmP$i) + ($153)|0);
   $155 = (($pFilter) + 24|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156 << 24 >> 24;
   $158 = (($10) + 12)|0;
   $159 = (($158) + ($157))|0;
   $160 = (3144 + ($159)|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = (($pFilter) + 25|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164 << 24 >> 24;
   $166 = (($165) + ($158))|0;
   $167 = (3224 + ($166)|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168 << 24 >> 24;
   $170 = $169 | $162;
   $171 = ($170|0)==(0);
   if (!($171)) {
    $$sum1314 = $21 | 4;
    $172 = (($18) + ($$sum1314)|0);
    $173 = $143 & 255;
    $174 = ((3304 + ($159<<2)|0) + ($173)|0);
    $175 = HEAP8[$174>>0]|0;
    HEAP8[$154>>0] = $175;
    $176 = (($nBS) + 5|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $177&255;
    $179 = ((3304 + ($159<<2)|0) + ($178)|0);
    $180 = HEAP8[$179>>0]|0;
    $$sum$i16 = (($153) + 1)|0;
    $181 = (($tc_tEmP$i) + ($$sum$i16)|0);
    HEAP8[$181>>0] = $180;
    $182 = (($nBS) + 6|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    $185 = ((3304 + ($159<<2)|0) + ($184)|0);
    $186 = HEAP8[$185>>0]|0;
    $$sum1$i17 = (($153) + 2)|0;
    $187 = (($tc_tEmP$i) + ($$sum1$i17)|0);
    HEAP8[$187>>0] = $186;
    $188 = (($nBS) + 7|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = $189&255;
    $191 = ((3304 + ($159<<2)|0) + ($190)|0);
    $192 = HEAP8[$191>>0]|0;
    $$sum2$i18 = (($153) + 3)|0;
    $193 = (($tc_tEmP$i) + ($$sum2$i18)|0);
    HEAP8[$193>>0] = $192;
    $194 = (($pFilter) + 32|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = (($195) + 8|0);
    $197 = HEAP32[$196>>2]|0;
    FUNCTION_TABLE_viiiii[$197 & 15]($172,$15,$162,$169,$154);
   }
  }
 }
 $198 = (($nBS) + 8|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = ($199|0)==(0);
 if (!($200)) {
  $201 = (($tc_tEmP$i) + 15|0);
  $202 = $201;
  $203 = $202 & 15;
  $204 = $203 ^ 15;
  $205 = (($tc_tEmP$i) + ($204)|0);
  $206 = HEAP8[$$pre$phiZ2D>>0]|0;
  $207 = $206 << 24 >> 24;
  $208 = (($pFilter) + 24|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $209 << 24 >> 24;
  $211 = (($207) + 12)|0;
  $212 = (($211) + ($210))|0;
  $213 = (3144 + ($212)|0);
  $214 = HEAP8[$213>>0]|0;
  $215 = $214&255;
  $216 = (($pFilter) + 25|0);
  $217 = HEAP8[$216>>0]|0;
  $218 = $217 << 24 >> 24;
  $219 = (($218) + ($211))|0;
  $220 = (3224 + ($219)|0);
  $221 = HEAP8[$220>>0]|0;
  $222 = $221 << 24 >> 24;
  $223 = $222 | $215;
  $224 = ($223|0)==(0);
  if (!($224)) {
   $$sum78 = $21 | 8;
   $225 = (($18) + ($$sum78)|0);
   $226 = $199 & 255;
   $227 = ((3304 + ($212<<2)|0) + ($226)|0);
   $228 = HEAP8[$227>>0]|0;
   HEAP8[$205>>0] = $228;
   $229 = (($nBS) + 9|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $232 = ((3304 + ($212<<2)|0) + ($231)|0);
   $233 = HEAP8[$232>>0]|0;
   $$sum$i21 = (($204) + 1)|0;
   $234 = (($tc_tEmP$i) + ($$sum$i21)|0);
   HEAP8[$234>>0] = $233;
   $235 = (($nBS) + 10|0);
   $236 = HEAP8[$235>>0]|0;
   $237 = $236&255;
   $238 = ((3304 + ($212<<2)|0) + ($237)|0);
   $239 = HEAP8[$238>>0]|0;
   $$sum1$i22 = (($204) + 2)|0;
   $240 = (($tc_tEmP$i) + ($$sum1$i22)|0);
   HEAP8[$240>>0] = $239;
   $241 = (($nBS) + 11|0);
   $242 = HEAP8[$241>>0]|0;
   $243 = $242&255;
   $244 = ((3304 + ($212<<2)|0) + ($243)|0);
   $245 = HEAP8[$244>>0]|0;
   $$sum2$i23 = (($204) + 3)|0;
   $246 = (($tc_tEmP$i) + ($$sum2$i23)|0);
   HEAP8[$246>>0] = $245;
   $247 = (($pFilter) + 32|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = (($248) + 8|0);
   $250 = HEAP32[$249>>2]|0;
   FUNCTION_TABLE_viiiii[$250 & 15]($225,$15,$215,$222,$205);
  }
  $$sum910 = $27 | 4;
  $251 = (($24) + ($$sum910)|0);
  $252 = (($30) + ($$sum910)|0);
  __ZN7WelsDec20FilteringEdgeChromaVEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$251,$252,$17,$198);
 }
 $253 = (($nBS) + 12|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ($254|0)==(0);
 if (!($255)) {
  $256 = (($pCurDqLayer) + 3944|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($257) + ($1)|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = ($259<<24>>24)==(0);
  if ($260) {
   $261 = (($tc_tEmP$i) + 15|0);
   $262 = $261;
   $263 = $262 & 15;
   $264 = $263 ^ 15;
   $265 = (($tc_tEmP$i) + ($264)|0);
   $266 = HEAP8[$$pre$phiZ2D>>0]|0;
   $267 = $266 << 24 >> 24;
   $268 = (($pFilter) + 24|0);
   $269 = HEAP8[$268>>0]|0;
   $270 = $269 << 24 >> 24;
   $271 = (($267) + 12)|0;
   $272 = (($271) + ($270))|0;
   $273 = (3144 + ($272)|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = $274&255;
   $276 = (($pFilter) + 25|0);
   $277 = HEAP8[$276>>0]|0;
   $278 = $277 << 24 >> 24;
   $279 = (($278) + ($271))|0;
   $280 = (3224 + ($279)|0);
   $281 = HEAP8[$280>>0]|0;
   $282 = $281 << 24 >> 24;
   $283 = $282 | $275;
   $284 = ($283|0)==(0);
   if (!($284)) {
    $$sum56 = $21 | 12;
    $285 = (($18) + ($$sum56)|0);
    $286 = $254 & 255;
    $287 = ((3304 + ($272<<2)|0) + ($286)|0);
    $288 = HEAP8[$287>>0]|0;
    HEAP8[$265>>0] = $288;
    $289 = (($nBS) + 13|0);
    $290 = HEAP8[$289>>0]|0;
    $291 = $290&255;
    $292 = ((3304 + ($272<<2)|0) + ($291)|0);
    $293 = HEAP8[$292>>0]|0;
    $$sum$i26 = (($264) + 1)|0;
    $294 = (($tc_tEmP$i) + ($$sum$i26)|0);
    HEAP8[$294>>0] = $293;
    $295 = (($nBS) + 14|0);
    $296 = HEAP8[$295>>0]|0;
    $297 = $296&255;
    $298 = ((3304 + ($272<<2)|0) + ($297)|0);
    $299 = HEAP8[$298>>0]|0;
    $$sum1$i27 = (($264) + 2)|0;
    $300 = (($tc_tEmP$i) + ($$sum1$i27)|0);
    HEAP8[$300>>0] = $299;
    $301 = (($nBS) + 15|0);
    $302 = HEAP8[$301>>0]|0;
    $303 = $302&255;
    $304 = ((3304 + ($272<<2)|0) + ($303)|0);
    $305 = HEAP8[$304>>0]|0;
    $$sum2$i28 = (($264) + 3)|0;
    $306 = (($tc_tEmP$i) + ($$sum2$i28)|0);
    HEAP8[$306>>0] = $305;
    $307 = (($pFilter) + 32|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = (($308) + 8|0);
    $310 = HEAP32[$309>>2]|0;
    FUNCTION_TABLE_viiiii[$310 & 15]($285,$15,$275,$282,$265);
   }
  }
 }
 $311 = $iBoundryFlag & 2;
 $312 = ($311|0)==(0);
 do {
  if (!($312)) {
   $313 = (($pCurDqLayer) + 4044|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = (($1) - ($314))|0;
   $316 = HEAP32[$6>>2]|0;
   $317 = (($316) + ($315)|0);
   $318 = HEAP8[$317>>0]|0;
   $319 = $318 << 24 >> 24;
   $320 = (($10) + 1)|0;
   $321 = (($320) + ($319))|0;
   $322 = $321 >>> 1;
   $323 = $322&255;
   HEAP8[$$pre$phiZ2D>>0] = $323;
   $324 = HEAP8[$13>>0]|0;
   $325 = $324 << 24 >> 24;
   $326 = HEAP32[$11>>2]|0;
   $327 = (($326) + ($315<<1)|0);
   $328 = HEAP8[$327>>0]|0;
   $329 = $328 << 24 >> 24;
   $330 = (($325) + 1)|0;
   $331 = (($330) + ($329))|0;
   $332 = $331 >>> 1;
   $333 = $332&255;
   HEAP8[$$pre$phi52Z2D>>0] = $333;
   $334 = HEAP8[$$pre$phi54Z2D>>0]|0;
   $335 = $334 << 24 >> 24;
   $336 = HEAP32[$11>>2]|0;
   $337 = ((($336) + ($315<<1)|0) + 1|0);
   $338 = HEAP8[$337>>0]|0;
   $339 = $338 << 24 >> 24;
   $340 = (($335) + 1)|0;
   $341 = (($340) + ($339))|0;
   $342 = $341 >>> 1;
   $343 = $342&255;
   HEAP8[$$pre$phi56Z2D>>0] = $343;
   $344 = (($nBS) + 16|0);
   $345 = HEAP8[$344>>0]|0;
   $346 = ($345<<24>>24)==(4);
   if ($346) {
    $sext58 = $322 << 24;
    $347 = $sext58 >> 24;
    $348 = (($pFilter) + 24|0);
    $349 = HEAP8[$348>>0]|0;
    $350 = $349 << 24 >> 24;
    $351 = (($347) + 12)|0;
    $352 = (($351) + ($350))|0;
    $353 = (3144 + ($352)|0);
    $354 = HEAP8[$353>>0]|0;
    $355 = $354&255;
    $356 = (($pFilter) + 25|0);
    $357 = HEAP8[$356>>0]|0;
    $358 = $357 << 24 >> 24;
    $359 = (($358) + ($351))|0;
    $360 = (3224 + ($359)|0);
    $361 = HEAP8[$360>>0]|0;
    $362 = $361 << 24 >> 24;
    $363 = $362 | $355;
    $364 = ($363|0)==(0);
    if (!($364)) {
     $365 = (($pFilter) + 32|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = (($366) + 4|0);
     $368 = HEAP32[$367>>2]|0;
     FUNCTION_TABLE_viiii[$368 & 31]($22,$15,$355,$362);
    }
    __ZN7WelsDec25FilteringEdgeChromaIntraHEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$28,$31,$17,0);
    break;
   }
   $369 = HEAP32[$344>>2]|0;
   $370 = ($369|0)==(0);
   if (!($370)) {
    $371 = (($tc_tEmP$i) + 15|0);
    $372 = $371;
    $373 = $372 & 15;
    $374 = $373 ^ 15;
    $375 = (($tc_tEmP$i) + ($374)|0);
    $sext57 = $322 << 24;
    $376 = $sext57 >> 24;
    $377 = (($pFilter) + 24|0);
    $378 = HEAP8[$377>>0]|0;
    $379 = $378 << 24 >> 24;
    $380 = (($376) + 12)|0;
    $381 = (($380) + ($379))|0;
    $382 = (3144 + ($381)|0);
    $383 = HEAP8[$382>>0]|0;
    $384 = $383&255;
    $385 = (($pFilter) + 25|0);
    $386 = HEAP8[$385>>0]|0;
    $387 = $386 << 24 >> 24;
    $388 = (($387) + ($380))|0;
    $389 = (3224 + ($388)|0);
    $390 = HEAP8[$389>>0]|0;
    $391 = $390 << 24 >> 24;
    $392 = $391 | $384;
    $393 = ($392|0)==(0);
    if (!($393)) {
     $394 = $369 & 255;
     $395 = ((3304 + ($381<<2)|0) + ($394)|0);
     $396 = HEAP8[$395>>0]|0;
     HEAP8[$375>>0] = $396;
     $397 = (($nBS) + 17|0);
     $398 = HEAP8[$397>>0]|0;
     $399 = $398&255;
     $400 = ((3304 + ($381<<2)|0) + ($399)|0);
     $401 = HEAP8[$400>>0]|0;
     $$sum$i31 = (($374) + 1)|0;
     $402 = (($tc_tEmP$i) + ($$sum$i31)|0);
     HEAP8[$402>>0] = $401;
     $403 = (($nBS) + 18|0);
     $404 = HEAP8[$403>>0]|0;
     $405 = $404&255;
     $406 = ((3304 + ($381<<2)|0) + ($405)|0);
     $407 = HEAP8[$406>>0]|0;
     $$sum1$i32 = (($374) + 2)|0;
     $408 = (($tc_tEmP$i) + ($$sum1$i32)|0);
     HEAP8[$408>>0] = $407;
     $409 = (($nBS) + 19|0);
     $410 = HEAP8[$409>>0]|0;
     $411 = $410&255;
     $412 = ((3304 + ($381<<2)|0) + ($411)|0);
     $413 = HEAP8[$412>>0]|0;
     $$sum2$i33 = (($374) + 3)|0;
     $414 = (($tc_tEmP$i) + ($$sum2$i33)|0);
     HEAP8[$414>>0] = $413;
     $415 = (($pFilter) + 32|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = HEAP32[$416>>2]|0;
     FUNCTION_TABLE_viiiii[$417 & 15]($22,$15,$384,$391,$375);
    }
    __ZN7WelsDec20FilteringEdgeChromaHEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$28,$31,$17,$344);
   }
  }
 } while(0);
 HEAP8[$$pre$phiZ2D>>0] = $9;
 $418 = HEAP8[$13>>0]|0;
 HEAP8[$$pre$phi52Z2D>>0] = $418;
 $419 = HEAP8[$$pre$phi54Z2D>>0]|0;
 HEAP8[$$pre$phi56Z2D>>0] = $419;
 $420 = (($nBS) + 20|0);
 $421 = HEAP32[$420>>2]|0;
 $422 = ($421|0)==(0);
 if (!($422)) {
  $423 = (($pCurDqLayer) + 3944|0);
  $424 = HEAP32[$423>>2]|0;
  $425 = (($424) + ($1)|0);
  $426 = HEAP8[$425>>0]|0;
  $427 = ($426<<24>>24)==(0);
  if ($427) {
   $428 = (($tc_tEmP$i) + 15|0);
   $429 = $428;
   $430 = $429 & 15;
   $431 = $430 ^ 15;
   $432 = (($tc_tEmP$i) + ($431)|0);
   $433 = (($pFilter) + 24|0);
   $434 = HEAP8[$433>>0]|0;
   $435 = $434 << 24 >> 24;
   $436 = (($10) + 12)|0;
   $437 = (($436) + ($435))|0;
   $438 = (3144 + ($437)|0);
   $439 = HEAP8[$438>>0]|0;
   $440 = $439&255;
   $441 = (($pFilter) + 25|0);
   $442 = HEAP8[$441>>0]|0;
   $443 = $442 << 24 >> 24;
   $444 = (($443) + ($436))|0;
   $445 = (3224 + ($444)|0);
   $446 = HEAP8[$445>>0]|0;
   $447 = $446 << 24 >> 24;
   $448 = $447 | $440;
   $449 = ($448|0)==(0);
   if (!($449)) {
    $450 = $15 << 2;
    $$sum4 = (($21) + ($450))|0;
    $451 = (($18) + ($$sum4)|0);
    $452 = $421 & 255;
    $453 = ((3304 + ($437<<2)|0) + ($452)|0);
    $454 = HEAP8[$453>>0]|0;
    HEAP8[$432>>0] = $454;
    $455 = (($nBS) + 21|0);
    $456 = HEAP8[$455>>0]|0;
    $457 = $456&255;
    $458 = ((3304 + ($437<<2)|0) + ($457)|0);
    $459 = HEAP8[$458>>0]|0;
    $$sum$i35 = (($431) + 1)|0;
    $460 = (($tc_tEmP$i) + ($$sum$i35)|0);
    HEAP8[$460>>0] = $459;
    $461 = (($nBS) + 22|0);
    $462 = HEAP8[$461>>0]|0;
    $463 = $462&255;
    $464 = ((3304 + ($437<<2)|0) + ($463)|0);
    $465 = HEAP8[$464>>0]|0;
    $$sum1$i36 = (($431) + 2)|0;
    $466 = (($tc_tEmP$i) + ($$sum1$i36)|0);
    HEAP8[$466>>0] = $465;
    $467 = (($nBS) + 23|0);
    $468 = HEAP8[$467>>0]|0;
    $469 = $468&255;
    $470 = ((3304 + ($437<<2)|0) + ($469)|0);
    $471 = HEAP8[$470>>0]|0;
    $$sum2$i37 = (($431) + 3)|0;
    $472 = (($tc_tEmP$i) + ($$sum2$i37)|0);
    HEAP8[$472>>0] = $471;
    $473 = (($pFilter) + 32|0);
    $474 = HEAP32[$473>>2]|0;
    $475 = HEAP32[$474>>2]|0;
    FUNCTION_TABLE_viiiii[$475 & 15]($451,$15,$440,$447,$432);
   }
  }
 }
 $476 = (($nBS) + 24|0);
 $477 = HEAP32[$476>>2]|0;
 $478 = ($477|0)==(0);
 if (!($478)) {
  $479 = (($tc_tEmP$i) + 15|0);
  $480 = $479;
  $481 = $480 & 15;
  $482 = $481 ^ 15;
  $483 = (($tc_tEmP$i) + ($482)|0);
  $484 = HEAP8[$$pre$phiZ2D>>0]|0;
  $485 = $484 << 24 >> 24;
  $486 = (($pFilter) + 24|0);
  $487 = HEAP8[$486>>0]|0;
  $488 = $487 << 24 >> 24;
  $489 = (($485) + 12)|0;
  $490 = (($489) + ($488))|0;
  $491 = (3144 + ($490)|0);
  $492 = HEAP8[$491>>0]|0;
  $493 = $492&255;
  $494 = (($pFilter) + 25|0);
  $495 = HEAP8[$494>>0]|0;
  $496 = $495 << 24 >> 24;
  $497 = (($496) + ($489))|0;
  $498 = (3224 + ($497)|0);
  $499 = HEAP8[$498>>0]|0;
  $500 = $499 << 24 >> 24;
  $501 = $500 | $493;
  $502 = ($501|0)==(0);
  if (!($502)) {
   $503 = $15 << 3;
   $$sum1 = (($21) + ($503))|0;
   $504 = (($18) + ($$sum1)|0);
   $505 = $477 & 255;
   $506 = ((3304 + ($490<<2)|0) + ($505)|0);
   $507 = HEAP8[$506>>0]|0;
   HEAP8[$483>>0] = $507;
   $508 = (($nBS) + 25|0);
   $509 = HEAP8[$508>>0]|0;
   $510 = $509&255;
   $511 = ((3304 + ($490<<2)|0) + ($510)|0);
   $512 = HEAP8[$511>>0]|0;
   $$sum$i40 = (($482) + 1)|0;
   $513 = (($tc_tEmP$i) + ($$sum$i40)|0);
   HEAP8[$513>>0] = $512;
   $514 = (($nBS) + 26|0);
   $515 = HEAP8[$514>>0]|0;
   $516 = $515&255;
   $517 = ((3304 + ($490<<2)|0) + ($516)|0);
   $518 = HEAP8[$517>>0]|0;
   $$sum1$i41 = (($482) + 2)|0;
   $519 = (($tc_tEmP$i) + ($$sum1$i41)|0);
   HEAP8[$519>>0] = $518;
   $520 = (($nBS) + 27|0);
   $521 = HEAP8[$520>>0]|0;
   $522 = $521&255;
   $523 = ((3304 + ($490<<2)|0) + ($522)|0);
   $524 = HEAP8[$523>>0]|0;
   $$sum2$i42 = (($482) + 3)|0;
   $525 = (($tc_tEmP$i) + ($$sum2$i42)|0);
   HEAP8[$525>>0] = $524;
   $526 = (($pFilter) + 32|0);
   $527 = HEAP32[$526>>2]|0;
   $528 = HEAP32[$527>>2]|0;
   FUNCTION_TABLE_viiiii[$528 & 15]($504,$15,$493,$500,$483);
  }
  $529 = $17 << 2;
  $$sum2 = (($27) + ($529))|0;
  $530 = (($24) + ($$sum2)|0);
  $531 = (($30) + ($$sum2)|0);
  __ZN7WelsDec20FilteringEdgeChromaHEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$530,$531,$17,$476);
 }
 $532 = (($nBS) + 28|0);
 $533 = HEAP32[$532>>2]|0;
 $534 = ($533|0)==(0);
 if ($534) {
  STACKTOP = sp;return;
 }
 $535 = (($pCurDqLayer) + 3944|0);
 $536 = HEAP32[$535>>2]|0;
 $537 = (($536) + ($1)|0);
 $538 = HEAP8[$537>>0]|0;
 $539 = ($538<<24>>24)==(0);
 if (!($539)) {
  STACKTOP = sp;return;
 }
 $540 = (($tc_tEmP$i) + 15|0);
 $541 = $540;
 $542 = $541 & 15;
 $543 = $542 ^ 15;
 $544 = (($tc_tEmP$i) + ($543)|0);
 $545 = HEAP8[$$pre$phiZ2D>>0]|0;
 $546 = $545 << 24 >> 24;
 $547 = (($pFilter) + 24|0);
 $548 = HEAP8[$547>>0]|0;
 $549 = $548 << 24 >> 24;
 $550 = (($546) + 12)|0;
 $551 = (($550) + ($549))|0;
 $552 = (3144 + ($551)|0);
 $553 = HEAP8[$552>>0]|0;
 $554 = $553&255;
 $555 = (($pFilter) + 25|0);
 $556 = HEAP8[$555>>0]|0;
 $557 = $556 << 24 >> 24;
 $558 = (($557) + ($550))|0;
 $559 = (3224 + ($558)|0);
 $560 = HEAP8[$559>>0]|0;
 $561 = $560 << 24 >> 24;
 $562 = $561 | $554;
 $563 = ($562|0)==(0);
 if ($563) {
  STACKTOP = sp;return;
 }
 $564 = ($15*12)|0;
 $$sum = (($21) + ($564))|0;
 $565 = (($18) + ($$sum)|0);
 $566 = $533 & 255;
 $567 = ((3304 + ($551<<2)|0) + ($566)|0);
 $568 = HEAP8[$567>>0]|0;
 HEAP8[$544>>0] = $568;
 $569 = (($nBS) + 29|0);
 $570 = HEAP8[$569>>0]|0;
 $571 = $570&255;
 $572 = ((3304 + ($551<<2)|0) + ($571)|0);
 $573 = HEAP8[$572>>0]|0;
 $$sum$i45 = (($543) + 1)|0;
 $574 = (($tc_tEmP$i) + ($$sum$i45)|0);
 HEAP8[$574>>0] = $573;
 $575 = (($nBS) + 30|0);
 $576 = HEAP8[$575>>0]|0;
 $577 = $576&255;
 $578 = ((3304 + ($551<<2)|0) + ($577)|0);
 $579 = HEAP8[$578>>0]|0;
 $$sum1$i46 = (($543) + 2)|0;
 $580 = (($tc_tEmP$i) + ($$sum1$i46)|0);
 HEAP8[$580>>0] = $579;
 $581 = (($nBS) + 31|0);
 $582 = HEAP8[$581>>0]|0;
 $583 = $582&255;
 $584 = ((3304 + ($551<<2)|0) + ($583)|0);
 $585 = HEAP8[$584>>0]|0;
 $$sum2$i47 = (($543) + 3)|0;
 $586 = (($tc_tEmP$i) + ($$sum2$i47)|0);
 HEAP8[$586>>0] = $585;
 $587 = (($pFilter) + 32|0);
 $588 = HEAP32[$587>>2]|0;
 $589 = HEAP32[$588>>2]|0;
 FUNCTION_TABLE_viiiii[$589 & 15]($565,$15,$554,$561,$544);
 STACKTOP = sp;return;
}
function __ZN7WelsDec19FilteringEdgeLumaHVEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi($pCurDqLayer,$pFilter,$iBoundryFlag) {
 $pCurDqLayer = $pCurDqLayer|0;
 $pFilter = $pFilter|0;
 $iBoundryFlag = $iBoundryFlag|0;
 var $$pre = 0, $$pre$phi18Z2D = 0, $$pre$phi20Z2D = 0, $$pre$phiZ2D = 0, $$pre17 = 0, $$pre19 = 0, $$sum = 0, $$sum1 = 0, $$sum1112 = 0, $$sum1314 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum910 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iTc_tEmP = 0, $sext = 0, $sext15 = 0, $uiBSx4_tEmP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $iTc_tEmP = sp + 7|0;
 $uiBSx4_tEmP = sp;
 $0 = (($pCurDqLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCurDqLayer) + 4032|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCurDqLayer) + 4036|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCurDqLayer) + 4044|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pFilter) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($iTc_tEmP) + 15|0);
 $11 = $10;
 $12 = $11 & 15;
 $13 = $12 ^ 15;
 $14 = (($iTc_tEmP) + ($13)|0);
 $15 = (($uiBSx4_tEmP) + 3|0);
 $16 = $15;
 $17 = $16 & 3;
 $18 = $17 ^ 3;
 $19 = (($uiBSx4_tEmP) + ($18)|0);
 $20 = HEAP32[$pFilter>>2]|0;
 $21 = Math_imul($9, $5)|0;
 $22 = (($21) + ($3))|0;
 $23 = $22 << 4;
 $24 = (($20) + ($23)|0);
 $25 = (($pCurDqLayer) + 3948|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($1)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 << 24 >> 24;
 HEAP32[$19>>2] = 50529027;
 $30 = $iBoundryFlag & 1;
 $31 = ($30|0)==(0);
 if ($31) {
  $$pre = (($pFilter) + 28|0);
  $$pre17 = (($pFilter) + 24|0);
  $$pre19 = (($pFilter) + 25|0);
  $$pre$phi18Z2D = $$pre17;$$pre$phi20Z2D = $$pre19;$$pre$phiZ2D = $$pre;
 } else {
  $32 = (($1) + -1)|0;
  $33 = (($26) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34 << 24 >> 24;
  $36 = (($29) + 1)|0;
  $37 = (($36) + ($35))|0;
  $38 = $37 >>> 1;
  $39 = $38&255;
  $40 = (($pFilter) + 28|0);
  HEAP8[$40>>0] = $39;
  $sext = $38 << 24;
  $41 = $sext >> 24;
  $42 = (($pFilter) + 24|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $45 = (($41) + 12)|0;
  $46 = (($45) + ($44))|0;
  $47 = (3144 + ($46)|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = (($pFilter) + 25|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = (($45) + ($52))|0;
  $54 = (3224 + ($53)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55 << 24 >> 24;
  $57 = $56 | $49;
  $58 = ($57|0)==(0);
  if ($58) {
   $$pre$phi18Z2D = $42;$$pre$phi20Z2D = $50;$$pre$phiZ2D = $40;
  } else {
   $59 = (($pFilter) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   FUNCTION_TABLE_viiii[$62 & 31]($24,$9,$49,$56);
   $$pre$phi18Z2D = $42;$$pre$phi20Z2D = $50;$$pre$phiZ2D = $40;
  }
 }
 HEAP8[$$pre$phiZ2D>>0] = $28;
 $63 = HEAP8[$$pre$phi18Z2D>>0]|0;
 $64 = $63 << 24 >> 24;
 $65 = (($29) + 12)|0;
 $66 = (($65) + ($64))|0;
 $67 = (3144 + ($66)|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = HEAP8[$$pre$phi20Z2D>>0]|0;
 $71 = $70 << 24 >> 24;
 $72 = (($65) + ($71))|0;
 $73 = (3224 + ($72)|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74 << 24 >> 24;
 $76 = $75 | $69;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = HEAP8[$19>>0]|0;
  $79 = $78&255;
  $80 = ((3304 + ($66<<2)|0) + ($79)|0);
  $81 = HEAP8[$80>>0]|0;
  HEAP8[$14>>0] = $81;
  $$sum3 = (($18) + 1)|0;
  $82 = (($uiBSx4_tEmP) + ($$sum3)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ((3304 + ($66<<2)|0) + ($84)|0);
  $86 = HEAP8[$85>>0]|0;
  $$sum4 = (($13) + 1)|0;
  $87 = (($iTc_tEmP) + ($$sum4)|0);
  HEAP8[$87>>0] = $86;
  $$sum5 = (($18) + 2)|0;
  $88 = (($uiBSx4_tEmP) + ($$sum5)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $91 = ((3304 + ($66<<2)|0) + ($90)|0);
  $92 = HEAP8[$91>>0]|0;
  $$sum6 = (($13) + 2)|0;
  $93 = (($iTc_tEmP) + ($$sum6)|0);
  HEAP8[$93>>0] = $92;
  $$sum7 = (($18) + 3)|0;
  $94 = (($uiBSx4_tEmP) + ($$sum7)|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = ((3304 + ($66<<2)|0) + ($96)|0);
  $98 = HEAP8[$97>>0]|0;
  $$sum8 = (($13) + 3)|0;
  $99 = (($iTc_tEmP) + ($$sum8)|0);
  HEAP8[$99>>0] = $98;
  $100 = (($pCurDqLayer) + 3944|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + ($1)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  $105 = (($pFilter) + 32|0);
  if ($104) {
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + 8|0);
   $108 = HEAP32[$107>>2]|0;
   $$sum910 = $23 | 4;
   $109 = (($20) + ($$sum910)|0);
   FUNCTION_TABLE_viiiii[$108 & 15]($109,$9,$69,$75,$14);
  }
  $110 = HEAP32[$105>>2]|0;
  $111 = (($110) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $$sum1112 = $23 | 8;
  $113 = (($20) + ($$sum1112)|0);
  FUNCTION_TABLE_viiiii[$112 & 15]($113,$9,$69,$75,$14);
  $114 = HEAP32[$100>>2]|0;
  $115 = (($114) + ($1)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = ($116<<24>>24)==(0);
  if ($117) {
   $118 = HEAP32[$105>>2]|0;
   $119 = (($118) + 8|0);
   $120 = HEAP32[$119>>2]|0;
   $$sum1314 = $23 | 12;
   $121 = (($20) + ($$sum1314)|0);
   FUNCTION_TABLE_viiiii[$120 & 15]($121,$9,$69,$75,$14);
  }
 }
 $122 = $iBoundryFlag & 2;
 $123 = ($122|0)==(0);
 if (!($123)) {
  $124 = (($1) - ($7))|0;
  $125 = HEAP32[$25>>2]|0;
  $126 = (($125) + ($124)|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127 << 24 >> 24;
  $129 = (($29) + 1)|0;
  $130 = (($129) + ($128))|0;
  $131 = $130 >>> 1;
  $132 = $131&255;
  HEAP8[$$pre$phiZ2D>>0] = $132;
  $sext15 = $131 << 24;
  $133 = $sext15 >> 24;
  $134 = HEAP8[$$pre$phi18Z2D>>0]|0;
  $135 = $134 << 24 >> 24;
  $136 = (($133) + 12)|0;
  $137 = (($136) + ($135))|0;
  $138 = (3144 + ($137)|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $139&255;
  $141 = HEAP8[$$pre$phi20Z2D>>0]|0;
  $142 = $141 << 24 >> 24;
  $143 = (($136) + ($142))|0;
  $144 = (3224 + ($143)|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = $145 << 24 >> 24;
  $147 = $146 | $140;
  $148 = ($147|0)==(0);
  if (!($148)) {
   $149 = (($pFilter) + 32|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + 4|0);
   $152 = HEAP32[$151>>2]|0;
   FUNCTION_TABLE_viiii[$152 & 31]($24,$9,$140,$146);
  }
 }
 HEAP8[$$pre$phiZ2D>>0] = $28;
 if (!($77)) {
  STACKTOP = sp;return;
 }
 $153 = (($pCurDqLayer) + 3944|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($154) + ($1)|0);
 $156 = HEAP8[$155>>0]|0;
 $157 = ($156<<24>>24)==(0);
 $158 = (($pFilter) + 32|0);
 if ($157) {
  $159 = HEAP32[$158>>2]|0;
  $160 = HEAP32[$159>>2]|0;
  $161 = $9 << 2;
  $$sum = (($23) + ($161))|0;
  $162 = (($20) + ($$sum)|0);
  FUNCTION_TABLE_viiiii[$160 & 15]($162,$9,$69,$75,$14);
 }
 $163 = HEAP32[$158>>2]|0;
 $164 = HEAP32[$163>>2]|0;
 $165 = $9 << 3;
 $$sum1 = (($23) + ($165))|0;
 $166 = (($20) + ($$sum1)|0);
 FUNCTION_TABLE_viiiii[$164 & 15]($166,$9,$69,$75,$14);
 $167 = HEAP32[$153>>2]|0;
 $168 = (($167) + ($1)|0);
 $169 = HEAP8[$168>>0]|0;
 $170 = ($169<<24>>24)==(0);
 if (!($170)) {
  STACKTOP = sp;return;
 }
 $171 = HEAP32[$158>>2]|0;
 $172 = HEAP32[$171>>2]|0;
 $173 = ($9*12)|0;
 $$sum2 = (($23) + ($173))|0;
 $174 = (($20) + ($$sum2)|0);
 FUNCTION_TABLE_viiiii[$172 & 15]($174,$9,$69,$75,$14);
 STACKTOP = sp;return;
}
function __ZN7WelsDec21FilteringEdgeChromaHVEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi($pCurDqLayer,$pFilter,$iBoundryFlag) {
 $pCurDqLayer = $pCurDqLayer|0;
 $pFilter = $pFilter|0;
 $iBoundryFlag = $iBoundryFlag|0;
 var $$pre = 0, $$pre$phi36Z2D = 0, $$pre$phi38Z2D = 0, $$pre$phiZ2D = 0, $$pre29 = 0, $$pre30 = 0, $$pre31 = 0, $$pre32 = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre37 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1516 = 0, $$sum3 = 0;
 var $$sum3940 = 0, $$sum4 = 0, $$sum4142 = 0, $$sum43 = 0, $$sum44 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iTc_tEmP = 0, $uiBSx4_tEmP = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $iTc_tEmP = sp + 7|0;
 $uiBSx4_tEmP = sp;
 $0 = (($pCurDqLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCurDqLayer) + 4032|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCurDqLayer) + 4036|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCurDqLayer) + 4044|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pFilter) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($iTc_tEmP) + 15|0);
 $11 = $10;
 $12 = $11 & 15;
 $13 = $12 ^ 15;
 $14 = (($iTc_tEmP) + ($13)|0);
 $15 = (($uiBSx4_tEmP) + 3|0);
 $16 = $15;
 $17 = $16 & 3;
 $18 = $17 ^ 3;
 $19 = (($uiBSx4_tEmP) + ($18)|0);
 $20 = (($pFilter) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = Math_imul($9, $5)|0;
 $23 = (($22) + ($3))|0;
 $24 = $23 << 3;
 $25 = (($21) + ($24)|0);
 $26 = (($pFilter) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($24)|0);
 $29 = (($pCurDqLayer) + 3952|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($1<<1)|0);
 HEAP32[$19>>2] = 50529027;
 $32 = $iBoundryFlag & 1;
 $33 = ($32|0)==(0);
 if ($33) {
  $$pre34 = (($pFilter) + 26|0);
  $$pre35 = ((($30) + ($1<<1)|0) + 1|0);
  $$pre37 = (($pFilter) + 27|0);
  $$pre$phi36Z2D = $$pre35;$$pre$phi38Z2D = $$pre37;$$pre$phiZ2D = $$pre34;
 } else {
  $34 = (($1) + -1)|0;
  $35 = HEAP8[$31>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = (($30) + ($34<<1)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = (($36) + 1)|0;
  $41 = (($40) + ($39))|0;
  $42 = $41 >>> 1;
  $43 = $42&255;
  $44 = (($pFilter) + 26|0);
  HEAP8[$44>>0] = $43;
  $45 = ((($30) + ($1<<1)|0) + 1|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = HEAP32[$29>>2]|0;
  $49 = ((($48) + ($34<<1)|0) + 1|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = (($47) + 1)|0;
  $53 = (($52) + ($51))|0;
  $54 = $53 >>> 1;
  $55 = $54&255;
  $56 = (($pFilter) + 27|0);
  HEAP8[$56>>0] = $55;
  __ZN7WelsDec25FilteringEdgeChromaIntraVEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$25,$28,$9,0);
  $$pre$phi36Z2D = $45;$$pre$phi38Z2D = $56;$$pre$phiZ2D = $44;
 }
 $57 = HEAP8[$31>>0]|0;
 HEAP8[$$pre$phiZ2D>>0] = $57;
 $58 = HEAP8[$$pre$phi36Z2D>>0]|0;
 HEAP8[$$pre$phi38Z2D>>0] = $58;
 $59 = $57 << 24 >> 24;
 $60 = ($57<<24>>24)==($58<<24>>24);
 $61 = (($pFilter) + 24|0);
 if ($60) {
  $85 = HEAP8[$61>>0]|0;
  $86 = $85 << 24 >> 24;
  $87 = (($59) + 12)|0;
  $88 = (($87) + ($86))|0;
  $89 = (3144 + ($88)|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = (($pFilter) + 25|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93 << 24 >> 24;
  $95 = (($87) + ($94))|0;
  $96 = (3224 + ($95)|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97 << 24 >> 24;
  $99 = $98 | $91;
  $100 = ($99|0)==(0);
  if (!($100)) {
   $101 = HEAP8[$19>>0]|0;
   $102 = $101&255;
   $103 = ((3304 + ($88<<2)|0) + ($102)|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = (($105) + 1)|0;
   $107 = $106&255;
   HEAP8[$14>>0] = $107;
   $$sum9 = (($18) + 1)|0;
   $108 = (($uiBSx4_tEmP) + ($$sum9)|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = ((3304 + ($88<<2)|0) + ($110)|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $114 = (($113) + 1)|0;
   $115 = $114&255;
   $$sum10 = (($13) + 1)|0;
   $116 = (($iTc_tEmP) + ($$sum10)|0);
   HEAP8[$116>>0] = $115;
   $$sum11 = (($18) + 2)|0;
   $117 = (($uiBSx4_tEmP) + ($$sum11)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ((3304 + ($88<<2)|0) + ($119)|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $121&255;
   $123 = (($122) + 1)|0;
   $124 = $123&255;
   $$sum12 = (($13) + 2)|0;
   $125 = (($iTc_tEmP) + ($$sum12)|0);
   HEAP8[$125>>0] = $124;
   $$sum13 = (($18) + 3)|0;
   $126 = (($uiBSx4_tEmP) + ($$sum13)|0);
   $127 = HEAP8[$126>>0]|0;
   $128 = $127&255;
   $129 = ((3304 + ($88<<2)|0) + ($128)|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = (($131) + 1)|0;
   $133 = $132&255;
   $$sum14 = (($13) + 3)|0;
   $134 = (($iTc_tEmP) + ($$sum14)|0);
   HEAP8[$134>>0] = $133;
   $135 = (($pFilter) + 32|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($136) + 24|0);
   $138 = HEAP32[$137>>2]|0;
   $$sum1516 = $24 | 4;
   $139 = (($21) + ($$sum1516)|0);
   $140 = (($27) + ($$sum1516)|0);
   FUNCTION_TABLE_viiiiii[$138 & 31]($139,$140,$9,$91,$98,$14);
  }
 } else {
  $62 = (($pFilter) + 25|0);
  $$sum3 = (($18) + 1)|0;
  $63 = (($uiBSx4_tEmP) + ($$sum3)|0);
  $$sum4 = (($13) + 1)|0;
  $64 = (($iTc_tEmP) + ($$sum4)|0);
  $$sum5 = (($18) + 2)|0;
  $65 = (($uiBSx4_tEmP) + ($$sum5)|0);
  $$sum6 = (($13) + 2)|0;
  $66 = (($iTc_tEmP) + ($$sum6)|0);
  $$sum7 = (($18) + 3)|0;
  $67 = (($uiBSx4_tEmP) + ($$sum7)|0);
  $$sum8 = (($13) + 3)|0;
  $68 = (($iTc_tEmP) + ($$sum8)|0);
  $69 = (($pFilter) + 32|0);
  $70 = HEAP8[$61>>0]|0;
  $71 = $70 << 24 >> 24;
  $72 = (($59) + 12)|0;
  $73 = (($72) + ($71))|0;
  $74 = (3144 + ($73)|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = HEAP8[$62>>0]|0;
  $78 = $77 << 24 >> 24;
  $79 = (($72) + ($78))|0;
  $80 = (3224 + ($79)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81 << 24 >> 24;
  $83 = $82 | $76;
  $84 = ($83|0)==(0);
  if ($84) {
   $174 = $58;$176 = $70;$183 = $77;
  } else {
   $$sum3940 = $24 | 4;
   $141 = (($21) + ($$sum3940)|0);
   $142 = HEAP8[$19>>0]|0;
   $143 = $142&255;
   $144 = ((3304 + ($73<<2)|0) + ($143)|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = $145&255;
   $147 = (($146) + 1)|0;
   $148 = $147&255;
   HEAP8[$14>>0] = $148;
   $149 = HEAP8[$63>>0]|0;
   $150 = $149&255;
   $151 = ((3304 + ($73<<2)|0) + ($150)|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = (($153) + 1)|0;
   $155 = $154&255;
   HEAP8[$64>>0] = $155;
   $156 = HEAP8[$65>>0]|0;
   $157 = $156&255;
   $158 = ((3304 + ($73<<2)|0) + ($157)|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = $159&255;
   $161 = (($160) + 1)|0;
   $162 = $161&255;
   HEAP8[$66>>0] = $162;
   $163 = HEAP8[$67>>0]|0;
   $164 = $163&255;
   $165 = ((3304 + ($73<<2)|0) + ($164)|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = (($167) + 1)|0;
   $169 = $168&255;
   HEAP8[$68>>0] = $169;
   $170 = HEAP32[$69>>2]|0;
   $171 = (($170) + 40|0);
   $172 = HEAP32[$171>>2]|0;
   FUNCTION_TABLE_viiiii[$172 & 15]($141,$9,$76,$82,$14);
   $$pre31 = HEAP8[$$pre$phi38Z2D>>0]|0;
   $$pre32 = HEAP8[$61>>0]|0;
   $$pre33 = HEAP8[$62>>0]|0;
   $174 = $$pre31;$176 = $$pre32;$183 = $$pre33;
  }
  $173 = $174 << 24 >> 24;
  $175 = $176 << 24 >> 24;
  $177 = (($173) + 12)|0;
  $178 = (($177) + ($175))|0;
  $179 = (3144 + ($178)|0);
  $180 = HEAP8[$179>>0]|0;
  $181 = $180&255;
  $182 = $183 << 24 >> 24;
  $184 = (($177) + ($182))|0;
  $185 = (3224 + ($184)|0);
  $186 = HEAP8[$185>>0]|0;
  $187 = $186 << 24 >> 24;
  $188 = $187 | $181;
  $189 = ($188|0)==(0);
  if (!($189)) {
   $$sum4142 = $24 | 4;
   $284 = (($27) + ($$sum4142)|0);
   $285 = HEAP8[$19>>0]|0;
   $286 = $285&255;
   $287 = ((3304 + ($178<<2)|0) + ($286)|0);
   $288 = HEAP8[$287>>0]|0;
   $289 = $288&255;
   $290 = (($289) + 1)|0;
   $291 = $290&255;
   HEAP8[$14>>0] = $291;
   $292 = HEAP8[$63>>0]|0;
   $293 = $292&255;
   $294 = ((3304 + ($178<<2)|0) + ($293)|0);
   $295 = HEAP8[$294>>0]|0;
   $296 = $295&255;
   $297 = (($296) + 1)|0;
   $298 = $297&255;
   HEAP8[$64>>0] = $298;
   $299 = HEAP8[$65>>0]|0;
   $300 = $299&255;
   $301 = ((3304 + ($178<<2)|0) + ($300)|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = $302&255;
   $304 = (($303) + 1)|0;
   $305 = $304&255;
   HEAP8[$66>>0] = $305;
   $306 = HEAP8[$67>>0]|0;
   $307 = $306&255;
   $308 = ((3304 + ($178<<2)|0) + ($307)|0);
   $309 = HEAP8[$308>>0]|0;
   $310 = $309&255;
   $311 = (($310) + 1)|0;
   $312 = $311&255;
   HEAP8[$68>>0] = $312;
   $313 = HEAP32[$69>>2]|0;
   $314 = (($313) + 40|0);
   $315 = HEAP32[$314>>2]|0;
   FUNCTION_TABLE_viiiii[$315 & 15]($284,$9,$181,$187,$14);
  }
 }
 $190 = $iBoundryFlag & 2;
 $191 = ($190|0)==(0);
 if (!($191)) {
  $192 = (($1) - ($7))|0;
  $193 = HEAP8[$31>>0]|0;
  $194 = $193 << 24 >> 24;
  $195 = HEAP32[$29>>2]|0;
  $196 = (($195) + ($192<<1)|0);
  $197 = HEAP8[$196>>0]|0;
  $198 = $197 << 24 >> 24;
  $199 = (($194) + 1)|0;
  $200 = (($199) + ($198))|0;
  $201 = $200 >>> 1;
  $202 = $201&255;
  HEAP8[$$pre$phiZ2D>>0] = $202;
  $203 = HEAP8[$$pre$phi36Z2D>>0]|0;
  $204 = $203 << 24 >> 24;
  $205 = HEAP32[$29>>2]|0;
  $206 = ((($205) + ($192<<1)|0) + 1|0);
  $207 = HEAP8[$206>>0]|0;
  $208 = $207 << 24 >> 24;
  $209 = (($204) + 1)|0;
  $210 = (($209) + ($208))|0;
  $211 = $210 >>> 1;
  $212 = $211&255;
  HEAP8[$$pre$phi38Z2D>>0] = $212;
  __ZN7WelsDec25FilteringEdgeChromaIntraHEPNS_19tagDeblockingFilterEPhS2_iS2_($pFilter,$25,$28,$9,0);
 }
 $213 = HEAP8[$31>>0]|0;
 HEAP8[$$pre$phiZ2D>>0] = $213;
 $214 = HEAP8[$$pre$phi36Z2D>>0]|0;
 HEAP8[$$pre$phi38Z2D>>0] = $214;
 $215 = $213 << 24 >> 24;
 $216 = ($213<<24>>24)==($214<<24>>24);
 $217 = (($pFilter) + 24|0);
 if ($216) {
  $236 = HEAP8[$217>>0]|0;
  $237 = $236 << 24 >> 24;
  $238 = (($215) + 12)|0;
  $239 = (($238) + ($237))|0;
  $240 = (3144 + ($239)|0);
  $241 = HEAP8[$240>>0]|0;
  $242 = $241&255;
  $243 = (($pFilter) + 25|0);
  $244 = HEAP8[$243>>0]|0;
  $245 = $244 << 24 >> 24;
  $246 = (($238) + ($245))|0;
  $247 = (3224 + ($246)|0);
  $248 = HEAP8[$247>>0]|0;
  $249 = $248 << 24 >> 24;
  $250 = $249 | $242;
  $251 = ($250|0)==(0);
  if ($251) {
   STACKTOP = sp;return;
  }
  $252 = (($pFilter) + 32|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = (($253) + 16|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = $9 << 2;
  $$sum = (($24) + ($256))|0;
  $257 = (($21) + ($$sum)|0);
  $258 = (($27) + ($$sum)|0);
  FUNCTION_TABLE_viiiiii[$255 & 31]($257,$258,$9,$242,$249,$14);
  STACKTOP = sp;return;
 }
 $218 = (($pFilter) + 25|0);
 $219 = $9 << 2;
 $220 = (($pFilter) + 32|0);
 $221 = HEAP8[$217>>0]|0;
 $222 = $221 << 24 >> 24;
 $223 = (($215) + 12)|0;
 $224 = (($223) + ($222))|0;
 $225 = (3144 + ($224)|0);
 $226 = HEAP8[$225>>0]|0;
 $227 = $226&255;
 $228 = HEAP8[$218>>0]|0;
 $229 = $228 << 24 >> 24;
 $230 = (($223) + ($229))|0;
 $231 = (3224 + ($230)|0);
 $232 = HEAP8[$231>>0]|0;
 $233 = $232 << 24 >> 24;
 $234 = $233 | $227;
 $235 = ($234|0)==(0);
 if ($235) {
  $264 = $214;$266 = $221;$273 = $228;
 } else {
  $$sum43 = (($24) + ($219))|0;
  $259 = (($21) + ($$sum43)|0);
  $260 = HEAP32[$220>>2]|0;
  $261 = (($260) + 32|0);
  $262 = HEAP32[$261>>2]|0;
  FUNCTION_TABLE_viiiii[$262 & 15]($259,$9,$227,$233,$14);
  $$pre = HEAP8[$$pre$phi38Z2D>>0]|0;
  $$pre29 = HEAP8[$217>>0]|0;
  $$pre30 = HEAP8[$218>>0]|0;
  $264 = $$pre;$266 = $$pre29;$273 = $$pre30;
 }
 $263 = $264 << 24 >> 24;
 $265 = $266 << 24 >> 24;
 $267 = (($263) + 12)|0;
 $268 = (($267) + ($265))|0;
 $269 = (3144 + ($268)|0);
 $270 = HEAP8[$269>>0]|0;
 $271 = $270&255;
 $272 = $273 << 24 >> 24;
 $274 = (($267) + ($272))|0;
 $275 = (3224 + ($274)|0);
 $276 = HEAP8[$275>>0]|0;
 $277 = $276 << 24 >> 24;
 $278 = $277 | $271;
 $279 = ($278|0)==(0);
 if ($279) {
  STACKTOP = sp;return;
 }
 $$sum44 = (($24) + ($219))|0;
 $280 = (($27) + ($$sum44)|0);
 $281 = HEAP32[$220>>2]|0;
 $282 = (($281) + 32|0);
 $283 = HEAP32[$282>>2]|0;
 FUNCTION_TABLE_viiiii[$283 & 15]($280,$9,$271,$277,$14);
 STACKTOP = sp;return;
}
function __ZN7WelsDec16WelsDeblockingMbEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi($pCurDqLayer,$pFilter,$iBoundryFlag) {
 $pCurDqLayer = $pCurDqLayer|0;
 $pFilter = $pFilter|0;
 $iBoundryFlag = $iBoundryFlag|0;
 var $$sum2$i = 0, $$sum6$1$i = 0, $$sum6$2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0;
 var $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0;
 var $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0;
 var $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0;
 var $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0;
 var $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0;
 var $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0;
 var $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0;
 var $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0;
 var $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0;
 var $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0;
 var $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0;
 var $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0;
 var $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0;
 var $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0;
 var $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0;
 var $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0;
 var $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0;
 var $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0;
 var $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0;
 var $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0;
 var $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $nBS = 0, $trunc$i = 0, $trunc$i1 = 0, $trunc12$i = 0, $trunc13$i = 0, $trunc14$i = 0, $uiBsx4_tEmP$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $uiBsx4_tEmP$i = sp + 32|0;
 $nBS = sp;
 ;HEAP32[$nBS+0>>2]=0|0;HEAP32[$nBS+4>>2]=0|0;HEAP32[$nBS+8>>2]=0|0;HEAP32[$nBS+12>>2]=0|0;HEAP32[$nBS+16>>2]=0|0;HEAP32[$nBS+20>>2]=0|0;HEAP32[$nBS+24>>2]=0|0;HEAP32[$nBS+28>>2]=0|0;
 $0 = (($pCurDqLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCurDqLayer) + 3908|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<1)|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 if ((($6|0) == 512) | (($6|0) == 2) | (($6|0) == 4) | (($6|0) == 1)) {
  __ZN7WelsDec19FilteringEdgeLumaHVEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi($pCurDqLayer,$pFilter,$iBoundryFlag);
  __ZN7WelsDec21FilteringEdgeChromaHVEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi($pCurDqLayer,$pFilter,$iBoundryFlag);
  STACKTOP = sp;return;
 }
 $7 = $iBoundryFlag & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[$nBS>>2] = 0;
 } else {
  $9 = (($1) + -1)|0;
  $10 = (($3) + ($9<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 & 519;
  $13 = ($12<<16>>16)==(0);
  if ($13) {
   $14 = (__ZN7WelsDec29DeblockingBsMarginalMBAvcbaseEPNS_10TagDqLayerEiii($pCurDqLayer,0,$9,$1)|0);
   $15 = $14;
  } else {
   $15 = 67372036;
  }
  HEAP32[$nBS>>2] = $15;
 }
 $16 = $iBoundryFlag & 2;
 $17 = ($16|0)==(0);
 if ($17) {
  $28 = (($nBS) + 16|0);
  HEAP32[$28>>2] = 0;
 } else {
  $18 = (($pCurDqLayer) + 4044|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($1) - ($19))|0;
  $21 = (($3) + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 & 519;
  $24 = ($23<<16>>16)==(0);
  if ($24) {
   $25 = (__ZN7WelsDec29DeblockingBsMarginalMBAvcbaseEPNS_10TagDqLayerEiii($pCurDqLayer,1,$20,$1)|0);
   $27 = $25;
  } else {
   $27 = 67372036;
  }
  $26 = (($nBS) + 16|0);
  HEAP32[$26>>2] = $27;
 }
 do {
  if ((($5<<16>>16) == 8)) {
   $29 = (($pCurDqLayer) + 3944|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($1)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)==(0);
   $34 = (($pCurDqLayer) + 3964|0);
   $35 = HEAP32[$34>>2]|0;
   if ($33) {
    $36 = (($35) + (($1*24)|0)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($35) + (($1*24)|0)|0) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($35) + (($1*24)|0)|0) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($35) + (($1*24)|0)|0) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $trunc$i = $37&255;
    $44 = ((($35) + (($1*24)|0)|0) + 1|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45 | $trunc$i;
    $47 = $46 << 24 >> 24;
    $48 = $47 << 1;
    $49 = $48&255;
    $50 = (($nBS) + 4|0);
    HEAP8[$50>>0] = $49;
    $51 = HEAP8[$44>>0]|0;
    $52 = ((($35) + (($1*24)|0)|0) + 2|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53 | $51;
    $55 = $54 << 24 >> 24;
    $56 = $55 << 1;
    $57 = $56&255;
    $58 = (($nBS) + 8|0);
    HEAP8[$58>>0] = $57;
    $59 = HEAP8[$52>>0]|0;
    $60 = ((($35) + (($1*24)|0)|0) + 3|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 | $59;
    $63 = $62 << 24 >> 24;
    $64 = $63 << 1;
    $65 = $64&255;
    $66 = (($nBS) + 12|0);
    HEAP8[$66>>0] = $65;
    $67 = HEAP8[$38>>0]|0;
    $68 = ((($35) + (($1*24)|0)|0) + 5|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 | $67;
    $71 = $70 << 24 >> 24;
    $72 = $71 << 1;
    $73 = $72&255;
    $74 = (($nBS) + 5|0);
    HEAP8[$74>>0] = $73;
    $75 = HEAP8[$68>>0]|0;
    $76 = ((($35) + (($1*24)|0)|0) + 6|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77 | $75;
    $79 = $78 << 24 >> 24;
    $80 = $79 << 1;
    $81 = $80&255;
    $82 = (($nBS) + 9|0);
    HEAP8[$82>>0] = $81;
    $83 = HEAP8[$76>>0]|0;
    $84 = ((($35) + (($1*24)|0)|0) + 7|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85 | $83;
    $87 = $86 << 24 >> 24;
    $88 = $87 << 1;
    $89 = $88&255;
    $90 = (($nBS) + 13|0);
    HEAP8[$90>>0] = $89;
    $91 = $39 | $37;
    $92 = $91 << 1;
    $93 = (($nBS) + 20|0);
    HEAP32[$93>>2] = $92;
    $94 = HEAP8[$40>>0]|0;
    $95 = ((($35) + (($1*24)|0)|0) + 9|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96 | $94;
    $98 = $97 << 24 >> 24;
    $99 = $98 << 1;
    $100 = $99&255;
    $101 = (($nBS) + 6|0);
    HEAP8[$101>>0] = $100;
    $102 = HEAP8[$95>>0]|0;
    $103 = ((($35) + (($1*24)|0)|0) + 10|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104 | $102;
    $106 = $105 << 24 >> 24;
    $107 = $106 << 1;
    $108 = $107&255;
    $109 = (($nBS) + 10|0);
    HEAP8[$109>>0] = $108;
    $110 = HEAP8[$103>>0]|0;
    $111 = ((($35) + (($1*24)|0)|0) + 11|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = $112 | $110;
    $114 = $113 << 24 >> 24;
    $115 = $114 << 1;
    $116 = $115&255;
    $117 = (($nBS) + 14|0);
    HEAP8[$117>>0] = $116;
    $118 = $41 | $39;
    $119 = $118 << 1;
    $120 = (($nBS) + 24|0);
    HEAP32[$120>>2] = $119;
    $121 = HEAP8[$42>>0]|0;
    $122 = ((($35) + (($1*24)|0)|0) + 13|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123 | $121;
    $125 = $124 << 24 >> 24;
    $126 = $125 << 1;
    $127 = $126&255;
    $128 = (($nBS) + 7|0);
    HEAP8[$128>>0] = $127;
    $129 = HEAP8[$122>>0]|0;
    $130 = ((($35) + (($1*24)|0)|0) + 14|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131 | $129;
    $133 = $132 << 24 >> 24;
    $134 = $133 << 1;
    $135 = $134&255;
    $136 = (($nBS) + 11|0);
    HEAP8[$136>>0] = $135;
    $137 = HEAP8[$130>>0]|0;
    $138 = ((($35) + (($1*24)|0)|0) + 15|0);
    $139 = HEAP8[$138>>0]|0;
    $140 = $139 | $137;
    $141 = $140 << 24 >> 24;
    $142 = $141 << 1;
    $143 = $142&255;
    $144 = (($nBS) + 15|0);
    HEAP8[$144>>0] = $143;
    $145 = $43 | $41;
    $146 = $145 << 1;
    $147 = (($nBS) + 28|0);
    HEAP32[$147>>2] = $146;
    break;
   } else {
    $148 = HEAP8[16536>>0]|0;
    $149 = $148&255;
    $150 = ((($35) + (($1*24)|0)|0) + ($149)|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = HEAP8[((16536 + 1|0))>>0]|0;
    $153 = $152&255;
    $154 = ((($35) + (($1*24)|0)|0) + ($153)|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155 | $151;
    $157 = HEAP8[((16536 + 2|0))>>0]|0;
    $158 = $157&255;
    $159 = ((($35) + (($1*24)|0)|0) + ($158)|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $156 | $160;
    $162 = HEAP8[((16536 + 3|0))>>0]|0;
    $163 = $162&255;
    $164 = ((($35) + (($1*24)|0)|0) + ($163)|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = $161 | $165;
    $167 = HEAP8[((16536 + 4|0))>>0]|0;
    $168 = $167&255;
    $169 = ((($35) + (($1*24)|0)|0) + ($168)|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = HEAP8[((16536 + 5|0))>>0]|0;
    $172 = $171&255;
    $173 = ((($35) + (($1*24)|0)|0) + ($172)|0);
    $174 = HEAP8[$173>>0]|0;
    $175 = $174 | $170;
    $176 = HEAP8[((16536 + 6|0))>>0]|0;
    $177 = $176&255;
    $178 = ((($35) + (($1*24)|0)|0) + ($177)|0);
    $179 = HEAP8[$178>>0]|0;
    $180 = $175 | $179;
    $181 = HEAP8[((16536 + 7|0))>>0]|0;
    $182 = $181&255;
    $183 = ((($35) + (($1*24)|0)|0) + ($182)|0);
    $184 = HEAP8[$183>>0]|0;
    $185 = $180 | $184;
    $186 = HEAP8[((16536 + 8|0))>>0]|0;
    $187 = $186&255;
    $188 = ((($35) + (($1*24)|0)|0) + ($187)|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = HEAP8[((16536 + 9|0))>>0]|0;
    $191 = $190&255;
    $192 = ((($35) + (($1*24)|0)|0) + ($191)|0);
    $193 = HEAP8[$192>>0]|0;
    $194 = $193 | $189;
    $195 = HEAP8[((16536 + 10|0))>>0]|0;
    $196 = $195&255;
    $197 = ((($35) + (($1*24)|0)|0) + ($196)|0);
    $198 = HEAP8[$197>>0]|0;
    $199 = $194 | $198;
    $200 = HEAP8[((16536 + 11|0))>>0]|0;
    $201 = $200&255;
    $202 = ((($35) + (($1*24)|0)|0) + ($201)|0);
    $203 = HEAP8[$202>>0]|0;
    $204 = $199 | $203;
    $205 = HEAP8[((16536 + 12|0))>>0]|0;
    $206 = $205&255;
    $207 = ((($35) + (($1*24)|0)|0) + ($206)|0);
    $208 = HEAP8[$207>>0]|0;
    $209 = HEAP8[((16536 + 13|0))>>0]|0;
    $210 = $209&255;
    $211 = ((($35) + (($1*24)|0)|0) + ($210)|0);
    $212 = HEAP8[$211>>0]|0;
    $213 = $212 | $208;
    $214 = HEAP8[((16536 + 14|0))>>0]|0;
    $215 = $214&255;
    $216 = ((($35) + (($1*24)|0)|0) + ($215)|0);
    $217 = HEAP8[$216>>0]|0;
    $218 = $213 | $217;
    $219 = HEAP8[((16536 + 15|0))>>0]|0;
    $220 = $219&255;
    $221 = ((($35) + (($1*24)|0)|0) + ($220)|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = $218 | $222;
    $224 = $185 | $166;
    $225 = $224 << 24 >> 24;
    $226 = $225 << 1;
    $227 = $226&255;
    $228 = (($nBS) + 9|0);
    HEAP8[$228>>0] = $227;
    $229 = (($nBS) + 8|0);
    HEAP8[$229>>0] = $227;
    $230 = $223 | $204;
    $231 = $230 << 24 >> 24;
    $232 = $231 << 1;
    $233 = $232&255;
    $234 = (($nBS) + 11|0);
    HEAP8[$234>>0] = $233;
    $235 = (($nBS) + 10|0);
    HEAP8[$235>>0] = $233;
    $236 = $204 | $166;
    $237 = $236 << 24 >> 24;
    $238 = $237 << 1;
    $239 = $238&255;
    $240 = (($nBS) + 25|0);
    HEAP8[$240>>0] = $239;
    $241 = (($nBS) + 24|0);
    HEAP8[$241>>0] = $239;
    $242 = $223 | $185;
    $243 = $242 << 24 >> 24;
    $244 = $243 << 1;
    $245 = $244&255;
    $246 = (($nBS) + 27|0);
    HEAP8[$246>>0] = $245;
    $247 = (($nBS) + 26|0);
    HEAP8[$247>>0] = $245;
    break;
   }
  } else if ((($5<<16>>16) == 256)) {
   $1436 = (($nBS) + 28|0);
   HEAP32[$1436>>2] = 0;
   $1437 = (($nBS) + 24|0);
   HEAP32[$1437>>2] = 0;
   $1438 = (($nBS) + 20|0);
   HEAP32[$1438>>2] = 0;
   $1439 = (($nBS) + 12|0);
   HEAP32[$1439>>2] = 0;
   $1440 = (($nBS) + 8|0);
   HEAP32[$1440>>2] = 0;
   $1441 = (($nBS) + 4|0);
   HEAP32[$1441>>2] = 0;
  } else {
   $248 = (($pCurDqLayer) + 3964|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (($pCurDqLayer) + 3932|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = (($251) + ($1<<4)|0);
   $253 = (($uiBsx4_tEmP$i) + 3|0);
   $254 = $253;
   $255 = $254 & 3;
   $256 = $255 ^ 3;
   $257 = (($uiBsx4_tEmP$i) + ($256)|0);
   $258 = (($pCurDqLayer) + 3944|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = (($259) + ($1)|0);
   $261 = HEAP8[$260>>0]|0;
   $262 = ($261<<24>>24)==(0);
   if (!($262)) {
    $263 = HEAP8[16536>>0]|0;
    $264 = $263&255;
    $265 = ((($249) + (($1*24)|0)|0) + ($264)|0);
    $266 = HEAP8[$265>>0]|0;
    $267 = HEAP8[((16536 + 1|0))>>0]|0;
    $268 = $267&255;
    $269 = ((($249) + (($1*24)|0)|0) + ($268)|0);
    $270 = HEAP8[$269>>0]|0;
    $271 = $270 | $266;
    $272 = HEAP8[((16536 + 2|0))>>0]|0;
    $273 = $272&255;
    $274 = ((($249) + (($1*24)|0)|0) + ($273)|0);
    $275 = HEAP8[$274>>0]|0;
    $276 = $271 | $275;
    $277 = HEAP8[((16536 + 3|0))>>0]|0;
    $278 = $277&255;
    $279 = ((($249) + (($1*24)|0)|0) + ($278)|0);
    $280 = HEAP8[$279>>0]|0;
    $281 = $276 | $280;
    $282 = HEAP8[((16536 + 4|0))>>0]|0;
    $283 = $282&255;
    $284 = ((($249) + (($1*24)|0)|0) + ($283)|0);
    $285 = HEAP8[$284>>0]|0;
    $286 = HEAP8[((16536 + 5|0))>>0]|0;
    $287 = $286&255;
    $288 = ((($249) + (($1*24)|0)|0) + ($287)|0);
    $289 = HEAP8[$288>>0]|0;
    $290 = $289 | $285;
    $291 = HEAP8[((16536 + 6|0))>>0]|0;
    $292 = $291&255;
    $293 = ((($249) + (($1*24)|0)|0) + ($292)|0);
    $294 = HEAP8[$293>>0]|0;
    $295 = $290 | $294;
    $296 = HEAP8[((16536 + 7|0))>>0]|0;
    $297 = $296&255;
    $298 = ((($249) + (($1*24)|0)|0) + ($297)|0);
    $299 = HEAP8[$298>>0]|0;
    $300 = $295 | $299;
    $301 = HEAP8[((16536 + 8|0))>>0]|0;
    $302 = $301&255;
    $303 = ((($249) + (($1*24)|0)|0) + ($302)|0);
    $304 = HEAP8[$303>>0]|0;
    $305 = HEAP8[((16536 + 9|0))>>0]|0;
    $306 = $305&255;
    $307 = ((($249) + (($1*24)|0)|0) + ($306)|0);
    $308 = HEAP8[$307>>0]|0;
    $309 = $308 | $304;
    $310 = HEAP8[((16536 + 10|0))>>0]|0;
    $311 = $310&255;
    $312 = ((($249) + (($1*24)|0)|0) + ($311)|0);
    $313 = HEAP8[$312>>0]|0;
    $314 = $309 | $313;
    $315 = HEAP8[((16536 + 11|0))>>0]|0;
    $316 = $315&255;
    $317 = ((($249) + (($1*24)|0)|0) + ($316)|0);
    $318 = HEAP8[$317>>0]|0;
    $319 = $314 | $318;
    $320 = HEAP8[((16536 + 12|0))>>0]|0;
    $321 = $320&255;
    $322 = ((($249) + (($1*24)|0)|0) + ($321)|0);
    $323 = HEAP8[$322>>0]|0;
    $324 = HEAP8[((16536 + 13|0))>>0]|0;
    $325 = $324&255;
    $326 = ((($249) + (($1*24)|0)|0) + ($325)|0);
    $327 = HEAP8[$326>>0]|0;
    $328 = $327 | $323;
    $329 = HEAP8[((16536 + 14|0))>>0]|0;
    $330 = $329&255;
    $331 = ((($249) + (($1*24)|0)|0) + ($330)|0);
    $332 = HEAP8[$331>>0]|0;
    $333 = $328 | $332;
    $334 = HEAP8[((16536 + 15|0))>>0]|0;
    $335 = $334&255;
    $336 = ((($249) + (($1*24)|0)|0) + ($335)|0);
    $337 = HEAP8[$336>>0]|0;
    $338 = $333 | $337;
    $339 = $300 | $281;
    $340 = $339 << 24 >> 24;
    $341 = ((($251) + ($1<<4)|0) + ($283)|0);
    $342 = HEAP8[$341>>0]|0;
    $343 = ((($251) + ($1<<4)|0) + ($264)|0);
    $344 = HEAP8[$343>>0]|0;
    $345 = ($342<<24>>24)==($344<<24>>24);
    if ($345) {
     $346 = (($pCurDqLayer) + 3916|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = ((($347) + ($1<<6)|0) + ($283<<2)|0);
     $349 = HEAP16[$348>>1]|0;
     $350 = $349 << 16 >> 16;
     $351 = ((($347) + ($1<<6)|0) + ($264<<2)|0);
     $352 = HEAP16[$351>>1]|0;
     $353 = $352 << 16 >> 16;
     $354 = (($350) - ($353))|0;
     $355 = $354 >> 31;
     $356 = $355 ^ $354;
     $357 = (($356) - ($355))|0;
     $358 = (((($347) + ($1<<6)|0) + ($283<<2)|0) + 2|0);
     $359 = HEAP16[$358>>1]|0;
     $360 = $359 << 16 >> 16;
     $361 = (((($347) + ($1<<6)|0) + ($264<<2)|0) + 2|0);
     $362 = HEAP16[$361>>1]|0;
     $363 = $362 << 16 >> 16;
     $364 = (($360) - ($363))|0;
     $365 = $364 >> 31;
     $366 = $365 ^ $364;
     $367 = (($366) - ($365))|0;
     $368 = $367 | $357;
     $369 = ($368>>>0)>(3);
     $371 = $369;
    } else {
     $371 = 1;
    }
    $370 = $371&1;
    $372 = $370 | $340;
    $373 = ($339<<24>>24)!=(0);
    $374 = $373&1;
    $375 = $372 << $374;
    $376 = $375&255;
    $377 = (($nBS) + 9|0);
    HEAP8[$377>>0] = $376;
    $378 = (($nBS) + 8|0);
    HEAP8[$378>>0] = $376;
    $379 = $338 | $319;
    $380 = $379 << 24 >> 24;
    $381 = ((($251) + ($1<<4)|0) + ($321)|0);
    $382 = HEAP8[$381>>0]|0;
    $383 = ((($251) + ($1<<4)|0) + ($302)|0);
    $384 = HEAP8[$383>>0]|0;
    $385 = ($382<<24>>24)==($384<<24>>24);
    if ($385) {
     $386 = (($pCurDqLayer) + 3916|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = ((($387) + ($1<<6)|0) + ($321<<2)|0);
     $389 = HEAP16[$388>>1]|0;
     $390 = $389 << 16 >> 16;
     $391 = ((($387) + ($1<<6)|0) + ($302<<2)|0);
     $392 = HEAP16[$391>>1]|0;
     $393 = $392 << 16 >> 16;
     $394 = (($390) - ($393))|0;
     $395 = $394 >> 31;
     $396 = $395 ^ $394;
     $397 = (($396) - ($395))|0;
     $398 = (((($387) + ($1<<6)|0) + ($321<<2)|0) + 2|0);
     $399 = HEAP16[$398>>1]|0;
     $400 = $399 << 16 >> 16;
     $401 = (((($387) + ($1<<6)|0) + ($302<<2)|0) + 2|0);
     $402 = HEAP16[$401>>1]|0;
     $403 = $402 << 16 >> 16;
     $404 = (($400) - ($403))|0;
     $405 = $404 >> 31;
     $406 = $405 ^ $404;
     $407 = (($406) - ($405))|0;
     $408 = $407 | $397;
     $409 = ($408>>>0)>(3);
     $411 = $409;
    } else {
     $411 = 1;
    }
    $410 = $411&1;
    $412 = $410 | $380;
    $413 = ($379<<24>>24)!=(0);
    $414 = $413&1;
    $415 = $412 << $414;
    $416 = $415&255;
    $417 = (($nBS) + 11|0);
    HEAP8[$417>>0] = $416;
    $418 = (($nBS) + 10|0);
    HEAP8[$418>>0] = $416;
    $419 = $319 | $281;
    $420 = $419 << 24 >> 24;
    $421 = HEAP8[$383>>0]|0;
    $422 = HEAP8[$343>>0]|0;
    $423 = ($421<<24>>24)==($422<<24>>24);
    if ($423) {
     $424 = (($pCurDqLayer) + 3916|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = ((($425) + ($1<<6)|0) + ($302<<2)|0);
     $427 = HEAP16[$426>>1]|0;
     $428 = $427 << 16 >> 16;
     $429 = ((($425) + ($1<<6)|0) + ($264<<2)|0);
     $430 = HEAP16[$429>>1]|0;
     $431 = $430 << 16 >> 16;
     $432 = (($428) - ($431))|0;
     $433 = $432 >> 31;
     $434 = $433 ^ $432;
     $435 = (($434) - ($433))|0;
     $436 = (((($425) + ($1<<6)|0) + ($302<<2)|0) + 2|0);
     $437 = HEAP16[$436>>1]|0;
     $438 = $437 << 16 >> 16;
     $439 = (((($425) + ($1<<6)|0) + ($264<<2)|0) + 2|0);
     $440 = HEAP16[$439>>1]|0;
     $441 = $440 << 16 >> 16;
     $442 = (($438) - ($441))|0;
     $443 = $442 >> 31;
     $444 = $443 ^ $442;
     $445 = (($444) - ($443))|0;
     $446 = $445 | $435;
     $447 = ($446>>>0)>(3);
     $449 = $447;
    } else {
     $449 = 1;
    }
    $448 = $449&1;
    $450 = $448 | $420;
    $451 = ($419<<24>>24)!=(0);
    $452 = $451&1;
    $453 = $450 << $452;
    $454 = $453&255;
    $455 = (($nBS) + 25|0);
    HEAP8[$455>>0] = $454;
    $456 = (($nBS) + 24|0);
    HEAP8[$456>>0] = $454;
    $457 = $338 | $300;
    $458 = $457 << 24 >> 24;
    $459 = HEAP8[$381>>0]|0;
    $460 = HEAP8[$341>>0]|0;
    $461 = ($459<<24>>24)==($460<<24>>24);
    if ($461) {
     $462 = (($pCurDqLayer) + 3916|0);
     $463 = HEAP32[$462>>2]|0;
     $464 = ((($463) + ($1<<6)|0) + ($321<<2)|0);
     $465 = HEAP16[$464>>1]|0;
     $466 = $465 << 16 >> 16;
     $467 = ((($463) + ($1<<6)|0) + ($283<<2)|0);
     $468 = HEAP16[$467>>1]|0;
     $469 = $468 << 16 >> 16;
     $470 = (($466) - ($469))|0;
     $471 = $470 >> 31;
     $472 = $471 ^ $470;
     $473 = (($472) - ($471))|0;
     $474 = (((($463) + ($1<<6)|0) + ($321<<2)|0) + 2|0);
     $475 = HEAP16[$474>>1]|0;
     $476 = $475 << 16 >> 16;
     $477 = (((($463) + ($1<<6)|0) + ($283<<2)|0) + 2|0);
     $478 = HEAP16[$477>>1]|0;
     $479 = $478 << 16 >> 16;
     $480 = (($476) - ($479))|0;
     $481 = $480 >> 31;
     $482 = $481 ^ $480;
     $483 = (($482) - ($481))|0;
     $484 = $483 | $473;
     $485 = ($484>>>0)>(3);
     $487 = $485;
    } else {
     $487 = 1;
    }
    $486 = $487&1;
    $488 = $486 | $458;
    $489 = ($457<<24>>24)!=(0);
    $490 = $489&1;
    $491 = $488 << $490;
    $492 = $491&255;
    $493 = (($nBS) + 27|0);
    HEAP8[$493>>0] = $492;
    $494 = (($nBS) + 26|0);
    HEAP8[$494>>0] = $492;
    break;
   }
   $495 = (($249) + (($1*24)|0)|0);
   $496 = HEAP32[$495>>2]|0;
   $497 = ((($249) + (($1*24)|0)|0) + 4|0);
   $498 = HEAP32[$497>>2]|0;
   $499 = ((($249) + (($1*24)|0)|0) + 8|0);
   $500 = HEAP32[$499>>2]|0;
   $501 = ((($249) + (($1*24)|0)|0) + 12|0);
   $502 = HEAP32[$501>>2]|0;
   $trunc$i1 = $496&255;
   $503 = ((($249) + (($1*24)|0)|0) + 1|0);
   $504 = HEAP8[$503>>0]|0;
   $505 = $504 | $trunc$i1;
   HEAP8[$257>>0] = $505;
   $506 = ((($249) + (($1*24)|0)|0) + 2|0);
   $507 = HEAP8[$506>>0]|0;
   $508 = $507 | $504;
   $$sum6$1$i = (($256) + 1)|0;
   $509 = (($uiBsx4_tEmP$i) + ($$sum6$1$i)|0);
   HEAP8[$509>>0] = $508;
   $510 = ((($249) + (($1*24)|0)|0) + 3|0);
   $511 = HEAP8[$510>>0]|0;
   $512 = $511 | $507;
   $$sum6$2$i = (($256) + 2)|0;
   $513 = (($uiBsx4_tEmP$i) + ($$sum6$2$i)|0);
   HEAP8[$513>>0] = $512;
   $514 = $505&255;
   $515 = ((($251) + ($1<<4)|0) + 1|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = HEAP8[$252>>0]|0;
   $518 = ($516<<24>>24)==($517<<24>>24);
   if ($518) {
    $519 = (($pCurDqLayer) + 3916|0);
    $520 = HEAP32[$519>>2]|0;
    $521 = ((($520) + ($1<<6)|0) + 4|0);
    $522 = HEAP16[$521>>1]|0;
    $523 = $522 << 16 >> 16;
    $524 = (($520) + ($1<<6)|0);
    $525 = HEAP16[$524>>1]|0;
    $526 = $525 << 16 >> 16;
    $527 = (($523) - ($526))|0;
    $528 = $527 >> 31;
    $529 = $528 ^ $527;
    $530 = (($529) - ($528))|0;
    $531 = ((($520) + ($1<<6)|0) + 6|0);
    $532 = HEAP16[$531>>1]|0;
    $533 = $532 << 16 >> 16;
    $534 = ((($520) + ($1<<6)|0) + 2|0);
    $535 = HEAP16[$534>>1]|0;
    $536 = $535 << 16 >> 16;
    $537 = (($533) - ($536))|0;
    $538 = $537 >> 31;
    $539 = $538 ^ $537;
    $540 = (($539) - ($538))|0;
    $541 = $540 | $530;
    $542 = ($541>>>0)>(3);
    $544 = $542;
   } else {
    $544 = 1;
   }
   $543 = $544&1;
   $545 = $543 | $514;
   $546 = ($505<<24>>24)!=(0);
   $547 = $546&1;
   $548 = $545 << $547;
   $549 = $548&255;
   $550 = (($nBS) + 4|0);
   HEAP8[$550>>0] = $549;
   $551 = $508&255;
   $552 = ((($251) + ($1<<4)|0) + 2|0);
   $553 = HEAP8[$552>>0]|0;
   $554 = HEAP8[$515>>0]|0;
   $555 = ($553<<24>>24)==($554<<24>>24);
   if ($555) {
    $556 = (($pCurDqLayer) + 3916|0);
    $557 = HEAP32[$556>>2]|0;
    $558 = ((($557) + ($1<<6)|0) + 8|0);
    $559 = HEAP16[$558>>1]|0;
    $560 = $559 << 16 >> 16;
    $561 = ((($557) + ($1<<6)|0) + 4|0);
    $562 = HEAP16[$561>>1]|0;
    $563 = $562 << 16 >> 16;
    $564 = (($560) - ($563))|0;
    $565 = $564 >> 31;
    $566 = $565 ^ $564;
    $567 = (($566) - ($565))|0;
    $568 = ((($557) + ($1<<6)|0) + 10|0);
    $569 = HEAP16[$568>>1]|0;
    $570 = $569 << 16 >> 16;
    $571 = ((($557) + ($1<<6)|0) + 6|0);
    $572 = HEAP16[$571>>1]|0;
    $573 = $572 << 16 >> 16;
    $574 = (($570) - ($573))|0;
    $575 = $574 >> 31;
    $576 = $575 ^ $574;
    $577 = (($576) - ($575))|0;
    $578 = $577 | $567;
    $579 = ($578>>>0)>(3);
    $581 = $579;
   } else {
    $581 = 1;
   }
   $580 = $581&1;
   $582 = $580 | $551;
   $583 = ($508<<24>>24)!=(0);
   $584 = $583&1;
   $585 = $582 << $584;
   $586 = $585&255;
   $587 = (($nBS) + 8|0);
   HEAP8[$587>>0] = $586;
   $588 = $512&255;
   $589 = ((($251) + ($1<<4)|0) + 3|0);
   $590 = HEAP8[$589>>0]|0;
   $591 = HEAP8[$552>>0]|0;
   $592 = ($590<<24>>24)==($591<<24>>24);
   if ($592) {
    $593 = (($pCurDqLayer) + 3916|0);
    $594 = HEAP32[$593>>2]|0;
    $595 = ((($594) + ($1<<6)|0) + 12|0);
    $596 = HEAP16[$595>>1]|0;
    $597 = $596 << 16 >> 16;
    $598 = ((($594) + ($1<<6)|0) + 8|0);
    $599 = HEAP16[$598>>1]|0;
    $600 = $599 << 16 >> 16;
    $601 = (($597) - ($600))|0;
    $602 = $601 >> 31;
    $603 = $602 ^ $601;
    $604 = (($603) - ($602))|0;
    $605 = ((($594) + ($1<<6)|0) + 14|0);
    $606 = HEAP16[$605>>1]|0;
    $607 = $606 << 16 >> 16;
    $608 = ((($594) + ($1<<6)|0) + 10|0);
    $609 = HEAP16[$608>>1]|0;
    $610 = $609 << 16 >> 16;
    $611 = (($607) - ($610))|0;
    $612 = $611 >> 31;
    $613 = $612 ^ $611;
    $614 = (($613) - ($612))|0;
    $615 = $614 | $604;
    $616 = ($615>>>0)>(3);
    $618 = $616;
   } else {
    $618 = 1;
   }
   $617 = $618&1;
   $619 = $617 | $588;
   $620 = ($512<<24>>24)!=(0);
   $621 = $620&1;
   $622 = $619 << $621;
   $623 = $622&255;
   $624 = (($nBS) + 12|0);
   HEAP8[$624>>0] = $623;
   $625 = HEAP8[$497>>0]|0;
   $626 = ((($249) + (($1*24)|0)|0) + 5|0);
   $627 = HEAP8[$626>>0]|0;
   $628 = $627 | $625;
   HEAP8[$257>>0] = $628;
   $629 = ((($249) + (($1*24)|0)|0) + 6|0);
   $630 = HEAP8[$629>>0]|0;
   $631 = $630 | $627;
   HEAP8[$509>>0] = $631;
   $632 = ((($249) + (($1*24)|0)|0) + 7|0);
   $633 = HEAP8[$632>>0]|0;
   $634 = $633 | $630;
   HEAP8[$513>>0] = $634;
   $635 = $628&255;
   $636 = ((($251) + ($1<<4)|0) + 5|0);
   $637 = HEAP8[$636>>0]|0;
   $638 = ((($251) + ($1<<4)|0) + 4|0);
   $639 = HEAP8[$638>>0]|0;
   $640 = ($637<<24>>24)==($639<<24>>24);
   if ($640) {
    $641 = (($pCurDqLayer) + 3916|0);
    $642 = HEAP32[$641>>2]|0;
    $643 = ((($642) + ($1<<6)|0) + 20|0);
    $644 = HEAP16[$643>>1]|0;
    $645 = $644 << 16 >> 16;
    $646 = ((($642) + ($1<<6)|0) + 16|0);
    $647 = HEAP16[$646>>1]|0;
    $648 = $647 << 16 >> 16;
    $649 = (($645) - ($648))|0;
    $650 = $649 >> 31;
    $651 = $650 ^ $649;
    $652 = (($651) - ($650))|0;
    $653 = ((($642) + ($1<<6)|0) + 22|0);
    $654 = HEAP16[$653>>1]|0;
    $655 = $654 << 16 >> 16;
    $656 = ((($642) + ($1<<6)|0) + 18|0);
    $657 = HEAP16[$656>>1]|0;
    $658 = $657 << 16 >> 16;
    $659 = (($655) - ($658))|0;
    $660 = $659 >> 31;
    $661 = $660 ^ $659;
    $662 = (($661) - ($660))|0;
    $663 = $662 | $652;
    $664 = ($663>>>0)>(3);
    $666 = $664;
   } else {
    $666 = 1;
   }
   $665 = $666&1;
   $667 = $665 | $635;
   $668 = ($628<<24>>24)!=(0);
   $669 = $668&1;
   $670 = $667 << $669;
   $671 = $670&255;
   $672 = (($nBS) + 5|0);
   HEAP8[$672>>0] = $671;
   $673 = $631&255;
   $674 = ((($251) + ($1<<4)|0) + 6|0);
   $675 = HEAP8[$674>>0]|0;
   $676 = HEAP8[$636>>0]|0;
   $677 = ($675<<24>>24)==($676<<24>>24);
   if ($677) {
    $678 = (($pCurDqLayer) + 3916|0);
    $679 = HEAP32[$678>>2]|0;
    $680 = ((($679) + ($1<<6)|0) + 24|0);
    $681 = HEAP16[$680>>1]|0;
    $682 = $681 << 16 >> 16;
    $683 = ((($679) + ($1<<6)|0) + 20|0);
    $684 = HEAP16[$683>>1]|0;
    $685 = $684 << 16 >> 16;
    $686 = (($682) - ($685))|0;
    $687 = $686 >> 31;
    $688 = $687 ^ $686;
    $689 = (($688) - ($687))|0;
    $690 = ((($679) + ($1<<6)|0) + 26|0);
    $691 = HEAP16[$690>>1]|0;
    $692 = $691 << 16 >> 16;
    $693 = ((($679) + ($1<<6)|0) + 22|0);
    $694 = HEAP16[$693>>1]|0;
    $695 = $694 << 16 >> 16;
    $696 = (($692) - ($695))|0;
    $697 = $696 >> 31;
    $698 = $697 ^ $696;
    $699 = (($698) - ($697))|0;
    $700 = $699 | $689;
    $701 = ($700>>>0)>(3);
    $703 = $701;
   } else {
    $703 = 1;
   }
   $702 = $703&1;
   $704 = $702 | $673;
   $705 = ($631<<24>>24)!=(0);
   $706 = $705&1;
   $707 = $704 << $706;
   $708 = $707&255;
   $709 = (($nBS) + 9|0);
   HEAP8[$709>>0] = $708;
   $710 = $634&255;
   $711 = ((($251) + ($1<<4)|0) + 7|0);
   $712 = HEAP8[$711>>0]|0;
   $713 = HEAP8[$674>>0]|0;
   $714 = ($712<<24>>24)==($713<<24>>24);
   if ($714) {
    $715 = (($pCurDqLayer) + 3916|0);
    $716 = HEAP32[$715>>2]|0;
    $717 = ((($716) + ($1<<6)|0) + 28|0);
    $718 = HEAP16[$717>>1]|0;
    $719 = $718 << 16 >> 16;
    $720 = ((($716) + ($1<<6)|0) + 24|0);
    $721 = HEAP16[$720>>1]|0;
    $722 = $721 << 16 >> 16;
    $723 = (($719) - ($722))|0;
    $724 = $723 >> 31;
    $725 = $724 ^ $723;
    $726 = (($725) - ($724))|0;
    $727 = ((($716) + ($1<<6)|0) + 30|0);
    $728 = HEAP16[$727>>1]|0;
    $729 = $728 << 16 >> 16;
    $730 = ((($716) + ($1<<6)|0) + 26|0);
    $731 = HEAP16[$730>>1]|0;
    $732 = $731 << 16 >> 16;
    $733 = (($729) - ($732))|0;
    $734 = $733 >> 31;
    $735 = $734 ^ $733;
    $736 = (($735) - ($734))|0;
    $737 = $736 | $726;
    $738 = ($737>>>0)>(3);
    $740 = $738;
   } else {
    $740 = 1;
   }
   $739 = $740&1;
   $741 = $739 | $710;
   $742 = ($634<<24>>24)!=(0);
   $743 = $742&1;
   $744 = $741 << $743;
   $745 = $744&255;
   $746 = (($nBS) + 13|0);
   HEAP8[$746>>0] = $745;
   $747 = HEAP8[$499>>0]|0;
   $748 = ((($249) + (($1*24)|0)|0) + 9|0);
   $749 = HEAP8[$748>>0]|0;
   $750 = $749 | $747;
   HEAP8[$257>>0] = $750;
   $751 = ((($249) + (($1*24)|0)|0) + 10|0);
   $752 = HEAP8[$751>>0]|0;
   $753 = $752 | $749;
   HEAP8[$509>>0] = $753;
   $754 = ((($249) + (($1*24)|0)|0) + 11|0);
   $755 = HEAP8[$754>>0]|0;
   $756 = $755 | $752;
   HEAP8[$513>>0] = $756;
   $757 = $750&255;
   $758 = ((($251) + ($1<<4)|0) + 9|0);
   $759 = HEAP8[$758>>0]|0;
   $760 = ((($251) + ($1<<4)|0) + 8|0);
   $761 = HEAP8[$760>>0]|0;
   $762 = ($759<<24>>24)==($761<<24>>24);
   if ($762) {
    $763 = (($pCurDqLayer) + 3916|0);
    $764 = HEAP32[$763>>2]|0;
    $765 = ((($764) + ($1<<6)|0) + 36|0);
    $766 = HEAP16[$765>>1]|0;
    $767 = $766 << 16 >> 16;
    $768 = ((($764) + ($1<<6)|0) + 32|0);
    $769 = HEAP16[$768>>1]|0;
    $770 = $769 << 16 >> 16;
    $771 = (($767) - ($770))|0;
    $772 = $771 >> 31;
    $773 = $772 ^ $771;
    $774 = (($773) - ($772))|0;
    $775 = ((($764) + ($1<<6)|0) + 38|0);
    $776 = HEAP16[$775>>1]|0;
    $777 = $776 << 16 >> 16;
    $778 = ((($764) + ($1<<6)|0) + 34|0);
    $779 = HEAP16[$778>>1]|0;
    $780 = $779 << 16 >> 16;
    $781 = (($777) - ($780))|0;
    $782 = $781 >> 31;
    $783 = $782 ^ $781;
    $784 = (($783) - ($782))|0;
    $785 = $784 | $774;
    $786 = ($785>>>0)>(3);
    $788 = $786;
   } else {
    $788 = 1;
   }
   $787 = $788&1;
   $789 = $787 | $757;
   $790 = ($750<<24>>24)!=(0);
   $791 = $790&1;
   $792 = $789 << $791;
   $793 = $792&255;
   $794 = (($nBS) + 6|0);
   HEAP8[$794>>0] = $793;
   $795 = $753&255;
   $796 = ((($251) + ($1<<4)|0) + 10|0);
   $797 = HEAP8[$796>>0]|0;
   $798 = HEAP8[$758>>0]|0;
   $799 = ($797<<24>>24)==($798<<24>>24);
   if ($799) {
    $800 = (($pCurDqLayer) + 3916|0);
    $801 = HEAP32[$800>>2]|0;
    $802 = ((($801) + ($1<<6)|0) + 40|0);
    $803 = HEAP16[$802>>1]|0;
    $804 = $803 << 16 >> 16;
    $805 = ((($801) + ($1<<6)|0) + 36|0);
    $806 = HEAP16[$805>>1]|0;
    $807 = $806 << 16 >> 16;
    $808 = (($804) - ($807))|0;
    $809 = $808 >> 31;
    $810 = $809 ^ $808;
    $811 = (($810) - ($809))|0;
    $812 = ((($801) + ($1<<6)|0) + 42|0);
    $813 = HEAP16[$812>>1]|0;
    $814 = $813 << 16 >> 16;
    $815 = ((($801) + ($1<<6)|0) + 38|0);
    $816 = HEAP16[$815>>1]|0;
    $817 = $816 << 16 >> 16;
    $818 = (($814) - ($817))|0;
    $819 = $818 >> 31;
    $820 = $819 ^ $818;
    $821 = (($820) - ($819))|0;
    $822 = $821 | $811;
    $823 = ($822>>>0)>(3);
    $825 = $823;
   } else {
    $825 = 1;
   }
   $824 = $825&1;
   $826 = $824 | $795;
   $827 = ($753<<24>>24)!=(0);
   $828 = $827&1;
   $829 = $826 << $828;
   $830 = $829&255;
   $831 = (($nBS) + 10|0);
   HEAP8[$831>>0] = $830;
   $832 = $756&255;
   $833 = ((($251) + ($1<<4)|0) + 11|0);
   $834 = HEAP8[$833>>0]|0;
   $835 = HEAP8[$796>>0]|0;
   $836 = ($834<<24>>24)==($835<<24>>24);
   if ($836) {
    $837 = (($pCurDqLayer) + 3916|0);
    $838 = HEAP32[$837>>2]|0;
    $839 = ((($838) + ($1<<6)|0) + 44|0);
    $840 = HEAP16[$839>>1]|0;
    $841 = $840 << 16 >> 16;
    $842 = ((($838) + ($1<<6)|0) + 40|0);
    $843 = HEAP16[$842>>1]|0;
    $844 = $843 << 16 >> 16;
    $845 = (($841) - ($844))|0;
    $846 = $845 >> 31;
    $847 = $846 ^ $845;
    $848 = (($847) - ($846))|0;
    $849 = ((($838) + ($1<<6)|0) + 46|0);
    $850 = HEAP16[$849>>1]|0;
    $851 = $850 << 16 >> 16;
    $852 = ((($838) + ($1<<6)|0) + 42|0);
    $853 = HEAP16[$852>>1]|0;
    $854 = $853 << 16 >> 16;
    $855 = (($851) - ($854))|0;
    $856 = $855 >> 31;
    $857 = $856 ^ $855;
    $858 = (($857) - ($856))|0;
    $859 = $858 | $848;
    $860 = ($859>>>0)>(3);
    $862 = $860;
   } else {
    $862 = 1;
   }
   $861 = $862&1;
   $863 = $861 | $832;
   $864 = ($756<<24>>24)!=(0);
   $865 = $864&1;
   $866 = $863 << $865;
   $867 = $866&255;
   $868 = (($nBS) + 14|0);
   HEAP8[$868>>0] = $867;
   $869 = HEAP8[$501>>0]|0;
   $870 = ((($249) + (($1*24)|0)|0) + 13|0);
   $871 = HEAP8[$870>>0]|0;
   $872 = $871 | $869;
   HEAP8[$257>>0] = $872;
   $873 = ((($249) + (($1*24)|0)|0) + 14|0);
   $874 = HEAP8[$873>>0]|0;
   $875 = $874 | $871;
   HEAP8[$509>>0] = $875;
   $876 = ((($249) + (($1*24)|0)|0) + 15|0);
   $877 = HEAP8[$876>>0]|0;
   $878 = $877 | $874;
   HEAP8[$513>>0] = $878;
   $879 = $872&255;
   $880 = ((($251) + ($1<<4)|0) + 13|0);
   $881 = HEAP8[$880>>0]|0;
   $882 = ((($251) + ($1<<4)|0) + 12|0);
   $883 = HEAP8[$882>>0]|0;
   $884 = ($881<<24>>24)==($883<<24>>24);
   if ($884) {
    $885 = (($pCurDqLayer) + 3916|0);
    $886 = HEAP32[$885>>2]|0;
    $887 = ((($886) + ($1<<6)|0) + 52|0);
    $888 = HEAP16[$887>>1]|0;
    $889 = $888 << 16 >> 16;
    $890 = ((($886) + ($1<<6)|0) + 48|0);
    $891 = HEAP16[$890>>1]|0;
    $892 = $891 << 16 >> 16;
    $893 = (($889) - ($892))|0;
    $894 = $893 >> 31;
    $895 = $894 ^ $893;
    $896 = (($895) - ($894))|0;
    $897 = ((($886) + ($1<<6)|0) + 54|0);
    $898 = HEAP16[$897>>1]|0;
    $899 = $898 << 16 >> 16;
    $900 = ((($886) + ($1<<6)|0) + 50|0);
    $901 = HEAP16[$900>>1]|0;
    $902 = $901 << 16 >> 16;
    $903 = (($899) - ($902))|0;
    $904 = $903 >> 31;
    $905 = $904 ^ $903;
    $906 = (($905) - ($904))|0;
    $907 = $906 | $896;
    $908 = ($907>>>0)>(3);
    $910 = $908;
   } else {
    $910 = 1;
   }
   $909 = $910&1;
   $911 = $909 | $879;
   $912 = ($872<<24>>24)!=(0);
   $913 = $912&1;
   $914 = $911 << $913;
   $915 = $914&255;
   $916 = (($nBS) + 7|0);
   HEAP8[$916>>0] = $915;
   $917 = $875&255;
   $918 = ((($251) + ($1<<4)|0) + 14|0);
   $919 = HEAP8[$918>>0]|0;
   $920 = HEAP8[$880>>0]|0;
   $921 = ($919<<24>>24)==($920<<24>>24);
   if ($921) {
    $922 = (($pCurDqLayer) + 3916|0);
    $923 = HEAP32[$922>>2]|0;
    $924 = ((($923) + ($1<<6)|0) + 56|0);
    $925 = HEAP16[$924>>1]|0;
    $926 = $925 << 16 >> 16;
    $927 = ((($923) + ($1<<6)|0) + 52|0);
    $928 = HEAP16[$927>>1]|0;
    $929 = $928 << 16 >> 16;
    $930 = (($926) - ($929))|0;
    $931 = $930 >> 31;
    $932 = $931 ^ $930;
    $933 = (($932) - ($931))|0;
    $934 = ((($923) + ($1<<6)|0) + 58|0);
    $935 = HEAP16[$934>>1]|0;
    $936 = $935 << 16 >> 16;
    $937 = ((($923) + ($1<<6)|0) + 54|0);
    $938 = HEAP16[$937>>1]|0;
    $939 = $938 << 16 >> 16;
    $940 = (($936) - ($939))|0;
    $941 = $940 >> 31;
    $942 = $941 ^ $940;
    $943 = (($942) - ($941))|0;
    $944 = $943 | $933;
    $945 = ($944>>>0)>(3);
    $947 = $945;
   } else {
    $947 = 1;
   }
   $946 = $947&1;
   $948 = $946 | $917;
   $949 = ($875<<24>>24)!=(0);
   $950 = $949&1;
   $951 = $948 << $950;
   $952 = $951&255;
   $953 = (($nBS) + 11|0);
   HEAP8[$953>>0] = $952;
   $954 = $878&255;
   $955 = ((($251) + ($1<<4)|0) + 15|0);
   $956 = HEAP8[$955>>0]|0;
   $957 = HEAP8[$918>>0]|0;
   $958 = ($956<<24>>24)==($957<<24>>24);
   if ($958) {
    $959 = (($pCurDqLayer) + 3916|0);
    $960 = HEAP32[$959>>2]|0;
    $961 = ((($960) + ($1<<6)|0) + 60|0);
    $962 = HEAP16[$961>>1]|0;
    $963 = $962 << 16 >> 16;
    $964 = ((($960) + ($1<<6)|0) + 56|0);
    $965 = HEAP16[$964>>1]|0;
    $966 = $965 << 16 >> 16;
    $967 = (($963) - ($966))|0;
    $968 = $967 >> 31;
    $969 = $968 ^ $967;
    $970 = (($969) - ($968))|0;
    $971 = ((($960) + ($1<<6)|0) + 62|0);
    $972 = HEAP16[$971>>1]|0;
    $973 = $972 << 16 >> 16;
    $974 = ((($960) + ($1<<6)|0) + 58|0);
    $975 = HEAP16[$974>>1]|0;
    $976 = $975 << 16 >> 16;
    $977 = (($973) - ($976))|0;
    $978 = $977 >> 31;
    $979 = $978 ^ $977;
    $980 = (($979) - ($978))|0;
    $981 = $980 | $970;
    $982 = ($981>>>0)>(3);
    $984 = $982;
   } else {
    $984 = 1;
   }
   $983 = $984&1;
   $985 = $983 | $954;
   $986 = ($878<<24>>24)!=(0);
   $987 = $986&1;
   $988 = $985 << $987;
   $989 = $988&255;
   $990 = (($nBS) + 15|0);
   HEAP8[$990>>0] = $989;
   $991 = $498 | $496;
   HEAP32[$257>>2] = $991;
   $trunc12$i = $991&255;
   $992 = $991 & 255;
   $993 = HEAP8[$638>>0]|0;
   $994 = HEAP8[$252>>0]|0;
   $995 = ($993<<24>>24)==($994<<24>>24);
   if ($995) {
    $996 = (($pCurDqLayer) + 3916|0);
    $997 = HEAP32[$996>>2]|0;
    $998 = ((($997) + ($1<<6)|0) + 16|0);
    $999 = HEAP16[$998>>1]|0;
    $1000 = $999 << 16 >> 16;
    $1001 = (($997) + ($1<<6)|0);
    $1002 = HEAP16[$1001>>1]|0;
    $1003 = $1002 << 16 >> 16;
    $1004 = (($1000) - ($1003))|0;
    $1005 = $1004 >> 31;
    $1006 = $1005 ^ $1004;
    $1007 = (($1006) - ($1005))|0;
    $1008 = ((($997) + ($1<<6)|0) + 18|0);
    $1009 = HEAP16[$1008>>1]|0;
    $1010 = $1009 << 16 >> 16;
    $1011 = ((($997) + ($1<<6)|0) + 2|0);
    $1012 = HEAP16[$1011>>1]|0;
    $1013 = $1012 << 16 >> 16;
    $1014 = (($1010) - ($1013))|0;
    $1015 = $1014 >> 31;
    $1016 = $1015 ^ $1014;
    $1017 = (($1016) - ($1015))|0;
    $1018 = $1017 | $1007;
    $1019 = ($1018>>>0)>(3);
    $1021 = $1019;
   } else {
    $1021 = 1;
   }
   $1020 = $1021&1;
   $1022 = $1020 | $992;
   $1023 = ($trunc12$i<<24>>24)!=(0);
   $1024 = $1023&1;
   $1025 = $1022 << $1024;
   $1026 = $1025&255;
   $1027 = (($nBS) + 20|0);
   HEAP8[$1027>>0] = $1026;
   $1028 = HEAP8[$509>>0]|0;
   $1029 = $1028&255;
   $1030 = HEAP8[$636>>0]|0;
   $1031 = HEAP8[$515>>0]|0;
   $1032 = ($1030<<24>>24)==($1031<<24>>24);
   if ($1032) {
    $1033 = (($pCurDqLayer) + 3916|0);
    $1034 = HEAP32[$1033>>2]|0;
    $1035 = ((($1034) + ($1<<6)|0) + 20|0);
    $1036 = HEAP16[$1035>>1]|0;
    $1037 = $1036 << 16 >> 16;
    $1038 = ((($1034) + ($1<<6)|0) + 4|0);
    $1039 = HEAP16[$1038>>1]|0;
    $1040 = $1039 << 16 >> 16;
    $1041 = (($1037) - ($1040))|0;
    $1042 = $1041 >> 31;
    $1043 = $1042 ^ $1041;
    $1044 = (($1043) - ($1042))|0;
    $1045 = ((($1034) + ($1<<6)|0) + 22|0);
    $1046 = HEAP16[$1045>>1]|0;
    $1047 = $1046 << 16 >> 16;
    $1048 = ((($1034) + ($1<<6)|0) + 6|0);
    $1049 = HEAP16[$1048>>1]|0;
    $1050 = $1049 << 16 >> 16;
    $1051 = (($1047) - ($1050))|0;
    $1052 = $1051 >> 31;
    $1053 = $1052 ^ $1051;
    $1054 = (($1053) - ($1052))|0;
    $1055 = $1054 | $1044;
    $1056 = ($1055>>>0)>(3);
    $1058 = $1056;
   } else {
    $1058 = 1;
   }
   $1057 = $1058&1;
   $1059 = $1057 | $1029;
   $1060 = ($1028<<24>>24)!=(0);
   $1061 = $1060&1;
   $1062 = $1059 << $1061;
   $1063 = $1062&255;
   $1064 = (($nBS) + 21|0);
   HEAP8[$1064>>0] = $1063;
   $1065 = HEAP8[$513>>0]|0;
   $1066 = $1065&255;
   $1067 = HEAP8[$674>>0]|0;
   $1068 = HEAP8[$552>>0]|0;
   $1069 = ($1067<<24>>24)==($1068<<24>>24);
   if ($1069) {
    $1070 = (($pCurDqLayer) + 3916|0);
    $1071 = HEAP32[$1070>>2]|0;
    $1072 = ((($1071) + ($1<<6)|0) + 24|0);
    $1073 = HEAP16[$1072>>1]|0;
    $1074 = $1073 << 16 >> 16;
    $1075 = ((($1071) + ($1<<6)|0) + 8|0);
    $1076 = HEAP16[$1075>>1]|0;
    $1077 = $1076 << 16 >> 16;
    $1078 = (($1074) - ($1077))|0;
    $1079 = $1078 >> 31;
    $1080 = $1079 ^ $1078;
    $1081 = (($1080) - ($1079))|0;
    $1082 = ((($1071) + ($1<<6)|0) + 26|0);
    $1083 = HEAP16[$1082>>1]|0;
    $1084 = $1083 << 16 >> 16;
    $1085 = ((($1071) + ($1<<6)|0) + 10|0);
    $1086 = HEAP16[$1085>>1]|0;
    $1087 = $1086 << 16 >> 16;
    $1088 = (($1084) - ($1087))|0;
    $1089 = $1088 >> 31;
    $1090 = $1089 ^ $1088;
    $1091 = (($1090) - ($1089))|0;
    $1092 = $1091 | $1081;
    $1093 = ($1092>>>0)>(3);
    $1095 = $1093;
   } else {
    $1095 = 1;
   }
   $1094 = $1095&1;
   $1096 = $1094 | $1066;
   $1097 = ($1065<<24>>24)!=(0);
   $1098 = $1097&1;
   $1099 = $1096 << $1098;
   $1100 = $1099&255;
   $1101 = (($nBS) + 22|0);
   HEAP8[$1101>>0] = $1100;
   $$sum2$i = (($256) + 3)|0;
   $1102 = (($uiBsx4_tEmP$i) + ($$sum2$i)|0);
   $1103 = HEAP8[$1102>>0]|0;
   $1104 = $1103&255;
   $1105 = HEAP8[$711>>0]|0;
   $1106 = HEAP8[$589>>0]|0;
   $1107 = ($1105<<24>>24)==($1106<<24>>24);
   if ($1107) {
    $1108 = (($pCurDqLayer) + 3916|0);
    $1109 = HEAP32[$1108>>2]|0;
    $1110 = ((($1109) + ($1<<6)|0) + 28|0);
    $1111 = HEAP16[$1110>>1]|0;
    $1112 = $1111 << 16 >> 16;
    $1113 = ((($1109) + ($1<<6)|0) + 12|0);
    $1114 = HEAP16[$1113>>1]|0;
    $1115 = $1114 << 16 >> 16;
    $1116 = (($1112) - ($1115))|0;
    $1117 = $1116 >> 31;
    $1118 = $1117 ^ $1116;
    $1119 = (($1118) - ($1117))|0;
    $1120 = ((($1109) + ($1<<6)|0) + 30|0);
    $1121 = HEAP16[$1120>>1]|0;
    $1122 = $1121 << 16 >> 16;
    $1123 = ((($1109) + ($1<<6)|0) + 14|0);
    $1124 = HEAP16[$1123>>1]|0;
    $1125 = $1124 << 16 >> 16;
    $1126 = (($1122) - ($1125))|0;
    $1127 = $1126 >> 31;
    $1128 = $1127 ^ $1126;
    $1129 = (($1128) - ($1127))|0;
    $1130 = $1129 | $1119;
    $1131 = ($1130>>>0)>(3);
    $1133 = $1131;
   } else {
    $1133 = 1;
   }
   $1132 = $1133&1;
   $1134 = $1132 | $1104;
   $1135 = ($1103<<24>>24)!=(0);
   $1136 = $1135&1;
   $1137 = $1134 << $1136;
   $1138 = $1137&255;
   $1139 = (($nBS) + 23|0);
   HEAP8[$1139>>0] = $1138;
   $1140 = $500 | $498;
   HEAP32[$257>>2] = $1140;
   $trunc13$i = $1140&255;
   $1141 = $1140 & 255;
   $1142 = HEAP8[$760>>0]|0;
   $1143 = HEAP8[$638>>0]|0;
   $1144 = ($1142<<24>>24)==($1143<<24>>24);
   if ($1144) {
    $1145 = (($pCurDqLayer) + 3916|0);
    $1146 = HEAP32[$1145>>2]|0;
    $1147 = ((($1146) + ($1<<6)|0) + 32|0);
    $1148 = HEAP16[$1147>>1]|0;
    $1149 = $1148 << 16 >> 16;
    $1150 = ((($1146) + ($1<<6)|0) + 16|0);
    $1151 = HEAP16[$1150>>1]|0;
    $1152 = $1151 << 16 >> 16;
    $1153 = (($1149) - ($1152))|0;
    $1154 = $1153 >> 31;
    $1155 = $1154 ^ $1153;
    $1156 = (($1155) - ($1154))|0;
    $1157 = ((($1146) + ($1<<6)|0) + 34|0);
    $1158 = HEAP16[$1157>>1]|0;
    $1159 = $1158 << 16 >> 16;
    $1160 = ((($1146) + ($1<<6)|0) + 18|0);
    $1161 = HEAP16[$1160>>1]|0;
    $1162 = $1161 << 16 >> 16;
    $1163 = (($1159) - ($1162))|0;
    $1164 = $1163 >> 31;
    $1165 = $1164 ^ $1163;
    $1166 = (($1165) - ($1164))|0;
    $1167 = $1166 | $1156;
    $1168 = ($1167>>>0)>(3);
    $1170 = $1168;
   } else {
    $1170 = 1;
   }
   $1169 = $1170&1;
   $1171 = $1169 | $1141;
   $1172 = ($trunc13$i<<24>>24)!=(0);
   $1173 = $1172&1;
   $1174 = $1171 << $1173;
   $1175 = $1174&255;
   $1176 = (($nBS) + 24|0);
   HEAP8[$1176>>0] = $1175;
   $1177 = HEAP8[$509>>0]|0;
   $1178 = $1177&255;
   $1179 = HEAP8[$758>>0]|0;
   $1180 = HEAP8[$636>>0]|0;
   $1181 = ($1179<<24>>24)==($1180<<24>>24);
   if ($1181) {
    $1182 = (($pCurDqLayer) + 3916|0);
    $1183 = HEAP32[$1182>>2]|0;
    $1184 = ((($1183) + ($1<<6)|0) + 36|0);
    $1185 = HEAP16[$1184>>1]|0;
    $1186 = $1185 << 16 >> 16;
    $1187 = ((($1183) + ($1<<6)|0) + 20|0);
    $1188 = HEAP16[$1187>>1]|0;
    $1189 = $1188 << 16 >> 16;
    $1190 = (($1186) - ($1189))|0;
    $1191 = $1190 >> 31;
    $1192 = $1191 ^ $1190;
    $1193 = (($1192) - ($1191))|0;
    $1194 = ((($1183) + ($1<<6)|0) + 38|0);
    $1195 = HEAP16[$1194>>1]|0;
    $1196 = $1195 << 16 >> 16;
    $1197 = ((($1183) + ($1<<6)|0) + 22|0);
    $1198 = HEAP16[$1197>>1]|0;
    $1199 = $1198 << 16 >> 16;
    $1200 = (($1196) - ($1199))|0;
    $1201 = $1200 >> 31;
    $1202 = $1201 ^ $1200;
    $1203 = (($1202) - ($1201))|0;
    $1204 = $1203 | $1193;
    $1205 = ($1204>>>0)>(3);
    $1207 = $1205;
   } else {
    $1207 = 1;
   }
   $1206 = $1207&1;
   $1208 = $1206 | $1178;
   $1209 = ($1177<<24>>24)!=(0);
   $1210 = $1209&1;
   $1211 = $1208 << $1210;
   $1212 = $1211&255;
   $1213 = (($nBS) + 25|0);
   HEAP8[$1213>>0] = $1212;
   $1214 = HEAP8[$513>>0]|0;
   $1215 = $1214&255;
   $1216 = HEAP8[$796>>0]|0;
   $1217 = HEAP8[$674>>0]|0;
   $1218 = ($1216<<24>>24)==($1217<<24>>24);
   if ($1218) {
    $1219 = (($pCurDqLayer) + 3916|0);
    $1220 = HEAP32[$1219>>2]|0;
    $1221 = ((($1220) + ($1<<6)|0) + 40|0);
    $1222 = HEAP16[$1221>>1]|0;
    $1223 = $1222 << 16 >> 16;
    $1224 = ((($1220) + ($1<<6)|0) + 24|0);
    $1225 = HEAP16[$1224>>1]|0;
    $1226 = $1225 << 16 >> 16;
    $1227 = (($1223) - ($1226))|0;
    $1228 = $1227 >> 31;
    $1229 = $1228 ^ $1227;
    $1230 = (($1229) - ($1228))|0;
    $1231 = ((($1220) + ($1<<6)|0) + 42|0);
    $1232 = HEAP16[$1231>>1]|0;
    $1233 = $1232 << 16 >> 16;
    $1234 = ((($1220) + ($1<<6)|0) + 26|0);
    $1235 = HEAP16[$1234>>1]|0;
    $1236 = $1235 << 16 >> 16;
    $1237 = (($1233) - ($1236))|0;
    $1238 = $1237 >> 31;
    $1239 = $1238 ^ $1237;
    $1240 = (($1239) - ($1238))|0;
    $1241 = $1240 | $1230;
    $1242 = ($1241>>>0)>(3);
    $1244 = $1242;
   } else {
    $1244 = 1;
   }
   $1243 = $1244&1;
   $1245 = $1243 | $1215;
   $1246 = ($1214<<24>>24)!=(0);
   $1247 = $1246&1;
   $1248 = $1245 << $1247;
   $1249 = $1248&255;
   $1250 = (($nBS) + 26|0);
   HEAP8[$1250>>0] = $1249;
   $1251 = HEAP8[$1102>>0]|0;
   $1252 = $1251&255;
   $1253 = HEAP8[$833>>0]|0;
   $1254 = HEAP8[$711>>0]|0;
   $1255 = ($1253<<24>>24)==($1254<<24>>24);
   if ($1255) {
    $1256 = (($pCurDqLayer) + 3916|0);
    $1257 = HEAP32[$1256>>2]|0;
    $1258 = ((($1257) + ($1<<6)|0) + 44|0);
    $1259 = HEAP16[$1258>>1]|0;
    $1260 = $1259 << 16 >> 16;
    $1261 = ((($1257) + ($1<<6)|0) + 28|0);
    $1262 = HEAP16[$1261>>1]|0;
    $1263 = $1262 << 16 >> 16;
    $1264 = (($1260) - ($1263))|0;
    $1265 = $1264 >> 31;
    $1266 = $1265 ^ $1264;
    $1267 = (($1266) - ($1265))|0;
    $1268 = ((($1257) + ($1<<6)|0) + 46|0);
    $1269 = HEAP16[$1268>>1]|0;
    $1270 = $1269 << 16 >> 16;
    $1271 = ((($1257) + ($1<<6)|0) + 30|0);
    $1272 = HEAP16[$1271>>1]|0;
    $1273 = $1272 << 16 >> 16;
    $1274 = (($1270) - ($1273))|0;
    $1275 = $1274 >> 31;
    $1276 = $1275 ^ $1274;
    $1277 = (($1276) - ($1275))|0;
    $1278 = $1277 | $1267;
    $1279 = ($1278>>>0)>(3);
    $1281 = $1279;
   } else {
    $1281 = 1;
   }
   $1280 = $1281&1;
   $1282 = $1280 | $1252;
   $1283 = ($1251<<24>>24)!=(0);
   $1284 = $1283&1;
   $1285 = $1282 << $1284;
   $1286 = $1285&255;
   $1287 = (($nBS) + 27|0);
   HEAP8[$1287>>0] = $1286;
   $1288 = $502 | $500;
   HEAP32[$257>>2] = $1288;
   $trunc14$i = $1288&255;
   $1289 = $1288 & 255;
   $1290 = HEAP8[$882>>0]|0;
   $1291 = HEAP8[$760>>0]|0;
   $1292 = ($1290<<24>>24)==($1291<<24>>24);
   if ($1292) {
    $1293 = (($pCurDqLayer) + 3916|0);
    $1294 = HEAP32[$1293>>2]|0;
    $1295 = ((($1294) + ($1<<6)|0) + 48|0);
    $1296 = HEAP16[$1295>>1]|0;
    $1297 = $1296 << 16 >> 16;
    $1298 = ((($1294) + ($1<<6)|0) + 32|0);
    $1299 = HEAP16[$1298>>1]|0;
    $1300 = $1299 << 16 >> 16;
    $1301 = (($1297) - ($1300))|0;
    $1302 = $1301 >> 31;
    $1303 = $1302 ^ $1301;
    $1304 = (($1303) - ($1302))|0;
    $1305 = ((($1294) + ($1<<6)|0) + 50|0);
    $1306 = HEAP16[$1305>>1]|0;
    $1307 = $1306 << 16 >> 16;
    $1308 = ((($1294) + ($1<<6)|0) + 34|0);
    $1309 = HEAP16[$1308>>1]|0;
    $1310 = $1309 << 16 >> 16;
    $1311 = (($1307) - ($1310))|0;
    $1312 = $1311 >> 31;
    $1313 = $1312 ^ $1311;
    $1314 = (($1313) - ($1312))|0;
    $1315 = $1314 | $1304;
    $1316 = ($1315>>>0)>(3);
    $1318 = $1316;
   } else {
    $1318 = 1;
   }
   $1317 = $1318&1;
   $1319 = $1317 | $1289;
   $1320 = ($trunc14$i<<24>>24)!=(0);
   $1321 = $1320&1;
   $1322 = $1319 << $1321;
   $1323 = $1322&255;
   $1324 = (($nBS) + 28|0);
   HEAP8[$1324>>0] = $1323;
   $1325 = HEAP8[$509>>0]|0;
   $1326 = $1325&255;
   $1327 = HEAP8[$880>>0]|0;
   $1328 = HEAP8[$758>>0]|0;
   $1329 = ($1327<<24>>24)==($1328<<24>>24);
   if ($1329) {
    $1330 = (($pCurDqLayer) + 3916|0);
    $1331 = HEAP32[$1330>>2]|0;
    $1332 = ((($1331) + ($1<<6)|0) + 52|0);
    $1333 = HEAP16[$1332>>1]|0;
    $1334 = $1333 << 16 >> 16;
    $1335 = ((($1331) + ($1<<6)|0) + 36|0);
    $1336 = HEAP16[$1335>>1]|0;
    $1337 = $1336 << 16 >> 16;
    $1338 = (($1334) - ($1337))|0;
    $1339 = $1338 >> 31;
    $1340 = $1339 ^ $1338;
    $1341 = (($1340) - ($1339))|0;
    $1342 = ((($1331) + ($1<<6)|0) + 54|0);
    $1343 = HEAP16[$1342>>1]|0;
    $1344 = $1343 << 16 >> 16;
    $1345 = ((($1331) + ($1<<6)|0) + 38|0);
    $1346 = HEAP16[$1345>>1]|0;
    $1347 = $1346 << 16 >> 16;
    $1348 = (($1344) - ($1347))|0;
    $1349 = $1348 >> 31;
    $1350 = $1349 ^ $1348;
    $1351 = (($1350) - ($1349))|0;
    $1352 = $1351 | $1341;
    $1353 = ($1352>>>0)>(3);
    $1355 = $1353;
   } else {
    $1355 = 1;
   }
   $1354 = $1355&1;
   $1356 = $1354 | $1326;
   $1357 = ($1325<<24>>24)!=(0);
   $1358 = $1357&1;
   $1359 = $1356 << $1358;
   $1360 = $1359&255;
   $1361 = (($nBS) + 29|0);
   HEAP8[$1361>>0] = $1360;
   $1362 = HEAP8[$513>>0]|0;
   $1363 = $1362&255;
   $1364 = HEAP8[$918>>0]|0;
   $1365 = HEAP8[$796>>0]|0;
   $1366 = ($1364<<24>>24)==($1365<<24>>24);
   if ($1366) {
    $1367 = (($pCurDqLayer) + 3916|0);
    $1368 = HEAP32[$1367>>2]|0;
    $1369 = ((($1368) + ($1<<6)|0) + 56|0);
    $1370 = HEAP16[$1369>>1]|0;
    $1371 = $1370 << 16 >> 16;
    $1372 = ((($1368) + ($1<<6)|0) + 40|0);
    $1373 = HEAP16[$1372>>1]|0;
    $1374 = $1373 << 16 >> 16;
    $1375 = (($1371) - ($1374))|0;
    $1376 = $1375 >> 31;
    $1377 = $1376 ^ $1375;
    $1378 = (($1377) - ($1376))|0;
    $1379 = ((($1368) + ($1<<6)|0) + 58|0);
    $1380 = HEAP16[$1379>>1]|0;
    $1381 = $1380 << 16 >> 16;
    $1382 = ((($1368) + ($1<<6)|0) + 42|0);
    $1383 = HEAP16[$1382>>1]|0;
    $1384 = $1383 << 16 >> 16;
    $1385 = (($1381) - ($1384))|0;
    $1386 = $1385 >> 31;
    $1387 = $1386 ^ $1385;
    $1388 = (($1387) - ($1386))|0;
    $1389 = $1388 | $1378;
    $1390 = ($1389>>>0)>(3);
    $1392 = $1390;
   } else {
    $1392 = 1;
   }
   $1391 = $1392&1;
   $1393 = $1391 | $1363;
   $1394 = ($1362<<24>>24)!=(0);
   $1395 = $1394&1;
   $1396 = $1393 << $1395;
   $1397 = $1396&255;
   $1398 = (($nBS) + 30|0);
   HEAP8[$1398>>0] = $1397;
   $1399 = HEAP8[$1102>>0]|0;
   $1400 = $1399&255;
   $1401 = HEAP8[$955>>0]|0;
   $1402 = HEAP8[$833>>0]|0;
   $1403 = ($1401<<24>>24)==($1402<<24>>24);
   if ($1403) {
    $1404 = (($pCurDqLayer) + 3916|0);
    $1405 = HEAP32[$1404>>2]|0;
    $1406 = ((($1405) + ($1<<6)|0) + 60|0);
    $1407 = HEAP16[$1406>>1]|0;
    $1408 = $1407 << 16 >> 16;
    $1409 = ((($1405) + ($1<<6)|0) + 44|0);
    $1410 = HEAP16[$1409>>1]|0;
    $1411 = $1410 << 16 >> 16;
    $1412 = (($1408) - ($1411))|0;
    $1413 = $1412 >> 31;
    $1414 = $1413 ^ $1412;
    $1415 = (($1414) - ($1413))|0;
    $1416 = ((($1405) + ($1<<6)|0) + 62|0);
    $1417 = HEAP16[$1416>>1]|0;
    $1418 = $1417 << 16 >> 16;
    $1419 = ((($1405) + ($1<<6)|0) + 46|0);
    $1420 = HEAP16[$1419>>1]|0;
    $1421 = $1420 << 16 >> 16;
    $1422 = (($1418) - ($1421))|0;
    $1423 = $1422 >> 31;
    $1424 = $1423 ^ $1422;
    $1425 = (($1424) - ($1423))|0;
    $1426 = $1425 | $1415;
    $1427 = ($1426>>>0)>(3);
    $1429 = $1427;
   } else {
    $1429 = 1;
   }
   $1428 = $1429&1;
   $1430 = $1428 | $1400;
   $1431 = ($1399<<24>>24)!=(0);
   $1432 = $1431&1;
   $1433 = $1430 << $1432;
   $1434 = $1433&255;
   $1435 = (($nBS) + 31|0);
   HEAP8[$1435>>0] = $1434;
  }
 } while(0);
 __ZN7WelsDec17DeblockingInterMbEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEPA4_A4_hi($pCurDqLayer,$pFilter,$nBS,$iBoundryFlag);
 STACKTOP = sp;return;
}
function __ZN7WelsDec25WelsDeblockingFilterSliceEPNS_21TagWelsDecoderContextEPFvPNS_10TagDqLayerEPNS_19tagDeblockingFilterEiE($pCtx,$pDeblockMb) {
 $pCtx = $pCtx|0;
 $pDeblockMb = $pDeblockMb|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bTopFlag$0$in$i$us = 0, $iCountNumMb$0 = 0, $iCountNumMb$0$us = 0, $iNextMbXyIndex$1 = 0, $iNextMbXyIndex$1$us = 0, $or$cond = 0;
 var $or$cond$us = 0, $pFilter = 0, $phitmp = 0, $phitmp$us = 0, $storemerge = 0, $storemerge$us = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $pFilter = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4044|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 dest=$pFilter+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $8 = (($pCtx) + 5240|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($1) + 3876|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($1) + 72|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($pCtx) + 5464|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$pFilter>>2] = $17;
 $18 = (($15) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($pFilter) + 4|0);
 HEAP32[$20>>2] = $19;
 $21 = (($15) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($pFilter) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = (($15) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($pFilter) + 12|0);
 HEAP32[$26>>2] = $25;
 $27 = (($15) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($pFilter) + 16|0);
 HEAP32[$29>>2] = $28;
 $30 = (($1) + 3881|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = (($pFilter) + 20|0);
 HEAP32[$33>>2] = $32;
 $34 = (($1) + 76|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35&255;
 $37 = (($pFilter) + 24|0);
 HEAP8[$37>>0] = $36;
 $38 = (($1) + 80|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39&255;
 $41 = (($pFilter) + 25|0);
 HEAP8[$41>>0] = $40;
 $42 = (($pCtx) + 317064|0);
 $43 = (($pFilter) + 32|0);
 HEAP32[$43>>2] = $42;
 $44 = $13 & -3;
 $45 = ($44|0)==(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = (($1) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47|0) % ($3|0))&-1;
 $49 = (($1) + 4032|0);
 HEAP32[$49>>2] = $48;
 $50 = (($47|0) / ($3|0))&-1;
 $51 = (($1) + 4036|0);
 HEAP32[$51>>2] = $50;
 $52 = (($1) + 4040|0);
 $53 = ($13|0)==(2);
 $54 = (($1) + 3912|0);
 $55 = (($1) + 92|0);
 if ($53) {
  $56 = $48;$65 = $50;$iCountNumMb$0$us = 1;$storemerge$us = $47;
 } else {
  $93 = $48;$95 = $50;$iCountNumMb$0 = 1;$storemerge = $47;
  while(1) {
   HEAP32[$52>>2] = $storemerge;
   $94 = ($93|0)>(0);
   $96 = ($95|0)>(0);
   $97 = $94&1;
   $98 = $96&1;
   $99 = $98 << 1;
   $100 = $99 | $97;
   FUNCTION_TABLE_viii[$pDeblockMb & 7]($1,$pFilter,$100);
   $101 = ($iCountNumMb$0|0)<($11|0);
   if (!($101)) {
    label = 19;
    break;
   }
   $102 = HEAP32[$55>>2]|0;
   $103 = (($102) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($104>>>0)>(1);
   if ($105) {
    $106 = $storemerge&65535;
    $107 = (__ZN7WelsDec9FmoNextMbEPNS_6TagFmoEs($9,$106)|0);
    $108 = $107 << 16 >> 16;
    $iNextMbXyIndex$1 = $108;
   } else {
    $109 = (($storemerge) + 1)|0;
    $iNextMbXyIndex$1 = $109;
   }
   $110 = ($iNextMbXyIndex$1|0)!=(-1);
   $111 = ($iNextMbXyIndex$1|0)<($7|0);
   $or$cond = $110 & $111;
   if (!($or$cond)) {
    label = 19;
    break;
   }
   $112 = (($iNextMbXyIndex$1|0) % ($3|0))&-1;
   HEAP32[$49>>2] = $112;
   $113 = (($iNextMbXyIndex$1|0) / ($3|0))&-1;
   HEAP32[$51>>2] = $113;
   $phitmp = (($iCountNumMb$0) + 1)|0;
   $93 = $112;$95 = $113;$iCountNumMb$0 = $phitmp;$storemerge = $iNextMbXyIndex$1;
  }
  if ((label|0) == 19) {
   STACKTOP = sp;return;
  }
 }
 while(1) {
  HEAP32[$52>>2] = $storemerge$us;
  $57 = ($56|0)>(0);
  if ($57) {
   $58 = HEAP32[$54>>2]|0;
   $59 = (($58) + ($storemerge$us<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($storemerge$us) + -1)|0;
   $62 = (($58) + ($61<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($60|0)==($63|0);
   $76 = $64;
  } else {
   $76 = 0;
  }
  $66 = ($65|0)>(0);
  if ($66) {
   $67 = HEAP32[$54>>2]|0;
   $68 = (($67) + ($storemerge$us<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = HEAP32[$2>>2]|0;
   $71 = (($storemerge$us) - ($70))|0;
   $72 = (($67) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($69|0)==($73|0);
   $bTopFlag$0$in$i$us = $74;
  } else {
   $bTopFlag$0$in$i$us = 0;
  }
  $75 = $76&1;
  $77 = $bTopFlag$0$in$i$us&1;
  $78 = $77 << 1;
  $79 = $78 | $75;
  FUNCTION_TABLE_viii[$pDeblockMb & 7]($1,$pFilter,$79);
  $80 = ($iCountNumMb$0$us|0)<($11|0);
  if (!($80)) {
   label = 19;
   break;
  }
  $81 = HEAP32[$55>>2]|0;
  $82 = (($81) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83>>>0)>(1);
  if ($84) {
   $86 = $storemerge$us&65535;
   $87 = (__ZN7WelsDec9FmoNextMbEPNS_6TagFmoEs($9,$86)|0);
   $88 = $87 << 16 >> 16;
   $iNextMbXyIndex$1$us = $88;
  } else {
   $85 = (($storemerge$us) + 1)|0;
   $iNextMbXyIndex$1$us = $85;
  }
  $89 = ($iNextMbXyIndex$1$us|0)!=(-1);
  $90 = ($iNextMbXyIndex$1$us|0)<($7|0);
  $or$cond$us = $89 & $90;
  if (!($or$cond$us)) {
   label = 19;
   break;
  }
  $91 = (($iNextMbXyIndex$1$us|0) % ($3|0))&-1;
  HEAP32[$49>>2] = $91;
  $92 = (($iNextMbXyIndex$1$us|0) / ($3|0))&-1;
  HEAP32[$51>>2] = $92;
  $phitmp$us = (($iCountNumMb$0$us) + 1)|0;
  $56 = $91;$65 = $92;$iCountNumMb$0$us = $phitmp$us;$storemerge$us = $iNextMbXyIndex$1$us;
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
}
function __ZN7WelsDec14DeblockingInitEPNS_17TagDeblockingFuncEi($pFunc,$iCpu) {
 $pFunc = $pFunc|0;
 $iCpu = $iCpu|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pFunc>>2] = 3;
 $0 = (($pFunc) + 4|0);
 HEAP32[$0>>2] = 3;
 $1 = (($pFunc) + 8|0);
 HEAP32[$1>>2] = 4;
 $2 = (($pFunc) + 12|0);
 HEAP32[$2>>2] = 4;
 $3 = (($pFunc) + 16|0);
 HEAP32[$3>>2] = 19;
 $4 = (($pFunc) + 20|0);
 HEAP32[$4>>2] = 5;
 $5 = (($pFunc) + 24|0);
 HEAP32[$5>>2] = 20;
 $6 = (($pFunc) + 28|0);
 HEAP32[$6>>2] = 6;
 $7 = (($pFunc) + 32|0);
 HEAP32[$7>>2] = 7;
 $8 = (($pFunc) + 36|0);
 HEAP32[$8>>2] = 5;
 $9 = (($pFunc) + 40|0);
 HEAP32[$9>>2] = 8;
 $10 = (($pFunc) + 44|0);
 HEAP32[$10>>2] = 6;
 STACKTOP = sp;return;
}
function __ZN7WelsDec16IdctResAddPred_cEPhiPs($pPred,$kiStride,$pRs) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $pRs = $pRs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond6 = 0, $i$05 = 0, $i$14 = 0, $iSrc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $iSrc = sp;
 $0 = $kiStride << 1;
 $i$05 = 0;
 while(1) {
  $2 = $i$05 << 2;
  $3 = (($pRs) + ($2<<1)|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 << 16 >> 16;
  $6 = $2 | 2;
  $7 = (($pRs) + ($6<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = (($9) + ($5))|0;
  $11 = (($5) - ($9))|0;
  $12 = $2 | 1;
  $13 = (($pRs) + ($12<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = $15 >> 1;
  $17 = $2 | 3;
  $18 = (($pRs) + ($17<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = (($16) - ($20))|0;
  $22 = $20 >> 1;
  $23 = (($22) + ($15))|0;
  $24 = (($23) + ($10))|0;
  $25 = $24&65535;
  $26 = (($iSrc) + ($2<<1)|0);
  HEAP16[$26>>1] = $25;
  $27 = (($21) + ($11))|0;
  $28 = $27&65535;
  $29 = (($iSrc) + ($12<<1)|0);
  HEAP16[$29>>1] = $28;
  $30 = (($11) - ($21))|0;
  $31 = $30&65535;
  $32 = (($iSrc) + ($6<<1)|0);
  HEAP16[$32>>1] = $31;
  $33 = (($10) - ($23))|0;
  $34 = $33&65535;
  $35 = (($iSrc) + ($17<<1)|0);
  HEAP16[$35>>1] = $34;
  $36 = (($i$05) + 1)|0;
  $exitcond6 = ($36|0)==(4);
  if ($exitcond6) {
   break;
  } else {
   $i$05 = $36;
  }
 }
 $1 = (($0) + ($kiStride))|0;
 $i$14 = 0;
 while(1) {
  $37 = (($iSrc) + ($i$14<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = (($i$14) + 8)|0;
  $41 = (($iSrc) + ($40<<1)|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = (($i$14) + 4)|0;
  $45 = (($iSrc) + ($44<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = (($i$14) + 12)|0;
  $49 = (($iSrc) + ($48<<1)|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50 << 16 >> 16;
  $52 = $51 >> 1;
  $53 = (($52) + ($47))|0;
  $54 = (($39) + 32)|0;
  $55 = (($54) + ($43))|0;
  $56 = (($53) + ($55))|0;
  $57 = $56 >> 6;
  $58 = (($55) - ($53))|0;
  $59 = $58 >> 6;
  $60 = (($pPred) + ($i$14)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (($57) + ($62))|0;
  $64 = ($63>>>0)>(255);
  if ($64) {
   $65 = (0 - ($63))|0;
   $66 = $65 >> 31;
   $68 = $66;
  } else {
   $68 = $63;
  }
  $67 = $68&255;
  HEAP8[$60>>0] = $67;
  $69 = (($1) + ($i$14))|0;
  $70 = (($pPred) + ($69)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = (($72) + ($59))|0;
  $74 = ($73>>>0)>(255);
  if ($74) {
   $75 = (0 - ($73))|0;
   $76 = $75 >> 31;
   $78 = $76;
  } else {
   $78 = $73;
  }
  $77 = $78&255;
  HEAP8[$70>>0] = $77;
  $79 = (($39) - ($43))|0;
  $80 = $47 >> 1;
  $81 = (($80) - ($51))|0;
  $82 = (($79) + 32)|0;
  $83 = (($81) + ($82))|0;
  $84 = $83 >> 6;
  $85 = (($i$14) + ($kiStride))|0;
  $86 = (($pPred) + ($85)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = (($84) + ($88))|0;
  $90 = ($89>>>0)>(255);
  if ($90) {
   $91 = (0 - ($89))|0;
   $92 = $91 >> 31;
   $94 = $92;
  } else {
   $94 = $89;
  }
  $93 = $94&255;
  HEAP8[$86>>0] = $93;
  $95 = (($82) - ($81))|0;
  $96 = $95 >> 6;
  $97 = (($i$14) + ($0))|0;
  $98 = (($pPred) + ($97)|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($100) + ($96))|0;
  $102 = ($101>>>0)>(255);
  if ($102) {
   $103 = (0 - ($101))|0;
   $104 = $103 >> 31;
   $106 = $104;
  } else {
   $106 = $101;
  }
  $105 = $106&255;
  HEAP8[$98>>0] = $105;
  $107 = (($i$14) + 1)|0;
  $exitcond = ($107|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $i$14 = $107;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec19IdctResAddPred8x8_cEPhiPs($pPred,$kiStride,$pRs) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $pRs = $pRs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond52 = 0, $exitcond54 = 0, $exitcond58 = 0, $i$050 = 0, $i1$047 = 0, $i3$043 = 0, $iRes = 0, $iTmp = 0, $j4$041 = 0, $p = 0, $scevgep = 0, $sext = 0, $sext1 = 0, $sext10 = 0, $sext11 = 0, $sext12 = 0;
 var $sext13 = 0, $sext14 = 0, $sext15 = 0, $sext16 = 0, $sext17 = 0, $sext18 = 0, $sext19 = 0, $sext2 = 0, $sext20 = 0, $sext21 = 0, $sext22 = 0, $sext23 = 0, $sext24 = 0, $sext25 = 0, $sext26 = 0, $sext27 = 0, $sext28 = 0, $sext29 = 0, $sext3 = 0, $sext30 = 0;
 var $sext31 = 0, $sext4 = 0, $sext5 = 0, $sext6 = 0, $sext7 = 0, $sext8 = 0, $sext9 = 0, $sum = 0, $sum51 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $p = sp + 256|0;
 $iTmp = sp + 128|0;
 $iRes = sp;
 $0 = (($p) + 8|0);
 $1 = (($p) + 12|0);
 $2 = (($p) + 4|0);
 $3 = (($p) + 6|0);
 $4 = (($p) + 10|0);
 $5 = (($p) + 14|0);
 $6 = (($p) + 2|0);
 $i$050 = 0;
 while(1) {
  $7 = $i$050 << 3;
  $scevgep = (($pRs) + ($7<<1)|0);
  ;HEAP16[$p+0>>1]=HEAP16[$scevgep+0>>1]|0;HEAP16[$p+2>>1]=HEAP16[$scevgep+2>>1]|0;HEAP16[$p+4>>1]=HEAP16[$scevgep+4>>1]|0;HEAP16[$p+6>>1]=HEAP16[$scevgep+6>>1]|0;HEAP16[$p+8>>1]=HEAP16[$scevgep+8>>1]|0;HEAP16[$p+10>>1]=HEAP16[$scevgep+10>>1]|0;HEAP16[$p+12>>1]=HEAP16[$scevgep+12>>1]|0;HEAP16[$p+14>>1]=HEAP16[$scevgep+14>>1]|0;
  $8 = HEAP16[$p>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = HEAP16[$0>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = (($11) + ($9))|0;
  $13 = (($9) - ($11))|0;
  $14 = HEAP16[$1>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = HEAP16[$2>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $17 >>> 1;
  $19 = (($15) - ($18))|0;
  $20 = $15 >>> 1;
  $21 = (($17) + ($20))|0;
  $sext16 = $12 << 16;
  $22 = $sext16 >> 16;
  $sext17 = $21 << 16;
  $23 = $sext17 >> 16;
  $24 = (($23) + ($22))|0;
  $sext18 = $13 << 16;
  $25 = $sext18 >> 16;
  $sext19 = $19 << 16;
  $26 = $sext19 >> 16;
  $27 = (($25) - ($26))|0;
  $28 = (($26) + ($25))|0;
  $29 = (($22) - ($23))|0;
  $30 = HEAP16[$3>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = HEAP16[$4>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = (($33) - ($31))|0;
  $35 = HEAP16[$5>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = (($34) - ($36))|0;
  $38 = $36 >>> 1;
  $39 = (($37) - ($38))|0;
  $40 = HEAP16[$6>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = $31 >>> 1;
  $sum = (($42) + ($31))|0;
  $43 = (($36) - ($sum))|0;
  $44 = (($43) + ($41))|0;
  $45 = $33 >>> 1;
  $46 = (($36) + ($33))|0;
  $47 = (($46) + ($45))|0;
  $48 = (($47) - ($41))|0;
  $49 = (($33) + ($31))|0;
  $50 = (($49) + ($41))|0;
  $51 = $41 >>> 1;
  $52 = (($50) + ($51))|0;
  $sext20 = $39 << 16;
  $sext21 = $52 << 16;
  $53 = $sext21 >> 18;
  $sext22 = $44 << 16;
  $sext23 = $48 << 16;
  $54 = $sext23 >> 18;
  $55 = $sext22 >> 18;
  $56 = (($48) - ($55))|0;
  $57 = $sext20 >> 18;
  $58 = (($52) - ($57))|0;
  $sext24 = $24 << 16;
  $59 = $sext24 >> 16;
  $sext25 = $58 << 16;
  $60 = $sext25 >> 16;
  $61 = (($60) + ($59))|0;
  $62 = $61&65535;
  $63 = $i$050 << 3;
  $64 = (($iTmp) + ($63<<1)|0);
  HEAP16[$64>>1] = $62;
  $sext26 = $27 << 16;
  $65 = $sext26 >> 16;
  $sext27 = $56 << 16;
  $66 = $sext27 >> 16;
  $67 = (($65) - ($66))|0;
  $68 = $67&65535;
  $69 = $63 | 1;
  $70 = (($iTmp) + ($69<<1)|0);
  HEAP16[$70>>1] = $68;
  $sext28 = $28 << 16;
  $71 = $sext28 >> 16;
  $72 = $54 << 16;
  $73 = (($72) + ($sext22))|0;
  $sext29 = $73 >> 16;
  $74 = (($sext29) + ($71))|0;
  $75 = $74&65535;
  $76 = $63 | 2;
  $77 = (($iTmp) + ($76<<1)|0);
  HEAP16[$77>>1] = $75;
  $sext30 = $29 << 16;
  $78 = $sext30 >> 16;
  $79 = $53 << 16;
  $80 = (($79) + ($sext20))|0;
  $sext31 = $80 >> 16;
  $81 = (($sext31) + ($78))|0;
  $82 = $81&65535;
  $83 = $63 | 3;
  $84 = (($iTmp) + ($83<<1)|0);
  HEAP16[$84>>1] = $82;
  $85 = (($78) - ($sext31))|0;
  $86 = $85&65535;
  $87 = $63 | 4;
  $88 = (($iTmp) + ($87<<1)|0);
  HEAP16[$88>>1] = $86;
  $89 = (($71) - ($sext29))|0;
  $90 = $89&65535;
  $91 = $63 | 5;
  $92 = (($iTmp) + ($91<<1)|0);
  HEAP16[$92>>1] = $90;
  $93 = (($66) + ($65))|0;
  $94 = $93&65535;
  $95 = $63 | 6;
  $96 = (($iTmp) + ($95<<1)|0);
  HEAP16[$96>>1] = $94;
  $97 = (($59) - ($60))|0;
  $98 = $97&65535;
  $99 = $63 | 7;
  $100 = (($iTmp) + ($99<<1)|0);
  HEAP16[$100>>1] = $98;
  $101 = (($i$050) + 1)|0;
  $exitcond58 = ($101|0)==(8);
  if ($exitcond58) {
   $i1$047 = 0;
   break;
  } else {
   $i$050 = $101;
  }
 }
 while(1) {
  $102 = (($iTmp) + ($i1$047<<1)|0);
  $103 = HEAP16[$102>>1]|0;
  HEAP16[$p>>1] = $103;
  $104 = (($i1$047) + 8)|0;
  $105 = (($iTmp) + ($104<<1)|0);
  $106 = HEAP16[$105>>1]|0;
  HEAP16[$6>>1] = $106;
  $107 = (($i1$047) + 16)|0;
  $108 = (($iTmp) + ($107<<1)|0);
  $109 = HEAP16[$108>>1]|0;
  HEAP16[$2>>1] = $109;
  $110 = (($i1$047) + 24)|0;
  $111 = (($iTmp) + ($110<<1)|0);
  $112 = HEAP16[$111>>1]|0;
  HEAP16[$3>>1] = $112;
  $113 = (($i1$047) + 32)|0;
  $114 = (($iTmp) + ($113<<1)|0);
  $115 = HEAP16[$114>>1]|0;
  HEAP16[$0>>1] = $115;
  $116 = (($i1$047) + 40)|0;
  $117 = (($iTmp) + ($116<<1)|0);
  $118 = HEAP16[$117>>1]|0;
  HEAP16[$4>>1] = $118;
  $119 = (($i1$047) + 48)|0;
  $120 = (($iTmp) + ($119<<1)|0);
  $121 = HEAP16[$120>>1]|0;
  HEAP16[$1>>1] = $121;
  $122 = (($i1$047) + 56)|0;
  $123 = (($iTmp) + ($122<<1)|0);
  $124 = HEAP16[$123>>1]|0;
  HEAP16[$5>>1] = $124;
  $125 = $103 << 16 >> 16;
  $126 = $115 << 16 >> 16;
  $127 = (($126) + ($125))|0;
  $128 = (($125) - ($126))|0;
  $129 = $121 << 16 >> 16;
  $130 = $109 << 16 >> 16;
  $131 = $130 >>> 1;
  $132 = (($129) - ($131))|0;
  $133 = $129 >>> 1;
  $134 = (($130) + ($133))|0;
  $sext = $127 << 16;
  $135 = $sext >> 16;
  $sext1 = $134 << 16;
  $136 = $sext1 >> 16;
  $137 = (($136) + ($135))|0;
  $sext2 = $128 << 16;
  $138 = $sext2 >> 16;
  $sext3 = $132 << 16;
  $139 = $sext3 >> 16;
  $140 = (($138) - ($139))|0;
  $141 = (($139) + ($138))|0;
  $142 = (($135) - ($136))|0;
  $143 = $112 << 16 >> 16;
  $144 = $118 << 16 >> 16;
  $145 = (($144) - ($143))|0;
  $146 = $124 << 16 >> 16;
  $147 = (($145) - ($146))|0;
  $148 = $146 >>> 1;
  $149 = (($147) - ($148))|0;
  $150 = $106 << 16 >> 16;
  $151 = $143 >>> 1;
  $sum51 = (($151) + ($143))|0;
  $152 = (($146) - ($sum51))|0;
  $153 = (($152) + ($150))|0;
  $154 = $144 >>> 1;
  $155 = (($146) + ($144))|0;
  $156 = (($155) + ($154))|0;
  $157 = (($156) - ($150))|0;
  $158 = (($144) + ($143))|0;
  $159 = (($158) + ($150))|0;
  $160 = $150 >>> 1;
  $161 = (($159) + ($160))|0;
  $sext4 = $149 << 16;
  $sext5 = $161 << 16;
  $162 = $sext5 >> 18;
  $163 = $sext4 >> 18;
  $164 = (($161) - ($163))|0;
  $sext6 = $153 << 16;
  $sext7 = $157 << 16;
  $165 = $sext7 >> 18;
  $166 = $sext6 >> 18;
  $167 = (($157) - ($166))|0;
  $sext8 = $137 << 16;
  $168 = $sext8 >> 16;
  $sext9 = $164 << 16;
  $169 = $sext9 >> 16;
  $170 = (($169) + ($168))|0;
  $171 = $170&65535;
  $172 = (($iRes) + ($i1$047<<1)|0);
  HEAP16[$172>>1] = $171;
  $sext10 = $140 << 16;
  $173 = $sext10 >> 16;
  $sext11 = $167 << 16;
  $174 = $sext11 >> 16;
  $175 = (($173) - ($174))|0;
  $176 = $175&65535;
  $177 = (($iRes) + ($104<<1)|0);
  HEAP16[$177>>1] = $176;
  $sext12 = $141 << 16;
  $178 = $sext12 >> 16;
  $179 = $165 << 16;
  $180 = (($179) + ($sext6))|0;
  $sext13 = $180 >> 16;
  $181 = (($sext13) + ($178))|0;
  $182 = $181&65535;
  $183 = (($iRes) + ($107<<1)|0);
  HEAP16[$183>>1] = $182;
  $sext14 = $142 << 16;
  $184 = $sext14 >> 16;
  $185 = $162 << 16;
  $186 = (($185) + ($sext4))|0;
  $sext15 = $186 >> 16;
  $187 = (($sext15) + ($184))|0;
  $188 = $187&65535;
  $189 = (($iRes) + ($110<<1)|0);
  HEAP16[$189>>1] = $188;
  $190 = (($184) - ($sext15))|0;
  $191 = $190&65535;
  $192 = (($iRes) + ($113<<1)|0);
  HEAP16[$192>>1] = $191;
  $193 = (($178) - ($sext13))|0;
  $194 = $193&65535;
  $195 = (($iRes) + ($116<<1)|0);
  HEAP16[$195>>1] = $194;
  $196 = (($174) + ($173))|0;
  $197 = $196&65535;
  $198 = (($iRes) + ($119<<1)|0);
  HEAP16[$198>>1] = $197;
  $199 = (($168) - ($169))|0;
  $200 = $199&65535;
  $201 = (($iRes) + ($122<<1)|0);
  HEAP16[$201>>1] = $200;
  $202 = (($i1$047) + 1)|0;
  $exitcond54 = ($202|0)==(8);
  if ($exitcond54) {
   $i3$043 = 0;
   break;
  } else {
   $i1$047 = $202;
  }
 }
 while(1) {
  $203 = $i3$043 << 3;
  $204 = Math_imul($i3$043, $kiStride)|0;
  $j4$041 = 0;
  while(1) {
   $205 = (($j4$041) + ($203))|0;
   $206 = (($iRes) + ($205<<1)|0);
   $207 = HEAP16[$206>>1]|0;
   $208 = $207 << 16 >> 16;
   $209 = (($208) + 32)|0;
   $210 = $209 >> 6;
   $211 = (($j4$041) + ($204))|0;
   $212 = (($pPred) + ($211)|0);
   $213 = HEAP8[$212>>0]|0;
   $214 = $213&255;
   $215 = (($210) + ($214))|0;
   $216 = ($215>>>0)>(255);
   if ($216) {
    $217 = (0 - ($215))|0;
    $218 = $217 >> 31;
    $220 = $218;
   } else {
    $220 = $215;
   }
   $219 = $220&255;
   HEAP8[$212>>0] = $219;
   $221 = (($j4$041) + 1)|0;
   $exitcond = ($221|0)==(8);
   if ($exitcond) {
    break;
   } else {
    $j4$041 = $221;
   }
  }
  $222 = (($i3$043) + 1)|0;
  $exitcond52 = ($222|0)==(8);
  if ($exitcond52) {
   break;
  } else {
   $i3$043 = $222;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec25GetI4LumaIChromaAddrTableEPiii($pBlockOffset,$kiYStride,$kiUVStride) {
 $pBlockOffset = $pBlockOffset|0;
 $kiYStride = $kiYStride|0;
 $kiUVStride = $kiUVStride|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[8472>>0]|0;
 $1 = $0&255;
 $35 = $0;$i$02 = 0;
 while(1) {
  $34 = $35&255;
  $36 = (($34) - ($1))|0;
  $37 = $36 & 7;
  $38 = $36 >>> 3;
  $39 = Math_imul($38, $kiYStride)|0;
  $40 = (($39) + ($37))|0;
  $41 = $40 << 2;
  $42 = (($pBlockOffset) + ($i$02<<2)|0);
  HEAP32[$42>>2] = $41;
  $43 = (($i$02) + 1)|0;
  $exitcond = ($43|0)==(16);
  if ($exitcond) {
   break;
  }
  $$phi$trans$insert = (8472 + ($43)|0);
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  $35 = $$pre;$i$02 = $43;
 }
 $2 = (($pBlockOffset) + 80|0);
 HEAP32[$2>>2] = 0;
 $3 = (($pBlockOffset) + 64|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP8[((8472 + 1|0))>>0]|0;
 $5 = $4&255;
 $6 = (($5) - ($1))|0;
 $7 = $6 & 7;
 $8 = $6 >>> 3;
 $9 = Math_imul($8, $kiUVStride)|0;
 $10 = (($9) + ($7))|0;
 $11 = $10 << 2;
 $12 = (($pBlockOffset) + 84|0);
 HEAP32[$12>>2] = $11;
 $13 = (($pBlockOffset) + 68|0);
 HEAP32[$13>>2] = $11;
 $14 = HEAP8[((8472 + 2|0))>>0]|0;
 $15 = $14&255;
 $16 = (($15) - ($1))|0;
 $17 = $16 & 7;
 $18 = $16 >>> 3;
 $19 = Math_imul($18, $kiUVStride)|0;
 $20 = (($19) + ($17))|0;
 $21 = $20 << 2;
 $22 = (($pBlockOffset) + 88|0);
 HEAP32[$22>>2] = $21;
 $23 = (($pBlockOffset) + 72|0);
 HEAP32[$23>>2] = $21;
 $24 = HEAP8[((8472 + 3|0))>>0]|0;
 $25 = $24&255;
 $26 = (($25) - ($1))|0;
 $27 = $26 & 7;
 $28 = $26 >>> 3;
 $29 = Math_imul($28, $kiUVStride)|0;
 $30 = (($29) + ($27))|0;
 $31 = $30 << 2;
 $32 = (($pBlockOffset) + 92|0);
 HEAP32[$32>>2] = $31;
 $33 = (($pBlockOffset) + 76|0);
 HEAP32[$33>>2] = $31;
 STACKTOP = sp;return;
}
function __ZN7WelsDec27WelsTargetSliceConstructionEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iCountNumMb$02 = 0, $iNextMbXyIndex$0$ph = 0, $iNextMbXyIndex$01 = 0, $iNextMbXyIndex$1 = 0, $or$cond = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer3 = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + 4044|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 4;
 $9 = (($1) + 4048|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 4;
 $12 = (($pCtx) + 5240|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($1) + 3876|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($pCtx) + 241949|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $19 = (($pCtx) + 317140|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($8|0)==($20|0);
  if (!($21)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $22 = (($1) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23|0) % ($7|0))&-1;
 $25 = (($1) + 4032|0);
 HEAP32[$25>>2] = $24;
 $26 = (($23|0) / ($7|0))&-1;
 $27 = (($1) + 4036|0);
 HEAP32[$27>>2] = $26;
 $28 = (($1) + 4040|0);
 HEAP32[$28>>2] = $23;
 $29 = ($23|0)==(0);
 if ($29) {
  $30 = (($pCtx) + 241924|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($1) + 4100|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 84|0);
  HEAP32[$35>>2] = $32;
  $36 = (($pCtx) + 241928|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$33>>2]|0;
  $41 = (($40) + 88|0);
  HEAP32[$41>>2] = $39;
  $42 = (($1) + 16|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = HEAP32[$33>>2]|0;
  $45 = (($44) + 75|0);
  HEAP8[$45>>0] = $43;
  $iNextMbXyIndex$0$ph = 0;
 } else {
  $iNextMbXyIndex$0$ph = $23;
 }
 $46 = ($15|0)>(0);
 L8: do {
  if ($46) {
   $47 = (($pCtx) + 242344|0);
   $48 = (($1) + 3980|0);
   $49 = (($1) + 3984|0);
   $50 = (($pCtx) + 5464|0);
   $51 = (($pCtx) + 242320|0);
   $52 = (($1) + 92|0);
   $iCountNumMb$02 = 0;$iNextMbXyIndex$01 = $iNextMbXyIndex$0$ph;
   while(1) {
    $53 = HEAP8[$47>>0]|0;
    $54 = ($53<<24>>24)==(0);
    if ($54) {
     $55 = (__ZN7WelsDec24WelsTargetMbConstructionEPNS_21TagWelsDecoderContextE($pCtx)|0);
     $56 = ($55|0)==(0);
     if (!($56)) {
      label = 10;
      break;
     }
    }
    $62 = (($iCountNumMb$02) + 1)|0;
    $63 = HEAP32[$48>>2]|0;
    $64 = (($63) + ($iNextMbXyIndex$01)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = ($65<<24>>24)==(0);
    if ($66) {
     HEAP8[$64>>0] = 1;
     $67 = HEAP32[$49>>2]|0;
     $68 = (($67) + ($iNextMbXyIndex$01)|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = HEAP32[$50>>2]|0;
     $72 = (($71) + 112|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (($73) + ($70))|0;
     HEAP32[$72>>2] = $74;
     $75 = HEAP32[$51>>2]|0;
     $76 = (($75) + 1)|0;
     HEAP32[$51>>2] = $76;
     $77 = $76;
    } else {
     $$pre = HEAP32[$51>>2]|0;
     $77 = $$pre;
    }
    $78 = ($77|0)>($5|0);
    if ($78) {
     label = 15;
     break;
    }
    $79 = HEAP32[$52>>2]|0;
    $80 = (($79) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81>>>0)>(1);
    if ($82) {
     $83 = $iNextMbXyIndex$01&65535;
     $84 = (__ZN7WelsDec9FmoNextMbEPNS_6TagFmoEs($13,$83)|0);
     $85 = $84 << 16 >> 16;
     $iNextMbXyIndex$1 = $85;
    } else {
     $86 = (($iNextMbXyIndex$01) + 1)|0;
     $iNextMbXyIndex$1 = $86;
    }
    $87 = ($iNextMbXyIndex$1|0)!=(-1);
    $88 = ($iNextMbXyIndex$1|0)<($5|0);
    $or$cond = $87 & $88;
    if (!($or$cond)) {
     $$pre$phiZ2D = $50;
     break L8;
    }
    $89 = HEAP32[$6>>2]|0;
    $90 = (($iNextMbXyIndex$1|0) % ($89|0))&-1;
    HEAP32[$25>>2] = $90;
    $91 = (($iNextMbXyIndex$1|0) / ($89|0))&-1;
    HEAP32[$27>>2] = $91;
    HEAP32[$28>>2] = $iNextMbXyIndex$1;
    $92 = ($62|0)<($15|0);
    if ($92) {
     $iCountNumMb$02 = $62;$iNextMbXyIndex$01 = $iNextMbXyIndex$1;
    } else {
     $$pre$phiZ2D = $50;
     break L8;
    }
   }
   if ((label|0) == 10) {
    $57 = HEAP32[$25>>2]|0;
    $58 = HEAP32[$27>>2]|0;
    $59 = (($1) + 3881|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60&255;
    HEAP32[$vararg_buffer3>>2] = $57;
    $vararg_ptr1 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $58;
    $vararg_ptr2 = (($vararg_buffer3) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $61;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,3608,$vararg_buffer3);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 15) {
    HEAP32[$vararg_buffer3>>2] = $77;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $5;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,3696,$vararg_buffer3);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $$pre6 = (($pCtx) + 5464|0);
   $$pre$phiZ2D = $$pre6;
  }
 } while(0);
 $93 = HEAP32[$$pre$phiZ2D>>2]|0;
 $94 = (($93) + 56|0);
 HEAP32[$94>>2] = $8;
 $95 = HEAP32[$$pre$phiZ2D>>2]|0;
 $96 = (($95) + 60|0);
 HEAP32[$96>>2] = $11;
 $97 = (($1) + 3881|0);
 $98 = HEAP8[$97>>0]|0;
 if (!((($98<<24>>24) == 0) | (($98<<24>>24) == 2))) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $99 = (($pCtx) + 242344|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = ($100<<24>>24)==(0);
 if (!($101)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $102 = (($1) + 72|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)==(1);
 if ($104) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $105 = HEAP32[$0>>2]|0;
 $106 = (($105) + 3876|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)<(1);
 if ($108) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 __ZN7WelsDec25WelsDeblockingFilterSliceEPNS_21TagWelsDecoderContextEPFvPNS_10TagDqLayerEPNS_19tagDeblockingFilterEiE($pCtx,2);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec24WelsTargetMbConstructionEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4040|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 3908|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = ($7<<16>>16)==(512);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = $8 & 519;
 $11 = ($10|0)==(0);
 if (!($11)) {
  (__ZN7WelsDec33WelsMbIntraPredictionConstructionEPNS_21TagWelsDecoderContextEPNS_10TagDqLayerEb($pCtx,$1,1)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = $8 & 504;
 $13 = ($12|0)==(0);
 if ($13) {
  HEAP32[$vararg_buffer>>2] = $8;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,3808,$vararg_buffer);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($1) + 3956|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($3)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)==(0);
 $19 = (($1) + 4032|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($1) + 4036|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($pCtx) + 5464|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($1) + 4100|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = Math_imul($26, $22)|0;
 $34 = (($33) + ($20))|0;
 $35 = $34 << 4;
 $36 = (($32) + ($35)|0);
 $37 = (($30) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = Math_imul($28, $22)|0;
 $40 = (($39) + ($20))|0;
 $41 = $40 << 3;
 $42 = (($38) + ($41)|0);
 $43 = (($30) + 24|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + ($41)|0);
 __ZN7WelsDec12GetInterPredEPhS0_S0_PNS_21TagWelsDecoderContextE($36,$42,$45,$pCtx);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (__ZN7WelsDec29WelsMbInterSampleConstructionEPNS_21TagWelsDecoderContextEPNS_10TagDqLayerEPhS4_S4_ii($pCtx,$1,$36,$42,$45,$26,$28)|0);
 $46 = (($pCtx) + 317124|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$2>>2]|0;
 $49 = (($1) + 3964|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + (($48*24)|0)|0);
 FUNCTION_TABLE_vi[$47 & 15]($51);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec29WelsMbInterSampleConstructionEPNS_21TagWelsDecoderContextEPNS_10TagDqLayerEPhS4_S4_ii($pCtx,$pCurLayer,$pDstY,$pDstU,$pDstV,$iStrideL,$iStrideC) {
 $pCtx = $pCtx|0;
 $pCurLayer = $pCurLayer|0;
 $pDstY = $pDstY|0;
 $pDstU = $pDstU|0;
 $pDstV = $pDstV|0;
 $iStrideL = $iStrideL|0;
 $iStrideC = $iStrideC|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond7 = 0, $exitcond8 = 0, $i$06 = 0, $i$13 = 0, $i$21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCurLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCurLayer) + 3988|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3) + (($1*768)|0)|0) + 512|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = ((($3) + (($1*768)|0)|0) + 544|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ((($3) + (($1*768)|0)|0) + 576|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = ((($3) + (($1*768)|0)|0) + 608|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = (($6) - ($9))|0;
 $17 = (($9) + ($6))|0;
 $18 = (($12) - ($15))|0;
 $19 = (($15) + ($12))|0;
 $20 = (($19) + ($17))|0;
 $21 = $20 >>> 1;
 $22 = $21&65535;
 HEAP16[$4>>1] = $22;
 $23 = (($18) + ($16))|0;
 $24 = $23 >>> 1;
 $25 = $24&65535;
 HEAP16[$7>>1] = $25;
 $26 = (($17) - ($19))|0;
 $27 = $26 >>> 1;
 $28 = $27&65535;
 HEAP16[$10>>1] = $28;
 $29 = (($16) - ($18))|0;
 $30 = $29 >>> 1;
 $31 = $30&65535;
 HEAP16[$13>>1] = $31;
 $32 = HEAP32[$2>>2]|0;
 $33 = ((($32) + (($1*768)|0)|0) + 640|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 << 16 >> 16;
 $36 = ((($32) + (($1*768)|0)|0) + 672|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37 << 16 >> 16;
 $39 = ((($32) + (($1*768)|0)|0) + 704|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40 << 16 >> 16;
 $42 = ((($32) + (($1*768)|0)|0) + 736|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43 << 16 >> 16;
 $45 = (($35) - ($38))|0;
 $46 = (($38) + ($35))|0;
 $47 = (($41) - ($44))|0;
 $48 = (($44) + ($41))|0;
 $49 = (($48) + ($46))|0;
 $50 = $49 >>> 1;
 $51 = $50&65535;
 HEAP16[$33>>1] = $51;
 $52 = (($47) + ($45))|0;
 $53 = $52 >>> 1;
 $54 = $53&65535;
 HEAP16[$36>>1] = $54;
 $55 = (($46) - ($48))|0;
 $56 = $55 >>> 1;
 $57 = $56&65535;
 HEAP16[$39>>1] = $57;
 $58 = (($45) - ($47))|0;
 $59 = $58 >>> 1;
 $60 = $59&65535;
 HEAP16[$42>>1] = $60;
 $61 = (($pCurLayer) + 3944|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + ($1)|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = ($64<<24>>24)==(0);
 $66 = (($pCurLayer) + 3964|0);
 if ($65) {
  $68 = (($pCtx) + 316968|0);
  $i$13 = 0;
  while(1) {
   $102 = (16536 + ($i$13)|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = HEAP32[$66>>2]|0;
   $106 = ((($105) + (($1*24)|0)|0) + ($104)|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = ($107<<24>>24)==(0);
   if (!($108)) {
    $109 = $104 & 252;
    $110 = Math_imul($109, $iStrideL)|0;
    $111 = $103 & 3;
    $112 = $111&255;
    $113 = $112 << 2;
    $114 = (($110) + ($113))|0;
    $115 = HEAP32[$68>>2]|0;
    $116 = (($pDstY) + ($114)|0);
    $117 = HEAP32[$2>>2]|0;
    $118 = $i$13 << 4;
    $119 = ((($117) + (($1*768)|0)|0) + ($118<<1)|0);
    FUNCTION_TABLE_viii[$115 & 7]($116,$iStrideL,$119);
   }
   $120 = (($i$13) + 1)|0;
   $exitcond7 = ($120|0)==(16);
   if ($exitcond7) {
    $$pre$phiZ2D = $68;
    break;
   } else {
    $i$13 = $120;
   }
  }
 } else {
  $67 = (($pCtx) + 317052|0);
  $i$06 = 0;
  while(1) {
   $70 = $i$06 << 2;
   $71 = (16536 + ($70)|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = HEAP32[$66>>2]|0;
   $75 = ((($74) + (($1*24)|0)|0) + ($73)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $78 = (($73) + 1)|0;
    $79 = ((($74) + (($1*24)|0)|0) + ($78)|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ($80<<24>>24)==(0);
    if ($81) {
     $82 = (($73) + 4)|0;
     $83 = ((($74) + (($1*24)|0)|0) + ($82)|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(0);
     if ($85) {
      $86 = (($73) + 5)|0;
      $87 = ((($74) + (($1*24)|0)|0) + ($86)|0);
      $88 = HEAP8[$87>>0]|0;
      $89 = ($88<<24>>24)==(0);
      if (!($89)) {
       label = 10;
      }
     } else {
      label = 10;
     }
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    label = 0;
    $90 = $73 & 252;
    $91 = Math_imul($90, $iStrideL)|0;
    $92 = $72 & 3;
    $93 = $92&255;
    $94 = $93 << 2;
    $95 = (($91) + ($94))|0;
    $96 = HEAP32[$67>>2]|0;
    $97 = (($pDstY) + ($95)|0);
    $98 = HEAP32[$2>>2]|0;
    $99 = $i$06 << 6;
    $100 = ((($98) + (($1*768)|0)|0) + ($99<<1)|0);
    FUNCTION_TABLE_viii[$96 & 7]($97,$iStrideL,$100);
   }
   $101 = (($i$06) + 1)|0;
   $exitcond8 = ($101|0)==(4);
   if ($exitcond8) {
    break;
   } else {
    $i$06 = $101;
   }
  }
  $$pre12 = (($pCtx) + 316968|0);
  $$pre$phiZ2D = $$pre12;
 }
 $69 = (($pCurLayer) + 3964|0);
 $i$21 = 0;
 while(1) {
  $121 = (($i$21) + 16)|0;
  $122 = (16536 + ($121)|0);
  $123 = HEAP8[$122>>0]|0;
  $124 = $123&255;
  $125 = HEAP32[$69>>2]|0;
  $126 = ((($125) + (($1*24)|0)|0) + ($124)|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = ($127<<24>>24)==(0);
  $129 = HEAP32[$2>>2]|0;
  $130 = $121 << 4;
  if ($128) {
   $131 = ((($129) + (($1*768)|0)|0) + ($130<<1)|0);
   $132 = HEAP16[$131>>1]|0;
   $133 = ($132<<16>>16)==(0);
   if ($133) {
    $148 = $125;
   } else {
    label = 17;
   }
  } else {
   label = 17;
  }
  if ((label|0) == 17) {
   label = 0;
   $134 = (($124) + -16)|0;
   $135 = $134 & -4;
   $136 = Math_imul($135, $iStrideC)|0;
   $137 = (($134|0) % 4)&-1;
   $138 = $137 << 2;
   $139 = (($138) + ($136))|0;
   $140 = HEAP32[$$pre$phiZ2D>>2]|0;
   $141 = (($pDstU) + ($139)|0);
   $142 = ((($129) + (($1*768)|0)|0) + ($130<<1)|0);
   FUNCTION_TABLE_viii[$140 & 7]($141,$iStrideC,$142);
   $$pre = HEAP32[$69>>2]|0;
   $148 = $$pre;
  }
  $143 = (($i$21) + 20)|0;
  $144 = (16536 + ($143)|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = $145&255;
  $147 = ((($148) + (($1*24)|0)|0) + ($146)|0);
  $149 = HEAP8[$147>>0]|0;
  $150 = ($149<<24>>24)==(0);
  $151 = HEAP32[$2>>2]|0;
  $152 = $143 << 4;
  if ($150) {
   $153 = ((($151) + (($1*768)|0)|0) + ($152<<1)|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = ($154<<16>>16)==(0);
   if (!($155)) {
    label = 20;
   }
  } else {
   label = 20;
  }
  if ((label|0) == 20) {
   label = 0;
   $156 = (($146) + -18)|0;
   $157 = $156 & -4;
   $158 = Math_imul($157, $iStrideC)|0;
   $159 = (($156|0) % 4)&-1;
   $160 = $159 << 2;
   $161 = (($160) + ($158))|0;
   $162 = HEAP32[$$pre$phiZ2D>>2]|0;
   $163 = (($pDstV) + ($161)|0);
   $164 = ((($151) + (($1*768)|0)|0) + ($152<<1)|0);
   FUNCTION_TABLE_viii[$162 & 7]($163,$iStrideC,$164);
  }
  $165 = (($i$21) + 1)|0;
  $exitcond = ($165|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $i$21 = $165;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec16WelsChromaDcIdctEPs($pBlock) {
 $pBlock = $pBlock|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$pBlock>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = (($pBlock) + 32|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = (($pBlock) + 64|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = (($pBlock) + 96|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (($1) - ($4))|0;
 $12 = (($4) + ($1))|0;
 $13 = (($7) - ($10))|0;
 $14 = (($10) + ($7))|0;
 $15 = (($14) + ($12))|0;
 $16 = $15 >>> 1;
 $17 = $16&65535;
 HEAP16[$pBlock>>1] = $17;
 $18 = (($13) + ($11))|0;
 $19 = $18 >>> 1;
 $20 = $19&65535;
 HEAP16[$2>>1] = $20;
 $21 = (($12) - ($14))|0;
 $22 = $21 >>> 1;
 $23 = $22&65535;
 HEAP16[$5>>1] = $23;
 $24 = (($11) - ($13))|0;
 $25 = $24 >>> 1;
 $26 = $25&65535;
 HEAP16[$8>>1] = $26;
 STACKTOP = sp;return;
}
function __ZN7WelsDec21WelsLumaDcDequantIdctEPsiPNS_21TagWelsDecoderContextE($pBlock,$iQp,$pCtx) {
 $pBlock = $pBlock|0;
 $iQp = $iQp|0;
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0, $i$11 = 0, $iTemp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $iTemp = sp;
 $0 = (($pCtx) + 562526|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $9 = (17456 + ($iQp<<4)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $65 = $11;
 } else {
  $3 = (($pCtx) + 562472|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + ($iQp<<5)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6&65535;
  $8 = $7 >>> 4;
  $65 = $8;
 }
 $i$02 = 0;
 while(1) {
  $12 = (3792 + ($i$02<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 64)|0;
  $15 = (($13) + 16)|0;
  $16 = (($13) + 80)|0;
  $17 = $i$02 << 2;
  $18 = (($pBlock) + ($13<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = (($pBlock) + ($14<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = (($23) + ($20))|0;
  $25 = (($20) - ($23))|0;
  $26 = (($pBlock) + ($15<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = (($pBlock) + ($16<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = (($28) - ($31))|0;
  $33 = (($31) + ($28))|0;
  $34 = (($33) + ($24))|0;
  $35 = (($iTemp) + ($17<<2)|0);
  HEAP32[$35>>2] = $34;
  $36 = (($32) + ($25))|0;
  $37 = $17 | 1;
  $38 = (($iTemp) + ($37<<2)|0);
  HEAP32[$38>>2] = $36;
  $39 = (($25) - ($32))|0;
  $40 = $17 | 2;
  $41 = (($iTemp) + ($40<<2)|0);
  HEAP32[$41>>2] = $39;
  $42 = (($24) - ($33))|0;
  $43 = $17 | 3;
  $44 = (($iTemp) + ($43<<2)|0);
  HEAP32[$44>>2] = $42;
  $45 = (($i$02) + 1)|0;
  $exitcond3 = ($45|0)==(4);
  if ($exitcond3) {
   $i$11 = 0;
   break;
  } else {
   $i$02 = $45;
  }
 }
 while(1) {
  $46 = (3776 + ($i$11<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($i$11) + 4)|0;
  $49 = (($iTemp) + ($i$11<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($i$11) + 8)|0;
  $52 = (($iTemp) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($50))|0;
  $55 = (($50) - ($53))|0;
  $56 = (($iTemp) + ($48<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($i$11) + 12)|0;
  $59 = (($iTemp) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($57) - ($60))|0;
  $62 = (($60) + ($57))|0;
  $63 = (($62) + ($54))|0;
  $64 = Math_imul($63, $65)|0;
  $66 = (($64) + 2)|0;
  $67 = $66 >>> 2;
  $68 = $67&65535;
  $69 = (($pBlock) + ($47<<1)|0);
  HEAP16[$69>>1] = $68;
  $70 = (($61) + ($55))|0;
  $71 = Math_imul($70, $65)|0;
  $72 = (($71) + 2)|0;
  $73 = $72 >>> 2;
  $74 = $73&65535;
  $75 = (($47) + 32)|0;
  $76 = (($pBlock) + ($75<<1)|0);
  HEAP16[$76>>1] = $74;
  $77 = (($55) - ($61))|0;
  $78 = Math_imul($77, $65)|0;
  $79 = (($78) + 2)|0;
  $80 = $79 >>> 2;
  $81 = $80&65535;
  $82 = (($47) + 128)|0;
  $83 = (($pBlock) + ($82<<1)|0);
  HEAP16[$83>>1] = $81;
  $84 = (($54) - ($62))|0;
  $85 = Math_imul($84, $65)|0;
  $86 = (($85) + 2)|0;
  $87 = $86 >>> 2;
  $88 = $87&65535;
  $89 = (($47) + 160)|0;
  $90 = (($pBlock) + ($89<<1)|0);
  HEAP16[$90>>1] = $88;
  $91 = (($i$11) + 1)|0;
  $exitcond = ($91|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $91;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec33WelsMbIntraPredictionConstructionEPNS_21TagWelsDecoderContextEPNS_10TagDqLayerEb($pCtx,$pCurLayer,$bOutput) {
 $pCtx = $pCtx|0;
 $pCurLayer = $pCurLayer|0;
 $bOutput = $bOutput|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCurLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN7WelsDec23WelsFillRecNeededMbInfoEPNS_21TagWelsDecoderContextEbPNS_10TagDqLayerE($pCtx,$bOutput,$pCurLayer);
 $2 = (($pCurLayer) + 3908|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<1)|0);
 $5 = HEAP16[$4>>1]|0;
 if ((($5<<16>>16) == 4)) {
  $16 = (($pCurLayer) + 3988|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + (($1*768)|0)|0);
  (__ZN7WelsDec9RecI8x8MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($1,$pCtx,$18,$pCurLayer)|0);
  $$pre = HEAP32[$2>>2]|0;
  $$phi$trans$insert = (($$pre) + ($1<<1)|0);
  $$pre1 = HEAP16[$$phi$trans$insert>>1]|0;
  $19 = $$pre1;
 } else if ((($5<<16>>16) == 2)) {
  $6 = (($pCurLayer) + 3988|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + (($1*768)|0)|0);
  $9 = (($pCurLayer) + 3948|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($1)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  __ZN7WelsDec21WelsLumaDcDequantIdctEPsiPNS_21TagWelsDecoderContextE($8,$13,$pCtx);
  $14 = HEAP32[$6>>2]|0;
  $15 = (($14) + (($1*768)|0)|0);
  (__ZN7WelsDec11RecI16x16MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($1,$pCtx,$15,$pCurLayer)|0);
  STACKTOP = sp;return 0;
 } else {
  $19 = $5;
 }
 $20 = ($19<<16>>16)==(1);
 if (!($20)) {
  STACKTOP = sp;return 0;
 }
 $21 = (($pCurLayer) + 3988|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + (($1*768)|0)|0);
 (__ZN7WelsDec9RecI4x4MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($1,$pCtx,$23,$pCurLayer)|0);
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec29WelsMapNxNNeighToSampleNormalEPNS_16TagNeighborAvailEPi($pNeighAvail,$pSampleAvail) {
 $pNeighAvail = $pNeighAvail|0;
 $pSampleAvail = $pSampleAvail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pNeighAvail) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($pSampleAvail) + 96|0);
  HEAP32[$3>>2] = 1;
  $4 = (($pSampleAvail) + 72|0);
  HEAP32[$4>>2] = 1;
  $5 = (($pSampleAvail) + 48|0);
  HEAP32[$5>>2] = 1;
  $6 = (($pSampleAvail) + 24|0);
  HEAP32[$6>>2] = 1;
 }
 $7 = (($pNeighAvail) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  HEAP32[$pSampleAvail>>2] = 1;
 }
 $10 = HEAP32[$pNeighAvail>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = (($pSampleAvail) + 16|0);
  HEAP32[$12>>2] = 1;
  $13 = (($pSampleAvail) + 12|0);
  HEAP32[$13>>2] = 1;
  $14 = (($pSampleAvail) + 8|0);
  HEAP32[$14>>2] = 1;
  $15 = (($pSampleAvail) + 4|0);
  HEAP32[$15>>2] = 1;
 }
 $16 = (($pNeighAvail) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = (($pSampleAvail) + 20|0);
 HEAP32[$19>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN7WelsDec33WelsMapNxNNeighToSampleConstrain1EPNS_16TagNeighborAvailEPi($pNeighAvail,$pSampleAvail) {
 $pNeighAvail = $pNeighAvail|0;
 $pSampleAvail = $pSampleAvail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pNeighAvail) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($pNeighAvail) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 519;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = (($pSampleAvail) + 96|0);
   HEAP32[$7>>2] = 1;
   $8 = (($pSampleAvail) + 72|0);
   HEAP32[$8>>2] = 1;
   $9 = (($pSampleAvail) + 48|0);
   HEAP32[$9>>2] = 1;
   $10 = (($pSampleAvail) + 24|0);
   HEAP32[$10>>2] = 1;
  }
 }
 $11 = (($pNeighAvail) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = (($pNeighAvail) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 519;
  $17 = ($16|0)==(0);
  if (!($17)) {
   HEAP32[$pSampleAvail>>2] = 1;
  }
 }
 $18 = HEAP32[$pNeighAvail>>2]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $20 = (($pNeighAvail) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 519;
  $23 = ($22|0)==(0);
  if (!($23)) {
   $24 = (($pSampleAvail) + 16|0);
   HEAP32[$24>>2] = 1;
   $25 = (($pSampleAvail) + 12|0);
   HEAP32[$25>>2] = 1;
   $26 = (($pSampleAvail) + 8|0);
   HEAP32[$26>>2] = 1;
   $27 = (($pSampleAvail) + 4|0);
   HEAP32[$27>>2] = 1;
  }
 }
 $28 = (($pNeighAvail) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  STACKTOP = sp;return;
 }
 $31 = (($pNeighAvail) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 519;
 $34 = ($33|0)==(0);
 if ($34) {
  STACKTOP = sp;return;
 }
 $35 = (($pSampleAvail) + 20|0);
 HEAP32[$35>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN7WelsDec31WelsMap16x16NeighToSampleNormalEPNS_16TagNeighborAvailEPh($pNeighAvail,$pSampleAvail) {
 $pNeighAvail = $pNeighAvail|0;
 $pSampleAvail = $pSampleAvail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pNeighAvail) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  HEAP8[$pSampleAvail>>0] = 4;
 }
 $3 = (($pNeighAvail) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP8[$pSampleAvail>>0]|0;
  $7 = $6&255;
  $8 = $7 | 2;
  $9 = $8&255;
  HEAP8[$pSampleAvail>>0] = $9;
 }
 $10 = HEAP32[$pNeighAvail>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = HEAP8[$pSampleAvail>>0]|0;
 $13 = $12&255;
 $14 = $13 | 1;
 $15 = $14&255;
 HEAP8[$pSampleAvail>>0] = $15;
 STACKTOP = sp;return;
}
function __ZN7WelsDec35WelsMap16x16NeighToSampleConstrain1EPNS_16TagNeighborAvailEPh($pNeighAvail,$pSampleAvail) {
 $pNeighAvail = $pNeighAvail|0;
 $pSampleAvail = $pSampleAvail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pNeighAvail) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($pNeighAvail) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 519;
  $6 = ($5|0)==(0);
  if (!($6)) {
   HEAP8[$pSampleAvail>>0] = 4;
  }
 }
 $7 = (($pNeighAvail) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = (($pNeighAvail) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 519;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = HEAP8[$pSampleAvail>>0]|0;
   $15 = $14&255;
   $16 = $15 | 2;
   $17 = $16&255;
   HEAP8[$pSampleAvail>>0] = $17;
  }
 }
 $18 = HEAP32[$pNeighAvail>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = (($pNeighAvail) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 519;
 $23 = ($22|0)==(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = HEAP8[$pSampleAvail>>0]|0;
 $25 = $24&255;
 $26 = $25 | 1;
 $27 = $26&255;
 HEAP8[$pSampleAvail>>0] = $27;
 STACKTOP = sp;return;
}
function __ZN7WelsDec17ParseIntra4x4ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$pNeighAvail,$pIntraPredMode,$pBs,$pCurDqLayer) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $pIntraPredMode = $pIntraPredMode|0;
 $pBs = $pBs|0;
 $pCurDqLayer = $pCurDqLayer|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$04 = 0, $iBestMode = 0, $iCode = 0, $iPrevIntra4x4PredMode$0 = 0, $iPrevIntra4x4PredMode$0$pre = 0, $iSampleAvail = 0, $uiCode = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $iSampleAvail = sp + 8|0;
 $uiCode = sp + 4|0;
 $iCode = sp;
 $iBestMode = sp + 128|0;
 dest=$iSampleAvail+0|0; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($pCurDqLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 317152|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$3 & 63]($pNeighAvail,$iSampleAvail);
 $4 = (($iSampleAvail) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 2;
 $7 = HEAP32[$iSampleAvail>>2]|0;
 $8 = $7 << 1;
 $9 = $8 | $6;
 $10 = (($iSampleAvail) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9 | $11;
 $13 = $12&255;
 $14 = (($pCurDqLayer) + 3896|0);
 $15 = (($pBs) + 20|0);
 $16 = (($pBs) + 4|0);
 $17 = (($pBs) + 16|0);
 $18 = (($pBs) + 24|0);
 $19 = (($pCurDqLayer) + 3996|0);
 $i$04 = 0;
 L1: while(1) {
  $20 = HEAP32[$14>>2]|0;
  $21 = (($20) + 176|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $26 = HEAP32[$15>>2]|0;
   $27 = $26 >>> 31;
   $28 = HEAP32[$16>>2]|0;
   $29 = HEAP32[$pBs>>2]|0;
   $30 = $29;
   $31 = HEAP32[$17>>2]|0;
   $32 = $26 << 1;
   HEAP32[$15>>2] = $32;
   $33 = HEAP32[$18>>2]|0;
   $34 = (($33) + 1)|0;
   HEAP32[$18>>2] = $34;
   $35 = ($33|0)>(-1);
   if ($35) {
    $36 = $31;
    $37 = $28;
    $38 = (($36) - ($30))|0;
    $39 = (($37) + 1)|0;
    $40 = (($39) - ($30))|0;
    $41 = ($38|0)>($40|0);
    if ($41) {
     $$0 = 11;
     label = 31;
     break;
    }
    $42 = HEAP8[$31>>0]|0;
    $43 = $42&255;
    $44 = $43 << 8;
    $45 = (($31) + 1|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = $44 | $47;
    $49 = $48 << $34;
    $50 = $49 | $32;
    HEAP32[$15>>2] = $50;
    $51 = (($33) + -15)|0;
    HEAP32[$18>>2] = $51;
    $52 = (($31) + 2|0);
    HEAP32[$17>>2] = $52;
   }
   HEAP32[$uiCode>>2] = $27;
   $iPrevIntra4x4PredMode$0 = $27;
  } else {
   $24 = (__ZN7WelsDec27ParseIntraPredModeLumaCabacEPNS_21TagWelsDecoderContextERi($pCtx,$iCode)|0);
   $25 = ($24|0)==(0);
   if (!($25)) {
    $$0 = $24;
    label = 31;
    break;
   }
   $iPrevIntra4x4PredMode$0$pre = HEAP32[$iCode>>2]|0;
   $iPrevIntra4x4PredMode$0 = $iPrevIntra4x4PredMode$0$pre;
  }
  $53 = (__ZN7WelsDec16PredIntra4x4ModeEPai($pIntraPredMode,$i$04)|0);
  $54 = HEAP32[$14>>2]|0;
  $55 = (($54) + 176|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = ($56<<24>>24)==(0);
  do {
   if ($57) {
    $64 = ($iPrevIntra4x4PredMode$0|0)==(0);
    if (!($64)) {
     $65 = $53&255;
     HEAP8[$iBestMode>>0] = $65;
     break;
    }
    $66 = HEAP32[$15>>2]|0;
    $67 = $66 >>> 29;
    $68 = HEAP32[$16>>2]|0;
    $69 = HEAP32[$pBs>>2]|0;
    $70 = $69;
    $71 = HEAP32[$17>>2]|0;
    $72 = $66 << 3;
    HEAP32[$15>>2] = $72;
    $73 = HEAP32[$18>>2]|0;
    $74 = (($73) + 3)|0;
    HEAP32[$18>>2] = $74;
    $75 = ($74|0)>(0);
    if ($75) {
     $76 = $71;
     $77 = $68;
     $78 = (($76) - ($70))|0;
     $79 = (($77) + 1)|0;
     $80 = (($79) - ($70))|0;
     $81 = ($78|0)>($80|0);
     if ($81) {
      $$0 = 11;
      label = 31;
      break L1;
     }
     $82 = HEAP8[$71>>0]|0;
     $83 = $82&255;
     $84 = $83 << 8;
     $85 = (($71) + 1|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&255;
     $88 = $84 | $87;
     $89 = $88 << $74;
     $90 = $89 | $72;
     HEAP32[$15>>2] = $90;
     $91 = (($73) + -13)|0;
     HEAP32[$18>>2] = $91;
     $92 = (($71) + 2|0);
     HEAP32[$17>>2] = $92;
    }
    HEAP32[$uiCode>>2] = $67;
    $93 = ($67|0)>=($53|0);
    $94 = $93&1;
    $95 = (($94) + ($67))|0;
    $96 = $95&255;
    HEAP8[$iBestMode>>0] = $96;
   } else {
    $58 = ($iPrevIntra4x4PredMode$0|0)==(-1);
    if ($58) {
     $59 = $53&255;
     HEAP8[$iBestMode>>0] = $59;
     break;
    } else {
     $60 = ($iPrevIntra4x4PredMode$0|0)>=($53|0);
     $61 = $60&1;
     $62 = (($61) + ($iPrevIntra4x4PredMode$0))|0;
     $63 = $62&255;
     HEAP8[$iBestMode>>0] = $63;
     break;
    }
   }
  } while(0);
  $97 = (__ZN7WelsDec21CheckIntraNxNPredModeEPiPaib($iSampleAvail,$iBestMode,$i$04,0)|0);
  $98 = ($97|0)==(-1);
  if ($98) {
   $$0 = 1050;
   label = 31;
   break;
  }
  $99 = $97&255;
  $100 = (8424 + ($i$04)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = HEAP32[$19>>2]|0;
  $104 = ((($103) + ($1<<4)|0) + ($102)|0);
  HEAP8[$104>>0] = $99;
  $105 = HEAP8[$iBestMode>>0]|0;
  $106 = (8472 + ($i$04)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $109 = (($pIntraPredMode) + ($108)|0);
  HEAP8[$109>>0] = $105;
  $110 = (16968 + ($i$04)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = (($iSampleAvail) + ($112<<2)|0);
  HEAP32[$113>>2] = 1;
  $114 = (($i$04) + 1)|0;
  $115 = ($114|0)<(16);
  if ($115) {
   $i$04 = $114;
  } else {
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  $116 = (($pIntraPredMode) + 33|0);
  $117 = HEAPU8[$116>>0]|(HEAPU8[$116+1>>0]<<8)|(HEAPU8[$116+2>>0]<<16)|(HEAPU8[$116+3>>0]<<24);
  $118 = (($pCurDqLayer) + 3992|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + ($1<<3)|0);
  HEAP8[$120>>0]=$117&255;HEAP8[$120+1>>0]=($117>>8)&255;HEAP8[$120+2>>0]=($117>>16)&255;HEAP8[$120+3>>0]=$117>>24;
  $121 = (($pIntraPredMode) + 12|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = HEAP32[$118>>2]|0;
  $124 = ((($123) + ($1<<3)|0) + 4|0);
  HEAP8[$124>>0] = $122;
  $125 = (($pIntraPredMode) + 20|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = HEAP32[$118>>2]|0;
  $128 = ((($127) + ($1<<3)|0) + 5|0);
  HEAP8[$128>>0] = $126;
  $129 = (($pIntraPredMode) + 28|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = HEAP32[$118>>2]|0;
  $132 = ((($131) + ($1<<3)|0) + 6|0);
  HEAP8[$132>>0] = $130;
  $133 = (($pCtx) + 241924|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) + 318|0);
  $136 = HEAP8[$135>>0]|0;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $138 = HEAP32[$14>>2]|0;
  $139 = (($138) + 176|0);
  $140 = HEAP8[$139>>0]|0;
  $141 = ($140<<24>>24)==(0);
  do {
   if ($141) {
    $150 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($pBs,$uiCode)|0);
    $151 = ($150|0)==(0);
    if (!($151)) {
     $$0 = $150;
     STACKTOP = sp;return ($$0|0);
    }
    $152 = HEAP32[$uiCode>>2]|0;
    $153 = ($152>>>0)>(3);
    if ($153) {
     $$0 = 1052;
     STACKTOP = sp;return ($$0|0);
    } else {
     $154 = $152&255;
     $155 = (($pCurDqLayer) + 4004|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (($156) + ($1)|0);
     HEAP8[$157>>0] = $154;
     break;
    }
   } else {
    $142 = (__ZN7WelsDec29ParseIntraPredModeChromaCabacEPNS_21TagWelsDecoderContextEhRi($pCtx,$13,$iCode)|0);
    $143 = ($142|0)==(0);
    if (!($143)) {
     $$0 = $142;
     STACKTOP = sp;return ($$0|0);
    }
    $144 = HEAP32[$iCode>>2]|0;
    $145 = ($144|0)>(3);
    if ($145) {
     $$0 = 1052;
     STACKTOP = sp;return ($$0|0);
    } else {
     $146 = $144&255;
     $147 = (($pCurDqLayer) + 4004|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($148) + ($1)|0);
     HEAP8[$149>>0] = $146;
     break;
    }
   }
  } while(0);
  $158 = (($pCurDqLayer) + 4004|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($159) + ($1)|0);
  $161 = HEAP8[$160>>0]|0;
  $162 = ($161<<24>>24)==(-1);
  if ($162) {
   $$0 = 1052;
   STACKTOP = sp;return ($$0|0);
  }
  $163 = (__ZN7WelsDec24CheckIntraChromaPredModeEhPa($13,$160)|0);
  $164 = ($163|0)==(0);
  $$ = $164 ? 0 : 1052;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 31) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec17ParseIntra8x8ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$pNeighAvail,$pIntraPredMode,$pBs,$pCurDqLayer) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $pIntraPredMode = $pIntraPredMode|0;
 $pBs = $pBs|0;
 $pCurDqLayer = $pCurDqLayer|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$05 = 0, $iBestMode = 0, $iCode = 0, $iPrevIntra4x4PredMode$0 = 0, $iPrevIntra4x4PredMode$0$pre = 0;
 var $iSampleAvail = 0, $uiCode = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $iSampleAvail = sp + 8|0;
 $uiCode = sp + 4|0;
 $iCode = sp;
 $iBestMode = sp + 128|0;
 dest=$iSampleAvail+0|0; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($pCurDqLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 317152|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$3 & 63]($pNeighAvail,$iSampleAvail);
 $4 = (($iSampleAvail) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 3;
 $7 = (($iSampleAvail) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 2;
 $10 = $9 | $6;
 $11 = HEAP32[$iSampleAvail>>2]|0;
 $12 = $11 << 1;
 $13 = $10 | $12;
 $14 = (($iSampleAvail) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $13 | $15;
 $17 = $16&255;
 $18 = (($pCurDqLayer) + 4000|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($1)|0);
 HEAP8[$20>>0] = $17;
 $21 = (($pCurDqLayer) + 3896|0);
 $22 = (($pBs) + 20|0);
 $23 = (($pBs) + 4|0);
 $24 = (($pBs) + 16|0);
 $25 = (($pBs) + 24|0);
 $26 = (($pCurDqLayer) + 3996|0);
 $i$05 = 0;
 L1: while(1) {
  $27 = HEAP32[$21>>2]|0;
  $28 = (($27) + 176|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $33 = HEAP32[$22>>2]|0;
   $34 = $33 >>> 31;
   $35 = HEAP32[$23>>2]|0;
   $36 = HEAP32[$pBs>>2]|0;
   $37 = $36;
   $38 = HEAP32[$24>>2]|0;
   $39 = $33 << 1;
   HEAP32[$22>>2] = $39;
   $40 = HEAP32[$25>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$25>>2] = $41;
   $42 = ($40|0)>(-1);
   if ($42) {
    $43 = $38;
    $44 = $35;
    $45 = (($43) - ($37))|0;
    $46 = (($44) + 1)|0;
    $47 = (($46) - ($37))|0;
    $48 = ($45|0)>($47|0);
    if ($48) {
     $$0 = 11;
     label = 30;
     break;
    }
    $49 = HEAP8[$38>>0]|0;
    $50 = $49&255;
    $51 = $50 << 8;
    $52 = (($38) + 1|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = $51 | $54;
    $56 = $55 << $41;
    $57 = $56 | $39;
    HEAP32[$22>>2] = $57;
    $58 = (($40) + -15)|0;
    HEAP32[$25>>2] = $58;
    $59 = (($38) + 2|0);
    HEAP32[$24>>2] = $59;
   }
   HEAP32[$uiCode>>2] = $34;
   $iPrevIntra4x4PredMode$0 = $34;
  } else {
   $31 = (__ZN7WelsDec27ParseIntraPredModeLumaCabacEPNS_21TagWelsDecoderContextERi($pCtx,$iCode)|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    $$0 = $31;
    label = 30;
    break;
   }
   $iPrevIntra4x4PredMode$0$pre = HEAP32[$iCode>>2]|0;
   $iPrevIntra4x4PredMode$0 = $iPrevIntra4x4PredMode$0$pre;
  }
  $60 = $i$05 << 2;
  $61 = (__ZN7WelsDec16PredIntra4x4ModeEPai($pIntraPredMode,$60)|0);
  $62 = HEAP32[$21>>2]|0;
  $63 = (($62) + 176|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = ($64<<24>>24)==(0);
  do {
   if ($65) {
    $72 = ($iPrevIntra4x4PredMode$0|0)==(0);
    if (!($72)) {
     $73 = $61&255;
     HEAP8[$iBestMode>>0] = $73;
     break;
    }
    $74 = HEAP32[$22>>2]|0;
    $75 = $74 >>> 29;
    $76 = HEAP32[$23>>2]|0;
    $77 = HEAP32[$pBs>>2]|0;
    $78 = $77;
    $79 = HEAP32[$24>>2]|0;
    $80 = $74 << 3;
    HEAP32[$22>>2] = $80;
    $81 = HEAP32[$25>>2]|0;
    $82 = (($81) + 3)|0;
    HEAP32[$25>>2] = $82;
    $83 = ($82|0)>(0);
    if ($83) {
     $84 = $79;
     $85 = $76;
     $86 = (($84) - ($78))|0;
     $87 = (($85) + 1)|0;
     $88 = (($87) - ($78))|0;
     $89 = ($86|0)>($88|0);
     if ($89) {
      $$0 = 11;
      label = 30;
      break L1;
     }
     $90 = HEAP8[$79>>0]|0;
     $91 = $90&255;
     $92 = $91 << 8;
     $93 = (($79) + 1|0);
     $94 = HEAP8[$93>>0]|0;
     $95 = $94&255;
     $96 = $92 | $95;
     $97 = $96 << $82;
     $98 = $97 | $80;
     HEAP32[$22>>2] = $98;
     $99 = (($81) + -13)|0;
     HEAP32[$25>>2] = $99;
     $100 = (($79) + 2|0);
     HEAP32[$24>>2] = $100;
    }
    HEAP32[$uiCode>>2] = $75;
    $101 = ($75|0)>=($61|0);
    $102 = $101&1;
    $103 = (($102) + ($75))|0;
    $104 = $103&255;
    HEAP8[$iBestMode>>0] = $104;
   } else {
    $66 = ($iPrevIntra4x4PredMode$0|0)==(-1);
    if ($66) {
     $67 = $61&255;
     HEAP8[$iBestMode>>0] = $67;
     break;
    } else {
     $68 = ($iPrevIntra4x4PredMode$0|0)>=($61|0);
     $69 = $68&1;
     $70 = (($69) + ($iPrevIntra4x4PredMode$0))|0;
     $71 = $70&255;
     HEAP8[$iBestMode>>0] = $71;
     break;
    }
   }
  } while(0);
  $105 = (__ZN7WelsDec21CheckIntraNxNPredModeEPiPaib($iSampleAvail,$iBestMode,$60,1)|0);
  $106 = ($105|0)==(-1);
  if ($106) {
   $$0 = 1050;
   label = 30;
   break;
  }
  $107 = $105&255;
  $108 = (8424 + ($60)|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = HEAP32[$26>>2]|0;
  $112 = ((($111) + ($1<<4)|0) + ($110)|0);
  HEAP8[$112>>0] = $107;
  $113 = HEAP8[$iBestMode>>0]|0;
  $114 = (8472 + ($60)|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = (($pIntraPredMode) + ($116)|0);
  HEAP8[$117>>0] = $113;
  $118 = (16968 + ($60)|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = (($iSampleAvail) + ($120<<2)|0);
  HEAP32[$121>>2] = 1;
  $122 = $60 | 1;
  $123 = (8424 + ($122)|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $126 = HEAP32[$26>>2]|0;
  $127 = ((($126) + ($1<<4)|0) + ($125)|0);
  HEAP8[$127>>0] = $107;
  $128 = HEAP8[$iBestMode>>0]|0;
  $129 = (8472 + ($122)|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130&255;
  $132 = (($pIntraPredMode) + ($131)|0);
  HEAP8[$132>>0] = $128;
  $133 = (16968 + ($122)|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = $134&255;
  $136 = (($iSampleAvail) + ($135<<2)|0);
  HEAP32[$136>>2] = 1;
  $137 = $60 | 2;
  $138 = (8424 + ($137)|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $139&255;
  $141 = HEAP32[$26>>2]|0;
  $142 = ((($141) + ($1<<4)|0) + ($140)|0);
  HEAP8[$142>>0] = $107;
  $143 = HEAP8[$iBestMode>>0]|0;
  $144 = (8472 + ($137)|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = $145&255;
  $147 = (($pIntraPredMode) + ($146)|0);
  HEAP8[$147>>0] = $143;
  $148 = (16968 + ($137)|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149&255;
  $151 = (($iSampleAvail) + ($150<<2)|0);
  HEAP32[$151>>2] = 1;
  $152 = $60 | 3;
  $153 = (8424 + ($152)|0);
  $154 = HEAP8[$153>>0]|0;
  $155 = $154&255;
  $156 = HEAP32[$26>>2]|0;
  $157 = ((($156) + ($1<<4)|0) + ($155)|0);
  HEAP8[$157>>0] = $107;
  $158 = HEAP8[$iBestMode>>0]|0;
  $159 = (8472 + ($152)|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = (($pIntraPredMode) + ($161)|0);
  HEAP8[$162>>0] = $158;
  $163 = (16968 + ($152)|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = (($iSampleAvail) + ($165<<2)|0);
  HEAP32[$166>>2] = 1;
  $167 = (($i$05) + 1)|0;
  $168 = ($167|0)<(4);
  if ($168) {
   $i$05 = $167;
  } else {
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  $169 = (($pIntraPredMode) + 33|0);
  $170 = HEAPU8[$169>>0]|(HEAPU8[$169+1>>0]<<8)|(HEAPU8[$169+2>>0]<<16)|(HEAPU8[$169+3>>0]<<24);
  $171 = (($pCurDqLayer) + 3992|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + ($1<<3)|0);
  HEAP8[$173>>0]=$170&255;HEAP8[$173+1>>0]=($170>>8)&255;HEAP8[$173+2>>0]=($170>>16)&255;HEAP8[$173+3>>0]=$170>>24;
  $174 = (($pIntraPredMode) + 12|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = HEAP32[$171>>2]|0;
  $177 = ((($176) + ($1<<3)|0) + 4|0);
  HEAP8[$177>>0] = $175;
  $178 = (($pIntraPredMode) + 20|0);
  $179 = HEAP8[$178>>0]|0;
  $180 = HEAP32[$171>>2]|0;
  $181 = ((($180) + ($1<<3)|0) + 5|0);
  HEAP8[$181>>0] = $179;
  $182 = (($pIntraPredMode) + 28|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = HEAP32[$171>>2]|0;
  $185 = ((($184) + ($1<<3)|0) + 6|0);
  HEAP8[$185>>0] = $183;
  $186 = HEAP32[$21>>2]|0;
  $187 = (($186) + 176|0);
  $188 = HEAP8[$187>>0]|0;
  $189 = ($188<<24>>24)==(0);
  do {
   if ($189) {
    $198 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($pBs,$uiCode)|0);
    $199 = ($198|0)==(0);
    if (!($199)) {
     $$0 = $198;
     STACKTOP = sp;return ($$0|0);
    }
    $200 = HEAP32[$uiCode>>2]|0;
    $201 = ($200>>>0)>(3);
    if ($201) {
     $$0 = 1052;
     STACKTOP = sp;return ($$0|0);
    } else {
     $202 = $200&255;
     $203 = (($pCurDqLayer) + 4004|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = (($204) + ($1)|0);
     HEAP8[$205>>0] = $202;
     break;
    }
   } else {
    $190 = (__ZN7WelsDec29ParseIntraPredModeChromaCabacEPNS_21TagWelsDecoderContextEhRi($pCtx,$17,$iCode)|0);
    $191 = ($190|0)==(0);
    if (!($191)) {
     $$0 = $190;
     STACKTOP = sp;return ($$0|0);
    }
    $192 = HEAP32[$iCode>>2]|0;
    $193 = ($192|0)>(3);
    if ($193) {
     $$0 = 1052;
     STACKTOP = sp;return ($$0|0);
    } else {
     $194 = $192&255;
     $195 = (($pCurDqLayer) + 4004|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = (($196) + ($1)|0);
     HEAP8[$197>>0] = $194;
     break;
    }
   }
  } while(0);
  $206 = (($pCurDqLayer) + 4004|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = (($207) + ($1)|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = ($209<<24>>24)==(-1);
  if ($210) {
   $$0 = 1052;
   STACKTOP = sp;return ($$0|0);
  }
  $211 = (__ZN7WelsDec24CheckIntraChromaPredModeEhPa($17,$208)|0);
  $212 = ($211|0)==(0);
  $$ = $212 ? 0 : 1052;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 30) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec19ParseIntra16x16ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$pNeighAvail,$pBs,$pCurDqLayer) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $pBs = $pBs|0;
 $pCurDqLayer = $pCurDqLayer|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iCode = 0, $uiCode = 0, $uiNeighAvail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiNeighAvail = sp + 8|0;
 $uiCode = sp + 4|0;
 $iCode = sp;
 $0 = (($pCurDqLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP8[$uiNeighAvail>>0] = 0;
 $2 = (($pCtx) + 317156|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$3 & 63]($pNeighAvail,$uiNeighAvail);
 $4 = HEAP8[$uiNeighAvail>>0]|0;
 $5 = (($pCurDqLayer) + 3992|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6) + ($1<<3)|0) + 7|0);
 $8 = (__ZN7WelsDec23CheckIntra16x16PredModeEhPa($4,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = 1051;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($pCtx) + 241924|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 318|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($pCurDqLayer) + 3896|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 176|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)==(0);
 do {
  if ($19) {
   $29 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($pBs,$uiCode)|0);
   $30 = ($29|0)==(0);
   if (!($30)) {
    $$0 = $29;
    STACKTOP = sp;return ($$0|0);
   }
   $31 = HEAP32[$uiCode>>2]|0;
   $32 = ($31>>>0)>(3);
   if ($32) {
    $$0 = 1052;
    STACKTOP = sp;return ($$0|0);
   } else {
    $33 = $31&255;
    $34 = (($pCurDqLayer) + 4004|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + ($1)|0);
    HEAP8[$36>>0] = $33;
    break;
   }
  } else {
   $20 = HEAP8[$uiNeighAvail>>0]|0;
   $21 = (__ZN7WelsDec29ParseIntraPredModeChromaCabacEPNS_21TagWelsDecoderContextEhRi($pCtx,$20,$iCode)|0);
   $22 = ($21|0)==(0);
   if (!($22)) {
    $$0 = $21;
    STACKTOP = sp;return ($$0|0);
   }
   $23 = HEAP32[$iCode>>2]|0;
   $24 = ($23|0)>(3);
   if ($24) {
    $$0 = 1052;
    STACKTOP = sp;return ($$0|0);
   } else {
    $25 = $23&255;
    $26 = (($pCurDqLayer) + 4004|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + ($1)|0);
    HEAP8[$28>>0] = $25;
    break;
   }
  }
 } while(0);
 $37 = (($pCurDqLayer) + 4004|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($1)|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ($40<<24>>24)==(-1);
 if ($41) {
  $$0 = 1052;
  STACKTOP = sp;return ($$0|0);
 } else {
  $42 = HEAP8[$uiNeighAvail>>0]|0;
  $43 = (__ZN7WelsDec24CheckIntraChromaPredModeEhPa($42,$39)|0);
  $44 = ($43|0)==(0);
  $$ = $44 ? 0 : 1052;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function __ZN7WelsDec32WelsDecodeMbCabacISliceBaseMode0EPNS_21TagWelsDecoderContextERj($pCtx,$uiEosFlag) {
 $pCtx = $pCtx|0;
 $uiEosFlag = $uiEosFlag|0;
 var $$ = 0, $$$1 = 0, $$1 = 0, $$33 = 0, $$33$1 = 0, $$off10 = 0, $$phi$trans$insert = 0, $$phi$trans$insert73 = 0, $$pre = 0, $$pre71 = 0, $$pre72 = 0, $$pre74 = 0, $$pre76 = 0, $$pre78 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0;
 var $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum30 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$246 = 0, $i$342 = 0, $i$438 = 0, $iId4x4$051 = 0, $iId4x4$136 = 0, $iId8x8$058 = 0, $iId8x8$154 = 0, $iIdx$052 = 0, $iIdx14$037 = 0, $iQpDelta = 0, $pIntraPredMode_tEmP = 0;
 var $pNonZeroCount_tEmP = 0, $sNeighAvail = 0, $uiCbp = 0, $uiCbpChroma$1 = 0, $uiCbpChroma$1$off = 0, $uiCbpLuma$1 = 0, $uiCbpLuma$1$in = 0, $uiMbType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $sNeighAvail = sp + 12|0;
 $uiMbType = sp + 8|0;
 $uiCbp = sp + 4|0;
 $pNonZeroCount_tEmP = sp + 111|0;
 $pIntraPredMode_tEmP = sp + 48|0;
 $iQpDelta = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 3900|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 3866|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($1) + 3867|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($1) + 4040|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$uiMbType>>2] = 0;
 HEAP32[$uiCbp>>2] = 0;
 $12 = (($pNonZeroCount_tEmP) + 15|0);
 $13 = $12;
 $14 = $13 & 15;
 $15 = $14 ^ 15;
 $16 = (($pNonZeroCount_tEmP) + ($15)|0);
 $17 = (($1) + 3940|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($11)|0);
 HEAP8[$19>>0] = 1;
 $20 = (($1) + 3944|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($11)|0);
 HEAP8[$22>>0] = 0;
 $23 = (($1) + 3976|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($11)|0);
 HEAP8[$25>>0] = 0;
 $26 = (($1) + 3861|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = (($1) + 3972|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($11)|0);
 HEAP8[$30>>0] = $27;
 __ZN7WelsDec22GetNeighborAvailMbTypeEPNS_16TagNeighborAvailEPNS_10TagDqLayerE($sNeighAvail,$1);
 $31 = (__ZN7WelsDec22ParseMBTypeISliceCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$sNeighAvail,$uiMbType)|0);
 $32 = ($31|0)==(0);
 if (!($32)) {
  $$1 = $31;
  STACKTOP = sp;return ($$1|0);
 }
 $33 = HEAP32[$uiMbType>>2]|0;
 $34 = ($33>>>0)>(25);
 if ($34) {
  $$1 = 1035;
  STACKTOP = sp;return ($$1|0);
 }
 $35 = (($pCtx) + 241924|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 318|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 L7: do {
  if ($39) {
   switch ($33|0) {
   case 0:  {
    label = 10;
    break L7;
    break;
   }
   case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24:  {
    $$1 = 1035;
    break;
   }
   case 25:  {
    label = 6;
    break L7;
    break;
   }
   default: {
    label = 19;
    break L7;
   }
   }
   STACKTOP = sp;return ($$1|0);
  } else {
   if ((($33|0) == 0)) {
    label = 10;
   } else if ((($33|0) == 25)) {
    label = 6;
   } else {
    label = 19;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $40 = (__ZN7WelsDec18ParseIPCMInfoCabacEPNS_21TagWelsDecoderContextE($pCtx)|0);
  $41 = ($40|0)==(0);
  if (!($41)) {
   $$1 = $40;
   STACKTOP = sp;return ($$1|0);
  }
  $42 = (($1) + 3884|0);
  HEAP32[$42>>2] = 0;
  $43 = (__ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($pCtx,$uiEosFlag)|0);
  $44 = ($43|0)==(0);
  if (!($44)) {
   $$1 = $43;
   STACKTOP = sp;return ($$1|0);
  }
  $45 = HEAP32[$uiEosFlag>>2]|0;
  $46 = ($45|0)==(0);
  if ($46) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  $47 = (($pCtx) + 512232|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$0>>2]|0;
  $50 = (($49) + 3900|0);
  $51 = HEAP32[$50>>2]|0;
  __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($48,$51);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 else if ((label|0) == 10) {
  $52 = (($pIntraPredMode_tEmP) + 15|0);
  $53 = $52;
  $54 = $53 & 15;
  $55 = $54 ^ 15;
  $56 = (($pIntraPredMode_tEmP) + ($55)|0);
  $57 = (($1) + 3908|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($11<<1)|0);
  HEAP16[$59>>1] = 1;
  $60 = (($pCtx) + 241928|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 184|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = ($63<<24>>24)==(0);
  if (!($64)) {
   $65 = HEAP32[$0>>2]|0;
   $66 = (($65) + 3944|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + ($11)|0);
   $69 = (__ZN7WelsDec30ParseTransformSize8x8FlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERb($pCtx,$sNeighAvail,$68)|0);
   $70 = ($69|0)==(0);
   if (!($70)) {
    $$1 = $69;
    STACKTOP = sp;return ($$1|0);
   }
  }
  $71 = HEAP32[$0>>2]|0;
  $72 = (($71) + 3944|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($11)|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = ($75<<24>>24)==(0);
  if ($76) {
   $83 = (($pCtx) + 317148|0);
   $84 = HEAP32[$83>>2]|0;
   FUNCTION_TABLE_viiii[$84 & 31]($sNeighAvail,$16,$56,$1);
   $85 = (__ZN7WelsDec17ParseIntra4x4ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$sNeighAvail,$56,$3,$1)|0);
   $86 = ($85|0)==(0);
   if (!($86)) {
    $$1 = $85;
    STACKTOP = sp;return ($$1|0);
   }
  } else {
   $77 = HEAP32[$57>>2]|0;
   $78 = (($77) + ($11<<1)|0);
   HEAP16[$78>>1] = 4;
   HEAP32[$uiMbType>>2] = 4;
   $79 = (($pCtx) + 317148|0);
   $80 = HEAP32[$79>>2]|0;
   FUNCTION_TABLE_viiii[$80 & 31]($sNeighAvail,$16,$56,$1);
   $81 = (__ZN7WelsDec17ParseIntra8x8ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$sNeighAvail,$56,$3,$1)|0);
   $82 = ($81|0)==(0);
   if (!($82)) {
    $$1 = $81;
    STACKTOP = sp;return ($$1|0);
   }
  }
  $87 = (__ZN7WelsDec17ParseCbpInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$sNeighAvail,$uiCbp)|0);
  $88 = ($87|0)==(0);
  if (!($88)) {
   $$1 = $87;
   STACKTOP = sp;return ($$1|0);
  }
  $89 = HEAP32[$uiCbp>>2]|0;
  $90 = $89&255;
  $91 = (($1) + 3956|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + ($11)|0);
  HEAP8[$93>>0] = $90;
  $94 = HEAP32[$uiCbp>>2]|0;
  $95 = ($94|0)==(0);
  $$pre78 = (($1) + 3884|0);
  if ($95) {
   $97 = 0;
  } else {
   $96 = HEAP32[$$pre78>>2]|0;
   $97 = $96;
  }
  HEAP32[$$pre78>>2] = $97;
  $98 = HEAP32[$35>>2]|0;
  $99 = (($98) + 318|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = ($100<<24>>24)==(0);
  $$pre76 = HEAP32[$uiCbp>>2]|0;
  $102 = $$pre76 >>> 4;
  $103 = $101 ? 0 : $102;
  $uiCbpChroma$1 = $103;$uiCbpLuma$1$in = $$pre76;
 }
 else if ((label|0) == 19) {
  $104 = (($1) + 3908|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + ($11<<1)|0);
  HEAP16[$106>>1] = 2;
  $107 = HEAP32[$20>>2]|0;
  $108 = (($107) + ($11)|0);
  HEAP8[$108>>0] = 0;
  $109 = HEAP32[$17>>2]|0;
  $110 = (($109) + ($11)|0);
  HEAP8[$110>>0] = 1;
  $111 = HEAP32[$uiMbType>>2]|0;
  $112 = (($111) + 3)|0;
  $113 = $112 & 3;
  $114 = $113&255;
  $115 = (($1) + 3992|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ((($116) + ($11<<3)|0) + 7|0);
  HEAP8[$117>>0] = $114;
  $118 = HEAP32[$uiMbType>>2]|0;
  $119 = (($118) + -1)|0;
  $120 = $119 >>> 2;
  $121 = (3864 + ($120)|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = (($1) + 3956|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + ($11)|0);
  HEAP8[$125>>0] = $122;
  $126 = HEAP32[$35>>2]|0;
  $127 = (($126) + 318|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = ($128<<24>>24)==(0);
  $$pre = HEAP32[$123>>2]|0;
  $$phi$trans$insert = (($$pre) + ($11)|0);
  $$pre71 = HEAP8[$$phi$trans$insert>>0]|0;
  if ($129) {
   $473 = 0;
  } else {
   $130 = $$pre71 << 24 >> 24;
   $131 = $130 >> 4;
   $473 = $131;
  }
  $132 = $$pre71&255;
  __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($sNeighAvail,$16,$1);
  $133 = (__ZN7WelsDec19ParseIntra16x16ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$sNeighAvail,$3,$1)|0);
  $134 = ($133|0)==(0);
  if ($134) {
   $uiCbpChroma$1 = $473;$uiCbpLuma$1$in = $132;
  } else {
   $$1 = $133;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $uiCbpLuma$1 = $uiCbpLuma$1$in & 15;
 $135 = (($1) + 3964|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (($136) + (($11*24)|0)|0);
 HEAP8[$137>>0]=0&255;HEAP8[$137+1>>0]=(0>>8)&255;HEAP8[$137+2>>0]=(0>>16)&255;HEAP8[$137+3>>0]=0>>24;
 $138 = HEAP32[$135>>2]|0;
 $139 = ((($138) + (($11*24)|0)|0) + 4|0);
 HEAP8[$139>>0]=0&255;HEAP8[$139+1>>0]=(0>>8)&255;HEAP8[$139+2>>0]=(0>>16)&255;HEAP8[$139+3>>0]=0>>24;
 $140 = HEAP32[$135>>2]|0;
 $141 = ((($140) + (($11*24)|0)|0) + 8|0);
 HEAP8[$141>>0]=0&255;HEAP8[$141+1>>0]=(0>>8)&255;HEAP8[$141+2>>0]=(0>>16)&255;HEAP8[$141+3>>0]=0>>24;
 $142 = HEAP32[$135>>2]|0;
 $143 = ((($142) + (($11*24)|0)|0) + 12|0);
 HEAP8[$143>>0]=0&255;HEAP8[$143+1>>0]=(0>>8)&255;HEAP8[$143+2>>0]=(0>>16)&255;HEAP8[$143+3>>0]=0>>24;
 $144 = HEAP32[$135>>2]|0;
 $145 = ((($144) + (($11*24)|0)|0) + 16|0);
 HEAP8[$145>>0]=0&255;HEAP8[$145+1>>0]=(0>>8)&255;HEAP8[$145+2>>0]=(0>>16)&255;HEAP8[$145+3>>0]=0>>24;
 $146 = HEAP32[$135>>2]|0;
 $147 = ((($146) + (($11*24)|0)|0) + 20|0);
 HEAP8[$147>>0]=0&255;HEAP8[$147+1>>0]=(0>>8)&255;HEAP8[$147+2>>0]=(0>>16)&255;HEAP8[$147+3>>0]=0>>24;
 $148 = (($1) + 3960|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($149) + ($11<<1)|0);
 HEAP16[$150>>1] = 0;
 $151 = (($1) + 3956|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($152) + ($11)|0);
 $154 = HEAP8[$153>>0]|0;
 $155 = ($154<<24>>24)==(0);
 do {
  if ($155) {
   $156 = (($1) + 3908|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = (($157) + ($11<<1)|0);
   $159 = HEAP16[$158>>1]|0;
   if ((($159<<16>>16) == 4) | (($159<<16>>16) == 1)) {
    $160 = (($1) + 3868|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $161&255;
    $163 = (($1) + 3948|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (($164) + ($11)|0);
    HEAP8[$165>>0] = $162;
    $166 = (($1) + 92|0);
    $167 = (($1) + 3952|0);
    $168 = HEAP32[$163>>2]|0;
    $169 = (($168) + ($11)|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170 << 24 >> 24;
    $172 = HEAP32[$166>>2]|0;
    $173 = (($172) + 168|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($174) + ($171))|0;
    $176 = ($175|0)<(0);
    if ($176) {
     $179 = 0;
    } else {
     $177 = ($175|0)>(51);
     $$ = $177 ? 51 : $175;
     $179 = $$;
    }
    $178 = (16984 + ($179)|0);
    $180 = HEAP8[$178>>0]|0;
    $181 = HEAP32[$167>>2]|0;
    $182 = (($181) + ($11<<1)|0);
    HEAP8[$182>>0] = $180;
    $183 = HEAP32[$163>>2]|0;
    $184 = (($183) + ($11)|0);
    $185 = HEAP8[$184>>0]|0;
    $186 = $185 << 24 >> 24;
    $187 = HEAP32[$166>>2]|0;
    $188 = (($187) + 172|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($189) + ($186))|0;
    $191 = ($190|0)<(0);
    if ($191) {
     $193 = 0;
    } else {
     $472 = ($190|0)>(51);
     $$$1 = $472 ? 51 : $190;
     $193 = $$$1;
    }
    $192 = (16984 + ($193)|0);
    $194 = HEAP8[$192>>0]|0;
    $195 = HEAP32[$167>>2]|0;
    $196 = ((($195) + ($11<<1)|0) + 1|0);
    HEAP8[$196>>0] = $194;
    $$pre72 = HEAP32[$151>>2]|0;
    $$phi$trans$insert73 = (($$pre72) + ($11)|0);
    $$pre74 = HEAP8[$$phi$trans$insert73>>0]|0;
    $197 = ($$pre74<<24>>24)==(0);
    if (!($197)) {
     label = 29;
     break;
    }
   }
   $198 = (($1) + 3908|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = (($199) + ($11<<1)|0);
   $201 = HEAP16[$200>>1]|0;
   $202 = ($201<<16>>16)==(2);
   if ($202) {
    label = 29;
   } else {
    $440 = HEAP32[$135>>2]|0;
    $441 = (($440) + (($11*24)|0)|0);
    HEAP8[$441>>0]=0&255;HEAP8[$441+1>>0]=(0>>8)&255;HEAP8[$441+2>>0]=(0>>16)&255;HEAP8[$441+3>>0]=0>>24;
    $442 = HEAP32[$135>>2]|0;
    $443 = ((($442) + (($11*24)|0)|0) + 4|0);
    HEAP8[$443>>0]=0&255;HEAP8[$443+1>>0]=(0>>8)&255;HEAP8[$443+2>>0]=(0>>16)&255;HEAP8[$443+3>>0]=0>>24;
    $444 = HEAP32[$135>>2]|0;
    $445 = ((($444) + (($11*24)|0)|0) + 8|0);
    HEAP8[$445>>0]=0&255;HEAP8[$445+1>>0]=(0>>8)&255;HEAP8[$445+2>>0]=(0>>16)&255;HEAP8[$445+3>>0]=0>>24;
    $446 = HEAP32[$135>>2]|0;
    $447 = ((($446) + (($11*24)|0)|0) + 12|0);
    HEAP8[$447>>0]=0&255;HEAP8[$447+1>>0]=(0>>8)&255;HEAP8[$447+2>>0]=(0>>16)&255;HEAP8[$447+3>>0]=0>>24;
    $448 = HEAP32[$135>>2]|0;
    $449 = ((($448) + (($11*24)|0)|0) + 16|0);
    HEAP8[$449>>0]=0&255;HEAP8[$449+1>>0]=(0>>8)&255;HEAP8[$449+2>>0]=(0>>16)&255;HEAP8[$449+3>>0]=0>>24;
    $450 = HEAP32[$135>>2]|0;
    $451 = ((($450) + (($11*24)|0)|0) + 20|0);
    HEAP8[$451>>0]=0&255;HEAP8[$451+1>>0]=(0>>8)&255;HEAP8[$451+2>>0]=(0>>16)&255;HEAP8[$451+3>>0]=0>>24;
   }
  } else {
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $203 = (($1) + 3988|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = (($204) + (($11*768)|0)|0);
   _memset(($205|0),0,768)|0;
   $206 = (__ZN7WelsDec17ParseDeltaQpCabacEPNS_21TagWelsDecoderContextERi($pCtx,$iQpDelta)|0);
   $207 = ($206|0)==(0);
   if (!($207)) {
    $$1 = $206;
    STACKTOP = sp;return ($$1|0);
   }
   $208 = HEAP32[$iQpDelta>>2]|0;
   $$off10 = (($208) + 26)|0;
   $209 = ($$off10>>>0)>(51);
   if ($209) {
    $$1 = 1027;
    STACKTOP = sp;return ($$1|0);
   }
   $210 = (($1) + 3868|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = (($208) + 52)|0;
   $213 = (($212) + ($211))|0;
   $214 = (($213|0) % 52)&-1;
   $215 = $214&255;
   $216 = (($1) + 3948|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = (($217) + ($11)|0);
   HEAP8[$218>>0] = $215;
   $219 = HEAP32[$216>>2]|0;
   $220 = (($219) + ($11)|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221 << 24 >> 24;
   HEAP32[$210>>2] = $222;
   $223 = (($1) + 92|0);
   $224 = (($1) + 3952|0);
   $225 = HEAP32[$223>>2]|0;
   $226 = (($225) + 168|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (($227) + ($222))|0;
   $229 = ($228|0)<(0);
   if ($229) {
    $232 = 0;
   } else {
    $230 = ($228|0)>(51);
    $$33 = $230 ? 51 : $228;
    $232 = $$33;
   }
   $231 = (16984 + ($232)|0);
   $233 = HEAP8[$231>>0]|0;
   $234 = HEAP32[$224>>2]|0;
   $235 = (($234) + ($11<<1)|0);
   HEAP8[$235>>0] = $233;
   $236 = HEAP32[$210>>2]|0;
   $237 = HEAP32[$223>>2]|0;
   $238 = (($237) + 172|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = (($239) + ($236))|0;
   $241 = ($240|0)<(0);
   if ($241) {
    $463 = 0;
   } else {
    $461 = ($240|0)>(51);
    $$33$1 = $461 ? 51 : $240;
    $463 = $$33$1;
   }
   $462 = (16984 + ($463)|0);
   $464 = HEAP8[$462>>0]|0;
   $465 = HEAP32[$224>>2]|0;
   $466 = ((($465) + ($11<<1)|0) + 1|0);
   HEAP8[$466>>0] = $464;
   $467 = (($1) + 3908|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = (($468) + ($11<<1)|0);
   $470 = HEAP16[$469>>1]|0;
   $471 = ($470<<16>>16)==(2);
   do {
    if ($471) {
     $242 = HEAP32[$203>>2]|0;
     $243 = (($242) + (($11*768)|0)|0);
     $244 = HEAP32[$216>>2]|0;
     $245 = (($244) + ($11)|0);
     $246 = HEAP8[$245>>0]|0;
     $247 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($sNeighAvail,$16,$3,0,16,8496,1,$243,$246,$pCtx)|0);
     $248 = ($247|0)==(0);
     if (!($248)) {
      $$1 = $247;
      STACKTOP = sp;return ($$1|0);
     }
     $249 = ($uiCbpLuma$1|0)==(0);
     if ($249) {
      $281 = HEAP32[$135>>2]|0;
      $282 = (($281) + (($11*24)|0)|0);
      HEAP8[$282>>0]=0&255;HEAP8[$282+1>>0]=(0>>8)&255;HEAP8[$282+2>>0]=(0>>16)&255;HEAP8[$282+3>>0]=0>>24;
      $283 = HEAP32[$135>>2]|0;
      $284 = ((($283) + (($11*24)|0)|0) + 4|0);
      HEAP8[$284>>0]=0&255;HEAP8[$284+1>>0]=(0>>8)&255;HEAP8[$284+2>>0]=(0>>16)&255;HEAP8[$284+3>>0]=0>>24;
      $285 = HEAP32[$135>>2]|0;
      $286 = ((($285) + (($11*24)|0)|0) + 8|0);
      HEAP8[$286>>0]=0&255;HEAP8[$286+1>>0]=(0>>8)&255;HEAP8[$286+2>>0]=(0>>16)&255;HEAP8[$286+3>>0]=0>>24;
      $287 = HEAP32[$135>>2]|0;
      $288 = ((($287) + (($11*24)|0)|0) + 12|0);
      HEAP8[$288>>0]=0&255;HEAP8[$288+1>>0]=(0>>8)&255;HEAP8[$288+2>>0]=(0>>16)&255;HEAP8[$288+3>>0]=0>>24;
      break;
     }
     $250 = ($6>>>0)>(1);
     $251 = $250 ? $6 : 1;
     $252 = (($9) + 1)|0;
     $253 = (($252) - ($251))|0;
     $254 = (3872 + ($251)|0);
     $i$246 = 0;
     while(1) {
      $257 = HEAP32[$203>>2]|0;
      $258 = $i$246 << 4;
      $259 = ((($257) + (($11*768)|0)|0) + ($258<<1)|0);
      $260 = HEAP32[$216>>2]|0;
      $261 = (($260) + ($11)|0);
      $262 = HEAP8[$261>>0]|0;
      $263 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($sNeighAvail,$16,$3,$i$246,$253,$254,2,$259,$262,$pCtx)|0);
      $264 = ($263|0)==(0);
      $255 = (($i$246) + 1)|0;
      if (!($264)) {
       $$1 = $263;
       label = 70;
       break;
      }
      $256 = ($255|0)<(16);
      if ($256) {
       $i$246 = $255;
      } else {
       label = 39;
       break;
      }
     }
     if ((label|0) == 39) {
      $$sum27 = (($15) + 9)|0;
      $265 = (($pNonZeroCount_tEmP) + ($$sum27)|0);
      $266 = HEAPU8[$265>>0]|(HEAPU8[$265+1>>0]<<8)|(HEAPU8[$265+2>>0]<<16)|(HEAPU8[$265+3>>0]<<24);
      $267 = HEAP32[$135>>2]|0;
      $268 = (($267) + (($11*24)|0)|0);
      HEAP8[$268>>0]=$266&255;HEAP8[$268+1>>0]=($266>>8)&255;HEAP8[$268+2>>0]=($266>>16)&255;HEAP8[$268+3>>0]=$266>>24;
      $$sum28 = (($15) + 17)|0;
      $269 = (($pNonZeroCount_tEmP) + ($$sum28)|0);
      $270 = HEAPU8[$269>>0]|(HEAPU8[$269+1>>0]<<8)|(HEAPU8[$269+2>>0]<<16)|(HEAPU8[$269+3>>0]<<24);
      $271 = HEAP32[$135>>2]|0;
      $272 = ((($271) + (($11*24)|0)|0) + 4|0);
      HEAP8[$272>>0]=$270&255;HEAP8[$272+1>>0]=($270>>8)&255;HEAP8[$272+2>>0]=($270>>16)&255;HEAP8[$272+3>>0]=$270>>24;
      $$sum29 = (($15) + 25)|0;
      $273 = (($pNonZeroCount_tEmP) + ($$sum29)|0);
      $274 = HEAPU8[$273>>0]|(HEAPU8[$273+1>>0]<<8)|(HEAPU8[$273+2>>0]<<16)|(HEAPU8[$273+3>>0]<<24);
      $275 = HEAP32[$135>>2]|0;
      $276 = ((($275) + (($11*24)|0)|0) + 8|0);
      HEAP8[$276>>0]=$274&255;HEAP8[$276+1>>0]=($274>>8)&255;HEAP8[$276+2>>0]=($274>>16)&255;HEAP8[$276+3>>0]=$274>>24;
      $$sum30 = (($15) + 33)|0;
      $277 = (($pNonZeroCount_tEmP) + ($$sum30)|0);
      $278 = HEAPU8[$277>>0]|(HEAPU8[$277+1>>0]<<8)|(HEAPU8[$277+2>>0]<<16)|(HEAPU8[$277+3>>0]<<24);
      $279 = HEAP32[$135>>2]|0;
      $280 = ((($279) + (($11*24)|0)|0) + 12|0);
      HEAP8[$280>>0]=$278&255;HEAP8[$280+1>>0]=($278>>8)&255;HEAP8[$280+2>>0]=($278>>16)&255;HEAP8[$280+3>>0]=$278>>24;
      break;
     }
     else if ((label|0) == 70) {
      STACKTOP = sp;return ($$1|0);
     }
    } else {
     $289 = HEAP32[$20>>2]|0;
     $290 = (($289) + ($11)|0);
     $291 = HEAP8[$290>>0]|0;
     $292 = ($291<<24>>24)==(0);
     $293 = (1 - ($6))|0;
     $294 = (($293) + ($9))|0;
     if (!($292)) {
      $295 = (3888 + ($6)|0);
      $iId8x8$058 = 0;
      while(1) {
       $297 = 1 << $iId8x8$058;
       $298 = $297 & $uiCbpLuma$1;
       $299 = ($298|0)==(0);
       $300 = $iId8x8$058 << 2;
       if ($299) {
        $309 = (8440 + ($300)|0);
        $310 = HEAP8[$309>>0]|0;
        $311 = $310&255;
        $$sum25 = (($311) + ($15))|0;
        $312 = (($pNonZeroCount_tEmP) + ($$sum25)|0);
        HEAP8[$312>>0]=0&255;HEAP8[$312+1>>0]=0>>8;
        $313 = $300 | 2;
        $314 = (8440 + ($313)|0);
        $315 = HEAP8[$314>>0]|0;
        $316 = $315&255;
        $$sum26 = (($316) + ($15))|0;
        $317 = (($pNonZeroCount_tEmP) + ($$sum26)|0);
        HEAP8[$317>>0]=0&255;HEAP8[$317+1>>0]=0>>8;
       } else {
        $301 = HEAP32[$203>>2]|0;
        $302 = $iId8x8$058 << 6;
        $303 = ((($301) + (($11*768)|0)|0) + ($302<<1)|0);
        $304 = HEAP32[$216>>2]|0;
        $305 = (($304) + ($11)|0);
        $306 = HEAP8[$305>>0]|0;
        $307 = (__ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($sNeighAvail,$16,$3,$300,$294,$295,17,$303,$306,$pCtx)|0);
        $308 = ($307|0)==(0);
        if (!($308)) {
         $$1 = $307;
         label = 70;
         break;
        }
       }
       $318 = (($iId8x8$058) + 1)|0;
       $319 = ($318|0)<(4);
       if ($319) {
        $iId8x8$058 = $318;
       } else {
        label = 48;
        break;
       }
      }
      if ((label|0) == 48) {
       $$sum21 = (($15) + 9)|0;
       $320 = (($pNonZeroCount_tEmP) + ($$sum21)|0);
       $321 = HEAPU8[$320>>0]|(HEAPU8[$320+1>>0]<<8)|(HEAPU8[$320+2>>0]<<16)|(HEAPU8[$320+3>>0]<<24);
       $322 = HEAP32[$135>>2]|0;
       $323 = (($322) + (($11*24)|0)|0);
       HEAP8[$323>>0]=$321&255;HEAP8[$323+1>>0]=($321>>8)&255;HEAP8[$323+2>>0]=($321>>16)&255;HEAP8[$323+3>>0]=$321>>24;
       $$sum22 = (($15) + 17)|0;
       $324 = (($pNonZeroCount_tEmP) + ($$sum22)|0);
       $325 = HEAPU8[$324>>0]|(HEAPU8[$324+1>>0]<<8)|(HEAPU8[$324+2>>0]<<16)|(HEAPU8[$324+3>>0]<<24);
       $326 = HEAP32[$135>>2]|0;
       $327 = ((($326) + (($11*24)|0)|0) + 4|0);
       HEAP8[$327>>0]=$325&255;HEAP8[$327+1>>0]=($325>>8)&255;HEAP8[$327+2>>0]=($325>>16)&255;HEAP8[$327+3>>0]=$325>>24;
       $$sum23 = (($15) + 25)|0;
       $328 = (($pNonZeroCount_tEmP) + ($$sum23)|0);
       $329 = HEAPU8[$328>>0]|(HEAPU8[$328+1>>0]<<8)|(HEAPU8[$328+2>>0]<<16)|(HEAPU8[$328+3>>0]<<24);
       $330 = HEAP32[$135>>2]|0;
       $331 = ((($330) + (($11*24)|0)|0) + 8|0);
       HEAP8[$331>>0]=$329&255;HEAP8[$331+1>>0]=($329>>8)&255;HEAP8[$331+2>>0]=($329>>16)&255;HEAP8[$331+3>>0]=$329>>24;
       $$sum24 = (($15) + 33)|0;
       $332 = (($pNonZeroCount_tEmP) + ($$sum24)|0);
       $333 = HEAPU8[$332>>0]|(HEAPU8[$332+1>>0]<<8)|(HEAPU8[$332+2>>0]<<16)|(HEAPU8[$332+3>>0]<<24);
       $334 = HEAP32[$135>>2]|0;
       $335 = ((($334) + (($11*24)|0)|0) + 12|0);
       HEAP8[$335>>0]=$333&255;HEAP8[$335+1>>0]=($333>>8)&255;HEAP8[$335+2>>0]=($333>>16)&255;HEAP8[$335+3>>0]=$333>>24;
       break;
      }
      else if ((label|0) == 70) {
       STACKTOP = sp;return ($$1|0);
      }
     }
     $296 = (3872 + ($6)|0);
     $iId8x8$154 = 0;
     L86: while(1) {
      $336 = 1 << $iId8x8$154;
      $337 = $336 & $uiCbpLuma$1;
      $338 = ($337|0)==(0);
      $339 = $iId8x8$154 << 2;
      if ($338) {
       $351 = (8440 + ($339)|0);
       $352 = HEAP8[$351>>0]|0;
       $353 = $352&255;
       $$sum19 = (($353) + ($15))|0;
       $354 = (($pNonZeroCount_tEmP) + ($$sum19)|0);
       HEAP8[$354>>0]=0&255;HEAP8[$354+1>>0]=0>>8;
       $355 = $339 | 2;
       $356 = (8440 + ($355)|0);
       $357 = HEAP8[$356>>0]|0;
       $358 = $357&255;
       $$sum20 = (($358) + ($15))|0;
       $359 = (($pNonZeroCount_tEmP) + ($$sum20)|0);
       HEAP8[$359>>0]=0&255;HEAP8[$359+1>>0]=0>>8;
      } else {
       $iId4x4$051 = 0;$iIdx$052 = $339;
       while(1) {
        $340 = HEAP32[$203>>2]|0;
        $341 = $iIdx$052 << 4;
        $342 = ((($340) + (($11*768)|0)|0) + ($341<<1)|0);
        $343 = HEAP32[$216>>2]|0;
        $344 = (($343) + ($11)|0);
        $345 = HEAP8[$344>>0]|0;
        $346 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($sNeighAvail,$16,$3,$iIdx$052,$294,$296,11,$342,$345,$pCtx)|0);
        $347 = ($346|0)==(0);
        if (!($347)) {
         $$1 = $346;
         label = 70;
         break L86;
        }
        $348 = (($iIdx$052) + 1)|0;
        $349 = (($iId4x4$051) + 1)|0;
        $350 = ($349|0)<(4);
        if ($350) {
         $iId4x4$051 = $349;$iIdx$052 = $348;
        } else {
         break;
        }
       }
      }
      $360 = (($iId8x8$154) + 1)|0;
      $361 = ($360|0)<(4);
      if ($361) {
       $iId8x8$154 = $360;
      } else {
       label = 54;
       break;
      }
     }
     if ((label|0) == 54) {
      $$sum = (($15) + 9)|0;
      $362 = (($pNonZeroCount_tEmP) + ($$sum)|0);
      $363 = HEAPU8[$362>>0]|(HEAPU8[$362+1>>0]<<8)|(HEAPU8[$362+2>>0]<<16)|(HEAPU8[$362+3>>0]<<24);
      $364 = HEAP32[$135>>2]|0;
      $365 = (($364) + (($11*24)|0)|0);
      HEAP8[$365>>0]=$363&255;HEAP8[$365+1>>0]=($363>>8)&255;HEAP8[$365+2>>0]=($363>>16)&255;HEAP8[$365+3>>0]=$363>>24;
      $$sum11 = (($15) + 17)|0;
      $366 = (($pNonZeroCount_tEmP) + ($$sum11)|0);
      $367 = HEAPU8[$366>>0]|(HEAPU8[$366+1>>0]<<8)|(HEAPU8[$366+2>>0]<<16)|(HEAPU8[$366+3>>0]<<24);
      $368 = HEAP32[$135>>2]|0;
      $369 = ((($368) + (($11*24)|0)|0) + 4|0);
      HEAP8[$369>>0]=$367&255;HEAP8[$369+1>>0]=($367>>8)&255;HEAP8[$369+2>>0]=($367>>16)&255;HEAP8[$369+3>>0]=$367>>24;
      $$sum12 = (($15) + 25)|0;
      $370 = (($pNonZeroCount_tEmP) + ($$sum12)|0);
      $371 = HEAPU8[$370>>0]|(HEAPU8[$370+1>>0]<<8)|(HEAPU8[$370+2>>0]<<16)|(HEAPU8[$370+3>>0]<<24);
      $372 = HEAP32[$135>>2]|0;
      $373 = ((($372) + (($11*24)|0)|0) + 8|0);
      HEAP8[$373>>0]=$371&255;HEAP8[$373+1>>0]=($371>>8)&255;HEAP8[$373+2>>0]=($371>>16)&255;HEAP8[$373+3>>0]=$371>>24;
      $$sum13 = (($15) + 33)|0;
      $374 = (($pNonZeroCount_tEmP) + ($$sum13)|0);
      $375 = HEAPU8[$374>>0]|(HEAPU8[$374+1>>0]<<8)|(HEAPU8[$374+2>>0]<<16)|(HEAPU8[$374+3>>0]<<24);
      $376 = HEAP32[$135>>2]|0;
      $377 = ((($376) + (($11*24)|0)|0) + 12|0);
      HEAP8[$377>>0]=$375&255;HEAP8[$377+1>>0]=($375>>8)&255;HEAP8[$377+2>>0]=($375>>16)&255;HEAP8[$377+3>>0]=$375>>24;
      break;
     }
     else if ((label|0) == 70) {
      STACKTOP = sp;return ($$1|0);
     }
    }
   } while(0);
   $378 = ($uiCbpChroma$1|0)==(2);
   $uiCbpChroma$1$off = (($uiCbpChroma$1) + -1)|0;
   $379 = ($uiCbpChroma$1$off>>>0)<(2);
   L111: do {
    if ($379) {
     $i$342 = 0;
     while(1) {
      $382 = ($i$342|0)!=(0);
      $383 = $382 ? 8 : 7;
      $384 = $i$342 << 2;
      $385 = (($384) + 16)|0;
      $386 = HEAP32[$203>>2]|0;
      $387 = $i$342 << 6;
      $$sum18 = (($387) + 256)|0;
      $388 = ((($386) + (($11*768)|0)|0) + ($$sum18<<1)|0);
      $389 = HEAP32[$224>>2]|0;
      $390 = ((($389) + ($11<<1)|0) + ($i$342)|0);
      $391 = HEAP8[$390>>0]|0;
      $392 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($sNeighAvail,$16,$3,$385,4,8512,$383,$388,$391,$pCtx)|0);
      $393 = ($392|0)==(0);
      $380 = (($i$342) + 1)|0;
      if (!($393)) {
       $$1 = $392;
       break;
      }
      $381 = ($380|0)<(2);
      if ($381) {
       $i$342 = $380;
      } else {
       break L111;
      }
     }
     STACKTOP = sp;return ($$1|0);
    }
   } while(0);
   if (!($378)) {
    $432 = HEAP32[$135>>2]|0;
    $433 = ((($432) + (($11*24)|0)|0) + 16|0);
    HEAP8[$433>>0]=0&255;HEAP8[$433+1>>0]=0>>8;
    $434 = HEAP32[$135>>2]|0;
    $435 = ((($434) + (($11*24)|0)|0) + 20|0);
    HEAP8[$435>>0]=0&255;HEAP8[$435+1>>0]=0>>8;
    $436 = HEAP32[$135>>2]|0;
    $437 = ((($436) + (($11*24)|0)|0) + 18|0);
    HEAP8[$437>>0]=0&255;HEAP8[$437+1>>0]=0>>8;
    $438 = HEAP32[$135>>2]|0;
    $439 = ((($438) + (($11*24)|0)|0) + 22|0);
    HEAP8[$439>>0]=0&255;HEAP8[$439+1>>0]=0>>8;
    break;
   }
   $394 = ($6>>>0)>(1);
   $395 = $394 ? $6 : 1;
   $396 = (($9) + 1)|0;
   $397 = (($396) - ($395))|0;
   $398 = (3872 + ($395)|0);
   $i$438 = 0;
   L120: while(1) {
    $399 = ($i$438|0)!=(0);
    $400 = $399 ? 10 : 9;
    $401 = $i$438 << 2;
    $402 = (($401) + 16)|0;
    $iId4x4$136 = 0;$iIdx14$037 = $402;
    while(1) {
     $403 = HEAP32[$203>>2]|0;
     $404 = $iIdx14$037 << 4;
     $405 = ((($403) + (($11*768)|0)|0) + ($404<<1)|0);
     $406 = HEAP32[$224>>2]|0;
     $407 = ((($406) + ($11<<1)|0) + ($i$438)|0);
     $408 = HEAP8[$407>>0]|0;
     $409 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($sNeighAvail,$16,$3,$iIdx14$037,$397,$398,$400,$405,$408,$pCtx)|0);
     $410 = ($409|0)==(0);
     if (!($410)) {
      $$1 = $409;
      label = 70;
      break L120;
     }
     $411 = (($iIdx14$037) + 1)|0;
     $412 = (($iId4x4$136) + 1)|0;
     $413 = ($412|0)<(4);
     if ($413) {
      $iId4x4$136 = $412;$iIdx14$037 = $411;
     } else {
      break;
     }
    }
    $414 = (($i$438) + 1)|0;
    $415 = ($414|0)<(2);
    if ($415) {
     $i$438 = $414;
    } else {
     label = 64;
     break;
    }
   }
   if ((label|0) == 64) {
    $$sum14 = (($15) + 14)|0;
    $416 = (($pNonZeroCount_tEmP) + ($$sum14)|0);
    $417 = HEAPU8[$416>>0]|(HEAPU8[$416+1>>0]<<8);
    $418 = HEAP32[$135>>2]|0;
    $419 = ((($418) + (($11*24)|0)|0) + 16|0);
    HEAP8[$419>>0]=$417&255;HEAP8[$419+1>>0]=$417>>8;
    $$sum15 = (($15) + 22)|0;
    $420 = (($pNonZeroCount_tEmP) + ($$sum15)|0);
    $421 = HEAPU8[$420>>0]|(HEAPU8[$420+1>>0]<<8);
    $422 = HEAP32[$135>>2]|0;
    $423 = ((($422) + (($11*24)|0)|0) + 20|0);
    HEAP8[$423>>0]=$421&255;HEAP8[$423+1>>0]=$421>>8;
    $$sum16 = (($15) + 38)|0;
    $424 = (($pNonZeroCount_tEmP) + ($$sum16)|0);
    $425 = HEAPU8[$424>>0]|(HEAPU8[$424+1>>0]<<8);
    $426 = HEAP32[$135>>2]|0;
    $427 = ((($426) + (($11*24)|0)|0) + 18|0);
    HEAP8[$427>>0]=$425&255;HEAP8[$427+1>>0]=$425>>8;
    $$sum17 = (($15) + 46)|0;
    $428 = (($pNonZeroCount_tEmP) + ($$sum17)|0);
    $429 = HEAPU8[$428>>0]|(HEAPU8[$428+1>>0]<<8);
    $430 = HEAP32[$135>>2]|0;
    $431 = ((($430) + (($11*24)|0)|0) + 22|0);
    HEAP8[$431>>0]=$429&255;HEAP8[$431+1>>0]=$429>>8;
    break;
   }
   else if ((label|0) == 70) {
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $452 = (__ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($pCtx,$uiEosFlag)|0);
 $453 = ($452|0)==(0);
 if (!($453)) {
  $$1 = $452;
  STACKTOP = sp;return ($$1|0);
 }
 $454 = HEAP32[$uiEosFlag>>2]|0;
 $455 = ($454|0)==(0);
 if ($455) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $456 = (($pCtx) + 512232|0);
 $457 = HEAP32[$456>>2]|0;
 $458 = HEAP32[$0>>2]|0;
 $459 = (($458) + 3900|0);
 $460 = HEAP32[$459>>2]|0;
 __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($457,$460);
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function __ZN7WelsDec23WelsDecodeMbCabacISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj($pCtx,$pNalCur,$uiEosFlag) {
 $pCtx = $pCtx|0;
 $pNalCur = $pNalCur|0;
 $uiEosFlag = $uiEosFlag|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN7WelsDec32WelsDecodeMbCabacISliceBaseMode0EPNS_21TagWelsDecoderContextERj($pCtx,$uiEosFlag)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN7WelsDec32WelsDecodeMbCabacPSliceBaseMode0EPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$pNeighAvail,$uiEosFlag) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $uiEosFlag = $uiEosFlag|0;
 var $$ = 0, $$$1 = 0, $$2 = 0, $$39 = 0, $$39$1 = 0, $$off = 0, $$off12 = 0, $$phi$trans$insert = 0, $$phi$trans$insert76 = 0, $$phi$trans$insert84 = 0, $$phi$trans$insert88 = 0, $$pre = 0, $$pre77 = 0, $$pre83 = 0, $$pre85 = 0, $$pre87 = 0, $$pre89 = 0, $$pre91 = 0, $$sum = 0, $$sum13 = 0;
 var $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i$152 = 0, $i$248 = 0, $i$344 = 0, $iId4x4$057 = 0, $iId4x4$142 = 0, $iId8x8$063 = 0, $iId8x8$159 = 0, $iIdx$058 = 0, $iMbResProperty$0 = 0, $iMbResProperty$1 = 0, $iQpDelta = 0, $index$043 = 0, $pIntraPredMode_tEmP = 0, $pMotionVector = 0, $pMvdCache = 0, $pNonZeroCount_tEmP = 0, $pRefIndex = 0, $uiCbp = 0, $uiCbpChroma$0 = 0;
 var $uiCbpChroma$1 = 0, $uiCbpChroma$1$off = 0, $uiCbpLuma$0 = 0, $uiCbpLuma$1 = 0, $uiMbType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0;
 $uiMbType = sp + 8|0;
 $uiCbp = sp + 4|0;
 $pNonZeroCount_tEmP = sp + 620|0;
 $pMotionVector = sp + 256|0;
 $pMvdCache = sp + 16|0;
 $pRefIndex = sp + 560|0;
 $pIntraPredMode_tEmP = sp + 496|0;
 $iQpDelta = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 3900|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 3866|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($1) + 3867|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($1) + 4040|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$uiMbType>>2] = 0;
 HEAP32[$uiCbp>>2] = 0;
 $12 = (($pNonZeroCount_tEmP) + 15|0);
 $13 = $12;
 $14 = $13 & 15;
 $15 = $14 ^ 15;
 $16 = (($pNonZeroCount_tEmP) + ($15)|0);
 $17 = (($1) + 3976|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($11)|0);
 HEAP8[$19>>0] = 0;
 $20 = (__ZN7WelsDec22ParseMBTypePSliceCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$pNeighAvail,$uiMbType)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $$2 = $20;
  STACKTOP = sp;return ($$2|0);
 }
 $22 = HEAP32[$uiMbType>>2]|0;
 $23 = ($22>>>0)<(4);
 do {
  if ($23) {
   $24 = (4232 + ($22<<3)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25&65535;
   $27 = (($1) + 3908|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($11<<1)|0);
   HEAP16[$29>>1] = $26;
   __ZN7WelsDec23WelsFillCacheInterCabacEPNS_16TagNeighborAvailEPhPA30_A2_sS5_PA30_aPNS_10TagDqLayerE($pNeighAvail,$16,$pMotionVector,$pMvdCache,$pRefIndex,$1);
   $30 = (__ZN7WelsDec25ParseInterMotionInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_A2_sS7_PA30_a($pCtx,$pNeighAvail,$16,$pMotionVector,$pMvdCache,$pRefIndex)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $32 = HEAP32[$17>>2]|0;
    $33 = (($32) + ($11)|0);
    HEAP8[$33>>0] = 0;
    $uiCbpChroma$0 = 0;$uiCbpLuma$0 = 0;
    break;
   } else {
    $$2 = $30;
    STACKTOP = sp;return ($$2|0);
   }
  } else {
   $34 = (($22) + -5)|0;
   HEAP32[$uiMbType>>2] = $34;
   $35 = ($34>>>0)>(25);
   if ($35) {
    $$2 = 1035;
    STACKTOP = sp;return ($$2|0);
   }
   $36 = (($pCtx) + 241924|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 318|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = ($39<<24>>24)==(0);
   L9: do {
    if ($40) {
     switch ($22|0) {
     case 30:  {
      label = 9;
      break L9;
      break;
     }
     case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29:  {
      $$2 = 1035;
      break;
     }
     case 5:  {
      label = 13;
      break L9;
      break;
     }
     default: {
      label = 18;
      break L9;
     }
     }
     STACKTOP = sp;return ($$2|0);
    } else {
     if ((($22|0) == 30)) {
      label = 9;
     } else if ((($22|0) == 5)) {
      label = 13;
     } else {
      label = 18;
     }
    }
   } while(0);
   if ((label|0) == 9) {
    $41 = (__ZN7WelsDec18ParseIPCMInfoCabacEPNS_21TagWelsDecoderContextE($pCtx)|0);
    $42 = ($41|0)==(0);
    if (!($42)) {
     $$2 = $41;
     STACKTOP = sp;return ($$2|0);
    }
    $43 = (($1) + 3884|0);
    HEAP32[$43>>2] = 0;
    $44 = (__ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($pCtx,$uiEosFlag)|0);
    $45 = ($44|0)==(0);
    if (!($45)) {
     $$2 = $44;
     STACKTOP = sp;return ($$2|0);
    }
    $46 = HEAP32[$uiEosFlag>>2]|0;
    $47 = ($46|0)==(0);
    if ($47) {
     $$2 = 0;
     STACKTOP = sp;return ($$2|0);
    }
    $48 = (($pCtx) + 512232|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = HEAP32[$0>>2]|0;
    $51 = (($50) + 3900|0);
    $52 = HEAP32[$51>>2]|0;
    __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($49,$52);
    $$2 = 0;
    STACKTOP = sp;return ($$2|0);
   }
   else if ((label|0) == 13) {
    $53 = (($pIntraPredMode_tEmP) + 15|0);
    $54 = $53;
    $55 = $54 & 15;
    $56 = $55 ^ 15;
    $57 = (($pIntraPredMode_tEmP) + ($56)|0);
    $58 = (($1) + 3908|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + ($11<<1)|0);
    HEAP16[$60>>1] = 1;
    $61 = (($pCtx) + 241928|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + 184|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = ($64<<24>>24)==(0);
    if (!($65)) {
     $66 = HEAP32[$0>>2]|0;
     $67 = (($66) + 3944|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + ($11)|0);
     $70 = (__ZN7WelsDec30ParseTransformSize8x8FlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERb($pCtx,$pNeighAvail,$69)|0);
     $71 = ($70|0)==(0);
     if (!($71)) {
      $$2 = $70;
      STACKTOP = sp;return ($$2|0);
     }
    }
    $72 = HEAP32[$0>>2]|0;
    $73 = (($72) + 3944|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + ($11)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ($76<<24>>24)==(0);
    if ($77) {
     $84 = (($pCtx) + 317148|0);
     $85 = HEAP32[$84>>2]|0;
     FUNCTION_TABLE_viiii[$85 & 31]($pNeighAvail,$16,$57,$1);
     $86 = (__ZN7WelsDec17ParseIntra4x4ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$pNeighAvail,$57,$3,$1)|0);
     $87 = ($86|0)==(0);
     if ($87) {
      $uiCbpChroma$0 = 0;$uiCbpLuma$0 = 0;
      break;
     } else {
      $$2 = $86;
     }
     STACKTOP = sp;return ($$2|0);
    } else {
     $78 = HEAP32[$58>>2]|0;
     $79 = (($78) + ($11<<1)|0);
     HEAP16[$79>>1] = 4;
     HEAP32[$uiMbType>>2] = 4;
     $80 = (($pCtx) + 317148|0);
     $81 = HEAP32[$80>>2]|0;
     FUNCTION_TABLE_viiii[$81 & 31]($pNeighAvail,$16,$57,$1);
     $82 = (__ZN7WelsDec17ParseIntra8x8ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$pNeighAvail,$57,$3,$1)|0);
     $83 = ($82|0)==(0);
     if ($83) {
      $uiCbpChroma$0 = 0;$uiCbpLuma$0 = 0;
      break;
     } else {
      $$2 = $82;
     }
     STACKTOP = sp;return ($$2|0);
    }
   }
   else if ((label|0) == 18) {
    $88 = (($1) + 3908|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + ($11<<1)|0);
    HEAP16[$90>>1] = 2;
    $91 = (($1) + 3944|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($11)|0);
    HEAP8[$93>>0] = 0;
    $94 = (($1) + 3940|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + ($11)|0);
    HEAP8[$96>>0] = 1;
    $97 = HEAP32[$uiMbType>>2]|0;
    $98 = (($97) + 3)|0;
    $99 = $98 & 3;
    $100 = $99&255;
    $101 = (($1) + 3992|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ((($102) + ($11<<3)|0) + 7|0);
    HEAP8[$103>>0] = $100;
    $104 = HEAP32[$uiMbType>>2]|0;
    $105 = (($104) + -1)|0;
    $106 = $105 >>> 2;
    $107 = (3864 + ($106)|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = (($1) + 3956|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($11)|0);
    HEAP8[$111>>0] = $108;
    $112 = HEAP32[$36>>2]|0;
    $113 = (($112) + 318|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = ($114<<24>>24)==(0);
    $$pre87 = HEAP32[$109>>2]|0;
    $$phi$trans$insert88 = (($$pre87) + ($11)|0);
    $$pre89 = HEAP8[$$phi$trans$insert88>>0]|0;
    if ($115) {
     $500 = 0;
    } else {
     $116 = $$pre89 << 24 >> 24;
     $117 = $116 >> 4;
     $500 = $117;
    }
    $118 = $$pre89&255;
    $119 = $118 & 15;
    __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($pNeighAvail,$16,$1);
    $120 = (__ZN7WelsDec19ParseIntra16x16ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$pNeighAvail,$3,$1)|0);
    $121 = ($120|0)==(0);
    if ($121) {
     $uiCbpChroma$0 = $500;$uiCbpLuma$0 = $119;
     break;
    } else {
     $$2 = $120;
    }
    STACKTOP = sp;return ($$2|0);
   }
  }
 } while(0);
 $122 = (($1) + 3964|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($123) + (($11*24)|0)|0);
 HEAP8[$124>>0]=0&255;HEAP8[$124+1>>0]=(0>>8)&255;HEAP8[$124+2>>0]=(0>>16)&255;HEAP8[$124+3>>0]=0>>24;
 $125 = HEAP32[$122>>2]|0;
 $126 = ((($125) + (($11*24)|0)|0) + 4|0);
 HEAP8[$126>>0]=0&255;HEAP8[$126+1>>0]=(0>>8)&255;HEAP8[$126+2>>0]=(0>>16)&255;HEAP8[$126+3>>0]=0>>24;
 $127 = HEAP32[$122>>2]|0;
 $128 = ((($127) + (($11*24)|0)|0) + 8|0);
 HEAP8[$128>>0]=0&255;HEAP8[$128+1>>0]=(0>>8)&255;HEAP8[$128+2>>0]=(0>>16)&255;HEAP8[$128+3>>0]=0>>24;
 $129 = HEAP32[$122>>2]|0;
 $130 = ((($129) + (($11*24)|0)|0) + 12|0);
 HEAP8[$130>>0]=0&255;HEAP8[$130+1>>0]=(0>>8)&255;HEAP8[$130+2>>0]=(0>>16)&255;HEAP8[$130+3>>0]=0>>24;
 $131 = HEAP32[$122>>2]|0;
 $132 = ((($131) + (($11*24)|0)|0) + 16|0);
 HEAP8[$132>>0]=0&255;HEAP8[$132+1>>0]=(0>>8)&255;HEAP8[$132+2>>0]=(0>>16)&255;HEAP8[$132+3>>0]=0>>24;
 $133 = HEAP32[$122>>2]|0;
 $134 = ((($133) + (($11*24)|0)|0) + 20|0);
 HEAP8[$134>>0]=0&255;HEAP8[$134+1>>0]=(0>>8)&255;HEAP8[$134+2>>0]=(0>>16)&255;HEAP8[$134+3>>0]=0>>24;
 $135 = (($1) + 3908|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (($136) + ($11<<1)|0);
 $138 = HEAP16[$137>>1]|0;
 $139 = ($138<<16>>16)==(2);
 if ($139) {
  $$phi$trans$insert = (($1) + 3956|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert76 = (($$pre) + ($11)|0);
  $$pre77 = HEAP8[$$phi$trans$insert76>>0]|0;
  $160 = $$pre77;$uiCbpChroma$1 = $uiCbpChroma$0;$uiCbpLuma$1 = $uiCbpLuma$0;
 } else {
  $140 = (__ZN7WelsDec17ParseCbpInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$pNeighAvail,$uiCbp)|0);
  $141 = ($140|0)==(0);
  if (!($141)) {
   $$2 = $140;
   STACKTOP = sp;return ($$2|0);
  }
  $142 = HEAP32[$uiCbp>>2]|0;
  $143 = $142&255;
  $144 = (($1) + 3956|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) + ($11)|0);
  HEAP8[$146>>0] = $143;
  $147 = HEAP32[$uiCbp>>2]|0;
  $148 = ($147|0)==(0);
  $$pre91 = (($1) + 3884|0);
  if ($148) {
   $150 = 0;
  } else {
   $149 = HEAP32[$$pre91>>2]|0;
   $150 = $149;
  }
  HEAP32[$$pre91>>2] = $150;
  $151 = (($pCtx) + 241924|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($152) + 318|0);
  $154 = HEAP8[$153>>0]|0;
  $155 = ($154<<24>>24)==(0);
  $$pre83 = HEAP32[$144>>2]|0;
  $$phi$trans$insert84 = (($$pre83) + ($11)|0);
  $$pre85 = HEAP8[$$phi$trans$insert84>>0]|0;
  if ($155) {
   $501 = 0;
  } else {
   $156 = $$pre85 << 24 >> 24;
   $157 = $156 >> 4;
   $501 = $157;
  }
  $158 = $$pre85&255;
  $159 = $158 & 15;
  $160 = $$pre85;$uiCbpChroma$1 = $501;$uiCbpLuma$1 = $159;
 }
 $161 = ($160<<24>>24)==(0);
 $162 = HEAP32[$135>>2]|0;
 $163 = (($162) + ($11<<1)|0);
 $164 = HEAP16[$163>>1]|0;
 $165 = ($164<<16>>16)==(2);
 do {
  if ($161) {
   if ($165) {
    label = 38;
   } else {
    $444 = (($1) + 3868|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = $445&255;
    $447 = (($1) + 3948|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = (($448) + ($11)|0);
    HEAP8[$449>>0] = $446;
    $450 = (($1) + 92|0);
    $451 = (($1) + 3952|0);
    $452 = HEAP32[$447>>2]|0;
    $453 = (($452) + ($11)|0);
    $454 = HEAP8[$453>>0]|0;
    $455 = $454 << 24 >> 24;
    $456 = HEAP32[$450>>2]|0;
    $457 = (($456) + 168|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = (($458) + ($455))|0;
    $460 = ($459|0)<(0);
    if ($460) {
     $463 = 0;
    } else {
     $461 = ($459|0)>(51);
     $$39 = $461 ? 51 : $459;
     $463 = $$39;
    }
    $462 = (16984 + ($463)|0);
    $464 = HEAP8[$462>>0]|0;
    $465 = HEAP32[$451>>2]|0;
    $466 = (($465) + ($11<<1)|0);
    HEAP8[$466>>0] = $464;
    $467 = HEAP32[$447>>2]|0;
    $468 = (($467) + ($11)|0);
    $469 = HEAP8[$468>>0]|0;
    $470 = $469 << 24 >> 24;
    $471 = HEAP32[$450>>2]|0;
    $472 = (($471) + 172|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = (($473) + ($470))|0;
    $475 = ($474|0)<(0);
    if ($475) {
     $496 = 0;
    } else {
     $494 = ($474|0)>(51);
     $$39$1 = $494 ? 51 : $474;
     $496 = $$39$1;
    }
    $495 = (16984 + ($496)|0);
    $497 = HEAP8[$495>>0]|0;
    $498 = HEAP32[$451>>2]|0;
    $499 = ((($498) + ($11<<1)|0) + 1|0);
    HEAP8[$499>>0] = $497;
   }
  } else {
   if ($165) {
    label = 38;
   } else {
    $$off = (($164) + -8)<<16>>16;
    $166 = ($$off&65535)<(25);
    if (!($166)) {
     $167 = (($1) + 3940|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($168) + ($11)|0);
     $170 = HEAP8[$169>>0]|0;
     $171 = ($170<<24>>24)==(0);
     if ($171) {
      label = 38;
      break;
     }
    }
    if ((($164<<16>>16) == 1) | (($164<<16>>16) == 4)) {
     label = 38;
    } else {
     $172 = $160 & 15;
     $173 = ($172<<24>>24)==(0);
     if ($173) {
      label = 38;
     } else {
      $174 = (($pCtx) + 241928|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = (($175) + 184|0);
      $177 = HEAP8[$176>>0]|0;
      $178 = ($177<<24>>24)==(0);
      if ($178) {
       label = 38;
      } else {
       $179 = HEAP32[$0>>2]|0;
       $180 = (($179) + 3944|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = (($181) + ($11)|0);
       $183 = (__ZN7WelsDec30ParseTransformSize8x8FlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERb($pCtx,$pNeighAvail,$182)|0);
       $184 = ($183|0)==(0);
       if ($184) {
        label = 38;
       } else {
        $$2 = $183;
        STACKTOP = sp;return ($$2|0);
       }
      }
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 38) {
   $185 = (($1) + 3988|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($186) + (($11*768)|0)|0);
   _memset(($187|0),0,768)|0;
   $188 = (__ZN7WelsDec17ParseDeltaQpCabacEPNS_21TagWelsDecoderContextERi($pCtx,$iQpDelta)|0);
   $189 = ($188|0)==(0);
   if (!($189)) {
    $$2 = $188;
    STACKTOP = sp;return ($$2|0);
   }
   $190 = HEAP32[$iQpDelta>>2]|0;
   $$off12 = (($190) + 26)|0;
   $191 = ($$off12>>>0)>(51);
   if ($191) {
    $$2 = 1027;
    STACKTOP = sp;return ($$2|0);
   }
   $192 = (($1) + 3868|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($190) + 52)|0;
   $195 = (($194) + ($193))|0;
   $196 = (($195|0) % 52)&-1;
   $197 = $196&255;
   $198 = (($1) + 3948|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = (($199) + ($11)|0);
   HEAP8[$200>>0] = $197;
   $201 = HEAP32[$198>>2]|0;
   $202 = (($201) + ($11)|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203 << 24 >> 24;
   HEAP32[$192>>2] = $204;
   $205 = (($1) + 92|0);
   $206 = (($1) + 3952|0);
   $207 = HEAP32[$205>>2]|0;
   $208 = (($207) + 168|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = (($209) + ($204))|0;
   $211 = ($210|0)<(0);
   if ($211) {
    $214 = 0;
   } else {
    $212 = ($210|0)>(51);
    $$ = $212 ? 51 : $210;
    $214 = $$;
   }
   $213 = (16984 + ($214)|0);
   $215 = HEAP8[$213>>0]|0;
   $216 = HEAP32[$206>>2]|0;
   $217 = (($216) + ($11<<1)|0);
   HEAP8[$217>>0] = $215;
   $218 = HEAP32[$192>>2]|0;
   $219 = HEAP32[$205>>2]|0;
   $220 = (($219) + 172|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = (($221) + ($218))|0;
   $223 = ($222|0)<(0);
   if ($223) {
    $487 = 0;
   } else {
    $485 = ($222|0)>(51);
    $$$1 = $485 ? 51 : $222;
    $487 = $$$1;
   }
   $486 = (16984 + ($487)|0);
   $488 = HEAP8[$486>>0]|0;
   $489 = HEAP32[$206>>2]|0;
   $490 = ((($489) + ($11<<1)|0) + 1|0);
   HEAP8[$490>>0] = $488;
   $491 = HEAP32[$135>>2]|0;
   $492 = (($491) + ($11<<1)|0);
   $326 = HEAP16[$492>>1]|0;
   $493 = ($326<<16>>16)==(2);
   do {
    if ($493) {
     $224 = HEAP32[$185>>2]|0;
     $225 = (($224) + (($11*768)|0)|0);
     $226 = HEAP32[$198>>2]|0;
     $227 = (($226) + ($11)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($pNeighAvail,$16,$3,0,16,8496,1,$225,$228,$pCtx)|0);
     $230 = ($229|0)==(0);
     if (!($230)) {
      $$2 = $229;
      STACKTOP = sp;return ($$2|0);
     }
     $231 = ($uiCbpLuma$1|0)==(0);
     if ($231) {
      $263 = HEAP32[$122>>2]|0;
      $264 = (($263) + (($11*24)|0)|0);
      HEAP8[$264>>0]=0&255;HEAP8[$264+1>>0]=(0>>8)&255;HEAP8[$264+2>>0]=(0>>16)&255;HEAP8[$264+3>>0]=0>>24;
      $265 = HEAP32[$122>>2]|0;
      $266 = ((($265) + (($11*24)|0)|0) + 4|0);
      HEAP8[$266>>0]=0&255;HEAP8[$266+1>>0]=(0>>8)&255;HEAP8[$266+2>>0]=(0>>16)&255;HEAP8[$266+3>>0]=0>>24;
      $267 = HEAP32[$122>>2]|0;
      $268 = ((($267) + (($11*24)|0)|0) + 8|0);
      HEAP8[$268>>0]=0&255;HEAP8[$268+1>>0]=(0>>8)&255;HEAP8[$268+2>>0]=(0>>16)&255;HEAP8[$268+3>>0]=0>>24;
      $269 = HEAP32[$122>>2]|0;
      $270 = ((($269) + (($11*24)|0)|0) + 12|0);
      HEAP8[$270>>0]=0&255;HEAP8[$270+1>>0]=(0>>8)&255;HEAP8[$270+2>>0]=(0>>16)&255;HEAP8[$270+3>>0]=0>>24;
      break;
     }
     $232 = ($6>>>0)>(1);
     $233 = $232 ? $6 : 1;
     $234 = (($9) + 1)|0;
     $235 = (($234) - ($233))|0;
     $236 = (3872 + ($233)|0);
     $i$152 = 0;
     while(1) {
      $239 = HEAP32[$185>>2]|0;
      $240 = $i$152 << 4;
      $241 = ((($239) + (($11*768)|0)|0) + ($240<<1)|0);
      $242 = HEAP32[$198>>2]|0;
      $243 = (($242) + ($11)|0);
      $244 = HEAP8[$243>>0]|0;
      $245 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($pNeighAvail,$16,$3,$i$152,$235,$236,2,$241,$244,$pCtx)|0);
      $246 = ($245|0)==(0);
      $237 = (($i$152) + 1)|0;
      if (!($246)) {
       $$2 = $245;
       label = 87;
       break;
      }
      $238 = ($237|0)<(16);
      if ($238) {
       $i$152 = $237;
      } else {
       label = 48;
       break;
      }
     }
     if ((label|0) == 48) {
      $$sum29 = (($15) + 9)|0;
      $247 = (($pNonZeroCount_tEmP) + ($$sum29)|0);
      $248 = HEAPU8[$247>>0]|(HEAPU8[$247+1>>0]<<8)|(HEAPU8[$247+2>>0]<<16)|(HEAPU8[$247+3>>0]<<24);
      $249 = HEAP32[$122>>2]|0;
      $250 = (($249) + (($11*24)|0)|0);
      HEAP8[$250>>0]=$248&255;HEAP8[$250+1>>0]=($248>>8)&255;HEAP8[$250+2>>0]=($248>>16)&255;HEAP8[$250+3>>0]=$248>>24;
      $$sum30 = (($15) + 17)|0;
      $251 = (($pNonZeroCount_tEmP) + ($$sum30)|0);
      $252 = HEAPU8[$251>>0]|(HEAPU8[$251+1>>0]<<8)|(HEAPU8[$251+2>>0]<<16)|(HEAPU8[$251+3>>0]<<24);
      $253 = HEAP32[$122>>2]|0;
      $254 = ((($253) + (($11*24)|0)|0) + 4|0);
      HEAP8[$254>>0]=$252&255;HEAP8[$254+1>>0]=($252>>8)&255;HEAP8[$254+2>>0]=($252>>16)&255;HEAP8[$254+3>>0]=$252>>24;
      $$sum31 = (($15) + 25)|0;
      $255 = (($pNonZeroCount_tEmP) + ($$sum31)|0);
      $256 = HEAPU8[$255>>0]|(HEAPU8[$255+1>>0]<<8)|(HEAPU8[$255+2>>0]<<16)|(HEAPU8[$255+3>>0]<<24);
      $257 = HEAP32[$122>>2]|0;
      $258 = ((($257) + (($11*24)|0)|0) + 8|0);
      HEAP8[$258>>0]=$256&255;HEAP8[$258+1>>0]=($256>>8)&255;HEAP8[$258+2>>0]=($256>>16)&255;HEAP8[$258+3>>0]=$256>>24;
      $$sum32 = (($15) + 33)|0;
      $259 = (($pNonZeroCount_tEmP) + ($$sum32)|0);
      $260 = HEAPU8[$259>>0]|(HEAPU8[$259+1>>0]<<8)|(HEAPU8[$259+2>>0]<<16)|(HEAPU8[$259+3>>0]<<24);
      $261 = HEAP32[$122>>2]|0;
      $262 = ((($261) + (($11*24)|0)|0) + 12|0);
      HEAP8[$262>>0]=$260&255;HEAP8[$262+1>>0]=($260>>8)&255;HEAP8[$262+2>>0]=($260>>16)&255;HEAP8[$262+3>>0]=$260>>24;
      break;
     }
     else if ((label|0) == 87) {
      STACKTOP = sp;return ($$2|0);
     }
    } else {
     $271 = HEAP32[$0>>2]|0;
     $272 = (($271) + 3944|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = (($273) + ($11)|0);
     $275 = HEAP8[$274>>0]|0;
     $276 = ($275<<24>>24)==(0);
     if (!($276)) {
      $277 = (1 - ($6))|0;
      $278 = (($277) + ($9))|0;
      $279 = (3888 + ($6)|0);
      $iId8x8$063 = 0;
      while(1) {
       $280 = 1 << $iId8x8$063;
       $281 = $280 & $uiCbpLuma$1;
       $282 = ($281|0)==(0);
       $283 = $iId8x8$063 << 2;
       if ($282) {
        $298 = (8440 + ($283)|0);
        $299 = HEAP8[$298>>0]|0;
        $300 = $299&255;
        $$sum27 = (($300) + ($15))|0;
        $301 = (($pNonZeroCount_tEmP) + ($$sum27)|0);
        HEAP8[$301>>0]=0&255;HEAP8[$301+1>>0]=0>>8;
        $302 = $283 | 2;
        $303 = (8440 + ($302)|0);
        $304 = HEAP8[$303>>0]|0;
        $305 = $304&255;
        $$sum28 = (($305) + ($15))|0;
        $306 = (($pNonZeroCount_tEmP) + ($$sum28)|0);
        HEAP8[$306>>0]=0&255;HEAP8[$306+1>>0]=0>>8;
       } else {
        $284 = HEAP32[$135>>2]|0;
        $285 = (($284) + ($11<<1)|0);
        $286 = HEAP16[$285>>1]|0;
        $287 = $286 & 519;
        $288 = ($287<<16>>16)!=(0);
        $289 = $288 ? 17 : 18;
        $290 = HEAP32[$185>>2]|0;
        $291 = $iId8x8$063 << 6;
        $292 = ((($290) + (($11*768)|0)|0) + ($291<<1)|0);
        $293 = HEAP32[$198>>2]|0;
        $294 = (($293) + ($11)|0);
        $295 = HEAP8[$294>>0]|0;
        $296 = (__ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($pNeighAvail,$16,$3,$283,$278,$279,$289,$292,$295,$pCtx)|0);
        $297 = ($296|0)==(0);
        if (!($297)) {
         $$2 = $296;
         label = 87;
         break;
        }
       }
       $307 = (($iId8x8$063) + 1)|0;
       $308 = ($307|0)<(4);
       if ($308) {
        $iId8x8$063 = $307;
       } else {
        label = 56;
        break;
       }
      }
      if ((label|0) == 56) {
       $$sum23 = (($15) + 9)|0;
       $309 = (($pNonZeroCount_tEmP) + ($$sum23)|0);
       $310 = HEAPU8[$309>>0]|(HEAPU8[$309+1>>0]<<8)|(HEAPU8[$309+2>>0]<<16)|(HEAPU8[$309+3>>0]<<24);
       $311 = HEAP32[$122>>2]|0;
       $312 = (($311) + (($11*24)|0)|0);
       HEAP8[$312>>0]=$310&255;HEAP8[$312+1>>0]=($310>>8)&255;HEAP8[$312+2>>0]=($310>>16)&255;HEAP8[$312+3>>0]=$310>>24;
       $$sum24 = (($15) + 17)|0;
       $313 = (($pNonZeroCount_tEmP) + ($$sum24)|0);
       $314 = HEAPU8[$313>>0]|(HEAPU8[$313+1>>0]<<8)|(HEAPU8[$313+2>>0]<<16)|(HEAPU8[$313+3>>0]<<24);
       $315 = HEAP32[$122>>2]|0;
       $316 = ((($315) + (($11*24)|0)|0) + 4|0);
       HEAP8[$316>>0]=$314&255;HEAP8[$316+1>>0]=($314>>8)&255;HEAP8[$316+2>>0]=($314>>16)&255;HEAP8[$316+3>>0]=$314>>24;
       $$sum25 = (($15) + 25)|0;
       $317 = (($pNonZeroCount_tEmP) + ($$sum25)|0);
       $318 = HEAPU8[$317>>0]|(HEAPU8[$317+1>>0]<<8)|(HEAPU8[$317+2>>0]<<16)|(HEAPU8[$317+3>>0]<<24);
       $319 = HEAP32[$122>>2]|0;
       $320 = ((($319) + (($11*24)|0)|0) + 8|0);
       HEAP8[$320>>0]=$318&255;HEAP8[$320+1>>0]=($318>>8)&255;HEAP8[$320+2>>0]=($318>>16)&255;HEAP8[$320+3>>0]=$318>>24;
       $$sum26 = (($15) + 33)|0;
       $321 = (($pNonZeroCount_tEmP) + ($$sum26)|0);
       $322 = HEAPU8[$321>>0]|(HEAPU8[$321+1>>0]<<8)|(HEAPU8[$321+2>>0]<<16)|(HEAPU8[$321+3>>0]<<24);
       $323 = HEAP32[$122>>2]|0;
       $324 = ((($323) + (($11*24)|0)|0) + 12|0);
       HEAP8[$324>>0]=$322&255;HEAP8[$324+1>>0]=($322>>8)&255;HEAP8[$324+2>>0]=($322>>16)&255;HEAP8[$324+3>>0]=$322>>24;
       break;
      }
      else if ((label|0) == 87) {
       STACKTOP = sp;return ($$2|0);
      }
     }
     $325 = $326 & 519;
     $327 = ($325<<16>>16)!=(0);
     $328 = $327 ? 11 : 12;
     $329 = (1 - ($6))|0;
     $330 = (($329) + ($9))|0;
     $331 = (3872 + ($6)|0);
     $iId8x8$159 = 0;
     L104: while(1) {
      $332 = 1 << $iId8x8$159;
      $333 = $332 & $uiCbpLuma$1;
      $334 = ($333|0)==(0);
      $335 = $iId8x8$159 << 2;
      if ($334) {
       $347 = (8440 + ($335)|0);
       $348 = HEAP8[$347>>0]|0;
       $349 = $348&255;
       $$sum21 = (($349) + ($15))|0;
       $350 = (($pNonZeroCount_tEmP) + ($$sum21)|0);
       HEAP8[$350>>0]=0&255;HEAP8[$350+1>>0]=0>>8;
       $351 = $335 | 2;
       $352 = (8440 + ($351)|0);
       $353 = HEAP8[$352>>0]|0;
       $354 = $353&255;
       $$sum22 = (($354) + ($15))|0;
       $355 = (($pNonZeroCount_tEmP) + ($$sum22)|0);
       HEAP8[$355>>0]=0&255;HEAP8[$355+1>>0]=0>>8;
      } else {
       $iId4x4$057 = 0;$iIdx$058 = $335;
       while(1) {
        $336 = HEAP32[$185>>2]|0;
        $337 = $iIdx$058 << 4;
        $338 = ((($336) + (($11*768)|0)|0) + ($337<<1)|0);
        $339 = HEAP32[$198>>2]|0;
        $340 = (($339) + ($11)|0);
        $341 = HEAP8[$340>>0]|0;
        $342 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($pNeighAvail,$16,$3,$iIdx$058,$330,$331,$328,$338,$341,$pCtx)|0);
        $343 = ($342|0)==(0);
        if (!($343)) {
         $$2 = $342;
         label = 87;
         break L104;
        }
        $344 = (($iIdx$058) + 1)|0;
        $345 = (($iId4x4$057) + 1)|0;
        $346 = ($345|0)<(4);
        if ($346) {
         $iId4x4$057 = $345;$iIdx$058 = $344;
        } else {
         break;
        }
       }
      }
      $356 = (($iId8x8$159) + 1)|0;
      $357 = ($356|0)<(4);
      if ($357) {
       $iId8x8$159 = $356;
      } else {
       label = 63;
       break;
      }
     }
     if ((label|0) == 63) {
      $$sum = (($15) + 9)|0;
      $358 = (($pNonZeroCount_tEmP) + ($$sum)|0);
      $359 = HEAPU8[$358>>0]|(HEAPU8[$358+1>>0]<<8)|(HEAPU8[$358+2>>0]<<16)|(HEAPU8[$358+3>>0]<<24);
      $360 = HEAP32[$122>>2]|0;
      $361 = (($360) + (($11*24)|0)|0);
      HEAP8[$361>>0]=$359&255;HEAP8[$361+1>>0]=($359>>8)&255;HEAP8[$361+2>>0]=($359>>16)&255;HEAP8[$361+3>>0]=$359>>24;
      $$sum13 = (($15) + 17)|0;
      $362 = (($pNonZeroCount_tEmP) + ($$sum13)|0);
      $363 = HEAPU8[$362>>0]|(HEAPU8[$362+1>>0]<<8)|(HEAPU8[$362+2>>0]<<16)|(HEAPU8[$362+3>>0]<<24);
      $364 = HEAP32[$122>>2]|0;
      $365 = ((($364) + (($11*24)|0)|0) + 4|0);
      HEAP8[$365>>0]=$363&255;HEAP8[$365+1>>0]=($363>>8)&255;HEAP8[$365+2>>0]=($363>>16)&255;HEAP8[$365+3>>0]=$363>>24;
      $$sum14 = (($15) + 25)|0;
      $366 = (($pNonZeroCount_tEmP) + ($$sum14)|0);
      $367 = HEAPU8[$366>>0]|(HEAPU8[$366+1>>0]<<8)|(HEAPU8[$366+2>>0]<<16)|(HEAPU8[$366+3>>0]<<24);
      $368 = HEAP32[$122>>2]|0;
      $369 = ((($368) + (($11*24)|0)|0) + 8|0);
      HEAP8[$369>>0]=$367&255;HEAP8[$369+1>>0]=($367>>8)&255;HEAP8[$369+2>>0]=($367>>16)&255;HEAP8[$369+3>>0]=$367>>24;
      $$sum15 = (($15) + 33)|0;
      $370 = (($pNonZeroCount_tEmP) + ($$sum15)|0);
      $371 = HEAPU8[$370>>0]|(HEAPU8[$370+1>>0]<<8)|(HEAPU8[$370+2>>0]<<16)|(HEAPU8[$370+3>>0]<<24);
      $372 = HEAP32[$122>>2]|0;
      $373 = ((($372) + (($11*24)|0)|0) + 12|0);
      HEAP8[$373>>0]=$371&255;HEAP8[$373+1>>0]=($371>>8)&255;HEAP8[$373+2>>0]=($371>>16)&255;HEAP8[$373+3>>0]=$371>>24;
      break;
     }
     else if ((label|0) == 87) {
      STACKTOP = sp;return ($$2|0);
     }
    }
   } while(0);
   $374 = ($uiCbpChroma$1|0)==(2);
   $uiCbpChroma$1$off = (($uiCbpChroma$1) + -1)|0;
   $375 = ($uiCbpChroma$1$off>>>0)<(2);
   L129: do {
    if ($375) {
     $i$248 = 0;
     while(1) {
      $378 = HEAP32[$135>>2]|0;
      $379 = (($378) + ($11<<1)|0);
      $380 = HEAP16[$379>>1]|0;
      $381 = $380 & 519;
      $382 = ($381<<16>>16)==(0);
      $383 = ($i$248|0)!=(0);
      if ($382) {
       $385 = $383 ? 14 : 13;
       $iMbResProperty$0 = $385;
      } else {
       $384 = $383 ? 8 : 7;
       $iMbResProperty$0 = $384;
      }
      $386 = $i$248 << 2;
      $387 = (($386) + 16)|0;
      $388 = HEAP32[$185>>2]|0;
      $389 = $i$248 << 6;
      $$sum20 = (($389) + 256)|0;
      $390 = ((($388) + (($11*768)|0)|0) + ($$sum20<<1)|0);
      $391 = HEAP32[$206>>2]|0;
      $392 = ((($391) + ($11<<1)|0) + ($i$248)|0);
      $393 = HEAP8[$392>>0]|0;
      $394 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($pNeighAvail,$16,$3,$387,4,8512,$iMbResProperty$0,$390,$393,$pCtx)|0);
      $395 = ($394|0)==(0);
      $376 = (($i$248) + 1)|0;
      if (!($395)) {
       $$2 = $394;
       break;
      }
      $377 = ($376|0)<(2);
      if ($377) {
       $i$248 = $376;
      } else {
       break L129;
      }
     }
     STACKTOP = sp;return ($$2|0);
    }
   } while(0);
   if (!($374)) {
    $440 = HEAP32[$122>>2]|0;
    $441 = ((($440) + (($11*24)|0)|0) + 16|0);
    HEAP8[$441>>0]=0&255;HEAP8[$441+1>>0]=(0>>8)&255;HEAP8[$441+2>>0]=(0>>16)&255;HEAP8[$441+3>>0]=0>>24;
    $442 = HEAP32[$122>>2]|0;
    $443 = ((($442) + (($11*24)|0)|0) + 20|0);
    HEAP8[$443>>0]=0&255;HEAP8[$443+1>>0]=(0>>8)&255;HEAP8[$443+2>>0]=(0>>16)&255;HEAP8[$443+3>>0]=0>>24;
    break;
   }
   $396 = ($6>>>0)>(1);
   $397 = $396 ? $6 : 1;
   $398 = (($9) + 1)|0;
   $399 = (($398) - ($397))|0;
   $400 = (3872 + ($397)|0);
   $i$344 = 0;
   L142: while(1) {
    $401 = HEAP32[$135>>2]|0;
    $402 = (($401) + ($11<<1)|0);
    $403 = HEAP16[$402>>1]|0;
    $404 = $403 & 519;
    $405 = ($404<<16>>16)==(0);
    $406 = ($i$344|0)!=(0);
    if ($405) {
     $408 = $406 ? 16 : 15;
     $iMbResProperty$1 = $408;
    } else {
     $407 = $406 ? 10 : 9;
     $iMbResProperty$1 = $407;
    }
    $409 = $i$344 << 2;
    $410 = (($409) + 16)|0;
    $iId4x4$142 = 0;$index$043 = $410;
    while(1) {
     $411 = HEAP32[$185>>2]|0;
     $412 = $index$043 << 4;
     $413 = ((($411) + (($11*768)|0)|0) + ($412<<1)|0);
     $414 = HEAP32[$206>>2]|0;
     $415 = ((($414) + ($11<<1)|0) + ($i$344)|0);
     $416 = HEAP8[$415>>0]|0;
     $417 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($pNeighAvail,$16,$3,$index$043,$399,$400,$iMbResProperty$1,$413,$416,$pCtx)|0);
     $418 = ($417|0)==(0);
     if (!($418)) {
      $$2 = $417;
      label = 87;
      break L142;
     }
     $419 = (($index$043) + 1)|0;
     $420 = (($iId4x4$142) + 1)|0;
     $421 = ($420|0)<(4);
     if ($421) {
      $iId4x4$142 = $420;$index$043 = $419;
     } else {
      break;
     }
    }
    $422 = (($i$344) + 1)|0;
    $423 = ($422|0)<(2);
    if ($423) {
     $i$344 = $422;
    } else {
     label = 79;
     break;
    }
   }
   if ((label|0) == 79) {
    $$sum16 = (($15) + 14)|0;
    $424 = (($pNonZeroCount_tEmP) + ($$sum16)|0);
    $425 = HEAPU8[$424>>0]|(HEAPU8[$424+1>>0]<<8);
    $426 = HEAP32[$122>>2]|0;
    $427 = ((($426) + (($11*24)|0)|0) + 16|0);
    HEAP8[$427>>0]=$425&255;HEAP8[$427+1>>0]=$425>>8;
    $$sum17 = (($15) + 22)|0;
    $428 = (($pNonZeroCount_tEmP) + ($$sum17)|0);
    $429 = HEAPU8[$428>>0]|(HEAPU8[$428+1>>0]<<8);
    $430 = HEAP32[$122>>2]|0;
    $431 = ((($430) + (($11*24)|0)|0) + 20|0);
    HEAP8[$431>>0]=$429&255;HEAP8[$431+1>>0]=$429>>8;
    $$sum18 = (($15) + 38)|0;
    $432 = (($pNonZeroCount_tEmP) + ($$sum18)|0);
    $433 = HEAPU8[$432>>0]|(HEAPU8[$432+1>>0]<<8);
    $434 = HEAP32[$122>>2]|0;
    $435 = ((($434) + (($11*24)|0)|0) + 18|0);
    HEAP8[$435>>0]=$433&255;HEAP8[$435+1>>0]=$433>>8;
    $$sum19 = (($15) + 46)|0;
    $436 = (($pNonZeroCount_tEmP) + ($$sum19)|0);
    $437 = HEAPU8[$436>>0]|(HEAPU8[$436+1>>0]<<8);
    $438 = HEAP32[$122>>2]|0;
    $439 = ((($438) + (($11*24)|0)|0) + 22|0);
    HEAP8[$439>>0]=$437&255;HEAP8[$439+1>>0]=$437>>8;
    break;
   }
   else if ((label|0) == 87) {
    STACKTOP = sp;return ($$2|0);
   }
  }
 } while(0);
 $476 = (__ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($pCtx,$uiEosFlag)|0);
 $477 = ($476|0)==(0);
 if (!($477)) {
  $$2 = $476;
  STACKTOP = sp;return ($$2|0);
 }
 $478 = HEAP32[$uiEosFlag>>2]|0;
 $479 = ($478|0)==(0);
 if ($479) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $480 = (($pCtx) + 512232|0);
 $481 = HEAP32[$480>>2]|0;
 $482 = HEAP32[$0>>2]|0;
 $483 = (($482) + 3900|0);
 $484 = HEAP32[$483>>2]|0;
 __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($481,$484);
 $$2 = 0;
 STACKTOP = sp;return ($$2|0);
}
function __ZN7WelsDec23WelsDecodeMbCabacPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj($pCtx,$pNalCur,$uiEosFlag) {
 $pCtx = $pCtx|0;
 $pNalCur = $pNalCur|0;
 $uiEosFlag = $uiEosFlag|0;
 var $$ = 0, $$$1 = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$05 = 0, $pMv = 0, $uiCode = 0, $uiNeighAvail = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $uiCode = sp + 40|0;
 $uiNeighAvail = sp + 4|0;
 $pMv = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 5468|0);
 $3 = (($1) + 4040|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + 3956|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4)|0);
 HEAP8[$7>>0] = 0;
 $8 = (($1) + 3960|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($4<<1)|0);
 HEAP16[$10>>1] = 0;
 $11 = (($1) + 4004|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($4)|0);
 HEAP8[$13>>0] = 0;
 $14 = (($1) + 3940|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($4)|0);
 HEAP8[$16>>0] = 1;
 $17 = (($1) + 3944|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($4)|0);
 HEAP8[$19>>0] = 0;
 __ZN7WelsDec22GetNeighborAvailMbTypeEPNS_16TagNeighborAvailEPNS_10TagDqLayerE($uiNeighAvail,$1);
 $20 = (__ZN7WelsDec18ParseSkipFlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$uiNeighAvail,$uiCode)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = HEAP32[$uiCode>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $98 = (__ZN7WelsDec32WelsDecodeMbCabacPSliceBaseMode0EPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$uiNeighAvail,$uiEosFlag)|0);
  $$0 = $98;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$pMv>>2] = 0;
 $24 = (($1) + 3908|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($4<<1)|0);
 HEAP16[$26>>1] = 256;
 $27 = (($1) + 3964|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + (($4*24)|0)|0);
 HEAP8[$29>>0]=0&255;HEAP8[$29+1>>0]=(0>>8)&255;HEAP8[$29+2>>0]=(0>>16)&255;HEAP8[$29+3>>0]=0>>24;
 $30 = HEAP32[$27>>2]|0;
 $31 = ((($30) + (($4*24)|0)|0) + 4|0);
 HEAP8[$31>>0]=0&255;HEAP8[$31+1>>0]=(0>>8)&255;HEAP8[$31+2>>0]=(0>>16)&255;HEAP8[$31+3>>0]=0>>24;
 $32 = HEAP32[$27>>2]|0;
 $33 = ((($32) + (($4*24)|0)|0) + 8|0);
 HEAP8[$33>>0]=0&255;HEAP8[$33+1>>0]=(0>>8)&255;HEAP8[$33+2>>0]=(0>>16)&255;HEAP8[$33+3>>0]=0>>24;
 $34 = HEAP32[$27>>2]|0;
 $35 = ((($34) + (($4*24)|0)|0) + 12|0);
 HEAP8[$35>>0]=0&255;HEAP8[$35+1>>0]=(0>>8)&255;HEAP8[$35+2>>0]=(0>>16)&255;HEAP8[$35+3>>0]=0>>24;
 $36 = HEAP32[$27>>2]|0;
 $37 = ((($36) + (($4*24)|0)|0) + 16|0);
 HEAP8[$37>>0]=0&255;HEAP8[$37+1>>0]=(0>>8)&255;HEAP8[$37+2>>0]=(0>>16)&255;HEAP8[$37+3>>0]=0>>24;
 $38 = HEAP32[$27>>2]|0;
 $39 = ((($38) + (($4*24)|0)|0) + 20|0);
 HEAP8[$39>>0]=0&255;HEAP8[$39+1>>0]=(0>>8)&255;HEAP8[$39+2>>0]=(0>>16)&255;HEAP8[$39+3>>0]=0>>24;
 $40 = (($1) + 3976|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($4)|0);
 HEAP8[$42>>0] = 0;
 $43 = (($1) + 3932|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + ($4<<4)|0);
 dest=$45+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $46 = (($pCtx) + 512345|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = ($47<<24>>24)==(0);
 $49 = (($pCtx) + 512344|0);
 if ($48) {
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50<<24>>24)==(0);
  if ($51) {
   $52 = HEAP32[$2>>2]|0;
   $53 = ($52|0)==(0|0);
   if ($53) {
    $57 = 1;
   } else {
    $54 = (($52) + 72|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55 ^ 1;
    $57 = $56;
   }
  } else {
   $57 = 1;
  }
 } else {
  $57 = 1;
 }
 HEAP8[$49>>0] = $57;
 __ZN7WelsDec23PredPSkipMvFromNeighborEPNS_10TagDqLayerEPs($1,$pMv);
 $58 = (($1) + 3916|0);
 $59 = (($1) + 3924|0);
 $i$05 = 0;
 while(1) {
  $60 = HEAP32[$pMv>>2]|0;
  $61 = HEAP32[$58>>2]|0;
  $62 = ((($61) + ($4<<6)|0) + ($i$05<<2)|0);
  HEAP8[$62>>0]=$60&255;HEAP8[$62+1>>0]=($60>>8)&255;HEAP8[$62+2>>0]=($60>>16)&255;HEAP8[$62+3>>0]=$60>>24;
  $63 = HEAP32[$59>>2]|0;
  $64 = ((($63) + ($4<<6)|0) + ($i$05<<2)|0);
  HEAP8[$64>>0]=0&255;HEAP8[$64+1>>0]=(0>>8)&255;HEAP8[$64+2>>0]=(0>>16)&255;HEAP8[$64+3>>0]=0>>24;
  $65 = (($i$05) + 1)|0;
  $exitcond = ($65|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i$05 = $65;
  }
 }
 $66 = (($1) + 3868|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67&255;
 $69 = (($1) + 3948|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + ($4)|0);
 HEAP8[$71>>0] = $68;
 $72 = (($1) + 92|0);
 $73 = (($1) + 3952|0);
 $74 = HEAP32[$69>>2]|0;
 $75 = (($74) + ($4)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76 << 24 >> 24;
 $78 = HEAP32[$72>>2]|0;
 $79 = (($78) + 168|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + ($77))|0;
 $82 = ($81|0)<(0);
 if ($82) {
  $85 = 0;
 } else {
  $83 = ($81|0)>(51);
  $$ = $83 ? 51 : $81;
  $85 = $$;
 }
 $84 = (16984 + ($85)|0);
 $86 = HEAP8[$84>>0]|0;
 $87 = HEAP32[$73>>2]|0;
 $88 = (($87) + ($4<<1)|0);
 HEAP8[$88>>0] = $86;
 $89 = HEAP32[$69>>2]|0;
 $90 = (($89) + ($4)|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91 << 24 >> 24;
 $93 = HEAP32[$72>>2]|0;
 $94 = (($93) + 172|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + ($92))|0;
 $97 = ($96|0)<(0);
 if ($97) {
  $101 = 0;
 } else {
  $99 = ($96|0)>(51);
  $$$1 = $99 ? 51 : $96;
  $101 = $$$1;
 }
 $100 = (16984 + ($101)|0);
 $102 = HEAP8[$100>>0]|0;
 $103 = HEAP32[$73>>2]|0;
 $104 = ((($103) + ($4<<1)|0) + 1|0);
 HEAP8[$104>>0] = $102;
 $105 = (($1) + 3884|0);
 HEAP32[$105>>2] = 0;
 $106 = (__ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($pCtx,$uiEosFlag)|0);
 $$0 = $106;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec27WelsCalcDeqCoeffScalingListEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond12 = 0, $exitcond13 = 0, $exitcond14 = 0, $exitcond15 = 0, $i$010 = 0, $i$18 = 0, $q$06 = 0, $x$04 = 0, $y$05 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241924|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 335|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = (($pCtx) + 241928|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 185|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $108 = (($pCtx) + 562526|0);
   HEAP8[$108>>0] = 0;
   STACKTOP = sp;return 0;
  }
 }
 $10 = (($pCtx) + 562526|0);
 HEAP8[$10>>0] = 1;
 $11 = (($pCtx) + 562524|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  $14 = (($pCtx) + 562520|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($pCtx) + 241928|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($15|0)==($19|0);
  if ($20) {
   STACKTOP = sp;return 0;
  }
 }
 $21 = (($pCtx) + 562525|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)==(0);
 $$pre18 = (($pCtx) + 241928|0);
 if ($23) {
  $i$18 = 0;
 } else {
  $i$010 = 0;
  while(1) {
   $24 = HEAP32[$$pre18>>2]|0;
   $25 = ((($24) + ($i$010)|0) + 186|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)==(0);
   do {
    if ($27) {
     $28 = ($i$010|0)<(6);
     if ($28) {
      $29 = ((($24) + ($i$010<<4)|0) + 198|0);
      if ((($i$010|0) == 0) | (($i$010|0) == 3)) {
       $30 = HEAP32[$0>>2]|0;
       $31 = ((($30) + ($i$010<<4)|0) + 348|0);
       dest=$29+0|0; src=$31+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       break;
      } else {
       $32 = (($i$010) + -1)|0;
       $33 = ((($24) + ($32<<4)|0) + 198|0);
       dest=$29+0|0; src=$33+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       break;
      }
     } else {
      $34 = $i$010 & -2;
      $35 = ($34|0)==(6);
      $36 = (($i$010) + -6)|0;
      $37 = ((($24) + ($36<<6)|0) + 294|0);
      if ($35) {
       $38 = HEAP32[$0>>2]|0;
       $39 = ((($38) + ($36<<6)|0) + 444|0);
       dest=$37+0|0; src=$39+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       break;
      } else {
       $40 = (($i$010) + -8)|0;
       $41 = ((($24) + ($40<<6)|0) + 294|0);
       dest=$37+0|0; src=$41+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       break;
      }
     }
    }
   } while(0);
   $42 = (($i$010) + 1)|0;
   $exitcond15 = ($42|0)==(12);
   if ($exitcond15) {
    $i$18 = 0;
    break;
   } else {
    $i$010 = $42;
   }
  }
 }
 while(1) {
  $43 = ((($pCtx) + (($i$18*1664)|0)|0) + 512552|0);
  $44 = ((($pCtx) + ($i$18<<2)|0) + 562472|0);
  HEAP32[$44>>2] = $43;
  $45 = ((($pCtx) + (($i$18*6656)|0)|0) + 522536|0);
  $46 = ((($pCtx) + ($i$18<<2)|0) + 562496|0);
  HEAP32[$46>>2] = $45;
  $q$06 = 0;
  while(1) {
   $x$04 = 0;
   while(1) {
    $47 = HEAP32[$$pre18>>2]|0;
    $48 = (($47) + 185|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $59 = HEAP32[$0>>2]|0;
     $60 = (((($59) + ($i$18<<4)|0) + ($x$04)|0) + 348|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = $x$04 & 7;
     $64 = ((17456 + ($q$06<<4)|0) + ($63<<1)|0);
     $65 = HEAP16[$64>>1]|0;
     $66 = $65&65535;
     $67 = Math_imul($66, $62)|0;
     $69 = $67;
    } else {
     $51 = (((($47) + ($i$18<<4)|0) + ($x$04)|0) + 198|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = $x$04 & 7;
     $55 = ((17456 + ($q$06<<4)|0) + ($54<<1)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $58 = Math_imul($57, $53)|0;
     $69 = $58;
    }
    $68 = $69&65535;
    $70 = HEAP32[$44>>2]|0;
    $71 = ((($70) + ($q$06<<5)|0) + ($x$04<<1)|0);
    HEAP16[$71>>1] = $68;
    $72 = (($x$04) + 1)|0;
    $exitcond = ($72|0)==(16);
    if ($exitcond) {
     break;
    } else {
     $x$04 = $72;
    }
   }
   $73 = (($q$06|0) % 6)&-1;
   $y$05 = 0;
   while(1) {
    $74 = HEAP32[$$pre18>>2]|0;
    $75 = (($74) + 185|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ($76<<24>>24)==(0);
    if ($77) {
     $87 = HEAP32[$0>>2]|0;
     $88 = (((($87) + ($i$18<<6)|0) + ($y$05)|0) + 444|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = $89&255;
     $91 = (($y$05|0) % 8)&-1;
     $92 = (($y$05|0) / 8)&-1;
     $93 = (((16584 + ($73<<6)|0) + ($92<<3)|0) + ($91)|0);
     $94 = HEAP8[$93>>0]|0;
     $95 = $94&255;
     $96 = Math_imul($95, $90)|0;
     $98 = $96;
    } else {
     $78 = (((($74) + ($i$18<<6)|0) + ($y$05)|0) + 294|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79&255;
     $81 = (($y$05|0) % 8)&-1;
     $82 = (($y$05|0) / 8)&-1;
     $83 = (((16584 + ($73<<6)|0) + ($82<<3)|0) + ($81)|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = Math_imul($85, $80)|0;
     $98 = $86;
    }
    $97 = $98&65535;
    $99 = HEAP32[$46>>2]|0;
    $100 = ((($99) + ($q$06<<7)|0) + ($y$05<<1)|0);
    HEAP16[$100>>1] = $97;
    $101 = (($y$05) + 1)|0;
    $exitcond12 = ($101|0)==(64);
    if ($exitcond12) {
     break;
    } else {
     $y$05 = $101;
    }
   }
   $102 = (($q$06) + 1)|0;
   $exitcond13 = ($102|0)==(51);
   if ($exitcond13) {
    break;
   } else {
    $q$06 = $102;
   }
  }
  $103 = (($i$18) + 1)|0;
  $exitcond14 = ($103|0)==(6);
  if ($exitcond14) {
   break;
  } else {
   $i$18 = $103;
  }
 }
 HEAP8[$11>>0] = 1;
 $104 = HEAP32[$$pre18>>2]|0;
 $105 = (($104) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($pCtx) + 562520|0);
 HEAP32[$107>>2] = $106;
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec15WelsDecodeSliceEPNS_21TagWelsDecoderContextEbPNS_10TagNalUnitE($pCtx,$bFirstSliceInLayer,$pNalCur) {
 $pCtx = $pCtx|0;
 $bFirstSliceInLayer = $bFirstSliceInLayer|0;
 $pNalCur = $pNalCur|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_ZN7WelsDec23WelsDecodeMbCabacPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCabacISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj = 0, $_ZN7WelsDec23WelsDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj = 0, $iNextMbXyIndex$1 = 0, $or$cond = 0, $or$cond1 = 0, $pDecMbFunc$0 = 0, $storemerge2 = 0, $uiEosFlag = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $uiEosFlag = sp + 4|0;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 5240|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$uiEosFlag>>2] = 0;
 $8 = (($1) + 3876|0);
 HEAP32[$8>>2] = 0;
 $9 = (($pCtx) + 241928|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 176|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 do {
  if ($13) {
   $29 = (($1) + 2756|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0);
   $_ZN7WelsDec23WelsDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj = $31 ? 8 : 7;
   $pDecMbFunc$0 = $_ZN7WelsDec23WelsDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj;
  } else {
   $14 = (($1) + 3858|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if ($16) {
    $17 = (($1) + 3856|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $20 = (($1) + 3860|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $26 = (($1) + 2756|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==(0);
      $_ZN7WelsDec23WelsDecodeMbCabacPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCabacISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj = $28 ? 6 : 5;
      $pDecMbFunc$0 = $_ZN7WelsDec23WelsDecodeMbCabacPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCabacISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj;
      break;
     }
    }
   }
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,3952,$vararg_buffer);
   $23 = (($pCtx) + 116|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 | 4;
   HEAP32[$23>>2] = $25;
   $$0 = 4;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $32 = (($1) + 92|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 180|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 $37 = (($pCtx) + 317148|0);
 if ($36) {
  HEAP32[$37>>2] = 8;
  $40 = (($pCtx) + 317152|0);
  HEAP32[$40>>2] = 3;
  $41 = (($pCtx) + 317156|0);
  HEAP32[$41>>2] = 4;
 } else {
  HEAP32[$37>>2] = 7;
  $38 = (($pCtx) + 317152|0);
  HEAP32[$38>>2] = 1;
  $39 = (($pCtx) + 317156|0);
  HEAP32[$39>>2] = 2;
 }
 $42 = (($1) + 2756|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($pCtx) + 100|0);
 HEAP32[$44>>2] = $43;
 $45 = (($1) + 3896|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 176|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = ($48<<24>>24)==(0);
 if (!($49)) {
  $50 = (($1) + 64|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($1) + 1152|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($1) + 3881|0);
  $55 = HEAP8[$54>>0]|0;
  __ZN7WelsDec20WelsCabacContextInitEPNS_21TagWelsDecoderContextEhii($pCtx,$55,$53,$51);
  $56 = (($1) + 3884|0);
  HEAP32[$56>>2] = 0;
  $57 = (($pCtx) + 512232|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$0>>2]|0;
  $60 = (($59) + 3900|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (__ZN7WelsDec24InitCabacDecEngineFromBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($58,$61)|0);
  $63 = ($62|0)==(0);
  if (!($63)) {
   $$0 = $62;
   STACKTOP = sp;return ($$0|0);
  }
 }
 (__ZN7WelsDec27WelsCalcDeqCoeffScalingListEPNS_21TagWelsDecoderContextE($pCtx)|0);
 $64 = (($1) + 24|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($1) + 4044|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65|0) % ($67|0))&-1;
 $69 = (($65|0) / ($67|0))&-1;
 $70 = (($1) + 3872|0);
 HEAP32[$70>>2] = -1;
 $71 = $65 << 7;
 $72 = (($1) + 4111|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = (($74) + ($71))|0;
 $76 = (($1) + 4032|0);
 HEAP32[$76>>2] = $68;
 $77 = (($1) + 4036|0);
 HEAP32[$77>>2] = $69;
 $78 = (($1) + 4040|0);
 $79 = (($1) + 3912|0);
 HEAP32[$78>>2] = $65;
 $80 = ($65|0)!=(-1);
 $81 = ($65|0)<($7|0);
 $or$cond1 = $80 & $81;
 if (!($or$cond1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $82 = (($pCtx) + 512344|0);
 $83 = (($1) + 3984|0);
 $storemerge2 = $65;
 while(1) {
  $84 = HEAP32[$79>>2]|0;
  $85 = (($84) + ($storemerge2<<2)|0);
  HEAP32[$85>>2] = $75;
  HEAP8[$82>>0] = 0;
  $86 = (FUNCTION_TABLE_iiii[$pDecMbFunc$0 & 15]($pCtx,$pNalCur,$uiEosFlag)|0);
  $87 = HEAP8[$82>>0]|0;
  $88 = HEAP32[$83>>2]|0;
  $89 = (($88) + ($storemerge2)|0);
  HEAP8[$89>>0] = $87;
  $90 = ($86|0)==(0);
  if (!($90)) {
   $$0 = $86;
   label = 21;
   break;
  }
  $91 = HEAP32[$8>>2]|0;
  $92 = (($91) + 1)|0;
  HEAP32[$8>>2] = $92;
  $93 = HEAP32[$uiEosFlag>>2]|0;
  $94 = ($93|0)==(0);
  if (!($94)) {
   $$0 = 0;
   label = 21;
   break;
  }
  $95 = HEAP32[$32>>2]|0;
  $96 = (($95) + 8|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97>>>0)>(1);
  if ($98) {
   $99 = $storemerge2&65535;
   $100 = (__ZN7WelsDec9FmoNextMbEPNS_6TagFmoEs($3,$99)|0);
   $101 = $100 << 16 >> 16;
   $iNextMbXyIndex$1 = $101;
  } else {
   $102 = (($storemerge2) + 1)|0;
   $iNextMbXyIndex$1 = $102;
  }
  $103 = HEAP32[$66>>2]|0;
  $104 = (($iNextMbXyIndex$1|0) % ($103|0))&-1;
  $105 = (($iNextMbXyIndex$1|0) / ($103|0))&-1;
  HEAP32[$76>>2] = $104;
  HEAP32[$77>>2] = $105;
  HEAP32[$78>>2] = $iNextMbXyIndex$1;
  $106 = ($iNextMbXyIndex$1|0)!=(-1);
  $107 = ($iNextMbXyIndex$1|0)<($7|0);
  $or$cond = $106 & $107;
  if ($or$cond) {
   $storemerge2 = $iNextMbXyIndex$1;
  } else {
   $$0 = 0;
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec23WelsDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj($pCtx,$pNalCur,$uiEosFlag) {
 $pCtx = $pCtx|0;
 $pNalCur = $pNalCur|0;
 $uiEosFlag = $uiEosFlag|0;
 var $$ = 0, $$$1 = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iBaseModeFlag$0 = 0, $iMv = 0, $uiCode = 0, $vararg_buffer1 = 0;
 var $vararg_ptr4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp;
 $uiCode = sp + 16|0;
 $iMv = sp + 12|0;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 3900|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCtx) + 5468|0);
 $5 = (($1) + 4040|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + 3964|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($6*24)|0)|0);
 $10 = (($1) + 3940|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($6)|0);
 HEAP8[$12>>0] = 1;
 $13 = (($1) + 3944|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($6)|0);
 HEAP8[$15>>0] = 0;
 $16 = (($1) + 3872|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(-1);
 if ($18) {
  $19 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($3,$uiCode)|0);
  $20 = ($19|0)==(0);
  if (!($20)) {
   $$0 = $19;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = HEAP32[$uiCode>>2]|0;
  HEAP32[$16>>2] = $21;
  $22 = ($21|0)==(-1);
  if ($22) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $24 = $21;
  }
 } else {
  $24 = $17;
 }
 $23 = (($24) + -1)|0;
 HEAP32[$16>>2] = $23;
 $25 = ($24|0)==(0);
 do {
  if ($25) {
   $140 = (($1) + 3856|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = ($141<<24>>24)==(0);
   if ($142) {
    $174 = (($1) + 3857|0);
    $175 = HEAP8[$174>>0]|0;
    $176 = $175&255;
    $iBaseModeFlag$0 = $176;
   } else {
    $143 = (($3) + 20|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $144 >>> 31;
    $146 = (($3) + 4|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = HEAP32[$3>>2]|0;
    $149 = $148;
    $150 = (($3) + 16|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $144 << 1;
    HEAP32[$143>>2] = $152;
    $153 = (($3) + 24|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (($154) + 1)|0;
    HEAP32[$153>>2] = $155;
    $156 = ($154|0)>(-1);
    do {
     if ($156) {
      $157 = $151;
      $158 = $147;
      $159 = (($157) - ($149))|0;
      $160 = (($158) + 1)|0;
      $161 = (($160) - ($149))|0;
      $162 = ($159|0)>($161|0);
      if ($162) {
       $$0 = 11;
       STACKTOP = sp;return ($$0|0);
      } else {
       $163 = HEAP8[$151>>0]|0;
       $164 = $163&255;
       $165 = $164 << 8;
       $166 = (($151) + 1|0);
       $167 = HEAP8[$166>>0]|0;
       $168 = $167&255;
       $169 = $165 | $168;
       $170 = $169 << $155;
       $171 = $170 | $152;
       HEAP32[$143>>2] = $171;
       $172 = (($154) + -15)|0;
       HEAP32[$153>>2] = $172;
       $173 = (($151) + 2|0);
       HEAP32[$150>>2] = $173;
       break;
      }
     }
    } while(0);
    HEAP32[$uiCode>>2] = $145;
    $iBaseModeFlag$0 = $145;
   }
   $177 = ($iBaseModeFlag$0|0)==(0);
   if ($177) {
    $178 = (__ZN7WelsDec29WelsActualDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextE($pCtx)|0);
    $179 = ($178|0)==(0);
    if ($179) {
     break;
    } else {
     $$0 = $178;
    }
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$vararg_buffer1>>2] = $iBaseModeFlag$0;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,4024,$vararg_buffer1);
    $$0 = 328742;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $26 = (($1) + 3908|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($6<<1)|0);
   HEAP16[$28>>1] = 256;
   $29 = (($1) + 3976|0);
   ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP32[$9+16>>2]=0|0;HEAP32[$9+20>>2]=0|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($6)|0);
   HEAP8[$31>>0] = 0;
   $32 = (($1) + 3932|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($6<<4)|0);
   dest=$34+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $35 = (($pCtx) + 512345|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)==(0);
   $38 = (($pCtx) + 512344|0);
   if ($37) {
    $39 = HEAP8[$38>>0]|0;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $41 = HEAP32[$4>>2]|0;
     $42 = ($41|0)==(0|0);
     if ($42) {
      $46 = 1;
     } else {
      $43 = (($41) + 72|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = $44 ^ 1;
      $46 = $45;
     }
    } else {
     $46 = 1;
    }
   } else {
    $46 = 1;
   }
   HEAP8[$38>>0] = $46;
   __ZN7WelsDec23PredPSkipMvFromNeighborEPNS_10TagDqLayerEPs($1,$iMv);
   $47 = (($1) + 3916|0);
   $48 = HEAP32[$iMv>>2]|0;
   $49 = HEAP32[$47>>2]|0;
   $50 = (($49) + ($6<<6)|0);
   HEAP32[$50>>2] = $48;
   $51 = HEAP32[$iMv>>2]|0;
   $52 = HEAP32[$47>>2]|0;
   $53 = ((($52) + ($6<<6)|0) + 4|0);
   HEAP32[$53>>2] = $51;
   $54 = HEAP32[$iMv>>2]|0;
   $55 = HEAP32[$47>>2]|0;
   $56 = ((($55) + ($6<<6)|0) + 8|0);
   HEAP32[$56>>2] = $54;
   $57 = HEAP32[$iMv>>2]|0;
   $58 = HEAP32[$47>>2]|0;
   $59 = ((($58) + ($6<<6)|0) + 12|0);
   HEAP32[$59>>2] = $57;
   $60 = HEAP32[$iMv>>2]|0;
   $61 = HEAP32[$47>>2]|0;
   $62 = ((($61) + ($6<<6)|0) + 16|0);
   HEAP32[$62>>2] = $60;
   $63 = HEAP32[$iMv>>2]|0;
   $64 = HEAP32[$47>>2]|0;
   $65 = ((($64) + ($6<<6)|0) + 20|0);
   HEAP32[$65>>2] = $63;
   $66 = HEAP32[$iMv>>2]|0;
   $67 = HEAP32[$47>>2]|0;
   $68 = ((($67) + ($6<<6)|0) + 24|0);
   HEAP32[$68>>2] = $66;
   $69 = HEAP32[$iMv>>2]|0;
   $70 = HEAP32[$47>>2]|0;
   $71 = ((($70) + ($6<<6)|0) + 28|0);
   HEAP32[$71>>2] = $69;
   $72 = HEAP32[$iMv>>2]|0;
   $73 = HEAP32[$47>>2]|0;
   $74 = ((($73) + ($6<<6)|0) + 32|0);
   HEAP32[$74>>2] = $72;
   $75 = HEAP32[$iMv>>2]|0;
   $76 = HEAP32[$47>>2]|0;
   $77 = ((($76) + ($6<<6)|0) + 36|0);
   HEAP32[$77>>2] = $75;
   $78 = HEAP32[$iMv>>2]|0;
   $79 = HEAP32[$47>>2]|0;
   $80 = ((($79) + ($6<<6)|0) + 40|0);
   HEAP32[$80>>2] = $78;
   $81 = HEAP32[$iMv>>2]|0;
   $82 = HEAP32[$47>>2]|0;
   $83 = ((($82) + ($6<<6)|0) + 44|0);
   HEAP32[$83>>2] = $81;
   $84 = HEAP32[$iMv>>2]|0;
   $85 = HEAP32[$47>>2]|0;
   $86 = ((($85) + ($6<<6)|0) + 48|0);
   HEAP32[$86>>2] = $84;
   $87 = HEAP32[$iMv>>2]|0;
   $88 = HEAP32[$47>>2]|0;
   $89 = ((($88) + ($6<<6)|0) + 52|0);
   HEAP32[$89>>2] = $87;
   $90 = HEAP32[$iMv>>2]|0;
   $91 = HEAP32[$47>>2]|0;
   $92 = ((($91) + ($6<<6)|0) + 56|0);
   HEAP32[$92>>2] = $90;
   $93 = HEAP32[$iMv>>2]|0;
   $94 = HEAP32[$47>>2]|0;
   $95 = ((($94) + ($6<<6)|0) + 60|0);
   HEAP32[$95>>2] = $93;
   $96 = (($1) + 3861|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = ($97<<24>>24)==(0);
   if ($98) {
    label = 12;
   } else {
    $99 = (($pNalCur) + 16|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = ($100<<24>>24)==(0);
    if ($101) {
     $102 = (($pNalCur) + 15|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(0);
     if ($104) {
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $105 = (($1) + 3868|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106&255;
    $108 = (($1) + 3948|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + ($6)|0);
    HEAP8[$110>>0] = $107;
    $111 = (($1) + 92|0);
    $112 = (($1) + 3952|0);
    $113 = HEAP32[$108>>2]|0;
    $114 = (($113) + ($6)|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115 << 24 >> 24;
    $117 = HEAP32[$111>>2]|0;
    $118 = (($117) + 168|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) + ($116))|0;
    $121 = ($120|0)<(0);
    if ($121) {
     $124 = 0;
    } else {
     $122 = ($120|0)>(51);
     $$ = $122 ? 51 : $120;
     $124 = $$;
    }
    $123 = (16984 + ($124)|0);
    $125 = HEAP8[$123>>0]|0;
    $126 = HEAP32[$112>>2]|0;
    $127 = (($126) + ($6<<1)|0);
    HEAP8[$127>>0] = $125;
    $128 = HEAP32[$108>>2]|0;
    $129 = (($128) + ($6)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130 << 24 >> 24;
    $132 = HEAP32[$111>>2]|0;
    $133 = (($132) + 172|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($134) + ($131))|0;
    $136 = ($135|0)<(0);
    if ($136) {
     $208 = 0;
    } else {
     $206 = ($135|0)>(51);
     $$$1 = $206 ? 51 : $135;
     $208 = $$$1;
    }
    $207 = (16984 + ($208)|0);
    $209 = HEAP8[$207>>0]|0;
    $210 = HEAP32[$112>>2]|0;
    $211 = ((($210) + ($6<<1)|0) + 1|0);
    HEAP8[$211>>0] = $209;
   }
   $137 = (($1) + 3956|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($138) + ($6)|0);
   HEAP8[$139>>0] = 0;
  }
 } while(0);
 $180 = (($3) + 16|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = HEAP32[$3>>2]|0;
 $183 = $181;
 $184 = $182;
 $185 = (($183) - ($184))|0;
 $186 = $185 << 3;
 $187 = (($3) + 24|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = (($188) + -16)|0;
 $190 = (($189) + ($186))|0;
 $191 = (($3) + 8|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = (($192) + -1)|0;
 $194 = ($190|0)==($193|0);
 if ($194) {
  $195 = HEAP32[$16>>2]|0;
  $196 = ($195|0)<(1);
  if ($196) {
   HEAP32[$uiEosFlag>>2] = 1;
   $$pre = HEAP32[$191>>2]|0;
   $198 = $$pre;
  } else {
   $198 = $192;
  }
 } else {
  $198 = $192;
 }
 $197 = (($198) + -1)|0;
 $199 = ($190|0)>($197|0);
 if (!($199)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $200 = ($190|0)<(0);
 $201 = $200 << 31 >> 31;
 $202 = $vararg_buffer1;
 $203 = $202;
 HEAP32[$203>>2] = $190;
 $204 = (($202) + 4)|0;
 $205 = $204;
 HEAP32[$205>>2] = $201;
 $vararg_ptr4 = (($vararg_buffer1) + 8|0);
 HEAP32[$vararg_ptr4>>2] = $198;
 __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,4088,$vararg_buffer1);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec23WelsDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj($pCtx,$pNalCur,$uiEosFlag) {
 $pCtx = $pCtx|0;
 $pNalCur = $pNalCur|0;
 $uiEosFlag = $uiEosFlag|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $iBaseModeFlag$0 = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 3900|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 3856|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $38 = (($1) + 3857|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $iBaseModeFlag$0 = $40;
  } else {
   $7 = (($3) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 >>> 31;
   $10 = (($3) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$3>>2]|0;
   $13 = $12;
   $14 = (($3) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $8 << 1;
   HEAP32[$7>>2] = $16;
   $17 = (($3) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 1)|0;
   HEAP32[$17>>2] = $19;
   $20 = ($18|0)>(-1);
   if ($20) {
    $21 = $15;
    $22 = $11;
    $23 = (($21) - ($13))|0;
    $24 = (($22) + 1)|0;
    $25 = (($24) - ($13))|0;
    $26 = ($23|0)>($25|0);
    if ($26) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $27 = HEAP8[$15>>0]|0;
     $28 = $27&255;
     $29 = $28 << 8;
     $30 = (($15) + 1|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $29 | $32;
     $34 = $33 << $19;
     $35 = $34 | $16;
     HEAP32[$7>>2] = $35;
     $36 = (($18) + -15)|0;
     HEAP32[$17>>2] = $36;
     $37 = (($15) + 2|0);
     HEAP32[$14>>2] = $37;
     $iBaseModeFlag$0 = $9;
     break;
    }
   } else {
    $iBaseModeFlag$0 = $9;
   }
  }
 } while(0);
 $41 = ($iBaseModeFlag$0|0)==(0);
 if (!($41)) {
  HEAP32[$vararg_buffer1>>2] = $iBaseModeFlag$0;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,4024,$vararg_buffer1);
  $$0 = 328742;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = (__ZN7WelsDec29WelsActualDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextE($pCtx)|0);
 $43 = ($42|0)==(0);
 if (!($43)) {
  $$0 = $42;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = (($3) + 16|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$3>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = $49 << 3;
 $51 = (($3) + 24|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + -16)|0;
 $54 = (($53) + ($50))|0;
 $55 = (($3) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + -1)|0;
 $58 = ($54|0)==($57|0);
 if ($58) {
  $59 = (($1) + 3872|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)<(1);
  if ($61) {
   HEAP32[$uiEosFlag>>2] = 1;
   $$pre = HEAP32[$55>>2]|0;
   $63 = $$pre;
  } else {
   $63 = $56;
  }
 } else {
  $63 = $56;
 }
 $62 = (($63) + -1)|0;
 $64 = ($54|0)>($62|0);
 if (!($64)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $65 = ($54|0)<(0);
 $66 = $65 << 31 >> 31;
 $67 = $vararg_buffer1;
 $68 = $67;
 HEAP32[$68>>2] = $54;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = $66;
 $vararg_ptr4 = (($vararg_buffer1) + 8|0);
 HEAP32[$vararg_ptr4>>2] = $63;
 __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,4088,$vararg_buffer1);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec29WelsActualDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$1 = 0, $$37 = 0, $$37$1 = 0, $$38 = 0, $$38$1 = 0, $$off14 = 0, $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert87 = 0, $$phi$trans$insert91 = 0, $$pre = 0, $$pre85 = 0, $$pre86 = 0, $$pre88 = 0, $$pre90 = 0, $$pre92 = 0, $$sink = 0, $$sink$in = 0, $$sum = 0, $$sum100 = 0;
 var $$sum101 = 0, $$sum102 = 0, $$sum103 = 0, $$sum104 = 0, $$sum105 = 0, $$sum106 = 0, $$sum107 = 0, $$sum108 = 0, $$sum109 = 0, $$sum110 = 0, $$sum111 = 0, $$sum112 = 0, $$sum113 = 0, $$sum114 = 0, $$sum115 = 0, $$sum116 = 0, $$sum117 = 0, $$sum118 = 0, $$sum119 = 0, $$sum120 = 0;
 var $$sum121 = 0, $$sum122 = 0, $$sum123 = 0, $$sum124 = 0, $$sum125 = 0, $$sum126 = 0, $$sum127 = 0, $$sum128 = 0, $$sum129 = 0, $$sum130 = 0, $$sum131 = 0, $$sum132 = 0, $$sum133 = 0, $$sum134 = 0, $$sum135 = 0, $$sum136 = 0, $$sum137 = 0, $$sum138 = 0, $$sum139 = 0, $$sum140 = 0;
 var $$sum141 = 0, $$sum142 = 0, $$sum143 = 0, $$sum144 = 0, $$sum145 = 0, $$sum146 = 0, $$sum147 = 0, $$sum148 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0;
 var $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum93 = 0, $$sum94 = 0, $$sum95 = 0, $$sum96 = 0, $$sum97 = 0, $$sum98 = 0, $$sum99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$252 = 0, $i$349 = 0, $i$446 = 0, $iId4x4$063 = 0, $iId4x4$156 = 0, $iId4x4$244 = 0, $iId8x8$066 = 0, $iId8x8$159 = 0, $iIndex10$057 = 0, $iIndex11$045 = 0, $iIndex9$064 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $pIntraPredMode_tEmP = 0, $pNonZeroCount_tEmP = 0, $sNeighAvail = 0, $scevgep = 0, $scevgep$sum = 0, $scevgep83 = 0, $scevgep83$sum = 0, $uiCbpC$1 = 0, $uiCbpC$1$off = 0, $uiCbpL$1 = 0, $uiCbpL$1$in = 0, $uiCode = 0, $uiCodeNum$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $uiCodeNum$i = sp + 40|0;
 $sNeighAvail = sp + 4|0;
 $uiCode = sp;
 $pNonZeroCount_tEmP = sp + 107|0;
 $pIntraPredMode_tEmP = sp + 44|0;
 $0 = (($pCtx) + 5864|0);
 $1 = (($pCtx) + 241932|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 3900|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 3866|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($2) + 3867|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (($2) + 4032|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 4036|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($2) + 4040|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + 3964|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + (($16*24)|0)|0);
 $20 = (($pNonZeroCount_tEmP) + 15|0);
 $21 = $20;
 $22 = $21 & 15;
 $23 = $22 ^ 15;
 $24 = (($pNonZeroCount_tEmP) + ($23)|0);
 __ZN7WelsDec22GetNeighborAvailMbTypeEPNS_16TagNeighborAvailEPNS_10TagDqLayerE($sNeighAvail,$2);
 $25 = (($2) + 3976|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($16)|0);
 HEAP8[$27>>0] = 0;
 $28 = (($2) + 3861|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = (($2) + 3972|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($16)|0);
 HEAP8[$32>>0] = $29;
 $33 = (($2) + 3940|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($16)|0);
 HEAP8[$35>>0] = 1;
 $36 = (($2) + 3944|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + ($16)|0);
 HEAP8[$38>>0] = 0;
 $39 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($4,$uiCode)|0);
 $40 = ($39|0)==(0);
 if (!($40)) {
  $$1 = $39;
  STACKTOP = sp;return ($$1|0);
 }
 $41 = HEAP32[$uiCode>>2]|0;
 $42 = ($41>>>0)>(25);
 if ($42) {
  $$1 = 1035;
  STACKTOP = sp;return ($$1|0);
 }
 $43 = (($pCtx) + 241924|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 318|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ($46<<24>>24)==(0);
 L7: do {
  if ($47) {
   switch ($41|0) {
   case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24:  {
    $$1 = 1035;
    break;
   }
   case 25:  {
    label = 6;
    break L7;
    break;
   }
   case 0:  {
    label = 7;
    break L7;
    break;
   }
   default: {
    label = 23;
    break L7;
   }
   }
   STACKTOP = sp;return ($$1|0);
  } else {
   if ((($41|0) == 25)) {
    label = 6;
   } else if ((($41|0) == 0)) {
    label = 7;
   } else {
    label = 23;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $48 = (($2) + 4100|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 36|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = Math_imul($51, $14)|0;
  $55 = (($54) + ($12))|0;
  $56 = $55 << 4;
  $57 = Math_imul($53, $14)|0;
  $58 = (($57) + ($12))|0;
  $59 = (($49) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + ($56)|0);
  $62 = (($49) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($49) + 24|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($4) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (0 - ($67))|0;
  $69 = $68 >> 3;
  $70 = (($2) + 3908|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($16<<1)|0);
  HEAP16[$72>>1] = 512;
  $73 = (($4) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (-2 - ($69))|0;
  $76 = (($74) + ($75)|0);
  HEAP32[$73>>2] = $76;
  $77 = (254 - ($69))|0;
  dest=$61+0|0; src=$76+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum93 = (($56) + ($51))|0;
  $78 = (($60) + ($$sum93)|0);
  $$sum94 = (($75) + 16)|0;
  $79 = (($74) + ($$sum94)|0);
  dest=$78+0|0; src=$79+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum95 = (($$sum93) + ($51))|0;
  $80 = (($60) + ($$sum95)|0);
  $$sum96 = (($75) + 32)|0;
  $81 = (($74) + ($$sum96)|0);
  dest=$80+0|0; src=$81+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum97 = (($$sum95) + ($51))|0;
  $82 = (($60) + ($$sum97)|0);
  $$sum98 = (($75) + 48)|0;
  $83 = (($74) + ($$sum98)|0);
  dest=$82+0|0; src=$83+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum99 = (($$sum97) + ($51))|0;
  $84 = (($60) + ($$sum99)|0);
  $$sum100 = (($75) + 64)|0;
  $85 = (($74) + ($$sum100)|0);
  dest=$84+0|0; src=$85+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum101 = (($$sum99) + ($51))|0;
  $86 = (($60) + ($$sum101)|0);
  $$sum102 = (($75) + 80)|0;
  $87 = (($74) + ($$sum102)|0);
  dest=$86+0|0; src=$87+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum103 = (($$sum101) + ($51))|0;
  $88 = (($60) + ($$sum103)|0);
  $$sum104 = (($75) + 96)|0;
  $89 = (($74) + ($$sum104)|0);
  dest=$88+0|0; src=$89+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum105 = (($$sum103) + ($51))|0;
  $90 = (($60) + ($$sum105)|0);
  $$sum106 = (($75) + 112)|0;
  $91 = (($74) + ($$sum106)|0);
  dest=$90+0|0; src=$91+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum107 = (($$sum105) + ($51))|0;
  $92 = (($60) + ($$sum107)|0);
  $$sum108 = (($75) + 128)|0;
  $93 = (($74) + ($$sum108)|0);
  dest=$92+0|0; src=$93+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum109 = (($$sum107) + ($51))|0;
  $94 = (($60) + ($$sum109)|0);
  $$sum110 = (($75) + 144)|0;
  $95 = (($74) + ($$sum110)|0);
  dest=$94+0|0; src=$95+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum111 = (($$sum109) + ($51))|0;
  $96 = (($60) + ($$sum111)|0);
  $$sum112 = (($75) + 160)|0;
  $97 = (($74) + ($$sum112)|0);
  dest=$96+0|0; src=$97+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum113 = (($$sum111) + ($51))|0;
  $98 = (($60) + ($$sum113)|0);
  $$sum114 = (($75) + 176)|0;
  $99 = (($74) + ($$sum114)|0);
  dest=$98+0|0; src=$99+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum115 = (($$sum113) + ($51))|0;
  $100 = (($60) + ($$sum115)|0);
  $$sum116 = (($75) + 192)|0;
  $101 = (($74) + ($$sum116)|0);
  dest=$100+0|0; src=$101+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum117 = (($$sum115) + ($51))|0;
  $102 = (($60) + ($$sum117)|0);
  $$sum118 = (($75) + 208)|0;
  $103 = (($74) + ($$sum118)|0);
  dest=$102+0|0; src=$103+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum119 = (($$sum117) + ($51))|0;
  $104 = (($60) + ($$sum119)|0);
  $$sum120 = (($75) + 224)|0;
  $105 = (($74) + ($$sum120)|0);
  dest=$104+0|0; src=$105+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum121 = (($$sum119) + ($51))|0;
  $106 = (($60) + ($$sum121)|0);
  $$sum122 = (($75) + 240)|0;
  $107 = (($74) + ($$sum122)|0);
  dest=$106+0|0; src=$107+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $108 = $58 << 3;
  $109 = (($63) + ($108)|0);
  $110 = (($65) + ($108)|0);
  $scevgep83 = (($74) + ($77)|0);
  $111 = (318 - ($69))|0;
  $112 = $scevgep83;
  $113 = $112;
  $114 = HEAPU8[$113>>0]|(HEAPU8[$113+1>>0]<<8)|(HEAPU8[$113+2>>0]<<16)|(HEAPU8[$113+3>>0]<<24);
  $115 = (($112) + 4)|0;
  $116 = $115;
  $117 = HEAPU8[$116>>0]|(HEAPU8[$116+1>>0]<<8)|(HEAPU8[$116+2>>0]<<16)|(HEAPU8[$116+3>>0]<<24);
  $118 = $109;
  $119 = $118;
  HEAP8[$119>>0]=$114&255;HEAP8[$119+1>>0]=($114>>8)&255;HEAP8[$119+2>>0]=($114>>16)&255;HEAP8[$119+3>>0]=$114>>24;
  $120 = (($118) + 4)|0;
  $121 = $120;
  HEAP8[$121>>0]=$117&255;HEAP8[$121+1>>0]=($117>>8)&255;HEAP8[$121+2>>0]=($117>>16)&255;HEAP8[$121+3>>0]=$117>>24;
  $$sum123 = (($108) + ($53))|0;
  $122 = (($63) + ($$sum123)|0);
  $scevgep83$sum = (($77) + 8)|0;
  $123 = (($74) + ($scevgep83$sum)|0);
  $124 = $123;
  $125 = $124;
  $126 = HEAPU8[$125>>0]|(HEAPU8[$125+1>>0]<<8)|(HEAPU8[$125+2>>0]<<16)|(HEAPU8[$125+3>>0]<<24);
  $127 = (($124) + 4)|0;
  $128 = $127;
  $129 = HEAPU8[$128>>0]|(HEAPU8[$128+1>>0]<<8)|(HEAPU8[$128+2>>0]<<16)|(HEAPU8[$128+3>>0]<<24);
  $130 = $122;
  $131 = $130;
  HEAP8[$131>>0]=$126&255;HEAP8[$131+1>>0]=($126>>8)&255;HEAP8[$131+2>>0]=($126>>16)&255;HEAP8[$131+3>>0]=$126>>24;
  $132 = (($130) + 4)|0;
  $133 = $132;
  HEAP8[$133>>0]=$129&255;HEAP8[$133+1>>0]=($129>>8)&255;HEAP8[$133+2>>0]=($129>>16)&255;HEAP8[$133+3>>0]=$129>>24;
  $$sum124 = (($$sum123) + ($53))|0;
  $134 = (($63) + ($$sum124)|0);
  $$sum125 = (($77) + 16)|0;
  $135 = (($74) + ($$sum125)|0);
  $136 = $135;
  $137 = $136;
  $138 = HEAPU8[$137>>0]|(HEAPU8[$137+1>>0]<<8)|(HEAPU8[$137+2>>0]<<16)|(HEAPU8[$137+3>>0]<<24);
  $139 = (($136) + 4)|0;
  $140 = $139;
  $141 = HEAPU8[$140>>0]|(HEAPU8[$140+1>>0]<<8)|(HEAPU8[$140+2>>0]<<16)|(HEAPU8[$140+3>>0]<<24);
  $142 = $134;
  $143 = $142;
  HEAP8[$143>>0]=$138&255;HEAP8[$143+1>>0]=($138>>8)&255;HEAP8[$143+2>>0]=($138>>16)&255;HEAP8[$143+3>>0]=$138>>24;
  $144 = (($142) + 4)|0;
  $145 = $144;
  HEAP8[$145>>0]=$141&255;HEAP8[$145+1>>0]=($141>>8)&255;HEAP8[$145+2>>0]=($141>>16)&255;HEAP8[$145+3>>0]=$141>>24;
  $$sum126 = (($$sum124) + ($53))|0;
  $146 = (($63) + ($$sum126)|0);
  $$sum127 = (($77) + 24)|0;
  $147 = (($74) + ($$sum127)|0);
  $148 = $147;
  $149 = $148;
  $150 = HEAPU8[$149>>0]|(HEAPU8[$149+1>>0]<<8)|(HEAPU8[$149+2>>0]<<16)|(HEAPU8[$149+3>>0]<<24);
  $151 = (($148) + 4)|0;
  $152 = $151;
  $153 = HEAPU8[$152>>0]|(HEAPU8[$152+1>>0]<<8)|(HEAPU8[$152+2>>0]<<16)|(HEAPU8[$152+3>>0]<<24);
  $154 = $146;
  $155 = $154;
  HEAP8[$155>>0]=$150&255;HEAP8[$155+1>>0]=($150>>8)&255;HEAP8[$155+2>>0]=($150>>16)&255;HEAP8[$155+3>>0]=$150>>24;
  $156 = (($154) + 4)|0;
  $157 = $156;
  HEAP8[$157>>0]=$153&255;HEAP8[$157+1>>0]=($153>>8)&255;HEAP8[$157+2>>0]=($153>>16)&255;HEAP8[$157+3>>0]=$153>>24;
  $$sum128 = (($$sum126) + ($53))|0;
  $158 = (($63) + ($$sum128)|0);
  $$sum129 = (($77) + 32)|0;
  $159 = (($74) + ($$sum129)|0);
  $160 = $159;
  $161 = $160;
  $162 = HEAPU8[$161>>0]|(HEAPU8[$161+1>>0]<<8)|(HEAPU8[$161+2>>0]<<16)|(HEAPU8[$161+3>>0]<<24);
  $163 = (($160) + 4)|0;
  $164 = $163;
  $165 = HEAPU8[$164>>0]|(HEAPU8[$164+1>>0]<<8)|(HEAPU8[$164+2>>0]<<16)|(HEAPU8[$164+3>>0]<<24);
  $166 = $158;
  $167 = $166;
  HEAP8[$167>>0]=$162&255;HEAP8[$167+1>>0]=($162>>8)&255;HEAP8[$167+2>>0]=($162>>16)&255;HEAP8[$167+3>>0]=$162>>24;
  $168 = (($166) + 4)|0;
  $169 = $168;
  HEAP8[$169>>0]=$165&255;HEAP8[$169+1>>0]=($165>>8)&255;HEAP8[$169+2>>0]=($165>>16)&255;HEAP8[$169+3>>0]=$165>>24;
  $$sum130 = (($$sum128) + ($53))|0;
  $170 = (($63) + ($$sum130)|0);
  $$sum131 = (($77) + 40)|0;
  $171 = (($74) + ($$sum131)|0);
  $172 = $171;
  $173 = $172;
  $174 = HEAPU8[$173>>0]|(HEAPU8[$173+1>>0]<<8)|(HEAPU8[$173+2>>0]<<16)|(HEAPU8[$173+3>>0]<<24);
  $175 = (($172) + 4)|0;
  $176 = $175;
  $177 = HEAPU8[$176>>0]|(HEAPU8[$176+1>>0]<<8)|(HEAPU8[$176+2>>0]<<16)|(HEAPU8[$176+3>>0]<<24);
  $178 = $170;
  $179 = $178;
  HEAP8[$179>>0]=$174&255;HEAP8[$179+1>>0]=($174>>8)&255;HEAP8[$179+2>>0]=($174>>16)&255;HEAP8[$179+3>>0]=$174>>24;
  $180 = (($178) + 4)|0;
  $181 = $180;
  HEAP8[$181>>0]=$177&255;HEAP8[$181+1>>0]=($177>>8)&255;HEAP8[$181+2>>0]=($177>>16)&255;HEAP8[$181+3>>0]=$177>>24;
  $$sum132 = (($$sum130) + ($53))|0;
  $182 = (($63) + ($$sum132)|0);
  $$sum133 = (($77) + 48)|0;
  $183 = (($74) + ($$sum133)|0);
  $184 = $183;
  $185 = $184;
  $186 = HEAPU8[$185>>0]|(HEAPU8[$185+1>>0]<<8)|(HEAPU8[$185+2>>0]<<16)|(HEAPU8[$185+3>>0]<<24);
  $187 = (($184) + 4)|0;
  $188 = $187;
  $189 = HEAPU8[$188>>0]|(HEAPU8[$188+1>>0]<<8)|(HEAPU8[$188+2>>0]<<16)|(HEAPU8[$188+3>>0]<<24);
  $190 = $182;
  $191 = $190;
  HEAP8[$191>>0]=$186&255;HEAP8[$191+1>>0]=($186>>8)&255;HEAP8[$191+2>>0]=($186>>16)&255;HEAP8[$191+3>>0]=$186>>24;
  $192 = (($190) + 4)|0;
  $193 = $192;
  HEAP8[$193>>0]=$189&255;HEAP8[$193+1>>0]=($189>>8)&255;HEAP8[$193+2>>0]=($189>>16)&255;HEAP8[$193+3>>0]=$189>>24;
  $$sum134 = (($$sum132) + ($53))|0;
  $194 = (($63) + ($$sum134)|0);
  $$sum135 = (($77) + 56)|0;
  $195 = (($74) + ($$sum135)|0);
  $196 = $195;
  $197 = $196;
  $198 = HEAPU8[$197>>0]|(HEAPU8[$197+1>>0]<<8)|(HEAPU8[$197+2>>0]<<16)|(HEAPU8[$197+3>>0]<<24);
  $199 = (($196) + 4)|0;
  $200 = $199;
  $201 = HEAPU8[$200>>0]|(HEAPU8[$200+1>>0]<<8)|(HEAPU8[$200+2>>0]<<16)|(HEAPU8[$200+3>>0]<<24);
  $202 = $194;
  $203 = $202;
  HEAP8[$203>>0]=$198&255;HEAP8[$203+1>>0]=($198>>8)&255;HEAP8[$203+2>>0]=($198>>16)&255;HEAP8[$203+3>>0]=$198>>24;
  $204 = (($202) + 4)|0;
  $205 = $204;
  HEAP8[$205>>0]=$201&255;HEAP8[$205+1>>0]=($201>>8)&255;HEAP8[$205+2>>0]=($201>>16)&255;HEAP8[$205+3>>0]=$201>>24;
  $scevgep = (($74) + ($111)|0);
  $206 = $scevgep;
  $207 = $206;
  $208 = HEAPU8[$207>>0]|(HEAPU8[$207+1>>0]<<8)|(HEAPU8[$207+2>>0]<<16)|(HEAPU8[$207+3>>0]<<24);
  $209 = (($206) + 4)|0;
  $210 = $209;
  $211 = HEAPU8[$210>>0]|(HEAPU8[$210+1>>0]<<8)|(HEAPU8[$210+2>>0]<<16)|(HEAPU8[$210+3>>0]<<24);
  $212 = $110;
  $213 = $212;
  HEAP8[$213>>0]=$208&255;HEAP8[$213+1>>0]=($208>>8)&255;HEAP8[$213+2>>0]=($208>>16)&255;HEAP8[$213+3>>0]=$208>>24;
  $214 = (($212) + 4)|0;
  $215 = $214;
  HEAP8[$215>>0]=$211&255;HEAP8[$215+1>>0]=($211>>8)&255;HEAP8[$215+2>>0]=($211>>16)&255;HEAP8[$215+3>>0]=$211>>24;
  $$sum136 = (($108) + ($53))|0;
  $216 = (($65) + ($$sum136)|0);
  $scevgep$sum = (($111) + 8)|0;
  $217 = (($74) + ($scevgep$sum)|0);
  $218 = $217;
  $219 = $218;
  $220 = HEAPU8[$219>>0]|(HEAPU8[$219+1>>0]<<8)|(HEAPU8[$219+2>>0]<<16)|(HEAPU8[$219+3>>0]<<24);
  $221 = (($218) + 4)|0;
  $222 = $221;
  $223 = HEAPU8[$222>>0]|(HEAPU8[$222+1>>0]<<8)|(HEAPU8[$222+2>>0]<<16)|(HEAPU8[$222+3>>0]<<24);
  $224 = $216;
  $225 = $224;
  HEAP8[$225>>0]=$220&255;HEAP8[$225+1>>0]=($220>>8)&255;HEAP8[$225+2>>0]=($220>>16)&255;HEAP8[$225+3>>0]=$220>>24;
  $226 = (($224) + 4)|0;
  $227 = $226;
  HEAP8[$227>>0]=$223&255;HEAP8[$227+1>>0]=($223>>8)&255;HEAP8[$227+2>>0]=($223>>16)&255;HEAP8[$227+3>>0]=$223>>24;
  $$sum137 = (($$sum136) + ($53))|0;
  $228 = (($65) + ($$sum137)|0);
  $$sum138 = (($111) + 16)|0;
  $229 = (($74) + ($$sum138)|0);
  $230 = $229;
  $231 = $230;
  $232 = HEAPU8[$231>>0]|(HEAPU8[$231+1>>0]<<8)|(HEAPU8[$231+2>>0]<<16)|(HEAPU8[$231+3>>0]<<24);
  $233 = (($230) + 4)|0;
  $234 = $233;
  $235 = HEAPU8[$234>>0]|(HEAPU8[$234+1>>0]<<8)|(HEAPU8[$234+2>>0]<<16)|(HEAPU8[$234+3>>0]<<24);
  $236 = $228;
  $237 = $236;
  HEAP8[$237>>0]=$232&255;HEAP8[$237+1>>0]=($232>>8)&255;HEAP8[$237+2>>0]=($232>>16)&255;HEAP8[$237+3>>0]=$232>>24;
  $238 = (($236) + 4)|0;
  $239 = $238;
  HEAP8[$239>>0]=$235&255;HEAP8[$239+1>>0]=($235>>8)&255;HEAP8[$239+2>>0]=($235>>16)&255;HEAP8[$239+3>>0]=$235>>24;
  $$sum139 = (($$sum137) + ($53))|0;
  $240 = (($65) + ($$sum139)|0);
  $$sum140 = (($111) + 24)|0;
  $241 = (($74) + ($$sum140)|0);
  $242 = $241;
  $243 = $242;
  $244 = HEAPU8[$243>>0]|(HEAPU8[$243+1>>0]<<8)|(HEAPU8[$243+2>>0]<<16)|(HEAPU8[$243+3>>0]<<24);
  $245 = (($242) + 4)|0;
  $246 = $245;
  $247 = HEAPU8[$246>>0]|(HEAPU8[$246+1>>0]<<8)|(HEAPU8[$246+2>>0]<<16)|(HEAPU8[$246+3>>0]<<24);
  $248 = $240;
  $249 = $248;
  HEAP8[$249>>0]=$244&255;HEAP8[$249+1>>0]=($244>>8)&255;HEAP8[$249+2>>0]=($244>>16)&255;HEAP8[$249+3>>0]=$244>>24;
  $250 = (($248) + 4)|0;
  $251 = $250;
  HEAP8[$251>>0]=$247&255;HEAP8[$251+1>>0]=($247>>8)&255;HEAP8[$251+2>>0]=($247>>16)&255;HEAP8[$251+3>>0]=$247>>24;
  $$sum141 = (($$sum139) + ($53))|0;
  $252 = (($65) + ($$sum141)|0);
  $$sum142 = (($111) + 32)|0;
  $253 = (($74) + ($$sum142)|0);
  $254 = $253;
  $255 = $254;
  $256 = HEAPU8[$255>>0]|(HEAPU8[$255+1>>0]<<8)|(HEAPU8[$255+2>>0]<<16)|(HEAPU8[$255+3>>0]<<24);
  $257 = (($254) + 4)|0;
  $258 = $257;
  $259 = HEAPU8[$258>>0]|(HEAPU8[$258+1>>0]<<8)|(HEAPU8[$258+2>>0]<<16)|(HEAPU8[$258+3>>0]<<24);
  $260 = $252;
  $261 = $260;
  HEAP8[$261>>0]=$256&255;HEAP8[$261+1>>0]=($256>>8)&255;HEAP8[$261+2>>0]=($256>>16)&255;HEAP8[$261+3>>0]=$256>>24;
  $262 = (($260) + 4)|0;
  $263 = $262;
  HEAP8[$263>>0]=$259&255;HEAP8[$263+1>>0]=($259>>8)&255;HEAP8[$263+2>>0]=($259>>16)&255;HEAP8[$263+3>>0]=$259>>24;
  $$sum143 = (($$sum141) + ($53))|0;
  $264 = (($65) + ($$sum143)|0);
  $$sum144 = (($111) + 40)|0;
  $265 = (($74) + ($$sum144)|0);
  $266 = $265;
  $267 = $266;
  $268 = HEAPU8[$267>>0]|(HEAPU8[$267+1>>0]<<8)|(HEAPU8[$267+2>>0]<<16)|(HEAPU8[$267+3>>0]<<24);
  $269 = (($266) + 4)|0;
  $270 = $269;
  $271 = HEAPU8[$270>>0]|(HEAPU8[$270+1>>0]<<8)|(HEAPU8[$270+2>>0]<<16)|(HEAPU8[$270+3>>0]<<24);
  $272 = $264;
  $273 = $272;
  HEAP8[$273>>0]=$268&255;HEAP8[$273+1>>0]=($268>>8)&255;HEAP8[$273+2>>0]=($268>>16)&255;HEAP8[$273+3>>0]=$268>>24;
  $274 = (($272) + 4)|0;
  $275 = $274;
  HEAP8[$275>>0]=$271&255;HEAP8[$275+1>>0]=($271>>8)&255;HEAP8[$275+2>>0]=($271>>16)&255;HEAP8[$275+3>>0]=$271>>24;
  $$sum145 = (($$sum143) + ($53))|0;
  $276 = (($65) + ($$sum145)|0);
  $$sum146 = (($111) + 48)|0;
  $277 = (($74) + ($$sum146)|0);
  $278 = $277;
  $279 = $278;
  $280 = HEAPU8[$279>>0]|(HEAPU8[$279+1>>0]<<8)|(HEAPU8[$279+2>>0]<<16)|(HEAPU8[$279+3>>0]<<24);
  $281 = (($278) + 4)|0;
  $282 = $281;
  $283 = HEAPU8[$282>>0]|(HEAPU8[$282+1>>0]<<8)|(HEAPU8[$282+2>>0]<<16)|(HEAPU8[$282+3>>0]<<24);
  $284 = $276;
  $285 = $284;
  HEAP8[$285>>0]=$280&255;HEAP8[$285+1>>0]=($280>>8)&255;HEAP8[$285+2>>0]=($280>>16)&255;HEAP8[$285+3>>0]=$280>>24;
  $286 = (($284) + 4)|0;
  $287 = $286;
  HEAP8[$287>>0]=$283&255;HEAP8[$287+1>>0]=($283>>8)&255;HEAP8[$287+2>>0]=($283>>16)&255;HEAP8[$287+3>>0]=$283>>24;
  $$sum147 = (($$sum145) + ($53))|0;
  $288 = (($65) + ($$sum147)|0);
  $$sum148 = (($111) + 56)|0;
  $289 = (($74) + ($$sum148)|0);
  $290 = $289;
  $291 = $290;
  $292 = HEAPU8[$291>>0]|(HEAPU8[$291+1>>0]<<8)|(HEAPU8[$291+2>>0]<<16)|(HEAPU8[$291+3>>0]<<24);
  $293 = (($290) + 4)|0;
  $294 = $293;
  $295 = HEAPU8[$294>>0]|(HEAPU8[$294+1>>0]<<8)|(HEAPU8[$294+2>>0]<<16)|(HEAPU8[$294+3>>0]<<24);
  $296 = $288;
  $297 = $296;
  HEAP8[$297>>0]=$292&255;HEAP8[$297+1>>0]=($292>>8)&255;HEAP8[$297+2>>0]=($292>>16)&255;HEAP8[$297+3>>0]=$292>>24;
  $298 = (($296) + 4)|0;
  $299 = $298;
  HEAP8[$299>>0]=$295&255;HEAP8[$299+1>>0]=($295>>8)&255;HEAP8[$299+2>>0]=($295>>16)&255;HEAP8[$299+3>>0]=$295>>24;
  $300 = HEAP32[$73>>2]|0;
  $301 = (($300) + 384|0);
  HEAP32[$73>>2] = $301;
  $302 = (($2) + 3948|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = (($303) + ($16)|0);
  HEAP8[$304>>0] = 0;
  $305 = (($2) + 3952|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = (($306) + ($16<<1)|0);
  HEAP8[$307>>0]=0&255;HEAP8[$307+1>>0]=0>>8;
  dest=$19+0|0; stop=dest+24|0; do { HEAP8[dest>>0]=16|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $308 = (__ZN7WelsDec12InitReadBitsEPN10WelsCommon15TagBitStringAuxEi($4,0)|0);
  $$1 = $308;
  STACKTOP = sp;return ($$1|0);
 }
 else if ((label|0) == 7) {
  $309 = (($pIntraPredMode_tEmP) + 15|0);
  $310 = $309;
  $311 = $310 & 15;
  $312 = $311 ^ 15;
  $313 = (($pIntraPredMode_tEmP) + ($312)|0);
  $314 = (($2) + 3908|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = (($315) + ($16<<1)|0);
  HEAP16[$316>>1] = 1;
  $317 = (($pCtx) + 241928|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = (($318) + 184|0);
  $320 = HEAP8[$319>>0]|0;
  $321 = ($320<<24>>24)==(0);
  if (!($321)) {
   $322 = (($4) + 20|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $323 >>> 31;
   $325 = (($4) + 4|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = HEAP32[$4>>2]|0;
   $328 = $327;
   $329 = (($4) + 16|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $323 << 1;
   HEAP32[$322>>2] = $331;
   $332 = (($4) + 24|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (($333) + 1)|0;
   HEAP32[$332>>2] = $334;
   $335 = ($333|0)>(-1);
   do {
    if ($335) {
     $336 = $330;
     $337 = $326;
     $338 = (($336) - ($328))|0;
     $339 = (($337) + 1)|0;
     $340 = (($339) - ($328))|0;
     $341 = ($338|0)>($340|0);
     if ($341) {
      $$1 = 11;
      STACKTOP = sp;return ($$1|0);
     } else {
      $342 = HEAP8[$330>>0]|0;
      $343 = $342&255;
      $344 = $343 << 8;
      $345 = (($330) + 1|0);
      $346 = HEAP8[$345>>0]|0;
      $347 = $346&255;
      $348 = $344 | $347;
      $349 = $348 << $334;
      $350 = $349 | $331;
      HEAP32[$322>>2] = $350;
      $351 = (($333) + -15)|0;
      HEAP32[$332>>2] = $351;
      $352 = (($330) + 2|0);
      HEAP32[$329>>2] = $352;
      break;
     }
    }
   } while(0);
   HEAP32[$uiCode>>2] = $324;
   $353 = HEAP32[$36>>2]|0;
   $354 = (($353) + ($16)|0);
   $355 = $324&255;
   HEAP8[$354>>0] = $355;
   $356 = HEAP32[$36>>2]|0;
   $357 = (($356) + ($16)|0);
   $358 = HEAP8[$357>>0]|0;
   $359 = ($358<<24>>24)==(0);
   if (!($359)) {
    $360 = HEAP32[$314>>2]|0;
    $361 = (($360) + ($16<<1)|0);
    HEAP16[$361>>1] = 4;
   }
  }
  $362 = HEAP32[$36>>2]|0;
  $363 = (($362) + ($16)|0);
  $364 = HEAP8[$363>>0]|0;
  $365 = ($364<<24>>24)==(0);
  $366 = (($pCtx) + 317148|0);
  $367 = HEAP32[$366>>2]|0;
  FUNCTION_TABLE_viiii[$367 & 31]($sNeighAvail,$24,$313,$2);
  if ($365) {
   $368 = (__ZN7WelsDec17ParseIntra4x4ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$sNeighAvail,$313,$4,$2)|0);
   $369 = ($368|0)==(0);
   if (!($369)) {
    $$1 = $368;
    STACKTOP = sp;return ($$1|0);
   }
  } else {
   $370 = (__ZN7WelsDec17ParseIntra8x8ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$sNeighAvail,$313,$4,$2)|0);
   $371 = ($370|0)==(0);
   if (!($371)) {
    $$1 = $370;
    STACKTOP = sp;return ($$1|0);
   }
  }
  $372 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($4,$uiCode)|0);
  $373 = ($372|0)==(0);
  if (!($373)) {
   $$1 = $372;
   STACKTOP = sp;return ($$1|0);
  }
  $374 = HEAP32[$uiCode>>2]|0;
  $375 = HEAP32[$43>>2]|0;
  $376 = (($375) + 318|0);
  $377 = HEAP8[$376>>0]|0;
  $378 = ($377<<24>>24)!=(0);
  $379 = ($374>>>0)>(47);
  $or$cond5 = $378 & $379;
  if ($or$cond5) {
   $$1 = 1042;
   STACKTOP = sp;return ($$1|0);
  }
  $380 = ($377<<24>>24)==(0);
  $381 = ($374>>>0)>(15);
  $or$cond7 = $380 & $381;
  if ($or$cond7) {
   $$1 = 1042;
   STACKTOP = sp;return ($$1|0);
  }
  if ($378) {
   $382 = (8520 + ($374)|0);
   $$sink$in = $382;
  } else {
   $383 = (8568 + ($374)|0);
   $$sink$in = $383;
  }
  $$sink = HEAP8[$$sink$in>>0]|0;
  $384 = $$sink&255;
  $385 = (($2) + 3956|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = (($386) + ($16)|0);
  HEAP8[$387>>0] = $$sink;
  $388 = $384 >>> 4;
  $uiCbpC$1 = $388;$uiCbpL$1$in = $384;
 }
 else if ((label|0) == 23) {
  $389 = (($2) + 3908|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = (($390) + ($16<<1)|0);
  HEAP16[$391>>1] = 2;
  $392 = HEAP32[$36>>2]|0;
  $393 = (($392) + ($16)|0);
  HEAP8[$393>>0] = 0;
  $394 = HEAP32[$33>>2]|0;
  $395 = (($394) + ($16)|0);
  HEAP8[$395>>0] = 1;
  $396 = (($41) + -1)|0;
  $397 = $396 & 3;
  $398 = $397&255;
  $399 = (($2) + 3992|0);
  $400 = HEAP32[$399>>2]|0;
  $401 = ((($400) + ($16<<3)|0) + 7|0);
  HEAP8[$401>>0] = $398;
  $402 = $396 >>> 2;
  $403 = (3864 + ($402)|0);
  $404 = HEAP8[$403>>0]|0;
  $405 = (($2) + 3956|0);
  $406 = HEAP32[$405>>2]|0;
  $407 = (($406) + ($16)|0);
  HEAP8[$407>>0] = $404;
  $408 = HEAP32[$43>>2]|0;
  $409 = (($408) + 318|0);
  $410 = HEAP8[$409>>0]|0;
  $411 = ($410<<24>>24)==(0);
  $$pre = HEAP32[$405>>2]|0;
  $$phi$trans$insert = (($$pre) + ($16)|0);
  $$pre85 = HEAP8[$$phi$trans$insert>>0]|0;
  if ($411) {
   $691 = 0;
  } else {
   $412 = $$pre85 << 24 >> 24;
   $413 = $412 >> 4;
   $691 = $413;
  }
  $414 = $$pre85&255;
  __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($sNeighAvail,$24,$2);
  $415 = (__ZN7WelsDec19ParseIntra16x16ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$sNeighAvail,$4,$2)|0);
  $416 = ($415|0)==(0);
  if ($416) {
   $uiCbpC$1 = $691;$uiCbpL$1$in = $414;
  } else {
   $$1 = $415;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $uiCbpL$1 = $uiCbpL$1$in & 15;
 $417 = ((($18) + (($16*24)|0)|0) + 4|0);
 $418 = ((($18) + (($16*24)|0)|0) + 8|0);
 $419 = ((($18) + (($16*24)|0)|0) + 12|0);
 $420 = ((($18) + (($16*24)|0)|0) + 16|0);
 $421 = ((($18) + (($16*24)|0)|0) + 20|0);
 $422 = (($2) + 3956|0);
 ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;HEAP32[$19+12>>2]=0|0;HEAP32[$19+16>>2]=0|0;HEAP32[$19+20>>2]=0|0;
 $423 = HEAP32[$422>>2]|0;
 $424 = (($423) + ($16)|0);
 $425 = HEAP8[$424>>0]|0;
 $426 = ($425<<24>>24)==(0);
 do {
  if ($426) {
   $427 = (($2) + 3908|0);
   $428 = HEAP32[$427>>2]|0;
   $429 = (($428) + ($16<<1)|0);
   $430 = HEAP16[$429>>1]|0;
   $431 = ($430<<16>>16)==(1);
   if ($431) {
    $432 = (($2) + 3868|0);
    $433 = HEAP32[$432>>2]|0;
    $434 = $433&255;
    $435 = (($2) + 3948|0);
    $436 = HEAP32[$435>>2]|0;
    $437 = (($436) + ($16)|0);
    HEAP8[$437>>0] = $434;
    $438 = (($2) + 92|0);
    $439 = (($2) + 3952|0);
    $440 = HEAP32[$435>>2]|0;
    $441 = (($440) + ($16)|0);
    $442 = HEAP8[$441>>0]|0;
    $443 = $442 << 24 >> 24;
    $444 = HEAP32[$438>>2]|0;
    $445 = (($444) + 168|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = (($446) + ($443))|0;
    $448 = ($447|0)<(0);
    if ($448) {
     $451 = 0;
    } else {
     $449 = ($447|0)>(51);
     $$37 = $449 ? 51 : $447;
     $451 = $$37;
    }
    $450 = (16984 + ($451)|0);
    $452 = HEAP8[$450>>0]|0;
    $453 = HEAP32[$439>>2]|0;
    $454 = (($453) + ($16<<1)|0);
    HEAP8[$454>>0] = $452;
    $455 = HEAP32[$435>>2]|0;
    $456 = (($455) + ($16)|0);
    $457 = HEAP8[$456>>0]|0;
    $458 = $457 << 24 >> 24;
    $459 = HEAP32[$438>>2]|0;
    $460 = (($459) + 172|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = (($461) + ($458))|0;
    $463 = ($462|0)<(0);
    if ($463) {
     $465 = 0;
    } else {
     $690 = ($462|0)>(51);
     $$37$1 = $690 ? 51 : $462;
     $465 = $$37$1;
    }
    $464 = (16984 + ($465)|0);
    $466 = HEAP8[$464>>0]|0;
    $467 = HEAP32[$439>>2]|0;
    $468 = ((($467) + ($16<<1)|0) + 1|0);
    HEAP8[$468>>0] = $466;
    $$pre86 = HEAP32[$422>>2]|0;
    $$phi$trans$insert87 = (($$pre86) + ($16)|0);
    $$pre88 = HEAP8[$$phi$trans$insert87>>0]|0;
    $469 = ($$pre88<<24>>24)==(0);
    if (!($469)) {
     break;
    }
   }
   $470 = (($2) + 3908|0);
   $471 = HEAP32[$470>>2]|0;
   $472 = (($471) + ($16<<1)|0);
   $473 = HEAP16[$472>>1]|0;
   $474 = ($473<<16>>16)==(2);
   if (!($474)) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $475 = (($2) + 3988|0);
 $476 = HEAP32[$475>>2]|0;
 $477 = (($476) + (($16*768)|0)|0);
 _memset(($477|0),0,768)|0;
 $478 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($4,$uiCodeNum$i)|0);
 $479 = ($478|0)==(0);
 if (!($479)) {
  $$1 = $478;
  STACKTOP = sp;return ($$1|0);
 }
 $480 = HEAP32[$uiCodeNum$i>>2]|0;
 $481 = $480 & 1;
 $482 = ($481|0)==(0);
 if ($482) {
  $485 = $480 >>> 1;
  $486 = (0 - ($485))|0;
  $$ph = $486;
 } else {
  $483 = (($480) + 1)|0;
  $484 = $483 >>> 1;
  $$ph = $484;
 }
 $$off14 = (($$ph) + 26)|0;
 $487 = ($$off14>>>0)>(51);
 if ($487) {
  $$1 = 1027;
  STACKTOP = sp;return ($$1|0);
 }
 $488 = (($2) + 3868|0);
 $489 = HEAP32[$488>>2]|0;
 $490 = (($$ph) + 52)|0;
 $491 = (($490) + ($489))|0;
 $492 = (($491|0) % 52)&-1;
 $493 = $492&255;
 $494 = (($2) + 3948|0);
 $495 = HEAP32[$494>>2]|0;
 $496 = (($495) + ($16)|0);
 HEAP8[$496>>0] = $493;
 $497 = HEAP32[$494>>2]|0;
 $498 = (($497) + ($16)|0);
 $499 = HEAP8[$498>>0]|0;
 $500 = $499 << 24 >> 24;
 HEAP32[$488>>2] = $500;
 $501 = (($2) + 92|0);
 $502 = (($2) + 3952|0);
 $503 = HEAP32[$501>>2]|0;
 $504 = (($503) + 168|0);
 $505 = HEAP32[$504>>2]|0;
 $506 = (($505) + ($500))|0;
 $507 = ($506|0)<(0);
 if ($507) {
  $510 = 0;
 } else {
  $508 = ($506|0)>(51);
  $$38 = $508 ? 51 : $506;
  $510 = $$38;
 }
 $509 = (16984 + ($510)|0);
 $511 = HEAP8[$509>>0]|0;
 $512 = HEAP32[$502>>2]|0;
 $513 = (($512) + ($16<<1)|0);
 HEAP8[$513>>0] = $511;
 $514 = HEAP32[$488>>2]|0;
 $515 = HEAP32[$501>>2]|0;
 $516 = (($515) + 172|0);
 $517 = HEAP32[$516>>2]|0;
 $518 = (($517) + ($514))|0;
 $519 = ($518|0)<(0);
 if ($519) {
  $682 = 0;
 } else {
  $680 = ($518|0)>(51);
  $$38$1 = $680 ? 51 : $518;
  $682 = $$38$1;
 }
 $681 = (16984 + ($682)|0);
 $683 = HEAP8[$681>>0]|0;
 $684 = HEAP32[$502>>2]|0;
 $685 = ((($684) + ($16<<1)|0) + 1|0);
 HEAP8[$685>>0] = $683;
 __ZN7WelsDec12BsStartCavlcEPN10WelsCommon15TagBitStringAuxE($4);
 $589 = (($2) + 3908|0);
 $686 = HEAP32[$589>>2]|0;
 $687 = (($686) + ($16<<1)|0);
 $688 = HEAP16[$687>>1]|0;
 $689 = ($688<<16>>16)==(2);
 do {
  if ($689) {
   $520 = HEAP32[$475>>2]|0;
   $521 = (($520) + (($16*768)|0)|0);
   $522 = HEAP32[$494>>2]|0;
   $523 = (($522) + ($16)|0);
   $524 = HEAP8[$523>>0]|0;
   $525 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0,$24,$4,0,16,8496,1,$521,$524,$pCtx)|0);
   $526 = ($525|0)==(0);
   if (!($526)) {
    $$1 = -1;
    STACKTOP = sp;return ($$1|0);
   }
   $527 = ($uiCbpL$1|0)==(0);
   if (!($527)) {
    $528 = ($7>>>0)>(1);
    $529 = $528 ? $7 : 1;
    $530 = (($10) + 1)|0;
    $531 = (($530) - ($529))|0;
    $532 = (3872 + ($529)|0);
    $i$252 = 0;
    while(1) {
     $535 = HEAP32[$475>>2]|0;
     $536 = $i$252 << 4;
     $537 = ((($535) + (($16*768)|0)|0) + ($536<<1)|0);
     $538 = HEAP32[$494>>2]|0;
     $539 = (($538) + ($16)|0);
     $540 = HEAP8[$539>>0]|0;
     $541 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0,$24,$4,$i$252,$531,$532,2,$537,$540,$pCtx)|0);
     $542 = ($541|0)==(0);
     $533 = (($i$252) + 1)|0;
     if (!($542)) {
      $$1 = -1;
      label = 75;
      break;
     }
     $534 = ($533|0)<(16);
     if ($534) {
      $i$252 = $533;
     } else {
      label = 46;
      break;
     }
    }
    if ((label|0) == 46) {
     $$sum31 = (($23) + 9)|0;
     $543 = (($pNonZeroCount_tEmP) + ($$sum31)|0);
     $544 = HEAPU8[$543>>0]|(HEAPU8[$543+1>>0]<<8)|(HEAPU8[$543+2>>0]<<16)|(HEAPU8[$543+3>>0]<<24);
     HEAP32[$19>>2] = $544;
     $$sum32 = (($23) + 17)|0;
     $545 = (($pNonZeroCount_tEmP) + ($$sum32)|0);
     $546 = HEAPU8[$545>>0]|(HEAPU8[$545+1>>0]<<8)|(HEAPU8[$545+2>>0]<<16)|(HEAPU8[$545+3>>0]<<24);
     HEAP32[$417>>2] = $546;
     $$sum33 = (($23) + 25)|0;
     $547 = (($pNonZeroCount_tEmP) + ($$sum33)|0);
     $548 = HEAPU8[$547>>0]|(HEAPU8[$547+1>>0]<<8)|(HEAPU8[$547+2>>0]<<16)|(HEAPU8[$547+3>>0]<<24);
     HEAP32[$418>>2] = $548;
     $$sum34 = (($23) + 33)|0;
     $549 = (($pNonZeroCount_tEmP) + ($$sum34)|0);
     $550 = HEAPU8[$549>>0]|(HEAPU8[$549+1>>0]<<8)|(HEAPU8[$549+2>>0]<<16)|(HEAPU8[$549+3>>0]<<24);
     HEAP32[$419>>2] = $550;
     break;
    }
    else if ((label|0) == 75) {
     STACKTOP = sp;return ($$1|0);
    }
   }
  } else {
   $551 = HEAP32[$36>>2]|0;
   $552 = (($551) + ($16)|0);
   $553 = HEAP8[$552>>0]|0;
   $554 = ($553<<24>>24)==(0);
   $555 = (1 - ($7))|0;
   $556 = (($555) + ($10))|0;
   if ($554) {
    $558 = (3872 + ($7)|0);
    $iId8x8$159 = 0;
    L83: while(1) {
     $598 = 1 << $iId8x8$159;
     $599 = $598 & $uiCbpL$1;
     $600 = ($599|0)==(0);
     $601 = $iId8x8$159 << 2;
     if ($600) {
      $613 = (16560 + ($601)|0);
      $614 = HEAP8[$613>>0]|0;
      $615 = $614&255;
      $$sum23 = (($615) + ($23))|0;
      $616 = (($pNonZeroCount_tEmP) + ($$sum23)|0);
      HEAP8[$616>>0]=0&255;HEAP8[$616+1>>0]=0>>8;
      $617 = $601 | 2;
      $618 = (16560 + ($617)|0);
      $619 = HEAP8[$618>>0]|0;
      $620 = $619&255;
      $$sum24 = (($620) + ($23))|0;
      $621 = (($pNonZeroCount_tEmP) + ($$sum24)|0);
      HEAP8[$621>>0]=0&255;HEAP8[$621+1>>0]=0>>8;
     } else {
      $iId4x4$156 = 0;$iIndex10$057 = $601;
      while(1) {
       $602 = HEAP32[$475>>2]|0;
       $603 = $iIndex10$057 << 4;
       $604 = ((($602) + (($16*768)|0)|0) + ($603<<1)|0);
       $605 = HEAP32[$494>>2]|0;
       $606 = (($605) + ($16)|0);
       $607 = HEAP8[$606>>0]|0;
       $608 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0,$24,$4,$iIndex10$057,$556,$558,11,$604,$607,$pCtx)|0);
       $609 = ($608|0)==(0);
       if (!($609)) {
        $$1 = -1;
        label = 75;
        break L83;
       }
       $610 = (($iIndex10$057) + 1)|0;
       $611 = (($iId4x4$156) + 1)|0;
       $612 = ($611|0)<(4);
       if ($612) {
        $iId4x4$156 = $611;$iIndex10$057 = $610;
       } else {
        break;
       }
      }
     }
     $622 = (($iId8x8$159) + 1)|0;
     $623 = ($622|0)<(4);
     if ($623) {
      $iId8x8$159 = $622;
     } else {
      label = 63;
      break;
     }
    }
    if ((label|0) == 63) {
     $$sum = (($23) + 9)|0;
     $624 = (($pNonZeroCount_tEmP) + ($$sum)|0);
     $625 = HEAPU8[$624>>0]|(HEAPU8[$624+1>>0]<<8)|(HEAPU8[$624+2>>0]<<16)|(HEAPU8[$624+3>>0]<<24);
     HEAP32[$19>>2] = $625;
     $$sum15 = (($23) + 17)|0;
     $626 = (($pNonZeroCount_tEmP) + ($$sum15)|0);
     $627 = HEAPU8[$626>>0]|(HEAPU8[$626+1>>0]<<8)|(HEAPU8[$626+2>>0]<<16)|(HEAPU8[$626+3>>0]<<24);
     HEAP32[$417>>2] = $627;
     $$sum16 = (($23) + 25)|0;
     $628 = (($pNonZeroCount_tEmP) + ($$sum16)|0);
     $629 = HEAPU8[$628>>0]|(HEAPU8[$628+1>>0]<<8)|(HEAPU8[$628+2>>0]<<16)|(HEAPU8[$628+3>>0]<<24);
     HEAP32[$418>>2] = $629;
     $$sum17 = (($23) + 33)|0;
     $630 = (($pNonZeroCount_tEmP) + ($$sum17)|0);
     $631 = HEAPU8[$630>>0]|(HEAPU8[$630+1>>0]<<8)|(HEAPU8[$630+2>>0]<<16)|(HEAPU8[$630+3>>0]<<24);
     HEAP32[$419>>2] = $631;
     break;
    }
    else if ((label|0) == 75) {
     STACKTOP = sp;return ($$1|0);
    }
   }
   $557 = (3888 + ($7)|0);
   $560 = $688;$iId8x8$066 = 0;
   L95: while(1) {
    $559 = $560 & 519;
    $561 = ($559<<16>>16)!=(0);
    $562 = $561 ? 11 : 12;
    $563 = 1 << $iId8x8$066;
    $564 = $563 & $uiCbpL$1;
    $565 = ($564|0)==(0);
    $566 = $iId8x8$066 << 2;
    if ($565) {
     $578 = (16560 + ($566)|0);
     $579 = HEAP8[$578>>0]|0;
     $580 = $579&255;
     $$sum29 = (($580) + ($23))|0;
     $581 = (($pNonZeroCount_tEmP) + ($$sum29)|0);
     HEAP8[$581>>0]=0&255;HEAP8[$581+1>>0]=0>>8;
     $582 = $566 | 2;
     $583 = (16560 + ($582)|0);
     $584 = HEAP8[$583>>0]|0;
     $585 = $584&255;
     $$sum30 = (($585) + ($23))|0;
     $586 = (($pNonZeroCount_tEmP) + ($$sum30)|0);
     HEAP8[$586>>0]=0&255;HEAP8[$586+1>>0]=0>>8;
    } else {
     $567 = $iId8x8$066 << 6;
     $iId4x4$063 = 0;$iIndex9$064 = $566;
     while(1) {
      $568 = HEAP32[$475>>2]|0;
      $569 = ((($568) + (($16*768)|0)|0) + ($567<<1)|0);
      $570 = HEAP32[$494>>2]|0;
      $571 = (($570) + ($16)|0);
      $572 = HEAP8[$571>>0]|0;
      $573 = (__ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($0,$24,$4,$iIndex9$064,$556,$557,$562,$569,$iId4x4$063,$572,$pCtx)|0);
      $574 = ($573|0)==(0);
      if (!($574)) {
       $$1 = -1;
       label = 75;
       break L95;
      }
      $575 = (($iIndex9$064) + 1)|0;
      $576 = (($iId4x4$063) + 1)|0;
      $577 = ($576|0)<(4);
      if ($577) {
       $iId4x4$063 = $576;$iIndex9$064 = $575;
      } else {
       break;
      }
     }
    }
    $587 = (($iId8x8$066) + 1)|0;
    $588 = ($587|0)<(4);
    if (!($588)) {
     label = 57;
     break;
    }
    $$pre90 = HEAP32[$589>>2]|0;
    $$phi$trans$insert91 = (($$pre90) + ($16<<1)|0);
    $$pre92 = HEAP16[$$phi$trans$insert91>>1]|0;
    $560 = $$pre92;$iId8x8$066 = $587;
   }
   if ((label|0) == 57) {
    $$sum25 = (($23) + 9)|0;
    $590 = (($pNonZeroCount_tEmP) + ($$sum25)|0);
    $591 = HEAPU8[$590>>0]|(HEAPU8[$590+1>>0]<<8)|(HEAPU8[$590+2>>0]<<16)|(HEAPU8[$590+3>>0]<<24);
    HEAP32[$19>>2] = $591;
    $$sum26 = (($23) + 17)|0;
    $592 = (($pNonZeroCount_tEmP) + ($$sum26)|0);
    $593 = HEAPU8[$592>>0]|(HEAPU8[$592+1>>0]<<8)|(HEAPU8[$592+2>>0]<<16)|(HEAPU8[$592+3>>0]<<24);
    HEAP32[$417>>2] = $593;
    $$sum27 = (($23) + 25)|0;
    $594 = (($pNonZeroCount_tEmP) + ($$sum27)|0);
    $595 = HEAPU8[$594>>0]|(HEAPU8[$594+1>>0]<<8)|(HEAPU8[$594+2>>0]<<16)|(HEAPU8[$594+3>>0]<<24);
    HEAP32[$418>>2] = $595;
    $$sum28 = (($23) + 33)|0;
    $596 = (($pNonZeroCount_tEmP) + ($$sum28)|0);
    $597 = HEAPU8[$596>>0]|(HEAPU8[$596+1>>0]<<8)|(HEAPU8[$596+2>>0]<<16)|(HEAPU8[$596+3>>0]<<24);
    HEAP32[$419>>2] = $597;
    break;
   }
   else if ((label|0) == 75) {
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $632 = ($uiCbpC$1|0)==(2);
 $uiCbpC$1$off = (($uiCbpC$1) + -1)|0;
 $633 = ($uiCbpC$1$off>>>0)<(2);
 L120: do {
  if ($633) {
   $i$349 = 0;
   while(1) {
    $636 = ($i$349|0)!=(0);
    $637 = $636 ? 8 : 7;
    $638 = $i$349 << 2;
    $639 = (($638) + 16)|0;
    $640 = HEAP32[$475>>2]|0;
    $641 = $i$349 << 6;
    $$sum22 = (($641) + 256)|0;
    $642 = ((($640) + (($16*768)|0)|0) + ($$sum22<<1)|0);
    $643 = HEAP32[$502>>2]|0;
    $644 = ((($643) + ($16<<1)|0) + ($i$349)|0);
    $645 = HEAP8[$644>>0]|0;
    $646 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0,$24,$4,$639,4,8512,$637,$642,$645,$pCtx)|0);
    $647 = ($646|0)==(0);
    $634 = (($i$349) + 1)|0;
    if (!($647)) {
     $$1 = -1;
     break;
    }
    $635 = ($634|0)<(2);
    if ($635) {
     $i$349 = $634;
    } else {
     break L120;
    }
   }
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 do {
  if ($632) {
   $648 = ($7>>>0)>(1);
   $649 = $648 ? $7 : 1;
   $650 = (($10) + 1)|0;
   $651 = (($650) - ($649))|0;
   $652 = (3872 + ($649)|0);
   $i$446 = 0;
   L128: while(1) {
    $653 = ($i$446|0)!=(0);
    $654 = $653 ? 10 : 9;
    $655 = $i$446 << 2;
    $656 = (($655) + 16)|0;
    $iId4x4$244 = 0;$iIndex11$045 = $656;
    while(1) {
     $657 = HEAP32[$475>>2]|0;
     $658 = $iIndex11$045 << 4;
     $659 = ((($657) + (($16*768)|0)|0) + ($658<<1)|0);
     $660 = HEAP32[$502>>2]|0;
     $661 = ((($660) + ($16<<1)|0) + ($i$446)|0);
     $662 = HEAP8[$661>>0]|0;
     $663 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0,$24,$4,$iIndex11$045,$651,$652,$654,$659,$662,$pCtx)|0);
     $664 = ($663|0)==(0);
     if (!($664)) {
      $$1 = -1;
      label = 75;
      break L128;
     }
     $665 = (($iIndex11$045) + 1)|0;
     $666 = (($iId4x4$244) + 1)|0;
     $667 = ($666|0)<(4);
     if ($667) {
      $iId4x4$244 = $666;$iIndex11$045 = $665;
     } else {
      break;
     }
    }
    $668 = (($i$446) + 1)|0;
    $669 = ($668|0)<(2);
    if ($669) {
     $i$446 = $668;
    } else {
     label = 73;
     break;
    }
   }
   if ((label|0) == 73) {
    $$sum18 = (($23) + 14)|0;
    $670 = (($pNonZeroCount_tEmP) + ($$sum18)|0);
    $671 = HEAP16[$670>>1]|0;
    HEAP16[$420>>1] = $671;
    $$sum19 = (($23) + 22)|0;
    $672 = (($pNonZeroCount_tEmP) + ($$sum19)|0);
    $673 = HEAP16[$672>>1]|0;
    HEAP16[$421>>1] = $673;
    $$sum20 = (($23) + 38)|0;
    $674 = (($pNonZeroCount_tEmP) + ($$sum20)|0);
    $675 = HEAP16[$674>>1]|0;
    $676 = ((($18) + (($16*24)|0)|0) + 18|0);
    HEAP16[$676>>1] = $675;
    $$sum21 = (($23) + 46)|0;
    $677 = (($pNonZeroCount_tEmP) + ($$sum21)|0);
    $678 = HEAP16[$677>>1]|0;
    $679 = ((($18) + (($16*24)|0)|0) + 22|0);
    HEAP16[$679>>1] = $678;
    break;
   }
   else if ((label|0) == 75) {
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 __ZN7WelsDec10BsEndCavlcEPN10WelsCommon15TagBitStringAuxE($4);
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function __ZN7WelsDec29WelsActualDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$2 = 0, $$45 = 0, $$45$1 = 0, $$46 = 0, $$46$1 = 0, $$off = 0, $$off18 = 0, $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert105 = 0, $$phi$trans$insert109 = 0, $$phi$trans$insert113 = 0, $$pre = 0, $$pre$phi118Z2D = 0, $$pre$phiZ2D = 0, $$pre103 = 0, $$pre104 = 0, $$pre106 = 0, $$pre108 = 0, $$pre110 = 0;
 var $$pre112 = 0, $$pre114 = 0, $$pre116 = 0, $$pre117 = 0, $$sink = 0, $$sink$in = 0, $$sum = 0, $$sum119 = 0, $$sum120 = 0, $$sum121 = 0, $$sum122 = 0, $$sum123 = 0, $$sum124 = 0, $$sum125 = 0, $$sum126 = 0, $$sum127 = 0, $$sum128 = 0, $$sum129 = 0, $$sum130 = 0, $$sum131 = 0;
 var $$sum132 = 0, $$sum133 = 0, $$sum134 = 0, $$sum135 = 0, $$sum136 = 0, $$sum137 = 0, $$sum138 = 0, $$sum139 = 0, $$sum140 = 0, $$sum141 = 0, $$sum142 = 0, $$sum143 = 0, $$sum144 = 0, $$sum145 = 0, $$sum146 = 0, $$sum147 = 0, $$sum148 = 0, $$sum149 = 0, $$sum150 = 0, $$sum151 = 0;
 var $$sum152 = 0, $$sum153 = 0, $$sum154 = 0, $$sum155 = 0, $$sum156 = 0, $$sum157 = 0, $$sum158 = 0, $$sum159 = 0, $$sum160 = 0, $$sum161 = 0, $$sum162 = 0, $$sum163 = 0, $$sum164 = 0, $$sum165 = 0, $$sum166 = 0, $$sum167 = 0, $$sum168 = 0, $$sum169 = 0, $$sum170 = 0, $$sum171 = 0;
 var $$sum172 = 0, $$sum173 = 0, $$sum174 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0;
 var $$sum36 = 0, $$sum37 = 0, $$sum38 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$270 = 0, $i$367 = 0, $i$464 = 0, $iId4x4$081 = 0, $iId4x4$174 = 0, $iId4x4$262 = 0, $iId8x8$084 = 0, $iId8x8$177 = 0, $iIndex11$082 = 0, $iIndex12$075 = 0, $iIndex13$063 = 0;
 var $iMbResProperty$0 = 0, $iMbResProperty$1 = 0, $iMotionVector = 0, $iRefIndex = 0, $or$cond = 0, $or$cond10 = 0, $or$cond6 = 0, $or$cond8 = 0, $pIntraPredMode_tEmP = 0, $pNonZeroCount_tEmP = 0, $sNeighAvail = 0, $scevgep = 0, $scevgep$sum = 0, $scevgep101 = 0, $scevgep101$sum = 0, $uiCbpC$0 = 0, $uiCbpC$1 = 0, $uiCbpC$1$off = 0, $uiCbpL$0 = 0, $uiCbpL$1 = 0;
 var $uiCode = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $vararg_buffer = sp;
 $sNeighAvail = sp + 8|0;
 $uiCode = sp + 4|0;
 $pNonZeroCount_tEmP = sp + 412|0;
 $iMotionVector = sp + 48|0;
 $iRefIndex = sp + 352|0;
 $pIntraPredMode_tEmP = sp + 288|0;
 $0 = (($pCtx) + 5864|0);
 $1 = (($pCtx) + 241932|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 3900|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 3866|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($2) + 3867|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (($2) + 4032|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 4036|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($2) + 4040|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + 3964|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + (($16*24)|0)|0);
 __ZN7WelsDec22GetNeighborAvailMbTypeEPNS_16TagNeighborAvailEPNS_10TagDqLayerE($sNeighAvail,$2);
 $20 = (($pNonZeroCount_tEmP) + 15|0);
 $21 = $20;
 $22 = $21 & 15;
 $23 = $22 ^ 15;
 $24 = (($pNonZeroCount_tEmP) + ($23)|0);
 $25 = (($2) + 3976|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($16)|0);
 HEAP8[$27>>0] = 0;
 $28 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($4,$uiCode)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  $$2 = $28;
  STACKTOP = sp;return ($$2|0);
 }
 $30 = HEAP32[$uiCode>>2]|0;
 $31 = ($30>>>0)<(5);
 do {
  if ($31) {
   $32 = (4232 + ($30<<3)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33&65535;
   $35 = (($2) + 3908|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + ($16<<1)|0);
   HEAP16[$37>>1] = $34;
   __ZN7WelsDec18WelsFillCacheInterEPNS_16TagNeighborAvailEPhPA30_A2_sPA30_aPNS_10TagDqLayerE($sNeighAvail,$24,$iMotionVector,$iRefIndex,$2);
   $38 = (__ZN7WelsDec14ParseInterInfoEPNS_21TagWelsDecoderContextEPA30_A2_sPA30_aPN10WelsCommon15TagBitStringAuxE($pCtx,$iMotionVector,$iRefIndex,$4)|0);
   $39 = ($38|0)==(0);
   if (!($39)) {
    $$2 = -1;
    STACKTOP = sp;return ($$2|0);
   }
   $40 = (($2) + 3860|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $78 = (($2) + 3861|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = (($2) + 3972|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + ($16)|0);
    HEAP8[$82>>0] = $79;
   } else {
    $43 = (($4) + 20|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44 >>> 31;
    $46 = (($4) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = HEAP32[$4>>2]|0;
    $49 = $48;
    $50 = (($4) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $44 << 1;
    HEAP32[$43>>2] = $52;
    $53 = (($4) + 24|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + 1)|0;
    HEAP32[$53>>2] = $55;
    $56 = ($54|0)>(-1);
    do {
     if ($56) {
      $57 = $51;
      $58 = $47;
      $59 = (($57) - ($49))|0;
      $60 = (($58) + 1)|0;
      $61 = (($60) - ($49))|0;
      $62 = ($59|0)>($61|0);
      if ($62) {
       $$2 = 11;
       STACKTOP = sp;return ($$2|0);
      } else {
       $63 = HEAP8[$51>>0]|0;
       $64 = $63&255;
       $65 = $64 << 8;
       $66 = (($51) + 1|0);
       $67 = HEAP8[$66>>0]|0;
       $68 = $67&255;
       $69 = $65 | $68;
       $70 = $69 << $55;
       $71 = $70 | $52;
       HEAP32[$43>>2] = $71;
       $72 = (($54) + -15)|0;
       HEAP32[$53>>2] = $72;
       $73 = (($51) + 2|0);
       HEAP32[$50>>2] = $73;
       break;
      }
     }
    } while(0);
    HEAP32[$uiCode>>2] = $45;
    $74 = $45&255;
    $75 = (($2) + 3972|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($16)|0);
    HEAP8[$77>>0] = $74;
   }
   $83 = (($2) + 3972|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($16)|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = ($86<<24>>24)==(0);
   if ($87) {
    $88 = HEAP32[$25>>2]|0;
    $89 = (($88) + ($16)|0);
    HEAP8[$89>>0] = 0;
    $uiCbpC$0 = 0;$uiCbpL$0 = 0;
    break;
   }
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,4192,$vararg_buffer);
   $$2 = -1;
   STACKTOP = sp;return ($$2|0);
  } else {
   $90 = (($30) + -5)|0;
   $91 = ($90>>>0)>(25);
   if ($91) {
    $$2 = 1035;
    STACKTOP = sp;return ($$2|0);
   }
   $92 = (($pCtx) + 241924|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + 318|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = ($95<<24>>24)==(0);
   L27: do {
    if ($96) {
     switch ($30|0) {
     case 30:  {
      label = 17;
      break L27;
      break;
     }
     case 5:  {
      label = 18;
      break L27;
      break;
     }
     case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29:  {
      $$2 = 1035;
      break;
     }
     default: {
      label = 28;
      break L27;
     }
     }
     STACKTOP = sp;return ($$2|0);
    } else {
     if ((($30|0) == 30)) {
      label = 17;
     } else if ((($30|0) == 5)) {
      label = 18;
     } else {
      label = 28;
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $97 = (($2) + 4100|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + 32|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($98) + 36|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = Math_imul($100, $14)|0;
    $104 = (($103) + ($12))|0;
    $105 = $104 << 4;
    $106 = Math_imul($102, $14)|0;
    $107 = (($106) + ($12))|0;
    $108 = (($98) + 16|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + ($105)|0);
    $111 = (($98) + 20|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($98) + 24|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($4) + 24|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (0 - ($116))|0;
    $118 = $117 >> 3;
    $119 = (($2) + 3908|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + ($16<<1)|0);
    HEAP16[$121>>1] = 512;
    $122 = (($4) + 16|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (-2 - ($118))|0;
    $125 = (($123) + ($124)|0);
    HEAP32[$122>>2] = $125;
    $126 = (254 - ($118))|0;
    dest=$110+0|0; src=$125+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum119 = (($105) + ($100))|0;
    $127 = (($109) + ($$sum119)|0);
    $$sum120 = (($124) + 16)|0;
    $128 = (($123) + ($$sum120)|0);
    dest=$127+0|0; src=$128+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum121 = (($$sum119) + ($100))|0;
    $129 = (($109) + ($$sum121)|0);
    $$sum122 = (($124) + 32)|0;
    $130 = (($123) + ($$sum122)|0);
    dest=$129+0|0; src=$130+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum123 = (($$sum121) + ($100))|0;
    $131 = (($109) + ($$sum123)|0);
    $$sum124 = (($124) + 48)|0;
    $132 = (($123) + ($$sum124)|0);
    dest=$131+0|0; src=$132+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum125 = (($$sum123) + ($100))|0;
    $133 = (($109) + ($$sum125)|0);
    $$sum126 = (($124) + 64)|0;
    $134 = (($123) + ($$sum126)|0);
    dest=$133+0|0; src=$134+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum127 = (($$sum125) + ($100))|0;
    $135 = (($109) + ($$sum127)|0);
    $$sum128 = (($124) + 80)|0;
    $136 = (($123) + ($$sum128)|0);
    dest=$135+0|0; src=$136+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum129 = (($$sum127) + ($100))|0;
    $137 = (($109) + ($$sum129)|0);
    $$sum130 = (($124) + 96)|0;
    $138 = (($123) + ($$sum130)|0);
    dest=$137+0|0; src=$138+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum131 = (($$sum129) + ($100))|0;
    $139 = (($109) + ($$sum131)|0);
    $$sum132 = (($124) + 112)|0;
    $140 = (($123) + ($$sum132)|0);
    dest=$139+0|0; src=$140+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum133 = (($$sum131) + ($100))|0;
    $141 = (($109) + ($$sum133)|0);
    $$sum134 = (($124) + 128)|0;
    $142 = (($123) + ($$sum134)|0);
    dest=$141+0|0; src=$142+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum135 = (($$sum133) + ($100))|0;
    $143 = (($109) + ($$sum135)|0);
    $$sum136 = (($124) + 144)|0;
    $144 = (($123) + ($$sum136)|0);
    dest=$143+0|0; src=$144+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum137 = (($$sum135) + ($100))|0;
    $145 = (($109) + ($$sum137)|0);
    $$sum138 = (($124) + 160)|0;
    $146 = (($123) + ($$sum138)|0);
    dest=$145+0|0; src=$146+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum139 = (($$sum137) + ($100))|0;
    $147 = (($109) + ($$sum139)|0);
    $$sum140 = (($124) + 176)|0;
    $148 = (($123) + ($$sum140)|0);
    dest=$147+0|0; src=$148+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum141 = (($$sum139) + ($100))|0;
    $149 = (($109) + ($$sum141)|0);
    $$sum142 = (($124) + 192)|0;
    $150 = (($123) + ($$sum142)|0);
    dest=$149+0|0; src=$150+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum143 = (($$sum141) + ($100))|0;
    $151 = (($109) + ($$sum143)|0);
    $$sum144 = (($124) + 208)|0;
    $152 = (($123) + ($$sum144)|0);
    dest=$151+0|0; src=$152+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum145 = (($$sum143) + ($100))|0;
    $153 = (($109) + ($$sum145)|0);
    $$sum146 = (($124) + 224)|0;
    $154 = (($123) + ($$sum146)|0);
    dest=$153+0|0; src=$154+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sum147 = (($$sum145) + ($100))|0;
    $155 = (($109) + ($$sum147)|0);
    $$sum148 = (($124) + 240)|0;
    $156 = (($123) + ($$sum148)|0);
    dest=$155+0|0; src=$156+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $157 = $107 << 3;
    $158 = (($112) + ($157)|0);
    $159 = (($114) + ($157)|0);
    $scevgep101 = (($123) + ($126)|0);
    $160 = (318 - ($118))|0;
    $161 = $scevgep101;
    $162 = $161;
    $163 = HEAPU8[$162>>0]|(HEAPU8[$162+1>>0]<<8)|(HEAPU8[$162+2>>0]<<16)|(HEAPU8[$162+3>>0]<<24);
    $164 = (($161) + 4)|0;
    $165 = $164;
    $166 = HEAPU8[$165>>0]|(HEAPU8[$165+1>>0]<<8)|(HEAPU8[$165+2>>0]<<16)|(HEAPU8[$165+3>>0]<<24);
    $167 = $158;
    $168 = $167;
    HEAP8[$168>>0]=$163&255;HEAP8[$168+1>>0]=($163>>8)&255;HEAP8[$168+2>>0]=($163>>16)&255;HEAP8[$168+3>>0]=$163>>24;
    $169 = (($167) + 4)|0;
    $170 = $169;
    HEAP8[$170>>0]=$166&255;HEAP8[$170+1>>0]=($166>>8)&255;HEAP8[$170+2>>0]=($166>>16)&255;HEAP8[$170+3>>0]=$166>>24;
    $$sum149 = (($157) + ($102))|0;
    $171 = (($112) + ($$sum149)|0);
    $scevgep101$sum = (($126) + 8)|0;
    $172 = (($123) + ($scevgep101$sum)|0);
    $173 = $172;
    $174 = $173;
    $175 = HEAPU8[$174>>0]|(HEAPU8[$174+1>>0]<<8)|(HEAPU8[$174+2>>0]<<16)|(HEAPU8[$174+3>>0]<<24);
    $176 = (($173) + 4)|0;
    $177 = $176;
    $178 = HEAPU8[$177>>0]|(HEAPU8[$177+1>>0]<<8)|(HEAPU8[$177+2>>0]<<16)|(HEAPU8[$177+3>>0]<<24);
    $179 = $171;
    $180 = $179;
    HEAP8[$180>>0]=$175&255;HEAP8[$180+1>>0]=($175>>8)&255;HEAP8[$180+2>>0]=($175>>16)&255;HEAP8[$180+3>>0]=$175>>24;
    $181 = (($179) + 4)|0;
    $182 = $181;
    HEAP8[$182>>0]=$178&255;HEAP8[$182+1>>0]=($178>>8)&255;HEAP8[$182+2>>0]=($178>>16)&255;HEAP8[$182+3>>0]=$178>>24;
    $$sum150 = (($$sum149) + ($102))|0;
    $183 = (($112) + ($$sum150)|0);
    $$sum151 = (($126) + 16)|0;
    $184 = (($123) + ($$sum151)|0);
    $185 = $184;
    $186 = $185;
    $187 = HEAPU8[$186>>0]|(HEAPU8[$186+1>>0]<<8)|(HEAPU8[$186+2>>0]<<16)|(HEAPU8[$186+3>>0]<<24);
    $188 = (($185) + 4)|0;
    $189 = $188;
    $190 = HEAPU8[$189>>0]|(HEAPU8[$189+1>>0]<<8)|(HEAPU8[$189+2>>0]<<16)|(HEAPU8[$189+3>>0]<<24);
    $191 = $183;
    $192 = $191;
    HEAP8[$192>>0]=$187&255;HEAP8[$192+1>>0]=($187>>8)&255;HEAP8[$192+2>>0]=($187>>16)&255;HEAP8[$192+3>>0]=$187>>24;
    $193 = (($191) + 4)|0;
    $194 = $193;
    HEAP8[$194>>0]=$190&255;HEAP8[$194+1>>0]=($190>>8)&255;HEAP8[$194+2>>0]=($190>>16)&255;HEAP8[$194+3>>0]=$190>>24;
    $$sum152 = (($$sum150) + ($102))|0;
    $195 = (($112) + ($$sum152)|0);
    $$sum153 = (($126) + 24)|0;
    $196 = (($123) + ($$sum153)|0);
    $197 = $196;
    $198 = $197;
    $199 = HEAPU8[$198>>0]|(HEAPU8[$198+1>>0]<<8)|(HEAPU8[$198+2>>0]<<16)|(HEAPU8[$198+3>>0]<<24);
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAPU8[$201>>0]|(HEAPU8[$201+1>>0]<<8)|(HEAPU8[$201+2>>0]<<16)|(HEAPU8[$201+3>>0]<<24);
    $203 = $195;
    $204 = $203;
    HEAP8[$204>>0]=$199&255;HEAP8[$204+1>>0]=($199>>8)&255;HEAP8[$204+2>>0]=($199>>16)&255;HEAP8[$204+3>>0]=$199>>24;
    $205 = (($203) + 4)|0;
    $206 = $205;
    HEAP8[$206>>0]=$202&255;HEAP8[$206+1>>0]=($202>>8)&255;HEAP8[$206+2>>0]=($202>>16)&255;HEAP8[$206+3>>0]=$202>>24;
    $$sum154 = (($$sum152) + ($102))|0;
    $207 = (($112) + ($$sum154)|0);
    $$sum155 = (($126) + 32)|0;
    $208 = (($123) + ($$sum155)|0);
    $209 = $208;
    $210 = $209;
    $211 = HEAPU8[$210>>0]|(HEAPU8[$210+1>>0]<<8)|(HEAPU8[$210+2>>0]<<16)|(HEAPU8[$210+3>>0]<<24);
    $212 = (($209) + 4)|0;
    $213 = $212;
    $214 = HEAPU8[$213>>0]|(HEAPU8[$213+1>>0]<<8)|(HEAPU8[$213+2>>0]<<16)|(HEAPU8[$213+3>>0]<<24);
    $215 = $207;
    $216 = $215;
    HEAP8[$216>>0]=$211&255;HEAP8[$216+1>>0]=($211>>8)&255;HEAP8[$216+2>>0]=($211>>16)&255;HEAP8[$216+3>>0]=$211>>24;
    $217 = (($215) + 4)|0;
    $218 = $217;
    HEAP8[$218>>0]=$214&255;HEAP8[$218+1>>0]=($214>>8)&255;HEAP8[$218+2>>0]=($214>>16)&255;HEAP8[$218+3>>0]=$214>>24;
    $$sum156 = (($$sum154) + ($102))|0;
    $219 = (($112) + ($$sum156)|0);
    $$sum157 = (($126) + 40)|0;
    $220 = (($123) + ($$sum157)|0);
    $221 = $220;
    $222 = $221;
    $223 = HEAPU8[$222>>0]|(HEAPU8[$222+1>>0]<<8)|(HEAPU8[$222+2>>0]<<16)|(HEAPU8[$222+3>>0]<<24);
    $224 = (($221) + 4)|0;
    $225 = $224;
    $226 = HEAPU8[$225>>0]|(HEAPU8[$225+1>>0]<<8)|(HEAPU8[$225+2>>0]<<16)|(HEAPU8[$225+3>>0]<<24);
    $227 = $219;
    $228 = $227;
    HEAP8[$228>>0]=$223&255;HEAP8[$228+1>>0]=($223>>8)&255;HEAP8[$228+2>>0]=($223>>16)&255;HEAP8[$228+3>>0]=$223>>24;
    $229 = (($227) + 4)|0;
    $230 = $229;
    HEAP8[$230>>0]=$226&255;HEAP8[$230+1>>0]=($226>>8)&255;HEAP8[$230+2>>0]=($226>>16)&255;HEAP8[$230+3>>0]=$226>>24;
    $$sum158 = (($$sum156) + ($102))|0;
    $231 = (($112) + ($$sum158)|0);
    $$sum159 = (($126) + 48)|0;
    $232 = (($123) + ($$sum159)|0);
    $233 = $232;
    $234 = $233;
    $235 = HEAPU8[$234>>0]|(HEAPU8[$234+1>>0]<<8)|(HEAPU8[$234+2>>0]<<16)|(HEAPU8[$234+3>>0]<<24);
    $236 = (($233) + 4)|0;
    $237 = $236;
    $238 = HEAPU8[$237>>0]|(HEAPU8[$237+1>>0]<<8)|(HEAPU8[$237+2>>0]<<16)|(HEAPU8[$237+3>>0]<<24);
    $239 = $231;
    $240 = $239;
    HEAP8[$240>>0]=$235&255;HEAP8[$240+1>>0]=($235>>8)&255;HEAP8[$240+2>>0]=($235>>16)&255;HEAP8[$240+3>>0]=$235>>24;
    $241 = (($239) + 4)|0;
    $242 = $241;
    HEAP8[$242>>0]=$238&255;HEAP8[$242+1>>0]=($238>>8)&255;HEAP8[$242+2>>0]=($238>>16)&255;HEAP8[$242+3>>0]=$238>>24;
    $$sum160 = (($$sum158) + ($102))|0;
    $243 = (($112) + ($$sum160)|0);
    $$sum161 = (($126) + 56)|0;
    $244 = (($123) + ($$sum161)|0);
    $245 = $244;
    $246 = $245;
    $247 = HEAPU8[$246>>0]|(HEAPU8[$246+1>>0]<<8)|(HEAPU8[$246+2>>0]<<16)|(HEAPU8[$246+3>>0]<<24);
    $248 = (($245) + 4)|0;
    $249 = $248;
    $250 = HEAPU8[$249>>0]|(HEAPU8[$249+1>>0]<<8)|(HEAPU8[$249+2>>0]<<16)|(HEAPU8[$249+3>>0]<<24);
    $251 = $243;
    $252 = $251;
    HEAP8[$252>>0]=$247&255;HEAP8[$252+1>>0]=($247>>8)&255;HEAP8[$252+2>>0]=($247>>16)&255;HEAP8[$252+3>>0]=$247>>24;
    $253 = (($251) + 4)|0;
    $254 = $253;
    HEAP8[$254>>0]=$250&255;HEAP8[$254+1>>0]=($250>>8)&255;HEAP8[$254+2>>0]=($250>>16)&255;HEAP8[$254+3>>0]=$250>>24;
    $scevgep = (($123) + ($160)|0);
    $255 = $scevgep;
    $256 = $255;
    $257 = HEAPU8[$256>>0]|(HEAPU8[$256+1>>0]<<8)|(HEAPU8[$256+2>>0]<<16)|(HEAPU8[$256+3>>0]<<24);
    $258 = (($255) + 4)|0;
    $259 = $258;
    $260 = HEAPU8[$259>>0]|(HEAPU8[$259+1>>0]<<8)|(HEAPU8[$259+2>>0]<<16)|(HEAPU8[$259+3>>0]<<24);
    $261 = $159;
    $262 = $261;
    HEAP8[$262>>0]=$257&255;HEAP8[$262+1>>0]=($257>>8)&255;HEAP8[$262+2>>0]=($257>>16)&255;HEAP8[$262+3>>0]=$257>>24;
    $263 = (($261) + 4)|0;
    $264 = $263;
    HEAP8[$264>>0]=$260&255;HEAP8[$264+1>>0]=($260>>8)&255;HEAP8[$264+2>>0]=($260>>16)&255;HEAP8[$264+3>>0]=$260>>24;
    $$sum162 = (($157) + ($102))|0;
    $265 = (($114) + ($$sum162)|0);
    $scevgep$sum = (($160) + 8)|0;
    $266 = (($123) + ($scevgep$sum)|0);
    $267 = $266;
    $268 = $267;
    $269 = HEAPU8[$268>>0]|(HEAPU8[$268+1>>0]<<8)|(HEAPU8[$268+2>>0]<<16)|(HEAPU8[$268+3>>0]<<24);
    $270 = (($267) + 4)|0;
    $271 = $270;
    $272 = HEAPU8[$271>>0]|(HEAPU8[$271+1>>0]<<8)|(HEAPU8[$271+2>>0]<<16)|(HEAPU8[$271+3>>0]<<24);
    $273 = $265;
    $274 = $273;
    HEAP8[$274>>0]=$269&255;HEAP8[$274+1>>0]=($269>>8)&255;HEAP8[$274+2>>0]=($269>>16)&255;HEAP8[$274+3>>0]=$269>>24;
    $275 = (($273) + 4)|0;
    $276 = $275;
    HEAP8[$276>>0]=$272&255;HEAP8[$276+1>>0]=($272>>8)&255;HEAP8[$276+2>>0]=($272>>16)&255;HEAP8[$276+3>>0]=$272>>24;
    $$sum163 = (($$sum162) + ($102))|0;
    $277 = (($114) + ($$sum163)|0);
    $$sum164 = (($160) + 16)|0;
    $278 = (($123) + ($$sum164)|0);
    $279 = $278;
    $280 = $279;
    $281 = HEAPU8[$280>>0]|(HEAPU8[$280+1>>0]<<8)|(HEAPU8[$280+2>>0]<<16)|(HEAPU8[$280+3>>0]<<24);
    $282 = (($279) + 4)|0;
    $283 = $282;
    $284 = HEAPU8[$283>>0]|(HEAPU8[$283+1>>0]<<8)|(HEAPU8[$283+2>>0]<<16)|(HEAPU8[$283+3>>0]<<24);
    $285 = $277;
    $286 = $285;
    HEAP8[$286>>0]=$281&255;HEAP8[$286+1>>0]=($281>>8)&255;HEAP8[$286+2>>0]=($281>>16)&255;HEAP8[$286+3>>0]=$281>>24;
    $287 = (($285) + 4)|0;
    $288 = $287;
    HEAP8[$288>>0]=$284&255;HEAP8[$288+1>>0]=($284>>8)&255;HEAP8[$288+2>>0]=($284>>16)&255;HEAP8[$288+3>>0]=$284>>24;
    $$sum165 = (($$sum163) + ($102))|0;
    $289 = (($114) + ($$sum165)|0);
    $$sum166 = (($160) + 24)|0;
    $290 = (($123) + ($$sum166)|0);
    $291 = $290;
    $292 = $291;
    $293 = HEAPU8[$292>>0]|(HEAPU8[$292+1>>0]<<8)|(HEAPU8[$292+2>>0]<<16)|(HEAPU8[$292+3>>0]<<24);
    $294 = (($291) + 4)|0;
    $295 = $294;
    $296 = HEAPU8[$295>>0]|(HEAPU8[$295+1>>0]<<8)|(HEAPU8[$295+2>>0]<<16)|(HEAPU8[$295+3>>0]<<24);
    $297 = $289;
    $298 = $297;
    HEAP8[$298>>0]=$293&255;HEAP8[$298+1>>0]=($293>>8)&255;HEAP8[$298+2>>0]=($293>>16)&255;HEAP8[$298+3>>0]=$293>>24;
    $299 = (($297) + 4)|0;
    $300 = $299;
    HEAP8[$300>>0]=$296&255;HEAP8[$300+1>>0]=($296>>8)&255;HEAP8[$300+2>>0]=($296>>16)&255;HEAP8[$300+3>>0]=$296>>24;
    $$sum167 = (($$sum165) + ($102))|0;
    $301 = (($114) + ($$sum167)|0);
    $$sum168 = (($160) + 32)|0;
    $302 = (($123) + ($$sum168)|0);
    $303 = $302;
    $304 = $303;
    $305 = HEAPU8[$304>>0]|(HEAPU8[$304+1>>0]<<8)|(HEAPU8[$304+2>>0]<<16)|(HEAPU8[$304+3>>0]<<24);
    $306 = (($303) + 4)|0;
    $307 = $306;
    $308 = HEAPU8[$307>>0]|(HEAPU8[$307+1>>0]<<8)|(HEAPU8[$307+2>>0]<<16)|(HEAPU8[$307+3>>0]<<24);
    $309 = $301;
    $310 = $309;
    HEAP8[$310>>0]=$305&255;HEAP8[$310+1>>0]=($305>>8)&255;HEAP8[$310+2>>0]=($305>>16)&255;HEAP8[$310+3>>0]=$305>>24;
    $311 = (($309) + 4)|0;
    $312 = $311;
    HEAP8[$312>>0]=$308&255;HEAP8[$312+1>>0]=($308>>8)&255;HEAP8[$312+2>>0]=($308>>16)&255;HEAP8[$312+3>>0]=$308>>24;
    $$sum169 = (($$sum167) + ($102))|0;
    $313 = (($114) + ($$sum169)|0);
    $$sum170 = (($160) + 40)|0;
    $314 = (($123) + ($$sum170)|0);
    $315 = $314;
    $316 = $315;
    $317 = HEAPU8[$316>>0]|(HEAPU8[$316+1>>0]<<8)|(HEAPU8[$316+2>>0]<<16)|(HEAPU8[$316+3>>0]<<24);
    $318 = (($315) + 4)|0;
    $319 = $318;
    $320 = HEAPU8[$319>>0]|(HEAPU8[$319+1>>0]<<8)|(HEAPU8[$319+2>>0]<<16)|(HEAPU8[$319+3>>0]<<24);
    $321 = $313;
    $322 = $321;
    HEAP8[$322>>0]=$317&255;HEAP8[$322+1>>0]=($317>>8)&255;HEAP8[$322+2>>0]=($317>>16)&255;HEAP8[$322+3>>0]=$317>>24;
    $323 = (($321) + 4)|0;
    $324 = $323;
    HEAP8[$324>>0]=$320&255;HEAP8[$324+1>>0]=($320>>8)&255;HEAP8[$324+2>>0]=($320>>16)&255;HEAP8[$324+3>>0]=$320>>24;
    $$sum171 = (($$sum169) + ($102))|0;
    $325 = (($114) + ($$sum171)|0);
    $$sum172 = (($160) + 48)|0;
    $326 = (($123) + ($$sum172)|0);
    $327 = $326;
    $328 = $327;
    $329 = HEAPU8[$328>>0]|(HEAPU8[$328+1>>0]<<8)|(HEAPU8[$328+2>>0]<<16)|(HEAPU8[$328+3>>0]<<24);
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAPU8[$331>>0]|(HEAPU8[$331+1>>0]<<8)|(HEAPU8[$331+2>>0]<<16)|(HEAPU8[$331+3>>0]<<24);
    $333 = $325;
    $334 = $333;
    HEAP8[$334>>0]=$329&255;HEAP8[$334+1>>0]=($329>>8)&255;HEAP8[$334+2>>0]=($329>>16)&255;HEAP8[$334+3>>0]=$329>>24;
    $335 = (($333) + 4)|0;
    $336 = $335;
    HEAP8[$336>>0]=$332&255;HEAP8[$336+1>>0]=($332>>8)&255;HEAP8[$336+2>>0]=($332>>16)&255;HEAP8[$336+3>>0]=$332>>24;
    $$sum173 = (($$sum171) + ($102))|0;
    $337 = (($114) + ($$sum173)|0);
    $$sum174 = (($160) + 56)|0;
    $338 = (($123) + ($$sum174)|0);
    $339 = $338;
    $340 = $339;
    $341 = HEAPU8[$340>>0]|(HEAPU8[$340+1>>0]<<8)|(HEAPU8[$340+2>>0]<<16)|(HEAPU8[$340+3>>0]<<24);
    $342 = (($339) + 4)|0;
    $343 = $342;
    $344 = HEAPU8[$343>>0]|(HEAPU8[$343+1>>0]<<8)|(HEAPU8[$343+2>>0]<<16)|(HEAPU8[$343+3>>0]<<24);
    $345 = $337;
    $346 = $345;
    HEAP8[$346>>0]=$341&255;HEAP8[$346+1>>0]=($341>>8)&255;HEAP8[$346+2>>0]=($341>>16)&255;HEAP8[$346+3>>0]=$341>>24;
    $347 = (($345) + 4)|0;
    $348 = $347;
    HEAP8[$348>>0]=$344&255;HEAP8[$348+1>>0]=($344>>8)&255;HEAP8[$348+2>>0]=($344>>16)&255;HEAP8[$348+3>>0]=$344>>24;
    $349 = HEAP32[$122>>2]|0;
    $350 = (($349) + 384|0);
    HEAP32[$122>>2] = $350;
    $351 = (($2) + 3948|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = (($352) + ($16)|0);
    HEAP8[$353>>0] = 0;
    $354 = (($2) + 3952|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = ((($355) + ($16<<1)|0) + 1|0);
    HEAP8[$356>>0] = 0;
    $357 = HEAP32[$354>>2]|0;
    $358 = (($357) + ($16<<1)|0);
    HEAP8[$358>>0] = 0;
    ;HEAP32[$19+0>>2]=269488144|0;HEAP32[$19+4>>2]=269488144|0;HEAP32[$19+8>>2]=269488144|0;HEAP32[$19+12>>2]=269488144|0;HEAP32[$19+16>>2]=269488144|0;HEAP32[$19+20>>2]=269488144|0;
    $359 = (__ZN7WelsDec12InitReadBitsEPN10WelsCommon15TagBitStringAuxEi($4,0)|0);
    $$2 = $359;
    STACKTOP = sp;return ($$2|0);
   }
   else if ((label|0) == 18) {
    $360 = (($pIntraPredMode_tEmP) + 15|0);
    $361 = $360;
    $362 = $361 & 15;
    $363 = $362 ^ 15;
    $364 = (($pIntraPredMode_tEmP) + ($363)|0);
    $365 = (($2) + 3908|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = (($366) + ($16<<1)|0);
    HEAP16[$367>>1] = 1;
    $368 = (($pCtx) + 241928|0);
    $369 = HEAP32[$368>>2]|0;
    $370 = (($369) + 184|0);
    $371 = HEAP8[$370>>0]|0;
    $372 = ($371<<24>>24)==(0);
    if ($372) {
     $$pre117 = (($2) + 3944|0);
     $$pre$phi118Z2D = $$pre117;
    } else {
     $373 = (($4) + 20|0);
     $374 = HEAP32[$373>>2]|0;
     $375 = $374 >>> 31;
     $376 = (($4) + 4|0);
     $377 = HEAP32[$376>>2]|0;
     $378 = HEAP32[$4>>2]|0;
     $379 = $378;
     $380 = (($4) + 16|0);
     $381 = HEAP32[$380>>2]|0;
     $382 = $374 << 1;
     HEAP32[$373>>2] = $382;
     $383 = (($4) + 24|0);
     $384 = HEAP32[$383>>2]|0;
     $385 = (($384) + 1)|0;
     HEAP32[$383>>2] = $385;
     $386 = ($384|0)>(-1);
     do {
      if ($386) {
       $387 = $381;
       $388 = $377;
       $389 = (($387) - ($379))|0;
       $390 = (($388) + 1)|0;
       $391 = (($390) - ($379))|0;
       $392 = ($389|0)>($391|0);
       if ($392) {
        $$2 = 11;
        STACKTOP = sp;return ($$2|0);
       } else {
        $393 = HEAP8[$381>>0]|0;
        $394 = $393&255;
        $395 = $394 << 8;
        $396 = (($381) + 1|0);
        $397 = HEAP8[$396>>0]|0;
        $398 = $397&255;
        $399 = $395 | $398;
        $400 = $399 << $385;
        $401 = $400 | $382;
        HEAP32[$373>>2] = $401;
        $402 = (($384) + -15)|0;
        HEAP32[$383>>2] = $402;
        $403 = (($381) + 2|0);
        HEAP32[$380>>2] = $403;
        break;
       }
      }
     } while(0);
     HEAP32[$uiCode>>2] = $375;
     $404 = (($2) + 3944|0);
     $405 = HEAP32[$404>>2]|0;
     $406 = (($405) + ($16)|0);
     $407 = $375&255;
     HEAP8[$406>>0] = $407;
     $408 = HEAP32[$404>>2]|0;
     $409 = (($408) + ($16)|0);
     $410 = HEAP8[$409>>0]|0;
     $411 = ($410<<24>>24)==(0);
     if ($411) {
      $$pre$phi118Z2D = $404;
     } else {
      $412 = HEAP32[$365>>2]|0;
      $413 = (($412) + ($16<<1)|0);
      HEAP16[$413>>1] = 4;
      $$pre$phi118Z2D = $404;
     }
    }
    $414 = HEAP32[$$pre$phi118Z2D>>2]|0;
    $415 = (($414) + ($16)|0);
    $416 = HEAP8[$415>>0]|0;
    $417 = ($416<<24>>24)==(0);
    $418 = (($pCtx) + 317148|0);
    $419 = HEAP32[$418>>2]|0;
    FUNCTION_TABLE_viiii[$419 & 31]($sNeighAvail,$24,$364,$2);
    if ($417) {
     $420 = (__ZN7WelsDec17ParseIntra4x4ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$sNeighAvail,$364,$4,$2)|0);
     $421 = ($420|0)==(0);
     if ($421) {
      $uiCbpC$0 = 0;$uiCbpL$0 = 0;
      break;
     } else {
      $$2 = $420;
     }
     STACKTOP = sp;return ($$2|0);
    } else {
     $422 = (__ZN7WelsDec17ParseIntra8x8ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$sNeighAvail,$364,$4,$2)|0);
     $423 = ($422|0)==(0);
     if ($423) {
      $uiCbpC$0 = 0;$uiCbpL$0 = 0;
      break;
     } else {
      $$2 = $422;
     }
     STACKTOP = sp;return ($$2|0);
    }
   }
   else if ((label|0) == 28) {
    $424 = (($2) + 3908|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = (($425) + ($16<<1)|0);
    HEAP16[$426>>1] = 2;
    $427 = (($2) + 3944|0);
    $428 = HEAP32[$427>>2]|0;
    $429 = (($428) + ($16)|0);
    HEAP8[$429>>0] = 0;
    $430 = (($2) + 3940|0);
    $431 = HEAP32[$430>>2]|0;
    $432 = (($431) + ($16)|0);
    HEAP8[$432>>0] = 1;
    $433 = (($30) + -6)|0;
    $434 = $433 & 3;
    $435 = $434&255;
    $436 = (($2) + 3992|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = ((($437) + ($16<<3)|0) + 7|0);
    HEAP8[$438>>0] = $435;
    $439 = $433 >>> 2;
    $440 = (3864 + ($439)|0);
    $441 = HEAP8[$440>>0]|0;
    $442 = (($2) + 3956|0);
    $443 = HEAP32[$442>>2]|0;
    $444 = (($443) + ($16)|0);
    HEAP8[$444>>0] = $441;
    $445 = HEAP32[$92>>2]|0;
    $446 = (($445) + 318|0);
    $447 = HEAP8[$446>>0]|0;
    $448 = ($447<<24>>24)==(0);
    $$pre112 = HEAP32[$442>>2]|0;
    $$phi$trans$insert113 = (($$pre112) + ($16)|0);
    $$pre114 = HEAP8[$$phi$trans$insert113>>0]|0;
    if ($448) {
     $825 = 0;
    } else {
     $449 = $$pre114 << 24 >> 24;
     $450 = $449 >> 4;
     $825 = $450;
    }
    $451 = $$pre114&255;
    $452 = $451 & 15;
    __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($sNeighAvail,$24,$2);
    $453 = (__ZN7WelsDec19ParseIntra16x16ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($pCtx,$sNeighAvail,$4,$2)|0);
    $454 = ($453|0)==(0);
    if ($454) {
     $uiCbpC$0 = $825;$uiCbpL$0 = $452;
     break;
    } else {
     $$2 = -1;
    }
    STACKTOP = sp;return ($$2|0);
   }
  }
 } while(0);
 $455 = (($2) + 3908|0);
 $456 = HEAP32[$455>>2]|0;
 $457 = (($456) + ($16<<1)|0);
 $458 = HEAP16[$457>>1]|0;
 $459 = ($458<<16>>16)==(2);
 do {
  if ($459) {
   $$pre116 = (($2) + 3956|0);
   $$pre$phiZ2D = $$pre116;$uiCbpC$1 = $uiCbpC$0;$uiCbpL$1 = $uiCbpL$0;
  } else {
   $460 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($4,$uiCode)|0);
   $461 = ($460|0)==(0);
   if (!($461)) {
    $$2 = $460;
    STACKTOP = sp;return ($$2|0);
   }
   $462 = HEAP32[$uiCode>>2]|0;
   $463 = (($pCtx) + 241924|0);
   $464 = HEAP32[$463>>2]|0;
   $465 = (($464) + 318|0);
   $466 = HEAP8[$465>>0]|0;
   $467 = ($466<<24>>24)!=(0);
   $468 = ($462>>>0)>(47);
   $or$cond6 = $467 & $468;
   if ($or$cond6) {
    $$2 = 1042;
    STACKTOP = sp;return ($$2|0);
   }
   $469 = ($466<<24>>24)==(0);
   $470 = ($462>>>0)>(15);
   $or$cond8 = $469 & $470;
   if ($or$cond8) {
    $$2 = 1042;
    STACKTOP = sp;return ($$2|0);
   }
   $471 = HEAP32[$455>>2]|0;
   $472 = (($471) + ($16<<1)|0);
   $473 = HEAP16[$472>>1]|0;
   do {
    if ((($473<<16>>16) == 4) | (($473<<16>>16) == 1)) {
     if ($469) {
      $475 = (8568 + ($462)|0);
      $$sink$in = $475;
      break;
     } else {
      $474 = (8520 + ($462)|0);
      $$sink$in = $474;
      break;
     }
    } else {
     if ($467) {
      $476 = (8584 + ($462)|0);
      $$sink$in = $476;
      break;
     } else {
      $477 = (8632 + ($462)|0);
      $$sink$in = $477;
      break;
     }
    }
   } while(0);
   $$sink = HEAP8[$$sink$in>>0]|0;
   $478 = (($2) + 3956|0);
   $479 = HEAP32[$478>>2]|0;
   $480 = (($479) + ($16)|0);
   HEAP8[$480>>0] = $$sink;
   $481 = HEAP32[$478>>2]|0;
   $482 = (($481) + ($16)|0);
   $483 = HEAP8[$482>>0]|0;
   $484 = $483 << 24 >> 24;
   $485 = $484 >> 4;
   $486 = $484 & 15;
   $487 = HEAP32[$455>>2]|0;
   $488 = (($487) + ($16<<1)|0);
   $489 = HEAP16[$488>>1]|0;
   $$off = (($489) + -8)<<16>>16;
   $490 = ($$off&65535)<(25);
   if (!($490)) {
    $491 = (($2) + 3940|0);
    $492 = HEAP32[$491>>2]|0;
    $493 = (($492) + ($16)|0);
    $494 = HEAP8[$493>>0]|0;
    $495 = ($494<<24>>24)==(0);
    $496 = ($489<<16>>16)==(4);
    $or$cond = $495 | $496;
    if ($or$cond) {
     $$pre$phiZ2D = $478;$uiCbpC$1 = $485;$uiCbpL$1 = $486;
     break;
    }
   }
   $497 = ($489<<16>>16)!=(1);
   $498 = ($486|0)!=(0);
   $or$cond10 = $497 & $498;
   if ($or$cond10) {
    $499 = (($pCtx) + 241928|0);
    $500 = HEAP32[$499>>2]|0;
    $501 = (($500) + 184|0);
    $502 = HEAP8[$501>>0]|0;
    $503 = ($502<<24>>24)==(0);
    if ($503) {
     $$pre$phiZ2D = $478;$uiCbpC$1 = $485;$uiCbpL$1 = $486;
    } else {
     $504 = (($4) + 20|0);
     $505 = HEAP32[$504>>2]|0;
     $506 = $505 >>> 31;
     $507 = (($4) + 4|0);
     $508 = HEAP32[$507>>2]|0;
     $509 = HEAP32[$4>>2]|0;
     $510 = $509;
     $511 = (($4) + 16|0);
     $512 = HEAP32[$511>>2]|0;
     $513 = $505 << 1;
     HEAP32[$504>>2] = $513;
     $514 = (($4) + 24|0);
     $515 = HEAP32[$514>>2]|0;
     $516 = (($515) + 1)|0;
     HEAP32[$514>>2] = $516;
     $517 = ($515|0)>(-1);
     do {
      if ($517) {
       $518 = $512;
       $519 = $508;
       $520 = (($518) - ($510))|0;
       $521 = (($519) + 1)|0;
       $522 = (($521) - ($510))|0;
       $523 = ($520|0)>($522|0);
       if ($523) {
        $$2 = 11;
        STACKTOP = sp;return ($$2|0);
       } else {
        $524 = HEAP8[$512>>0]|0;
        $525 = $524&255;
        $526 = $525 << 8;
        $527 = (($512) + 1|0);
        $528 = HEAP8[$527>>0]|0;
        $529 = $528&255;
        $530 = $526 | $529;
        $531 = $530 << $516;
        $532 = $531 | $513;
        HEAP32[$504>>2] = $532;
        $533 = (($515) + -15)|0;
        HEAP32[$514>>2] = $533;
        $534 = (($512) + 2|0);
        HEAP32[$511>>2] = $534;
        break;
       }
      }
     } while(0);
     HEAP32[$uiCode>>2] = $506;
     $535 = (($2) + 3944|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = (($536) + ($16)|0);
     $538 = $506&255;
     HEAP8[$537>>0] = $538;
     $$pre$phiZ2D = $478;$uiCbpC$1 = $485;$uiCbpL$1 = $486;
    }
   } else {
    $$pre$phiZ2D = $478;$uiCbpC$1 = $485;$uiCbpL$1 = $486;
   }
  }
 } while(0);
 $539 = ((($18) + (($16*24)|0)|0) + 4|0);
 $540 = ((($18) + (($16*24)|0)|0) + 8|0);
 $541 = ((($18) + (($16*24)|0)|0) + 12|0);
 $542 = ((($18) + (($16*24)|0)|0) + 16|0);
 $543 = ((($18) + (($16*24)|0)|0) + 20|0);
 ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;HEAP32[$19+12>>2]=0|0;HEAP32[$19+16>>2]=0|0;HEAP32[$19+20>>2]=0|0;
 $544 = HEAP32[$$pre$phiZ2D>>2]|0;
 $545 = (($544) + ($16)|0);
 $546 = HEAP8[$545>>0]|0;
 $547 = ($546<<24>>24)==(0);
 do {
  if ($547) {
   $548 = HEAP32[$455>>2]|0;
   $549 = (($548) + ($16<<1)|0);
   $550 = HEAP16[$549>>1]|0;
   if (!((($550<<16>>16) == 1024) | (($550<<16>>16) == 2))) {
    $551 = (($2) + 3868|0);
    $552 = HEAP32[$551>>2]|0;
    $553 = $552&255;
    $554 = (($2) + 3948|0);
    $555 = HEAP32[$554>>2]|0;
    $556 = (($555) + ($16)|0);
    HEAP8[$556>>0] = $553;
    $557 = (($2) + 92|0);
    $558 = (($2) + 3952|0);
    $559 = HEAP32[$554>>2]|0;
    $560 = (($559) + ($16)|0);
    $561 = HEAP8[$560>>0]|0;
    $562 = $561 << 24 >> 24;
    $563 = HEAP32[$557>>2]|0;
    $564 = (($563) + 168|0);
    $565 = HEAP32[$564>>2]|0;
    $566 = (($565) + ($562))|0;
    $567 = ($566|0)<(0);
    if ($567) {
     $570 = 0;
    } else {
     $568 = ($566|0)>(51);
     $$45 = $568 ? 51 : $566;
     $570 = $$45;
    }
    $569 = (16984 + ($570)|0);
    $571 = HEAP8[$569>>0]|0;
    $572 = HEAP32[$558>>2]|0;
    $573 = (($572) + ($16<<1)|0);
    HEAP8[$573>>0] = $571;
    $574 = HEAP32[$554>>2]|0;
    $575 = (($574) + ($16)|0);
    $576 = HEAP8[$575>>0]|0;
    $577 = $576 << 24 >> 24;
    $578 = HEAP32[$557>>2]|0;
    $579 = (($578) + 172|0);
    $580 = HEAP32[$579>>2]|0;
    $581 = (($580) + ($577))|0;
    $582 = ($581|0)<(0);
    if ($582) {
     $584 = 0;
    } else {
     $824 = ($581|0)>(51);
     $$45$1 = $824 ? 51 : $581;
     $584 = $$45$1;
    }
    $583 = (16984 + ($584)|0);
    $585 = HEAP8[$583>>0]|0;
    $586 = HEAP32[$558>>2]|0;
    $587 = ((($586) + ($16<<1)|0) + 1|0);
    HEAP8[$587>>0] = $585;
    $$pre = HEAP32[$$pre$phiZ2D>>2]|0;
    $$phi$trans$insert = (($$pre) + ($16)|0);
    $$pre103 = HEAP8[$$phi$trans$insert>>0]|0;
    $588 = ($$pre103<<24>>24)==(0);
    if (!($588)) {
     break;
    }
   }
   $589 = HEAP32[$455>>2]|0;
   $590 = (($589) + ($16<<1)|0);
   $591 = HEAP16[$590>>1]|0;
   $592 = ($591<<16>>16)==(2);
   if (!($592)) {
    $$2 = 0;
    STACKTOP = sp;return ($$2|0);
   }
  }
 } while(0);
 $593 = (($2) + 3988|0);
 $594 = HEAP32[$593>>2]|0;
 $595 = (($594) + (($16*768)|0)|0);
 _memset(($595|0),0,768)|0;
 $596 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($4,$vararg_buffer)|0);
 $597 = ($596|0)==(0);
 if (!($597)) {
  $$2 = $596;
  STACKTOP = sp;return ($$2|0);
 }
 $598 = HEAP32[$vararg_buffer>>2]|0;
 $599 = $598 & 1;
 $600 = ($599|0)==(0);
 if ($600) {
  $603 = $598 >>> 1;
  $604 = (0 - ($603))|0;
  $$ph = $604;
 } else {
  $601 = (($598) + 1)|0;
  $602 = $601 >>> 1;
  $$ph = $602;
 }
 $$off18 = (($$ph) + 26)|0;
 $605 = ($$off18>>>0)>(51);
 if ($605) {
  $$2 = 1027;
  STACKTOP = sp;return ($$2|0);
 }
 $606 = (($2) + 3868|0);
 $607 = HEAP32[$606>>2]|0;
 $608 = (($$ph) + 52)|0;
 $609 = (($608) + ($607))|0;
 $610 = (($609|0) % 52)&-1;
 $611 = $610&255;
 $612 = (($2) + 3948|0);
 $613 = HEAP32[$612>>2]|0;
 $614 = (($613) + ($16)|0);
 HEAP8[$614>>0] = $611;
 $615 = HEAP32[$612>>2]|0;
 $616 = (($615) + ($16)|0);
 $617 = HEAP8[$616>>0]|0;
 $618 = $617 << 24 >> 24;
 HEAP32[$606>>2] = $618;
 $619 = (($2) + 92|0);
 $620 = (($2) + 3952|0);
 $621 = HEAP32[$619>>2]|0;
 $622 = (($621) + 168|0);
 $623 = HEAP32[$622>>2]|0;
 $624 = (($623) + ($618))|0;
 $625 = ($624|0)<(0);
 if ($625) {
  $628 = 0;
 } else {
  $626 = ($624|0)>(51);
  $$46 = $626 ? 51 : $624;
  $628 = $$46;
 }
 $627 = (16984 + ($628)|0);
 $629 = HEAP8[$627>>0]|0;
 $630 = HEAP32[$620>>2]|0;
 $631 = (($630) + ($16<<1)|0);
 HEAP8[$631>>0] = $629;
 $632 = HEAP32[$606>>2]|0;
 $633 = HEAP32[$619>>2]|0;
 $634 = (($633) + 172|0);
 $635 = HEAP32[$634>>2]|0;
 $636 = (($635) + ($632))|0;
 $637 = ($636|0)<(0);
 if ($637) {
  $816 = 0;
 } else {
  $814 = ($636|0)>(51);
  $$46$1 = $814 ? 51 : $636;
  $816 = $$46$1;
 }
 $815 = (16984 + ($816)|0);
 $817 = HEAP8[$815>>0]|0;
 $818 = HEAP32[$620>>2]|0;
 $819 = ((($818) + ($16<<1)|0) + 1|0);
 HEAP8[$819>>0] = $817;
 __ZN7WelsDec12BsStartCavlcEPN10WelsCommon15TagBitStringAuxE($4);
 $820 = HEAP32[$455>>2]|0;
 $821 = (($820) + ($16<<1)|0);
 $822 = HEAP16[$821>>1]|0;
 $823 = ($822<<16>>16)==(2);
 do {
  if ($823) {
   $638 = HEAP32[$593>>2]|0;
   $639 = (($638) + (($16*768)|0)|0);
   $640 = HEAP32[$612>>2]|0;
   $641 = (($640) + ($16)|0);
   $642 = HEAP8[$641>>0]|0;
   $643 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0,$24,$4,0,16,8496,1,$639,$642,$pCtx)|0);
   $644 = ($643|0)==(0);
   if (!($644)) {
    $$2 = -1;
    STACKTOP = sp;return ($$2|0);
   }
   $645 = ($uiCbpL$1|0)==(0);
   if (!($645)) {
    $646 = ($7>>>0)>(1);
    $647 = $646 ? $7 : 1;
    $648 = (($10) + 1)|0;
    $649 = (($648) - ($647))|0;
    $650 = (3872 + ($647)|0);
    $i$270 = 0;
    while(1) {
     $653 = HEAP32[$593>>2]|0;
     $654 = $i$270 << 4;
     $655 = ((($653) + (($16*768)|0)|0) + ($654<<1)|0);
     $656 = HEAP32[$612>>2]|0;
     $657 = (($656) + ($16)|0);
     $658 = HEAP8[$657>>0]|0;
     $659 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0,$24,$4,$i$270,$649,$650,2,$655,$658,$pCtx)|0);
     $660 = ($659|0)==(0);
     $651 = (($i$270) + 1)|0;
     if (!($660)) {
      $$2 = -1;
      label = 107;
      break;
     }
     $652 = ($651|0)<(16);
     if ($652) {
      $i$270 = $651;
     } else {
      label = 71;
      break;
     }
    }
    if ((label|0) == 71) {
     $$sum35 = (($23) + 9)|0;
     $661 = (($pNonZeroCount_tEmP) + ($$sum35)|0);
     $662 = HEAPU8[$661>>0]|(HEAPU8[$661+1>>0]<<8)|(HEAPU8[$661+2>>0]<<16)|(HEAPU8[$661+3>>0]<<24);
     HEAP32[$19>>2] = $662;
     $$sum36 = (($23) + 17)|0;
     $663 = (($pNonZeroCount_tEmP) + ($$sum36)|0);
     $664 = HEAPU8[$663>>0]|(HEAPU8[$663+1>>0]<<8)|(HEAPU8[$663+2>>0]<<16)|(HEAPU8[$663+3>>0]<<24);
     HEAP32[$539>>2] = $664;
     $$sum37 = (($23) + 25)|0;
     $665 = (($pNonZeroCount_tEmP) + ($$sum37)|0);
     $666 = HEAPU8[$665>>0]|(HEAPU8[$665+1>>0]<<8)|(HEAPU8[$665+2>>0]<<16)|(HEAPU8[$665+3>>0]<<24);
     HEAP32[$540>>2] = $666;
     $$sum38 = (($23) + 33)|0;
     $667 = (($pNonZeroCount_tEmP) + ($$sum38)|0);
     $668 = HEAPU8[$667>>0]|(HEAPU8[$667+1>>0]<<8)|(HEAPU8[$667+2>>0]<<16)|(HEAPU8[$667+3>>0]<<24);
     HEAP32[$541>>2] = $668;
     break;
    }
    else if ((label|0) == 107) {
     STACKTOP = sp;return ($$2|0);
    }
   }
  } else {
   $669 = (($2) + 3944|0);
   $670 = HEAP32[$669>>2]|0;
   $671 = (($670) + ($16)|0);
   $672 = HEAP8[$671>>0]|0;
   $673 = ($672<<24>>24)==(0);
   $674 = (1 - ($7))|0;
   $675 = (($674) + ($10))|0;
   if ($673) {
    $677 = (3872 + ($7)|0);
    $717 = $822;$iId8x8$177 = 0;
    L135: while(1) {
     $716 = $717 & 519;
     $718 = ($716<<16>>16)!=(0);
     $719 = $718 ? 11 : 12;
     $720 = 1 << $iId8x8$177;
     $721 = $720 & $uiCbpL$1;
     $722 = ($721|0)==(0);
     $723 = $iId8x8$177 << 2;
     if ($722) {
      $735 = (16560 + ($723)|0);
      $736 = HEAP8[$735>>0]|0;
      $737 = $736&255;
      $$sum27 = (($737) + ($23))|0;
      $738 = (($pNonZeroCount_tEmP) + ($$sum27)|0);
      HEAP8[$738>>0]=0&255;HEAP8[$738+1>>0]=0>>8;
      $739 = $723 | 2;
      $740 = (16560 + ($739)|0);
      $741 = HEAP8[$740>>0]|0;
      $742 = $741&255;
      $$sum28 = (($742) + ($23))|0;
      $743 = (($pNonZeroCount_tEmP) + ($$sum28)|0);
      HEAP8[$743>>0]=0&255;HEAP8[$743+1>>0]=0>>8;
     } else {
      $iId4x4$174 = 0;$iIndex12$075 = $723;
      while(1) {
       $724 = HEAP32[$593>>2]|0;
       $725 = $iIndex12$075 << 4;
       $726 = ((($724) + (($16*768)|0)|0) + ($725<<1)|0);
       $727 = HEAP32[$612>>2]|0;
       $728 = (($727) + ($16)|0);
       $729 = HEAP8[$728>>0]|0;
       $730 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0,$24,$4,$iIndex12$075,$675,$677,$719,$726,$729,$pCtx)|0);
       $731 = ($730|0)==(0);
       if (!($731)) {
        $$2 = -1;
        label = 107;
        break L135;
       }
       $732 = (($iIndex12$075) + 1)|0;
       $733 = (($iId4x4$174) + 1)|0;
       $734 = ($733|0)<(4);
       if ($734) {
        $iId4x4$174 = $733;$iIndex12$075 = $732;
       } else {
        break;
       }
      }
     }
     $744 = (($iId8x8$177) + 1)|0;
     $745 = ($744|0)<(4);
     if (!($745)) {
      label = 89;
      break;
     }
     $$pre104 = HEAP32[$455>>2]|0;
     $$phi$trans$insert105 = (($$pre104) + ($16<<1)|0);
     $$pre106 = HEAP16[$$phi$trans$insert105>>1]|0;
     $717 = $$pre106;$iId8x8$177 = $744;
    }
    if ((label|0) == 89) {
     $$sum = (($23) + 9)|0;
     $746 = (($pNonZeroCount_tEmP) + ($$sum)|0);
     $747 = HEAPU8[$746>>0]|(HEAPU8[$746+1>>0]<<8)|(HEAPU8[$746+2>>0]<<16)|(HEAPU8[$746+3>>0]<<24);
     HEAP32[$19>>2] = $747;
     $$sum19 = (($23) + 17)|0;
     $748 = (($pNonZeroCount_tEmP) + ($$sum19)|0);
     $749 = HEAPU8[$748>>0]|(HEAPU8[$748+1>>0]<<8)|(HEAPU8[$748+2>>0]<<16)|(HEAPU8[$748+3>>0]<<24);
     HEAP32[$539>>2] = $749;
     $$sum20 = (($23) + 25)|0;
     $750 = (($pNonZeroCount_tEmP) + ($$sum20)|0);
     $751 = HEAPU8[$750>>0]|(HEAPU8[$750+1>>0]<<8)|(HEAPU8[$750+2>>0]<<16)|(HEAPU8[$750+3>>0]<<24);
     HEAP32[$540>>2] = $751;
     $$sum21 = (($23) + 33)|0;
     $752 = (($pNonZeroCount_tEmP) + ($$sum21)|0);
     $753 = HEAPU8[$752>>0]|(HEAPU8[$752+1>>0]<<8)|(HEAPU8[$752+2>>0]<<16)|(HEAPU8[$752+3>>0]<<24);
     HEAP32[$541>>2] = $753;
     break;
    }
    else if ((label|0) == 107) {
     STACKTOP = sp;return ($$2|0);
    }
   }
   $676 = (3888 + ($7)|0);
   $679 = $822;$iId8x8$084 = 0;
   L148: while(1) {
    $678 = $679 & 519;
    $680 = ($678<<16>>16)!=(0);
    $681 = $680 ? 11 : 12;
    $682 = 1 << $iId8x8$084;
    $683 = $682 & $uiCbpL$1;
    $684 = ($683|0)==(0);
    $685 = $iId8x8$084 << 2;
    if ($684) {
     $697 = (16560 + ($685)|0);
     $698 = HEAP8[$697>>0]|0;
     $699 = $698&255;
     $$sum33 = (($699) + ($23))|0;
     $700 = (($pNonZeroCount_tEmP) + ($$sum33)|0);
     HEAP8[$700>>0]=0&255;HEAP8[$700+1>>0]=0>>8;
     $701 = $685 | 2;
     $702 = (16560 + ($701)|0);
     $703 = HEAP8[$702>>0]|0;
     $704 = $703&255;
     $$sum34 = (($704) + ($23))|0;
     $705 = (($pNonZeroCount_tEmP) + ($$sum34)|0);
     HEAP8[$705>>0]=0&255;HEAP8[$705+1>>0]=0>>8;
    } else {
     $686 = $iId8x8$084 << 6;
     $iId4x4$081 = 0;$iIndex11$082 = $685;
     while(1) {
      $687 = HEAP32[$593>>2]|0;
      $688 = ((($687) + (($16*768)|0)|0) + ($686<<1)|0);
      $689 = HEAP32[$612>>2]|0;
      $690 = (($689) + ($16)|0);
      $691 = HEAP8[$690>>0]|0;
      $692 = (__ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($0,$24,$4,$iIndex11$082,$675,$676,$681,$688,$iId4x4$081,$691,$pCtx)|0);
      $693 = ($692|0)==(0);
      if (!($693)) {
       $$2 = -1;
       label = 107;
       break L148;
      }
      $694 = (($iIndex11$082) + 1)|0;
      $695 = (($iId4x4$081) + 1)|0;
      $696 = ($695|0)<(4);
      if ($696) {
       $iId4x4$081 = $695;$iIndex11$082 = $694;
      } else {
       break;
      }
     }
    }
    $706 = (($iId8x8$084) + 1)|0;
    $707 = ($706|0)<(4);
    if (!($707)) {
     label = 82;
     break;
    }
    $$pre108 = HEAP32[$455>>2]|0;
    $$phi$trans$insert109 = (($$pre108) + ($16<<1)|0);
    $$pre110 = HEAP16[$$phi$trans$insert109>>1]|0;
    $679 = $$pre110;$iId8x8$084 = $706;
   }
   if ((label|0) == 82) {
    $$sum29 = (($23) + 9)|0;
    $708 = (($pNonZeroCount_tEmP) + ($$sum29)|0);
    $709 = HEAPU8[$708>>0]|(HEAPU8[$708+1>>0]<<8)|(HEAPU8[$708+2>>0]<<16)|(HEAPU8[$708+3>>0]<<24);
    HEAP32[$19>>2] = $709;
    $$sum30 = (($23) + 17)|0;
    $710 = (($pNonZeroCount_tEmP) + ($$sum30)|0);
    $711 = HEAPU8[$710>>0]|(HEAPU8[$710+1>>0]<<8)|(HEAPU8[$710+2>>0]<<16)|(HEAPU8[$710+3>>0]<<24);
    HEAP32[$539>>2] = $711;
    $$sum31 = (($23) + 25)|0;
    $712 = (($pNonZeroCount_tEmP) + ($$sum31)|0);
    $713 = HEAPU8[$712>>0]|(HEAPU8[$712+1>>0]<<8)|(HEAPU8[$712+2>>0]<<16)|(HEAPU8[$712+3>>0]<<24);
    HEAP32[$540>>2] = $713;
    $$sum32 = (($23) + 33)|0;
    $714 = (($pNonZeroCount_tEmP) + ($$sum32)|0);
    $715 = HEAPU8[$714>>0]|(HEAPU8[$714+1>>0]<<8)|(HEAPU8[$714+2>>0]<<16)|(HEAPU8[$714+3>>0]<<24);
    HEAP32[$541>>2] = $715;
    break;
   }
   else if ((label|0) == 107) {
    STACKTOP = sp;return ($$2|0);
   }
  }
 } while(0);
 $754 = ($uiCbpC$1|0)==(2);
 $uiCbpC$1$off = (($uiCbpC$1) + -1)|0;
 $755 = ($uiCbpC$1$off>>>0)<(2);
 L162: do {
  if ($755) {
   $i$367 = 0;
   while(1) {
    $758 = HEAP32[$455>>2]|0;
    $759 = (($758) + ($16<<1)|0);
    $760 = HEAP16[$759>>1]|0;
    $761 = $760 & 519;
    $762 = ($761<<16>>16)==(0);
    $763 = ($i$367|0)!=(0);
    if ($762) {
     $765 = $763 ? 14 : 13;
     $iMbResProperty$0 = $765;
    } else {
     $764 = $763 ? 8 : 7;
     $iMbResProperty$0 = $764;
    }
    $766 = $i$367 << 2;
    $767 = (($766) + 16)|0;
    $768 = HEAP32[$593>>2]|0;
    $769 = $i$367 << 6;
    $$sum26 = (($769) + 256)|0;
    $770 = ((($768) + (($16*768)|0)|0) + ($$sum26<<1)|0);
    $771 = HEAP32[$620>>2]|0;
    $772 = ((($771) + ($16<<1)|0) + ($i$367)|0);
    $773 = HEAP8[$772>>0]|0;
    $774 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0,$24,$4,$767,4,8512,$iMbResProperty$0,$770,$773,$pCtx)|0);
    $775 = ($774|0)==(0);
    $756 = (($i$367) + 1)|0;
    if (!($775)) {
     $$2 = -1;
     break;
    }
    $757 = ($756|0)<(2);
    if ($757) {
     $i$367 = $756;
    } else {
     break L162;
    }
   }
   STACKTOP = sp;return ($$2|0);
  }
 } while(0);
 do {
  if ($754) {
   $776 = ($7>>>0)>(1);
   $777 = $776 ? $7 : 1;
   $778 = (($10) + 1)|0;
   $779 = (($778) - ($777))|0;
   $780 = (3872 + ($777)|0);
   $i$464 = 0;
   L174: while(1) {
    $781 = HEAP32[$455>>2]|0;
    $782 = (($781) + ($16<<1)|0);
    $783 = HEAP16[$782>>1]|0;
    $784 = $783 & 519;
    $785 = ($784<<16>>16)==(0);
    $786 = ($i$464|0)!=(0);
    if ($785) {
     $788 = $786 ? 16 : 15;
     $iMbResProperty$1 = $788;
    } else {
     $787 = $786 ? 10 : 9;
     $iMbResProperty$1 = $787;
    }
    $789 = $i$464 << 2;
    $790 = (($789) + 16)|0;
    $iId4x4$262 = 0;$iIndex13$063 = $790;
    while(1) {
     $791 = HEAP32[$593>>2]|0;
     $792 = $iIndex13$063 << 4;
     $793 = ((($791) + (($16*768)|0)|0) + ($792<<1)|0);
     $794 = HEAP32[$620>>2]|0;
     $795 = ((($794) + ($16<<1)|0) + ($i$464)|0);
     $796 = HEAP8[$795>>0]|0;
     $797 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0,$24,$4,$iIndex13$063,$779,$780,$iMbResProperty$1,$793,$796,$pCtx)|0);
     $798 = ($797|0)==(0);
     if (!($798)) {
      $$2 = -1;
      label = 107;
      break L174;
     }
     $799 = (($iIndex13$063) + 1)|0;
     $800 = (($iId4x4$262) + 1)|0;
     $801 = ($800|0)<(4);
     if ($801) {
      $iId4x4$262 = $800;$iIndex13$063 = $799;
     } else {
      break;
     }
    }
    $802 = (($i$464) + 1)|0;
    $803 = ($802|0)<(2);
    if ($803) {
     $i$464 = $802;
    } else {
     label = 105;
     break;
    }
   }
   if ((label|0) == 105) {
    $$sum22 = (($23) + 14)|0;
    $804 = (($pNonZeroCount_tEmP) + ($$sum22)|0);
    $805 = HEAP16[$804>>1]|0;
    HEAP16[$542>>1] = $805;
    $$sum23 = (($23) + 22)|0;
    $806 = (($pNonZeroCount_tEmP) + ($$sum23)|0);
    $807 = HEAP16[$806>>1]|0;
    HEAP16[$543>>1] = $807;
    $$sum24 = (($23) + 38)|0;
    $808 = (($pNonZeroCount_tEmP) + ($$sum24)|0);
    $809 = HEAP16[$808>>1]|0;
    $810 = ((($18) + (($16*24)|0)|0) + 18|0);
    HEAP16[$810>>1] = $809;
    $$sum25 = (($23) + 46)|0;
    $811 = (($pNonZeroCount_tEmP) + ($$sum25)|0);
    $812 = HEAP16[$811>>1]|0;
    $813 = ((($18) + (($16*24)|0)|0) + 22|0);
    HEAP16[$813>>1] = $812;
    break;
   }
   else if ((label|0) == 107) {
    STACKTOP = sp;return ($$2|0);
   }
  }
 } while(0);
 __ZN7WelsDec10BsEndCavlcEPN10WelsCommon15TagBitStringAuxE($4);
 $$2 = 0;
 STACKTOP = sp;return ($$2|0);
}
function __ZN7WelsDec17WelsBlockFuncInitEPNS_12TagBlockFuncEi($pFunc,$iCpu) {
 $pFunc = $pFunc|0;
 $iCpu = $iCpu|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pFunc>>2] = 12;
 $0 = (($pFunc) + 4|0);
 HEAP32[$0>>2] = 5;
 $1 = (($pFunc) + 8|0);
 HEAP32[$1>>2] = 6;
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsBlockZero16x16_cEPsi($pBlock,$iStride) {
 $pBlock = $pBlock|0;
 $iStride = $iStride|0;
 var $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$pBlock+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $0 = (($pBlock) + ($iStride<<1)|0);
 dest=$0+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum = $iStride << 1;
 $1 = (($pBlock) + ($$sum<<1)|0);
 dest=$1+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum2 = (($$sum) + ($iStride))|0;
 $2 = (($pBlock) + ($$sum2<<1)|0);
 dest=$2+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum3 = (($$sum2) + ($iStride))|0;
 $3 = (($pBlock) + ($$sum3<<1)|0);
 dest=$3+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum4 = (($$sum3) + ($iStride))|0;
 $4 = (($pBlock) + ($$sum4<<1)|0);
 dest=$4+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum5 = (($$sum4) + ($iStride))|0;
 $5 = (($pBlock) + ($$sum5<<1)|0);
 dest=$5+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum6 = (($$sum5) + ($iStride))|0;
 $6 = (($pBlock) + ($$sum6<<1)|0);
 dest=$6+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum7 = (($$sum6) + ($iStride))|0;
 $7 = (($pBlock) + ($$sum7<<1)|0);
 dest=$7+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum8 = (($$sum7) + ($iStride))|0;
 $8 = (($pBlock) + ($$sum8<<1)|0);
 dest=$8+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum9 = (($$sum8) + ($iStride))|0;
 $9 = (($pBlock) + ($$sum9<<1)|0);
 dest=$9+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum10 = (($$sum9) + ($iStride))|0;
 $10 = (($pBlock) + ($$sum10<<1)|0);
 dest=$10+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum11 = (($$sum10) + ($iStride))|0;
 $11 = (($pBlock) + ($$sum11<<1)|0);
 dest=$11+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum12 = (($$sum11) + ($iStride))|0;
 $12 = (($pBlock) + ($$sum12<<1)|0);
 dest=$12+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum13 = (($$sum12) + ($iStride))|0;
 $13 = (($pBlock) + ($$sum13<<1)|0);
 dest=$13+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $$sum14 = (($$sum13) + ($iStride))|0;
 $14 = (($pBlock) + ($$sum14<<1)|0);
 dest=$14+0|0; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN7WelsDec18WelsBlockZero8x8_cEPsi($pBlock,$iStride) {
 $pBlock = $pBlock|0;
 $iStride = $iStride|0;
 var $$sum = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP16[$pBlock+0>>1]=0|0;HEAP16[$pBlock+2>>1]=0|0;HEAP16[$pBlock+4>>1]=0|0;HEAP16[$pBlock+6>>1]=0|0;HEAP16[$pBlock+8>>1]=0|0;HEAP16[$pBlock+10>>1]=0|0;HEAP16[$pBlock+12>>1]=0|0;HEAP16[$pBlock+14>>1]=0|0;
 $0 = (($pBlock) + ($iStride<<1)|0);
 ;HEAP16[$0+0>>1]=0|0;HEAP16[$0+2>>1]=0|0;HEAP16[$0+4>>1]=0|0;HEAP16[$0+6>>1]=0|0;HEAP16[$0+8>>1]=0|0;HEAP16[$0+10>>1]=0|0;HEAP16[$0+12>>1]=0|0;HEAP16[$0+14>>1]=0|0;
 $$sum = $iStride << 1;
 $1 = (($pBlock) + ($$sum<<1)|0);
 ;HEAP16[$1+0>>1]=0|0;HEAP16[$1+2>>1]=0|0;HEAP16[$1+4>>1]=0|0;HEAP16[$1+6>>1]=0|0;HEAP16[$1+8>>1]=0|0;HEAP16[$1+10>>1]=0|0;HEAP16[$1+12>>1]=0|0;HEAP16[$1+14>>1]=0|0;
 $$sum2 = (($$sum) + ($iStride))|0;
 $2 = (($pBlock) + ($$sum2<<1)|0);
 ;HEAP16[$2+0>>1]=0|0;HEAP16[$2+2>>1]=0|0;HEAP16[$2+4>>1]=0|0;HEAP16[$2+6>>1]=0|0;HEAP16[$2+8>>1]=0|0;HEAP16[$2+10>>1]=0|0;HEAP16[$2+12>>1]=0|0;HEAP16[$2+14>>1]=0|0;
 $$sum3 = (($$sum2) + ($iStride))|0;
 $3 = (($pBlock) + ($$sum3<<1)|0);
 ;HEAP16[$3+0>>1]=0|0;HEAP16[$3+2>>1]=0|0;HEAP16[$3+4>>1]=0|0;HEAP16[$3+6>>1]=0|0;HEAP16[$3+8>>1]=0|0;HEAP16[$3+10>>1]=0|0;HEAP16[$3+12>>1]=0|0;HEAP16[$3+14>>1]=0|0;
 $$sum4 = (($$sum3) + ($iStride))|0;
 $4 = (($pBlock) + ($$sum4<<1)|0);
 ;HEAP16[$4+0>>1]=0|0;HEAP16[$4+2>>1]=0|0;HEAP16[$4+4>>1]=0|0;HEAP16[$4+6>>1]=0|0;HEAP16[$4+8>>1]=0|0;HEAP16[$4+10>>1]=0|0;HEAP16[$4+12>>1]=0|0;HEAP16[$4+14>>1]=0|0;
 $$sum5 = (($$sum4) + ($iStride))|0;
 $5 = (($pBlock) + ($$sum5<<1)|0);
 ;HEAP16[$5+0>>1]=0|0;HEAP16[$5+2>>1]=0|0;HEAP16[$5+4>>1]=0|0;HEAP16[$5+6>>1]=0|0;HEAP16[$5+8>>1]=0|0;HEAP16[$5+10>>1]=0|0;HEAP16[$5+12>>1]=0|0;HEAP16[$5+14>>1]=0|0;
 $$sum6 = (($$sum5) + ($iStride))|0;
 $6 = (($pBlock) + ($$sum6<<1)|0);
 ;HEAP16[$6+0>>1]=0|0;HEAP16[$6+2>>1]=0|0;HEAP16[$6+4>>1]=0|0;HEAP16[$6+6>>1]=0|0;HEAP16[$6+8>>1]=0|0;HEAP16[$6+10>>1]=0|0;HEAP16[$6+12>>1]=0|0;HEAP16[$6+14>>1]=0|0;
 STACKTOP = sp;return;
}
function _WelsRequestMem($pCtx,$kiMbWidth,$kiMbHeight) {
 $pCtx = $pCtx|0;
 $kiMbWidth = $kiMbWidth|0;
 $kiMbHeight = $kiMbHeight|0;
 var $$0 = 0, $$4 = 0, $$iNumRefFrames$0$i = 0, $$lcssa$i = 0, $$lcssa$i$1 = 0, $$lcssa$i11$i = 0, $$lcssa$i13$i = 0, $$not = 0, $$pre = 0, $$pre$i = 0, $$pre$i11$i = 0, $$pre$i21 = 0, $$pre$i21$1 = 0, $$pre$i9$i = 0, $$pre$phi40Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre$i = 0, $$pre39 = 0, $$pre6$i = 0, $$pre6$i$1 = 0;
 var $$pre6$i10$i = 0, $$pre6$i12$i = 0, $$pre7$i = 0, $$pre7$i$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bNeedChangePicQueue$0$off0 = 0, $brmerge = 0, $exitcond$i = 0, $i$017$i = 0;
 var $i$07$i = 0, $iNumRefFrames$0$i = 0, $iPicIdx$0$ph$i = 0, $iPicIdx$01$i = 0, $iPicIdx$01$i$1 = 0, $iPicIdx$01$i7$i = 0, $iPicIdx$01$i9$i = 0, $iPicIdx$016$i = 0, $iPicIdx$019$i = 0, $iPicIdx$08$i = 0, $iPrevPicIdx$013$i = 0, $iPrevPicIdx$014$i = 0, $iPrevPicIdx$017$i = 0, $not$ = 0, $or$cond = 0, $or$cond$i5 = 0, $or$cond3 = 0, $vararg_buffer12 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer12 = sp;
 $0 = $kiMbWidth << 4;
 $1 = $kiMbHeight << 4;
 $2 = (($pCtx) + 562528|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($pCtx|0)==(0|0);
 $5 = ($0|0)<(1);
 $or$cond = $4 | $5;
 $6 = ($1|0)<(1);
 $or$cond3 = $or$cond | $6;
 if ($or$cond3) {
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pCtx) + 241924|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $iNumRefFrames$0$i = 18;
 } else {
  $10 = (($8) + 296|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 2)|0;
  $iNumRefFrames$0$i = $12;
 }
 $13 = ($iNumRefFrames$0$i|0)<(2);
 $$iNumRefFrames$0$i = $13 ? 2 : $iNumRefFrames$0$i;
 $14 = (($pCtx) + 209448|0);
 HEAP32[$14>>2] = $$iNumRefFrames$0$i;
 $15 = (($pCtx) + 209440|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $bNeedChangePicQueue$0$off0 = 1;
 } else {
  $18 = (($16) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $not$ = ($19|0)!=($$iNumRefFrames$0$i|0);
  $bNeedChangePicQueue$0$off0 = $not$;
 }
 $20 = (($pCtx) + 64|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)==(0);
 if (!($22)) {
  $23 = (($pCtx) + 68|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($0|0)==($24|0);
  if ($25) {
   $26 = (($pCtx) + 72|0);
   $27 = HEAP32[$26>>2]|0;
   $$not = ($1|0)!=($27|0);
   $brmerge = $$not | $bNeedChangePicQueue$0$off0;
   if (!($brmerge)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($pCtx);
 $28 = HEAP8[$20>>0]|0;
 $29 = ($28<<24>>24)==(0);
 do {
  if ($29) {
   HEAP32[$vararg_buffer12>>2] = $0;
   $vararg_ptr15 = (($vararg_buffer12) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $1;
   $vararg_ptr16 = (($vararg_buffer12) + 8|0);
   HEAP32[$vararg_ptr16>>2] = $$iNumRefFrames$0$i;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,4,4544,$vararg_buffer12);
   label = 58;
  } else {
   $30 = (($pCtx) + 68|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($0|0)==($31|0);
   if ($32) {
    $33 = (($pCtx) + 72|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($1|0)==($34|0);
    if ($35) {
     $36 = HEAP32[$15>>2]|0;
     $37 = ($36|0)==(0|0);
     if (!($37)) {
      $38 = (($36) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==($$iNumRefFrames$0$i|0);
      if (!($40)) {
       HEAP32[$vararg_buffer12>>2] = $0;
       $vararg_ptr1 = (($vararg_buffer12) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $1;
       $vararg_ptr2 = (($vararg_buffer12) + 8|0);
       HEAP32[$vararg_ptr2>>2] = $39;
       $vararg_ptr3 = (($vararg_buffer12) + 12|0);
       HEAP32[$vararg_ptr3>>2] = $$iNumRefFrames$0$i;
       __Z7WelsLogP13TagLogContextiPKcz($pCtx,4,4296,$vararg_buffer12);
       $41 = HEAP32[$15>>2]|0;
       $42 = (($41) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ($43|0)<($$iNumRefFrames$0$i|0);
       $45 = ($43|0)<(1);
       $46 = ($$iNumRefFrames$0$i|0)<(1);
       $or$cond$i5 = $45 | $46;
       if ($44) {
        if ($or$cond$i5) {
         $$0 = 1;
         STACKTOP = sp;return ($$0|0);
        }
        $47 = HEAP32[$2>>2]|0;
        $48 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($47,12,4944)|0);
        $49 = ($48|0)==(0|0);
        if ($49) {
         $$0 = 1;
         STACKTOP = sp;return ($$0|0);
        }
        $50 = $$iNumRefFrames$0$i << 2;
        $51 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($47,$50,4960)|0);
        HEAP32[$48>>2] = $51;
        $52 = ($51|0)==(0|0);
        if ($52) {
         $53 = (($48) + 4|0);
         HEAP32[$53>>2] = 0;
         $54 = (($48) + 8|0);
         HEAP32[$54>>2] = 0;
         __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($47,$48,4288);
         $$0 = 1;
         STACKTOP = sp;return ($$0|0);
        } else {
         $iPicIdx$019$i = $43;
        }
        while(1) {
         $55 = (__ZN7WelsDec12AllocPictureEPNS_21TagWelsDecoderContextEii($pCtx,$0,$1)|0);
         $56 = ($55|0)==(0|0);
         if ($56) {
          break;
         }
         $69 = HEAP32[$48>>2]|0;
         $70 = (($69) + ($iPicIdx$019$i<<2)|0);
         HEAP32[$70>>2] = $55;
         $71 = (($iPicIdx$019$i) + 1)|0;
         $72 = ($71|0)<($$iNumRefFrames$0$i|0);
         if ($72) {
          $iPicIdx$019$i = $71;
         } else {
          label = 28;
          break;
         }
        }
        if ((label|0) == 28) {
         $$pre$i = HEAP32[$48>>2]|0;
         $73 = HEAP32[$41>>2]|0;
         $74 = $43 << 2;
         _memcpy(($$pre$i|0),($73|0),($74|0))|0;
         $75 = (($48) + 4|0);
         HEAP32[$75>>2] = $$iNumRefFrames$0$i;
         $76 = (($41) + 8|0);
         $77 = HEAP32[$76>>2]|0;
         $78 = (($48) + 8|0);
         HEAP32[$78>>2] = $77;
         HEAP32[$15>>2] = $48;
         $79 = HEAP32[$75>>2]|0;
         $80 = ($79|0)>(0);
         if ($80) {
          $i$017$i = 0;
          while(1) {
           $81 = HEAP32[$48>>2]|0;
           $82 = (($81) + ($i$017$i<<2)|0);
           $83 = HEAP32[$82>>2]|0;
           $84 = (($83) + 68|0);
           HEAP8[$84>>0] = 0;
           $85 = HEAP32[$48>>2]|0;
           $86 = (($85) + ($i$017$i<<2)|0);
           $87 = HEAP32[$86>>2]|0;
           $88 = (($87) + 69|0);
           HEAP8[$88>>0] = 0;
           $89 = HEAP32[$48>>2]|0;
           $90 = (($89) + ($i$017$i<<2)|0);
           $91 = HEAP32[$90>>2]|0;
           $92 = (($91) + 70|0);
           HEAP8[$92>>0] = 0;
           $93 = HEAP32[$48>>2]|0;
           $94 = (($93) + ($i$017$i<<2)|0);
           $95 = HEAP32[$94>>2]|0;
           $96 = (($95) + 71|0);
           HEAP8[$96>>0] = 1;
           $97 = HEAP32[$48>>2]|0;
           $98 = (($97) + ($i$017$i<<2)|0);
           $99 = HEAP32[$98>>2]|0;
           $100 = (($99) + 72|0);
           HEAP8[$100>>0] = 0;
           $101 = (($i$017$i) + 1)|0;
           $102 = HEAP32[$75>>2]|0;
           $103 = ($101|0)<($102|0);
           if ($103) {
            $i$017$i = $101;
           } else {
            break;
           }
          }
         }
         $104 = HEAP32[$41>>2]|0;
         $105 = ($104|0)==(0|0);
         if (!($105)) {
          __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($47,$104,4976);
          HEAP32[$41>>2] = 0;
         }
         HEAP32[$42>>2] = 0;
         HEAP32[$76>>2] = 0;
         __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($47,$41,5000);
         $$pre$phi40Z2D = $33;$$pre$phiZ2D = $30;
         break;
        }
        $57 = (($48) + 4|0);
        HEAP32[$57>>2] = $iPicIdx$019$i;
        $58 = HEAP32[$48>>2]|0;
        $59 = ($58|0)==(0|0);
        if (!($59)) {
         $60 = ($iPicIdx$019$i|0)>(0);
         if ($60) {
          $244 = $iPicIdx$019$i;$62 = $58;$iPicIdx$01$i9$i = 0;
          while(1) {
           $61 = (($62) + ($iPicIdx$01$i9$i<<2)|0);
           $63 = HEAP32[$61>>2]|0;
           $64 = ($63|0)==(0|0);
           if ($64) {
            $245 = $62;$67 = $244;
           } else {
            __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($63,$47);
            $$pre$i11$i = HEAP32[$57>>2]|0;
            $$pre6$i12$i = HEAP32[$48>>2]|0;
            $245 = $$pre6$i12$i;$67 = $$pre$i11$i;
           }
           $65 = (($iPicIdx$01$i9$i) + 1)|0;
           $66 = ($65|0)<($67|0);
           if ($66) {
            $244 = $67;$62 = $245;$iPicIdx$01$i9$i = $65;
           } else {
            $$lcssa$i13$i = $245;
            break;
           }
          }
         } else {
          $$lcssa$i13$i = $58;
         }
         __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($47,$$lcssa$i13$i,4272);
         HEAP32[$48>>2] = 0;
        }
        HEAP32[$57>>2] = 0;
        $68 = (($48) + 8|0);
        HEAP32[$68>>2] = 0;
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($47,$48,4288);
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       if ($or$cond$i5) {
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       $106 = HEAP32[$2>>2]|0;
       $107 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($106,12,4944)|0);
       $108 = ($107|0)==(0|0);
       if ($108) {
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       $109 = $$iNumRefFrames$0$i << 2;
       $110 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($106,$109,4960)|0);
       HEAP32[$107>>2] = $110;
       $111 = ($110|0)==(0|0);
       if ($111) {
        $116 = (($107) + 4|0);
        HEAP32[$116>>2] = 0;
        $117 = (($107) + 8|0);
        HEAP32[$117>>2] = 0;
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($106,$107,4288);
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       $112 = ($43|0)>(0);
       L69: do {
        if ($112) {
         $113 = (($pCtx) + 316852|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = HEAP32[$41>>2]|0;
         $iPrevPicIdx$017$i = 0;
         while(1) {
          $120 = (($115) + ($iPrevPicIdx$017$i<<2)|0);
          $121 = HEAP32[$120>>2]|0;
          $122 = ($114|0)==($121|0);
          $118 = (($iPrevPicIdx$017$i) + 1)|0;
          if ($122) {
           break;
          }
          $119 = ($118|0)<($43|0);
          if ($119) {
           $iPrevPicIdx$017$i = $118;
          } else {
           $130 = $115;$iPrevPicIdx$013$i = $118;
           label = 44;
           break L69;
          }
         }
         $123 = ($iPrevPicIdx$017$i|0)<($$iNumRefFrames$0$i|0);
         if ($123) {
          $130 = $115;$iPrevPicIdx$013$i = $iPrevPicIdx$017$i;
          label = 44;
         } else {
          HEAP32[$110>>2] = $114;
          $124 = (($107) + 8|0);
          HEAP32[$124>>2] = 0;
          $125 = HEAP32[$107>>2]|0;
          $126 = (($125) + 4|0);
          $127 = HEAP32[$41>>2]|0;
          $128 = (($$iNumRefFrames$0$i) + -1)|0;
          $129 = $128 << 2;
          _memcpy(($126|0),($127|0),($129|0))|0;
          $iPicIdx$0$ph$i = $128;$iPrevPicIdx$014$i = $iPrevPicIdx$017$i;
         }
        } else {
         $$pre$pre$i = HEAP32[$41>>2]|0;
         $130 = $$pre$pre$i;$iPrevPicIdx$013$i = 0;
         label = 44;
        }
       } while(0);
       if ((label|0) == 44) {
        _memcpy(($110|0),($130|0),($109|0))|0;
        $131 = ($iPrevPicIdx$013$i|0)<($$iNumRefFrames$0$i|0);
        $132 = $131 ? $iPrevPicIdx$013$i : 0;
        $133 = (($107) + 8|0);
        HEAP32[$133>>2] = $132;
        $iPicIdx$0$ph$i = $$iNumRefFrames$0$i;$iPrevPicIdx$014$i = $iPrevPicIdx$013$i;
       }
       $134 = ($iPicIdx$0$ph$i|0)<($43|0);
       if ($134) {
        $iPicIdx$08$i = $iPicIdx$0$ph$i;
        while(1) {
         $135 = ($iPrevPicIdx$014$i|0)==($iPicIdx$08$i|0);
         do {
          if (!($135)) {
           $136 = HEAP32[$41>>2]|0;
           $137 = (($136) + ($iPicIdx$08$i<<2)|0);
           $138 = HEAP32[$137>>2]|0;
           $139 = ($138|0)==(0|0);
           if ($139) {
            break;
           }
           __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($138,$106);
           $140 = HEAP32[$41>>2]|0;
           $141 = (($140) + ($iPicIdx$08$i<<2)|0);
           HEAP32[$141>>2] = 0;
          }
         } while(0);
         $142 = (($iPicIdx$08$i) + 1)|0;
         $exitcond$i = ($142|0)==($43|0);
         if ($exitcond$i) {
          break;
         } else {
          $iPicIdx$08$i = $142;
         }
        }
       }
       $143 = (($107) + 4|0);
       HEAP32[$143>>2] = $$iNumRefFrames$0$i;
       HEAP32[$15>>2] = $107;
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)>(0);
       if ($145) {
        $i$07$i = 0;
        while(1) {
         $146 = HEAP32[$107>>2]|0;
         $147 = (($146) + ($i$07$i<<2)|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = (($148) + 68|0);
         HEAP8[$149>>0] = 0;
         $150 = HEAP32[$107>>2]|0;
         $151 = (($150) + ($i$07$i<<2)|0);
         $152 = HEAP32[$151>>2]|0;
         $153 = (($152) + 69|0);
         HEAP8[$153>>0] = 0;
         $154 = HEAP32[$107>>2]|0;
         $155 = (($154) + ($i$07$i<<2)|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = (($156) + 70|0);
         HEAP8[$157>>0] = 0;
         $158 = HEAP32[$107>>2]|0;
         $159 = (($158) + ($i$07$i<<2)|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = (($160) + 71|0);
         HEAP8[$161>>0] = 1;
         $162 = HEAP32[$107>>2]|0;
         $163 = (($162) + ($i$07$i<<2)|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = (($164) + 72|0);
         HEAP8[$165>>0] = 0;
         $166 = (($i$07$i) + 1)|0;
         $167 = HEAP32[$143>>2]|0;
         $168 = ($166|0)<($167|0);
         if ($168) {
          $i$07$i = $166;
         } else {
          break;
         }
        }
       }
       $169 = HEAP32[$41>>2]|0;
       $170 = ($169|0)==(0|0);
       if (!($170)) {
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($106,$169,4976);
        HEAP32[$41>>2] = 0;
       }
       HEAP32[$42>>2] = 0;
       $171 = (($41) + 8|0);
       HEAP32[$171>>2] = 0;
       __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($106,$41,5000);
       $$pre$phi40Z2D = $33;$$pre$phiZ2D = $30;
       break;
      }
     }
    }
   }
   $172 = (($pCtx) + 72|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = HEAP32[$15>>2]|0;
   $175 = (($174) + 4|0);
   $176 = HEAP32[$175>>2]|0;
   HEAP32[$vararg_buffer12>>2] = $31;
   $vararg_ptr7 = (($vararg_buffer12) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $173;
   $vararg_ptr8 = (($vararg_buffer12) + 8|0);
   HEAP32[$vararg_ptr8>>2] = $0;
   $vararg_ptr9 = (($vararg_buffer12) + 12|0);
   HEAP32[$vararg_ptr9>>2] = $1;
   $vararg_ptr10 = (($vararg_buffer12) + 16|0);
   HEAP32[$vararg_ptr10>>2] = $176;
   $vararg_ptr11 = (($vararg_buffer12) + 20|0);
   HEAP32[$vararg_ptr11>>2] = $$iNumRefFrames$0$i;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,4,4408,$vararg_buffer12);
   label = 58;
  }
 } while(0);
 if ((label|0) == 58) {
  $177 = HEAP32[$15>>2]|0;
  $178 = ($177|0)==(0|0);
  if (!($178)) {
   $179 = HEAP32[$177>>2]|0;
   $180 = ($179|0)==(0|0);
   $$pre7$i = (($177) + 4|0);
   if (!($180)) {
    $181 = HEAP32[$$pre7$i>>2]|0;
    $182 = ($181|0)>(0);
    if ($182) {
     $184 = $179;$246 = $181;$iPicIdx$01$i = 0;
     while(1) {
      $183 = (($184) + ($iPicIdx$01$i<<2)|0);
      $185 = HEAP32[$183>>2]|0;
      $186 = ($185|0)==(0|0);
      if ($186) {
       $189 = $246;$247 = $184;
      } else {
       __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($185,$3);
       $$pre$i21 = HEAP32[$$pre7$i>>2]|0;
       $$pre6$i = HEAP32[$177>>2]|0;
       $189 = $$pre$i21;$247 = $$pre6$i;
      }
      $187 = (($iPicIdx$01$i) + 1)|0;
      $188 = ($187|0)<($189|0);
      if ($188) {
       $184 = $247;$246 = $189;$iPicIdx$01$i = $187;
      } else {
       $$lcssa$i = $247;
       break;
      }
     }
    } else {
     $$lcssa$i = $179;
    }
    __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3,$$lcssa$i,4272);
    HEAP32[$177>>2] = 0;
   }
   HEAP32[$$pre7$i>>2] = 0;
   $190 = (($177) + 8|0);
   HEAP32[$190>>2] = 0;
   __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3,$177,4288);
   HEAP32[$15>>2] = 0;
  }
  $191 = (($pCtx) + 209444|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = ($192|0)==(0|0);
  if (!($193)) {
   $230 = HEAP32[$192>>2]|0;
   $231 = ($230|0)==(0|0);
   $$pre7$i$1 = (($192) + 4|0);
   if (!($231)) {
    $232 = HEAP32[$$pre7$i$1>>2]|0;
    $233 = ($232|0)>(0);
    if ($233) {
     $235 = $230;$250 = $232;$iPicIdx$01$i$1 = 0;
     while(1) {
      $234 = (($235) + ($iPicIdx$01$i$1<<2)|0);
      $236 = HEAP32[$234>>2]|0;
      $237 = ($236|0)==(0|0);
      if ($237) {
       $240 = $250;$251 = $235;
      } else {
       __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($236,$3);
       $$pre$i21$1 = HEAP32[$$pre7$i$1>>2]|0;
       $$pre6$i$1 = HEAP32[$192>>2]|0;
       $240 = $$pre$i21$1;$251 = $$pre6$i$1;
      }
      $238 = (($iPicIdx$01$i$1) + 1)|0;
      $239 = ($238|0)<($240|0);
      if ($239) {
       $235 = $251;$250 = $240;$iPicIdx$01$i$1 = $238;
      } else {
       $$lcssa$i$1 = $251;
       break;
      }
     }
    } else {
     $$lcssa$i$1 = $230;
    }
    __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3,$$lcssa$i$1,4272);
    HEAP32[$192>>2] = 0;
   }
   HEAP32[$$pre7$i$1>>2] = 0;
   $241 = (($192) + 8|0);
   HEAP32[$241>>2] = 0;
   __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3,$192,4288);
   HEAP32[$191>>2] = 0;
  }
  $242 = (($pCtx) + 316852|0);
  HEAP32[$242>>2] = 0;
  $243 = ($$iNumRefFrames$0$i|0)<(1);
  if ($243) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $194 = HEAP32[$2>>2]|0;
  $195 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($194,12,4944)|0);
  $196 = ($195|0)==(0|0);
  if ($196) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $197 = $$iNumRefFrames$0$i << 2;
  $198 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($194,$197,4960)|0);
  HEAP32[$195>>2] = $198;
  $199 = ($198|0)==(0|0);
  if ($199) {
   $201 = (($195) + 4|0);
   HEAP32[$201>>2] = 0;
   $202 = (($195) + 8|0);
   HEAP32[$202>>2] = 0;
   __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($194,$195,4288);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $200 = ($$iNumRefFrames$0$i|0)>(0);
  L135: do {
   if ($200) {
    $iPicIdx$016$i = 0;
    while(1) {
     $203 = (__ZN7WelsDec12AllocPictureEPNS_21TagWelsDecoderContextEii($pCtx,$0,$1)|0);
     $204 = ($203|0)==(0|0);
     if ($204) {
      break;
     }
     $217 = HEAP32[$195>>2]|0;
     $218 = (($217) + ($iPicIdx$016$i<<2)|0);
     HEAP32[$218>>2] = $203;
     $219 = (($iPicIdx$016$i) + 1)|0;
     $220 = ($219|0)<($$iNumRefFrames$0$i|0);
     if ($220) {
      $iPicIdx$016$i = $219;
     } else {
      break L135;
     }
    }
    $205 = (($195) + 4|0);
    HEAP32[$205>>2] = $iPicIdx$016$i;
    $206 = HEAP32[$195>>2]|0;
    $207 = ($206|0)==(0|0);
    if (!($207)) {
     $208 = ($iPicIdx$016$i|0)>(0);
     if ($208) {
      $210 = $206;$248 = $iPicIdx$016$i;$iPicIdx$01$i7$i = 0;
      while(1) {
       $209 = (($210) + ($iPicIdx$01$i7$i<<2)|0);
       $211 = HEAP32[$209>>2]|0;
       $212 = ($211|0)==(0|0);
       if ($212) {
        $215 = $248;$249 = $210;
       } else {
        __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($211,$194);
        $$pre$i9$i = HEAP32[$205>>2]|0;
        $$pre6$i10$i = HEAP32[$195>>2]|0;
        $215 = $$pre$i9$i;$249 = $$pre6$i10$i;
       }
       $213 = (($iPicIdx$01$i7$i) + 1)|0;
       $214 = ($213|0)<($215|0);
       if ($214) {
        $210 = $249;$248 = $215;$iPicIdx$01$i7$i = $213;
       } else {
        $$lcssa$i11$i = $249;
        break;
       }
      }
     } else {
      $$lcssa$i11$i = $206;
     }
     __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($194,$$lcssa$i11$i,4272);
     HEAP32[$195>>2] = 0;
    }
    HEAP32[$205>>2] = 0;
    $216 = (($195) + 8|0);
    HEAP32[$216>>2] = 0;
    __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($194,$195,4288);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $221 = (($195) + 4|0);
  HEAP32[$221>>2] = $$iNumRefFrames$0$i;
  $222 = (($195) + 8|0);
  HEAP32[$222>>2] = 0;
  HEAP32[$15>>2] = $195;
  $$pre = (($pCtx) + 68|0);
  $$pre39 = (($pCtx) + 72|0);
  $$pre$phi40Z2D = $$pre39;$$pre$phiZ2D = $$pre;
 }
 HEAP32[$$pre$phiZ2D>>2] = $0;
 HEAP32[$$pre$phi40Z2D>>2] = $1;
 HEAP8[$20>>0] = 1;
 $223 = (($pCtx) + 5464|0);
 HEAP32[$223>>2] = 0;
 $224 = (($pCtx) + 512232|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = ($225|0)==(0|0);
 if ($226) {
  $227 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($3,32,4616)|0);
  HEAP32[$224>>2] = $227;
  $228 = $227;
 } else {
  $228 = $225;
 }
 $229 = ($228|0)==(0|0);
 $$4 = $229&1;
 $$0 = $$4;
 STACKTOP = sp;return ($$0|0);
}
function _WelsFreeMem($pCtx) {
 $pCtx = $pCtx|0;
 var $$lcssa$i = 0, $$lcssa$i$1 = 0, $$pre$i = 0, $$pre$i$1 = 0, $$pre6$i = 0, $$pre6$i$1 = 0, $$pre7$i = 0, $$pre7$i$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iPicIdx$01$i = 0, $iPicIdx$01$i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 562528|0);
 $1 = HEAP32[$0>>2]|0;
 (__ZN7WelsDec12ResetFmoListEPNS_21TagWelsDecoderContextE($pCtx)|0);
 __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($pCtx);
 $2 = (($pCtx) + 209440|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$3>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre7$i = (($3) + 4|0);
  if (!($6)) {
   $7 = HEAP32[$$pre7$i>>2]|0;
   $8 = ($7|0)>(0);
   if ($8) {
    $10 = $5;$37 = $7;$iPicIdx$01$i = 0;
    while(1) {
     $9 = (($10) + ($iPicIdx$01$i<<2)|0);
     $11 = HEAP32[$9>>2]|0;
     $12 = ($11|0)==(0|0);
     if ($12) {
      $15 = $37;$38 = $10;
     } else {
      __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($11,$1);
      $$pre$i = HEAP32[$$pre7$i>>2]|0;
      $$pre6$i = HEAP32[$3>>2]|0;
      $15 = $$pre$i;$38 = $$pre6$i;
     }
     $13 = (($iPicIdx$01$i) + 1)|0;
     $14 = ($13|0)<($15|0);
     if ($14) {
      $10 = $38;$37 = $15;$iPicIdx$01$i = $13;
     } else {
      $$lcssa$i = $38;
      break;
     }
    }
   } else {
    $$lcssa$i = $5;
   }
   __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$$lcssa$i,4272);
   HEAP32[$3>>2] = 0;
  }
  HEAP32[$$pre7$i>>2] = 0;
  $16 = (($3) + 8|0);
  HEAP32[$16>>2] = 0;
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$3,4288);
  HEAP32[$2>>2] = 0;
 }
 $17 = (($pCtx) + 209444|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $32 = (($pCtx) + 68|0);
  $33 = (($pCtx) + 84|0);
  ;HEAP32[$32+0>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;HEAP32[$32+12>>2]=0|0;
  HEAP8[$33>>0] = 1;
  $34 = (($pCtx) + 64|0);
  HEAP8[$34>>0] = 0;
  $35 = (($pCtx) + 512232|0);
  $36 = HEAP32[$35>>2]|0;
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$36,4616);
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$18>>2]|0;
 $21 = ($20|0)==(0|0);
 $$pre7$i$1 = (($18) + 4|0);
 if (!($21)) {
  $22 = HEAP32[$$pre7$i$1>>2]|0;
  $23 = ($22|0)>(0);
  if ($23) {
   $25 = $20;$39 = $22;$iPicIdx$01$i$1 = 0;
   while(1) {
    $24 = (($25) + ($iPicIdx$01$i$1<<2)|0);
    $26 = HEAP32[$24>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $30 = $39;$40 = $25;
    } else {
     __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($26,$1);
     $$pre$i$1 = HEAP32[$$pre7$i$1>>2]|0;
     $$pre6$i$1 = HEAP32[$18>>2]|0;
     $30 = $$pre$i$1;$40 = $$pre6$i$1;
    }
    $28 = (($iPicIdx$01$i$1) + 1)|0;
    $29 = ($28|0)<($30|0);
    if ($29) {
     $25 = $40;$39 = $30;$iPicIdx$01$i$1 = $28;
    } else {
     $$lcssa$i$1 = $40;
     break;
    }
   }
  } else {
   $$lcssa$i$1 = $20;
  }
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$$lcssa$i$1,4272);
  HEAP32[$18>>2] = 0;
 }
 HEAP32[$$pre7$i$1>>2] = 0;
 $31 = (($18) + 8|0);
 HEAP32[$31>>2] = 0;
 __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$18,4288);
 HEAP32[$17>>2] = 0;
 $32 = (($pCtx) + 68|0);
 $33 = (($pCtx) + 84|0);
 ;HEAP32[$32+0>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;HEAP32[$32+12>>2]=0|0;
 HEAP8[$33>>0] = 1;
 $34 = (($pCtx) + 64|0);
 HEAP8[$34>>0] = 0;
 $35 = (($pCtx) + 512232|0);
 $36 = HEAP32[$35>>2]|0;
 __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$36,4616);
 STACKTOP = sp;return;
}
function __ZN7WelsDec15WelsOpenDecoderEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 316972|0);
 $1 = (($pCtx) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 __ZN10WelsCommon10InitMcFuncEP9TagMcFuncj($0,$2);
 $3 = (($pCtx) + 317112|0);
 $4 = HEAP32[$1>>2]|0;
 _InitExpandPictureFunc($3,$4);
 $5 = (($pCtx) + 316856|0);
 HEAP32[$5>>2] = 7;
 $6 = (($pCtx) + 316860|0);
 HEAP32[$6>>2] = 8;
 $7 = (($pCtx) + 316864|0);
 HEAP32[$7>>2] = 9;
 $8 = (($pCtx) + 316868|0);
 HEAP32[$8>>2] = 10;
 $9 = (($pCtx) + 316872|0);
 HEAP32[$9>>2] = 11;
 $10 = (($pCtx) + 316876|0);
 HEAP32[$10>>2] = 12;
 $11 = (($pCtx) + 316880|0);
 HEAP32[$11>>2] = 13;
 $12 = (($pCtx) + 316884|0);
 HEAP32[$12>>2] = 14;
 $13 = (($pCtx) + 316888|0);
 HEAP32[$13>>2] = 15;
 $14 = (($pCtx) + 316892|0);
 HEAP32[$14>>2] = 16;
 $15 = (($pCtx) + 316920|0);
 HEAP32[$15>>2] = 17;
 $16 = (($pCtx) + 316924|0);
 HEAP32[$16>>2] = 18;
 $17 = (($pCtx) + 316928|0);
 HEAP32[$17>>2] = 19;
 $18 = (($pCtx) + 316896|0);
 HEAP32[$18>>2] = 20;
 $19 = (($pCtx) + 316932|0);
 HEAP32[$19>>2] = 21;
 $20 = (($pCtx) + 316900|0);
 HEAP32[$20>>2] = 22;
 $21 = (($pCtx) + 316912|0);
 HEAP32[$21>>2] = 23;
 $22 = (($pCtx) + 316936|0);
 HEAP32[$22>>2] = 24;
 $23 = (($pCtx) + 316904|0);
 HEAP32[$23>>2] = 25;
 $24 = (($pCtx) + 316916|0);
 HEAP32[$24>>2] = 26;
 $25 = (($pCtx) + 316908|0);
 HEAP32[$25>>2] = 27;
 $26 = (($pCtx) + 316996|0);
 HEAP32[$26>>2] = 9;
 $27 = (($pCtx) + 317000|0);
 HEAP32[$27>>2] = 10;
 $28 = (($pCtx) + 317004|0);
 HEAP32[$28>>2] = 11;
 $29 = (($pCtx) + 317032|0);
 HEAP32[$29>>2] = 12;
 $30 = (($pCtx) + 317036|0);
 HEAP32[$30>>2] = 13;
 $31 = (($pCtx) + 317040|0);
 HEAP32[$31>>2] = 14;
 $32 = (($pCtx) + 317008|0);
 HEAP32[$32>>2] = 15;
 $33 = (($pCtx) + 317044|0);
 HEAP32[$33>>2] = 16;
 $34 = (($pCtx) + 317012|0);
 HEAP32[$34>>2] = 17;
 $35 = (($pCtx) + 317024|0);
 HEAP32[$35>>2] = 18;
 $36 = (($pCtx) + 317048|0);
 HEAP32[$36>>2] = 19;
 $37 = (($pCtx) + 317016|0);
 HEAP32[$37>>2] = 20;
 $38 = (($pCtx) + 317028|0);
 HEAP32[$38>>2] = 21;
 $39 = (($pCtx) + 317020|0);
 HEAP32[$39>>2] = 22;
 $40 = (($pCtx) + 316940|0);
 HEAP32[$40>>2] = 28;
 $41 = (($pCtx) + 316944|0);
 HEAP32[$41>>2] = 29;
 $42 = (($pCtx) + 316948|0);
 HEAP32[$42>>2] = 30;
 $43 = (($pCtx) + 316952|0);
 HEAP32[$43>>2] = 31;
 $44 = (($pCtx) + 316956|0);
 HEAP32[$44>>2] = 32;
 $45 = (($pCtx) + 316960|0);
 HEAP32[$45>>2] = 33;
 $46 = (($pCtx) + 316964|0);
 HEAP32[$46>>2] = 34;
 $47 = (($pCtx) + 316968|0);
 HEAP32[$47>>2] = 3;
 $48 = (($pCtx) + 317052|0);
 HEAP32[$48>>2] = 4;
 $49 = (($pCtx) + 317064|0);
 $50 = HEAP32[$1>>2]|0;
 __ZN7WelsDec14DeblockingInitEPNS_17TagDeblockingFuncEi($49,$50);
 $51 = (($pCtx) + 317124|0);
 $52 = HEAP32[$1>>2]|0;
 __ZN7WelsDec17WelsBlockFuncInitEPNS_12TagBlockFuncEi($51,$52);
 $53 = (($pCtx) + 5992|0);
 HEAP32[$53>>2] = 8904;
 $54 = (($pCtx) + 5864|0);
 HEAP32[$54>>2] = 9416;
 $55 = (($pCtx) + 5868|0);
 HEAP32[$55>>2] = 10464;
 $56 = (($pCtx) + 5872|0);
 HEAP32[$56>>2] = 11136;
 $57 = (($pCtx) + 5876|0);
 HEAP32[$57>>2] = 11712;
 $58 = (($pCtx) + 5896|0);
 HEAP32[$58>>2] = 9928;
 $59 = (($pCtx) + 5900|0);
 HEAP32[$59>>2] = 10440;
 $60 = (($pCtx) + 5904|0);
 HEAP32[$60>>2] = 10448;
 $61 = (($pCtx) + 5908|0);
 HEAP32[$61>>2] = 10456;
 $62 = (($pCtx) + 5928|0);
 HEAP32[$62>>2] = 10976;
 $63 = (($pCtx) + 5932|0);
 HEAP32[$63>>2] = 11104;
 $64 = (($pCtx) + 5936|0);
 HEAP32[$64>>2] = 11120;
 $65 = (($pCtx) + 5940|0);
 HEAP32[$65>>2] = 11128;
 $66 = (($pCtx) + 5960|0);
 HEAP32[$66>>2] = 11648;
 $67 = (($pCtx) + 5964|0);
 HEAP32[$67>>2] = 11656;
 $68 = (($pCtx) + 5968|0);
 HEAP32[$68>>2] = 11664;
 $69 = (($pCtx) + 5972|0);
 HEAP32[$69>>2] = 11672;
 $70 = (($pCtx) + 5976|0);
 HEAP32[$70>>2] = 11680;
 $71 = (($pCtx) + 5980|0);
 HEAP32[$71>>2] = 11688;
 $72 = (($pCtx) + 5984|0);
 HEAP32[$72>>2] = 11696;
 $73 = (($pCtx) + 5988|0);
 HEAP32[$73>>2] = 11704;
 $74 = (($pCtx) + 5996|0);
 HEAP32[$74>>2] = 14160;
 $75 = (($pCtx) + 6000|0);
 HEAP32[$75>>2] = 14168;
 $76 = (($pCtx) + 6004|0);
 HEAP32[$76>>2] = 14176;
 $77 = (($pCtx) + 6008|0);
 HEAP32[$77>>2] = 14184;
 $78 = (($pCtx) + 6012|0);
 HEAP32[$78>>2] = 14200;
 $79 = (($pCtx) + 6016|0);
 HEAP32[$79>>2] = 14216;
 $80 = (($pCtx) + 6020|0);
 HEAP32[$80>>2] = 14232;
 $81 = (($pCtx) + 6024|0);
 HEAP32[$81>>2] = 12024;
 $82 = (($pCtx) + 6028|0);
 HEAP32[$82>>2] = 13048;
 $83 = (($pCtx) + 6032|0);
 HEAP32[$83>>2] = 13176;
 $84 = (($pCtx) + 6036|0);
 HEAP32[$84>>2] = 13304;
 $85 = (($pCtx) + 6040|0);
 HEAP32[$85>>2] = 13368;
 $86 = (($pCtx) + 6044|0);
 HEAP32[$86>>2] = 13432;
 $87 = (($pCtx) + 6048|0);
 HEAP32[$87>>2] = 13560;
 $88 = (($pCtx) + 6052|0);
 HEAP32[$88>>2] = 13688;
 $89 = (($pCtx) + 6056|0);
 HEAP32[$89>>2] = 13816;
 $90 = (($pCtx) + 6060|0);
 HEAP32[$90>>2] = 13944;
 $91 = (($pCtx) + 6064|0);
 HEAP32[$91>>2] = 14008;
 $92 = (($pCtx) + 6068|0);
 HEAP32[$92>>2] = 14040;
 $93 = (($pCtx) + 6072|0);
 HEAP32[$93>>2] = 14072;
 $94 = (($pCtx) + 6076|0);
 HEAP32[$94>>2] = 14088;
 $95 = (($pCtx) + 6080|0);
 HEAP32[$95>>2] = 14096;
 $96 = (($pCtx) + 6084|0);
 HEAP32[$96>>2] = 14120;
 $97 = (($pCtx) + 6088|0);
 HEAP32[$97>>2] = 14136;
 $98 = (($pCtx) + 6092|0);
 HEAP32[$98>>2] = 14144;
 $99 = (__ZN7WelsDec14WelsInitMemoryEPNS_21TagWelsDecoderContextE($pCtx)|0);
 $100 = ($99|0)==(0);
 if (!($100)) {
  STACKTOP = sp;return ($99|0);
 }
 $101 = (($pCtx) + 242324|0);
 HEAP8[$101>>0] = 1;
 $102 = (($pCtx) + 242334|0);
 HEAP8[$102>>0] = 1;
 $103 = (($pCtx) + 317169|0);
 HEAP8[$103>>0] = 1;
 $104 = (($pCtx) + 317172|0);
 HEAP32[$104>>2] = 0;
 $105 = (($pCtx) + 242346|0);
 HEAP8[$105>>0] = 1;
 STACKTOP = sp;return ($99|0);
}
function _DecoderConfigParam($pCtx,$kpParam) {
 $pCtx = $pCtx|0;
 $kpParam = $kpParam|0;
 var $$ = 0, $$0 = 0, $$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = ($pCtx|0)==(0|0);
 $1 = ($kpParam|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($pCtx) + 562528|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($3,32,4640)|0);
 $5 = (($pCtx) + 48|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$4+0>>2]=HEAP32[$kpParam+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$kpParam+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$kpParam+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$kpParam+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$kpParam+16>>2]|0;HEAP32[$4+20>>2]=HEAP32[$kpParam+20>>2]|0;HEAP32[$4+24>>2]=HEAP32[$kpParam+24>>2]|0;HEAP32[$4+28>>2]=HEAP32[$kpParam+28>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pCtx) + 56|0);
 HEAP32[$10>>2] = $9;
 $11 = (($pCtx) + 242344|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 do {
  if ($13) {
   $14 = HEAP32[$8>>2]|0;
   HEAP32[$10>>2] = $14;
   $15 = ($7|0)==(0|0);
   if (!($15)) {
    HEAP32[$8>>2] = $14;
   }
   if ((($14|0) == 23)) {
    break;
   } else if ((($14|0) == 25)) {
    HEAP32[$10>>2] = 23;
    $16 = HEAP32[$5>>2]|0;
    $17 = (($16) + 4|0);
    HEAP32[$17>>2] = 23;
    break;
   }
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,4672,$vararg_buffer1);
   HEAP32[$10>>2] = 23;
   $18 = HEAP32[$5>>2]|0;
   $19 = (($18) + 4|0);
   HEAP32[$19>>2] = 23;
   $$0 = 5;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $20 = HEAP32[$5>>2]|0;
 $21 = (($20) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($pCtx) + 242340|0);
 $24 = HEAP8[$11>>0]|0;
 $25 = ($24<<24>>24)==(0);
 $$ = $25 ? $22 : 0;
 HEAP32[$23>>2] = $$;
 __ZN7WelsDec12InitErrorConEPNS_21TagWelsDecoderContextE($pCtx);
 $26 = HEAP32[$5>>2]|0;
 $27 = (($26) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($pCtx) + 60|0);
 $switch = ($28>>>0)>(1);
 $$4 = $switch ? 1 : $28;
 HEAP32[$29>>2] = $$4;
 HEAP32[$vararg_buffer1>>2] = $$4;
 __Z7WelsLogP13TagLogContextiPKcz($pCtx,4,4656,$vararg_buffer1);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _DecoderSetCsp($pCtx,$kiColorFormat) {
 $pCtx = $pCtx|0;
 $kiColorFormat = $kiColorFormat|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($pCtx|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pCtx) + 56|0);
 HEAP32[$1>>2] = $kiColorFormat;
 $2 = (($pCtx) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = (($3) + 4|0);
  HEAP32[$5>>2] = $kiColorFormat;
 }
 if ((($kiColorFormat|0) == 23)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($kiColorFormat|0) == 25)) {
  HEAP32[$1>>2] = 23;
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + 4|0);
  HEAP32[$7>>2] = 23;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,4672,$vararg_buffer);
  HEAP32[$1>>2] = 23;
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = 23;
  $$0 = 5;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _WelsInitDecoder($pCtx,$bParseOnly,$pLogCtx) {
 $pCtx = $pCtx|0;
 $bParseOnly = $bParseOnly|0;
 $pLogCtx = $pLogCtx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iCpuCores$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iCpuCores$i = sp;
 $0 = ($pCtx|0)==(0|0);
 if ($0) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pCtx) + 562528|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$iCpuCores$i>>2] = 1;
 _memset(($pCtx|0),0,562536)|0;
 ;HEAP32[$pCtx+0>>2]=HEAP32[$pLogCtx+0>>2]|0;HEAP32[$pCtx+4>>2]=HEAP32[$pLogCtx+4>>2]|0;HEAP32[$pCtx+8>>2]=HEAP32[$pLogCtx+8>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = (($pCtx) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = (($pCtx) + 56|0);
 HEAP32[$4>>2] = 23;
 $5 = (($pCtx) + 64|0);
 HEAP8[$5>>0] = 0;
 $6 = (($pCtx) + 52|0);
 HEAP32[$6>>2] = 0;
 $7 = (($pCtx) + 317168|0);
 HEAP8[$7>>0] = 0;
 $8 = (($pCtx) + 511308|0);
 HEAP8[$8>>0] = 0;
 $9 = (_WelsCPUFeatureDetect($iCpuCores$i)|0);
 HEAP32[$6>>2] = $9;
 $10 = (($pCtx) + 68|0);
 $11 = (($pCtx) + 84|0);
 ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;
 HEAP8[$11>>0] = 1;
 $12 = (($pCtx) + 104|0);
 HEAP32[$12>>2] = -1;
 $13 = (($pCtx) + 108|0);
 HEAP32[$13>>2] = -1;
 $14 = (($pCtx) + 116|0);
 HEAP32[$14>>2] = 0;
 $15 = (($pCtx) + 5464|0);
 HEAP32[$15>>2] = 0;
 __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($pCtx);
 $16 = (($pCtx) + 5244|0);
 HEAP32[$16>>2] = 0;
 $17 = (($pCtx) + 209440|0);
 HEAP32[$17>>2] = 0;
 $18 = (($pCtx) + 209444|0);
 HEAP32[$18>>2] = 0;
 $19 = (($pCtx) + 241949|0);
 HEAP8[$19>>0] = 1;
 $20 = (($pCtx) + 242340|0);
 HEAP32[$20>>2] = 7;
 $21 = (($pCtx) + 316852|0);
 HEAP32[$21>>2] = 0;
 $22 = (($pCtx) + 512304|0);
 HEAP32[$22>>2] = -1;
 $23 = (($pCtx) + 562525|0);
 HEAP8[$23>>0] = 0;
 $24 = (($pCtx) + 562526|0);
 HEAP8[$24>>0] = 0;
 $25 = (($pCtx) + 241960|0);
 HEAP32[$25>>2] = 0;
 $26 = (($pCtx) + 241964|0);
 HEAP32[$26>>2] = 0;
 $27 = (($pCtx) + 241968|0);
 HEAP32[$27>>2] = 0;
 $28 = (($pCtx) + 242296|0);
 HEAP32[$28>>2] = 0;
 $29 = (($pCtx) + 242292|0);
 HEAP32[$29>>2] = -1;
 $30 = (($pCtx) + 242304|0);
 HEAP32[$30>>2] = 0;
 $31 = (($pCtx) + 242300|0);
 HEAP32[$31>>2] = -1;
 $32 = (($pCtx) + 242312|0);
 HEAP32[$32>>2] = 0;
 $33 = (($pCtx) + 242308|0);
 HEAP32[$33>>2] = -1;
 $34 = (($pCtx) + 242344|0);
 $35 = $bParseOnly&1;
 HEAP8[$34>>0] = $35;
 $36 = (__ZN7WelsDec15WelsOpenDecoderEPNS_21TagWelsDecoderContextE($pCtx)|0);
 $$0 = $36;
 STACKTOP = sp;return ($$0|0);
}
function _WelsEndDecoder($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _WelsFreeMem($pCtx);
 __ZN7WelsDec14WelsFreeMemoryEPNS_21TagWelsDecoderContextE($pCtx);
 __ZN7WelsDec24UninitialDqLayersContextEPNS_21TagWelsDecoderContextE($pCtx);
 $0 = (($pCtx) + 242324|0);
 HEAP8[$0>>0] = 0;
 $1 = (($pCtx) + 242334|0);
 HEAP8[$1>>0] = 0;
 $2 = (($pCtx) + 317169|0);
 HEAP8[$2>>0] = 0;
 STACKTOP = sp;return;
}
function _GetVclNalTemporalId($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241888|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCtx) + 317160|0);
 HEAP32[$4>>2] = 1;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 17|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (($pCtx) + 317164|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _WelsDecodeBs($pCtx,$kpBsBuf,$kiBsLen,$ppDst,$pDstBufInfo,$pDstBsInfo) {
 $pCtx = $pCtx|0;
 $kpBsBuf = $kpBsBuf|0;
 $kiBsLen = $kiBsLen|0;
 $ppDst = $ppDst|0;
 $pDstBufInfo = $pDstBufInfo|0;
 $pDstBsInfo = $pDstBsInfo|0;
 var $$0 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iConsumedBytes = 0, $iDstIdx$0$be = 0, $iDstIdx$0$lcssa = 0, $iDstIdx$06 = 0, $iOffset = 0;
 var $iRet$1 = 0, $iRet$2 = 0, $iRet$3 = 0, $iRet$4 = 0, $iSrcConsumed$0$be = 0, $iSrcConsumed$0$ph22 = 0, $iSrcConsumed$05 = 0, $iSrcIdx$0$be = 0, $iSrcIdx$0$lcssa = 0, $iSrcIdx$04 = 0, $or$cond = 0, $pDstNal$0$ph20 = 0, $pDstNal$0$ph25 = 0, $pSrcNal$0$ph16 = 0, $pSrcNal$0$ph24 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iConsumedBytes = sp + 4|0;
 $iOffset = sp;
 $0 = (($pCtx) + 241950|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $137 = (($pCtx) + 241888|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($140|0)==(0);
  if ($141) {
   $142 = (($pCtx) + 116|0);
   $143 = HEAP32[$142>>2]|0;
   $$0 = $143;
   STACKTOP = sp;return ($$0|0);
  }
  $144 = (($140) + -1)|0;
  $145 = (($138) + 20|0);
  HEAP32[$145>>2] = $144;
  (__ZN7WelsDec19ConstructAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstBufInfo)|0);
  __ZN7WelsDec18DecodeFinishUpdateEPNS_21TagWelsDecoderContextE($pCtx);
  $146 = (($pCtx) + 116|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 & 16400;
  $149 = ($148|0)==(0);
  if ($149) {
   $$0 = $147;
   STACKTOP = sp;return ($$0|0);
  }
  $150 = (($pCtx) + 242324|0);
  HEAP8[$150>>0] = 1;
  $$0 = $147;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pCtx) + 16|0);
 HEAP32[$iConsumedBytes>>2] = 0;
 HEAP32[$iOffset>>2] = 0;
 $4 = (__ZN7WelsDec21DetectStartCodePrefixEPKhPii($kpBsBuf,$iOffset,$kiBsLen)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (($pCtx) + 116|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 | 4;
  HEAP32[$6>>2] = $8;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$iOffset>>2]|0;
 $10 = (($kpBsBuf) + ($9)|0);
 $11 = (($kiBsLen) - ($9))|0;
 $12 = (($kiBsLen) + 4)|0;
 $13 = (($pCtx) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($pCtx) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = ($12|0)>($19|0);
 if ($20) {
  $21 = HEAP32[$3>>2]|0;
  HEAP32[$15>>2] = $21;
  $151 = $21;
 } else {
  $151 = $16;
 }
 $22 = (($pCtx) + 242344|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 if (!($24)) {
  $25 = (($pCtx) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($pCtx) + 44|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $26;
  $30 = $28;
  $31 = (($29) - ($30))|0;
  $32 = ($12|0)>($31|0);
  if ($32) {
   $33 = (($pCtx) + 32|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP32[$27>>2] = $34;
  }
 }
 $35 = ($11|0)>(0);
 $36 = (($pCtx) + 88|0);
 L23: do {
  if ($35) {
   $37 = (($pCtx) + 116|0);
   $38 = (($11) + 4)|0;
   $39 = (($pCtx) + 242324|0);
   $40 = (($pCtx) + 92|0);
   $41 = (($pCtx) + 317168|0);
   $42 = (($pCtx) + 241888|0);
   $iSrcConsumed$0$ph22 = 0;$pDstNal$0$ph25 = $151;$pSrcNal$0$ph24 = $10;
   while(1) {
    $iDstIdx$06 = 0;$iSrcConsumed$05 = $iSrcConsumed$0$ph22;$iSrcIdx$04 = 0;
    L27: while(1) {
     $43 = (($iSrcConsumed$05) + 2)|0;
     $44 = ($43|0)<($11|0);
     $45 = (($pSrcNal$0$ph24) + ($iSrcIdx$04)|0);
     do {
      if ($44) {
       $46 = HEAPU8[$45>>0]|(HEAPU8[$45+1>>0]<<8);
       $47 = ($46<<16>>16)==(0);
       $48 = $46&255;
       if ($47) {
        $49 = (($iSrcIdx$04) + 2)|0;
        $50 = (($pSrcNal$0$ph24) + ($49)|0);
        $51 = HEAP8[$50>>0]|0;
        if ((($51<<24>>24) == 1)) {
         break L27;
        } else if (!((($51<<24>>24) == 3))) {
         $100 = $48;
         label = 31;
         break;
        }
        $52 = (($pDstNal$0$ph25) + ($iDstIdx$06)|0);
        HEAP8[$52>>0]=0&255;HEAP8[$52+1>>0]=0>>8;
        $53 = (($iDstIdx$06) + 2)|0;
        $54 = (($iSrcIdx$04) + 3)|0;
        $55 = (($iSrcConsumed$05) + 3)|0;
        $iDstIdx$0$be = $53;$iSrcConsumed$0$be = $55;$iSrcIdx$0$be = $54;
       } else {
        $100 = $48;
        label = 31;
       }
      } else {
       $$pre = HEAP8[$45>>0]|0;
       $100 = $$pre;
       label = 31;
      }
     } while(0);
     if ((label|0) == 31) {
      label = 0;
      $97 = (($iSrcIdx$04) + 1)|0;
      $98 = (($iDstIdx$06) + 1)|0;
      $99 = (($pDstNal$0$ph25) + ($iDstIdx$06)|0);
      HEAP8[$99>>0] = $100;
      $101 = (($iSrcConsumed$05) + 1)|0;
      $iDstIdx$0$be = $98;$iSrcConsumed$0$be = $101;$iSrcIdx$0$be = $97;
     }
     $102 = ($11|0)>($iSrcConsumed$0$be|0);
     if ($102) {
      $iDstIdx$06 = $iDstIdx$0$be;$iSrcConsumed$05 = $iSrcConsumed$0$be;$iSrcIdx$04 = $iSrcIdx$0$be;
     } else {
      $iDstIdx$0$lcssa = $iDstIdx$0$be;$iSrcIdx$0$lcssa = $iSrcIdx$0$be;$pDstNal$0$ph20 = $pDstNal$0$ph25;$pSrcNal$0$ph16 = $pSrcNal$0$ph24;
      break L23;
     }
    }
    HEAP32[$iConsumedBytes>>2] = 0;
    $56 = (($iDstIdx$06) + 3)|0;
    $57 = (($pDstNal$0$ph25) + ($56)|0);
    HEAP8[$57>>0] = 0;
    $58 = (($iDstIdx$06) + 2)|0;
    $59 = (($pDstNal$0$ph25) + ($58)|0);
    HEAP8[$59>>0] = 0;
    $60 = (($iDstIdx$06) + 1)|0;
    $61 = (($pDstNal$0$ph25) + ($60)|0);
    HEAP8[$61>>0] = 0;
    $62 = (($pDstNal$0$ph25) + ($iDstIdx$06)|0);
    HEAP8[$62>>0] = 0;
    $63 = (($pSrcNal$0$ph24) + -3|0);
    $64 = (($iSrcIdx$04) + 3)|0;
    $65 = (__ZN7WelsDec14ParseNalHeaderEPNS_21TagWelsDecoderContextEPN10WelsCommon16TagNalUnitHeaderEPhiS5_iPi($pCtx,$36,$pDstNal$0$ph25,$iDstIdx$06,$63,$64,$iConsumedBytes)|0);
    $66 = ($65|0)==(0|0);
    if ($66) {
     $iRet$2 = 0;
    } else {
     $67 = HEAP32[$40>>2]|0;
     if ((($67|0) == 15) | (($67|0) == 8) | (($67|0) == 7)) {
      $68 = HEAP32[$iConsumedBytes>>2]|0;
      $69 = (($iDstIdx$06) - ($68))|0;
      $70 = (__ZN7WelsDec14ParseNonVclNalEPNS_21TagWelsDecoderContextEPhiS2_i($pCtx,$65,$69,$63,$64)|0);
      $iRet$1 = $70;
     } else {
      $iRet$1 = 0;
     }
     (__ZN7WelsDec21CheckAndFinishLastPicEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstBufInfo)|0);
     $71 = HEAP8[$41>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $iRet$2 = $iRet$1;
     } else {
      $73 = HEAP32[$42>>2]|0;
      $74 = (($73) + 4|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ($75|0)==(0);
      if ($76) {
       $iRet$2 = $iRet$1;
      } else {
       (__ZN7WelsDec19ConstructAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstBufInfo)|0);
       $iRet$2 = $iRet$1;
      }
     }
    }
    __ZN7WelsDec18DecodeFinishUpdateEPNS_21TagWelsDecoderContextE($pCtx);
    $77 = HEAP32[$37>>2]|0;
    $78 = $77 & 16400;
    $79 = ($78|0)==(0);
    if (!($79)) {
     HEAP8[$39>>0] = 1;
     $80 = $77 & 16384;
     $81 = ($80|0)==(0);
     if (!($81)) {
      $$0 = $77;
      label = 47;
      break;
     }
    }
    $82 = ($iRet$2|0)==(0);
    if (!($82)) {
     break;
    }
    $85 = (($iDstIdx$06) + 4)|0;
    $86 = (($pDstNal$0$ph25) + ($85)|0);
    $87 = (($38) - ($iSrcConsumed$05))|0;
    $88 = HEAP32[$13>>2]|0;
    $89 = $88;
    $90 = $86;
    $91 = (($89) - ($90))|0;
    $92 = ($87|0)>($91|0);
    if ($92) {
     $93 = HEAP32[$3>>2]|0;
     $storemerge = $93;
    } else {
     $storemerge = $86;
    }
    HEAP32[$15>>2] = $storemerge;
    $94 = (($pSrcNal$0$ph24) + ($64)|0);
    $95 = (($iSrcConsumed$05) + 3)|0;
    $96 = ($11|0)>($95|0);
    if ($96) {
     $iSrcConsumed$0$ph22 = $95;$pDstNal$0$ph25 = $storemerge;$pSrcNal$0$ph24 = $94;
    } else {
     $iDstIdx$0$lcssa = 0;$iSrcIdx$0$lcssa = 0;$pDstNal$0$ph20 = $storemerge;$pSrcNal$0$ph16 = $94;
     break L23;
    }
   }
   if ((label|0) == 47) {
    STACKTOP = sp;return ($$0|0);
   }
   $83 = $77 & 16;
   $84 = ($83|0)==(0);
   if ($84) {
    $$0 = $77;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$39>>0] = 1;
   $$0 = $77;
   STACKTOP = sp;return ($$0|0);
  } else {
   $iDstIdx$0$lcssa = 0;$iSrcIdx$0$lcssa = 0;$pDstNal$0$ph20 = $151;$pSrcNal$0$ph16 = $10;
  }
 } while(0);
 HEAP32[$iConsumedBytes>>2] = 0;
 $103 = (($iDstIdx$0$lcssa) + 3)|0;
 $104 = (($pDstNal$0$ph20) + ($103)|0);
 HEAP8[$104>>0] = 0;
 $105 = (($iDstIdx$0$lcssa) + 2)|0;
 $106 = (($pDstNal$0$ph20) + ($105)|0);
 HEAP8[$106>>0] = 0;
 $107 = (($iDstIdx$0$lcssa) + 1)|0;
 $108 = (($pDstNal$0$ph20) + ($107)|0);
 HEAP8[$108>>0] = 0;
 $109 = (($pDstNal$0$ph20) + ($iDstIdx$0$lcssa)|0);
 HEAP8[$109>>0] = 0;
 $$sum = (($iDstIdx$0$lcssa) + 4)|0;
 $110 = (($pDstNal$0$ph20) + ($$sum)|0);
 HEAP32[$15>>2] = $110;
 $111 = (($pSrcNal$0$ph16) + -3|0);
 $112 = (($iSrcIdx$0$lcssa) + 3)|0;
 $113 = (__ZN7WelsDec14ParseNalHeaderEPNS_21TagWelsDecoderContextEPN10WelsCommon16TagNalUnitHeaderEPhiS5_iPi($pCtx,$36,$pDstNal$0$ph20,$iDstIdx$0$lcssa,$111,$112,$iConsumedBytes)|0);
 $114 = ($113|0)==(0|0);
 if ($114) {
  $iRet$4 = 0;
 } else {
  $115 = (($pCtx) + 92|0);
  $116 = HEAP32[$115>>2]|0;
  if ((($116|0) == 15) | (($116|0) == 8) | (($116|0) == 7)) {
   $117 = HEAP32[$iConsumedBytes>>2]|0;
   $118 = (($iDstIdx$0$lcssa) - ($117))|0;
   $119 = (__ZN7WelsDec14ParseNonVclNalEPNS_21TagWelsDecoderContextEPhiS2_i($pCtx,$113,$118,$111,$112)|0);
   $iRet$3 = $119;
  } else {
   $iRet$3 = 0;
  }
  (__ZN7WelsDec21CheckAndFinishLastPicEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstBufInfo)|0);
  $120 = (($pCtx) + 317168|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = ($121<<24>>24)==(0);
  if ($122) {
   $iRet$4 = $iRet$3;
  } else {
   $123 = (($pCtx) + 241888|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) + 4|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126|0)==(0);
   if ($127) {
    $iRet$4 = $iRet$3;
   } else {
    (__ZN7WelsDec19ConstructAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstBufInfo)|0);
    $iRet$4 = $iRet$3;
   }
  }
 }
 __ZN7WelsDec18DecodeFinishUpdateEPNS_21TagWelsDecoderContextE($pCtx);
 $128 = (($pCtx) + 116|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 & 16400;
 $131 = ($130|0)==(0);
 if (!($131)) {
  $132 = (($pCtx) + 242324|0);
  HEAP8[$132>>0] = 1;
  $$0 = $129;
  STACKTOP = sp;return ($$0|0);
 }
 $133 = ($iRet$4|0)==(0);
 $134 = $129 & 16;
 $135 = ($134|0)==(0);
 $or$cond = $133 | $135;
 if ($or$cond) {
  $$0 = $129;
  STACKTOP = sp;return ($$0|0);
 }
 $136 = (($pCtx) + 242324|0);
 HEAP8[$136>>0] = 1;
 $$0 = $129;
 STACKTOP = sp;return ($$0|0);
}
function _SyncPictureResolutionExt($pCtx,$kiMbWidth,$kiMbHeight) {
 $pCtx = $pCtx|0;
 $kiMbWidth = $kiMbWidth|0;
 $kiMbHeight = $kiMbHeight|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer3 = sp;
 $0 = (_WelsRequestMem($pCtx,$kiMbWidth,$kiMbHeight)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,4728,$vararg_buffer3);
  $2 = (($pCtx) + 116|0);
  HEAP32[$2>>2] = 16384;
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = $kiMbHeight << 4;
 $4 = $kiMbWidth << 4;
 $5 = (__ZN7WelsDec22InitialDqLayersContextEPNS_21TagWelsDecoderContextEii($pCtx,$4,$3)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,4800,$vararg_buffer3);
  $7 = (($pCtx) + 116|0);
  HEAP32[$7>>2] = 16384;
 }
 $8 = (($pCtx) + 562528|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNK10WelsCommon12CMemoryAlign18WelsGetMemoryUsageEv($9)|0);
 $11 = (($10) + 562536)|0;
 $12 = $vararg_buffer3;
 $13 = $12;
 HEAP32[$13>>2] = $11;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 __Z7WelsLogP13TagLogContextiPKcz($pCtx,4,4880,$vararg_buffer3);
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _ResetDecStatNums($pDecStat) {
 $pDecStat = $pDecStat|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pDecStat>>2]|0;
 $1 = (($pDecStat) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pDecStat) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 dest=$pDecStat+0|0; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$pDecStat>>2] = $0;
 HEAP32[$1>>2] = $2;
 HEAP32[$3>>2] = $4;
 STACKTOP = sp;return;
}
function _UpdateDecStatNoFreezingInfo($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $exitcond = 0, $iMb$02 = 0, $iTotalQp$0$lcssa = 0, $iTotalQp$01 = 0, $storemerge = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 5464|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCtx) + 512248|0);
 $5 = (($pCtx) + 512304|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  HEAP32[$5>>2] = 0;
  $36 = 0;
 } else {
  $36 = $6;
 }
 $8 = (($1) + 4044|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($1) + 4048|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($11, $9)|0;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = (($1) + 3948|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($1) + 3980|0);
  $17 = HEAP32[$16>>2]|0;
  $iMb$02 = 0;$iTotalQp$01 = 0;
  while(1) {
   $18 = (($15) + ($iMb$02)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = (($17) + ($iMb$02)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = (0 - ($23))|0;
   $25 = $20 & $24;
   $26 = (($25) + ($iTotalQp$01))|0;
   $27 = (($iMb$02) + 1)|0;
   $exitcond = ($27|0)==($12|0);
   if ($exitcond) {
    $iTotalQp$0$lcssa = $26;
    break;
   } else {
    $iMb$02 = $27;$iTotalQp$01 = $26;
   }
  }
 } else {
  $iTotalQp$0$lcssa = 0;
 }
 $28 = (($iTotalQp$0$lcssa|0) / ($12|0))&-1;
 $29 = (($pCtx) + 512264|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 $32 = ($31|0)==(0);
 if ($32) {
  $33 = HEAP32[$4>>2]|0;
  $34 = (($pCtx) + 512252|0);
  $35 = HEAP32[$34>>2]|0;
  dest=$4+0|0; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$4>>2] = $33;
  HEAP32[$34>>2] = $35;
  HEAP32[$5>>2] = $36;
  $storemerge = $28;
 } else {
  $37 = Math_imul($36, $30)|0;
  $38 = (($37) + ($28))|0;
  $div = (($38>>>0) / ($31>>>0))&-1;
  $storemerge = $div;
 }
 HEAP32[$5>>2] = $storemerge;
 $39 = (($1) + 12|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  STACKTOP = sp;return;
 }
 $42 = (($3) + 72|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = (($pCtx) + 512272|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($44))|0;
 HEAP32[$45>>2] = $47;
 $48 = HEAP8[$42>>0]|0;
 $49 = $48 ^ 1;
 $50 = $49&255;
 $51 = (($pCtx) + 512284|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + ($52))|0;
 HEAP32[$51>>2] = $53;
 STACKTOP = sp;return;
}
function _UpdateDecStat($pCtx,$kbOutput) {
 $pCtx = $pCtx|0;
 $kbOutput = $kbOutput|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 84|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  if (!($kbOutput)) {
   STACKTOP = sp;return;
  }
  _UpdateDecStatNoFreezingInfo($pCtx);
  STACKTOP = sp;return;
 }
 $3 = (($pCtx) + 241932|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $11 = (($pCtx) + 512300|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$11>>2] = $13;
  STACKTOP = sp;return;
 } else {
  $8 = (($pCtx) + 512296|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$8>>2] = $10;
  STACKTOP = sp;return;
 }
}
function __ZN7WelsDec22ParsePredWeightedTableEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersE($pBs,$pSh) {
 $pBs = $pBs|0;
 $pSh = $pSh|0;
 var $$0 = 0, $$off = 0, $$off12 = 0, $$off13 = 0, $$off14 = 0, $$ph = 0, $$ph31 = 0, $$ph34 = 0, $$ph36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$047 = 0, $j$040 = 0, $uiCode = 0, $uiCodeNum$i = 0, $uiCodeNum$i15 = 0, $uiCodeNum$i19 = 0, $uiCodeNum$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $uiCodeNum$i25 = sp + 16|0;
 $uiCodeNum$i19 = sp + 12|0;
 $uiCodeNum$i15 = sp + 8|0;
 $uiCodeNum$i = sp + 4|0;
 $uiCode = sp;
 $0 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$uiCode>>2]|0;
 $3 = ($2>>>0)>(7);
 if ($3) {
  $$0 = 328733;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pSh) + 344|0);
 HEAP32[$4>>2] = $2;
 $5 = (($pSh) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 319|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 do {
  if (!($9)) {
   $10 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$0 = $10;
    STACKTOP = sp;return ($$0|0);
   }
   $12 = HEAP32[$uiCode>>2]|0;
   $13 = ($12>>>0)>(7);
   if ($13) {
    $$0 = 328734;
    STACKTOP = sp;return ($$0|0);
   } else {
    $14 = (($pSh) + 348|0);
    HEAP32[$14>>2] = $12;
    break;
   }
  }
 } while(0);
 $15 = (($pSh) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 if (!($17)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($pBs) + 20|0);
 $19 = (($pBs) + 4|0);
 $20 = (($pBs) + 16|0);
 $21 = (($pBs) + 24|0);
 $22 = (($pSh) + 348|0);
 $i$047 = 0;
 L19: while(1) {
  $23 = HEAP32[$18>>2]|0;
  $24 = $23 >>> 31;
  $25 = HEAP32[$19>>2]|0;
  $26 = HEAP32[$pBs>>2]|0;
  $27 = $26;
  $28 = HEAP32[$20>>2]|0;
  $29 = $23 << 1;
  HEAP32[$18>>2] = $29;
  $30 = HEAP32[$21>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$21>>2] = $31;
  $32 = ($30|0)>(-1);
  if ($32) {
   $33 = $28;
   $34 = $25;
   $35 = (($33) - ($27))|0;
   $36 = (($34) + 1)|0;
   $37 = (($36) - ($27))|0;
   $38 = ($35|0)>($37|0);
   if ($38) {
    $$0 = 11;
    label = 43;
    break;
   }
   $39 = HEAP8[$28>>0]|0;
   $40 = $39&255;
   $41 = $40 << 8;
   $42 = (($28) + 1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = $41 | $44;
   $46 = $45 << $31;
   $47 = $46 | $29;
   HEAP32[$18>>2] = $47;
   $48 = (($30) + -15)|0;
   HEAP32[$21>>2] = $48;
   $49 = (($28) + 2|0);
   HEAP32[$20>>2] = $49;
  }
  HEAP32[$uiCode>>2] = $24;
  $50 = ($24|0)==(0);
  if ($50) {
   $73 = HEAP32[$4>>2]|0;
   $74 = 1 << $73;
   $75 = ((($pSh) + ($i$047<<2)|0) + 352|0);
   HEAP32[$75>>2] = $74;
   $76 = ((($pSh) + ($i$047<<2)|0) + 416|0);
   HEAP32[$76>>2] = 0;
  } else {
   $51 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i15)|0);
   $52 = ($51|0)==(0);
   if (!($52)) {
    $$0 = $51;
    label = 43;
    break;
   }
   $53 = HEAP32[$uiCodeNum$i15>>2]|0;
   $54 = $53 & 1;
   $55 = ($54|0)==(0);
   if ($55) {
    $58 = $53 >>> 1;
    $59 = (0 - ($58))|0;
    $$ph = $59;
   } else {
    $56 = (($53) + 1)|0;
    $57 = $56 >>> 1;
    $$ph = $57;
   }
   $$off13 = (($$ph) + 128)|0;
   $60 = ($$off13>>>0)>(255);
   if ($60) {
    $$0 = 328735;
    label = 43;
    break;
   }
   $61 = ((($pSh) + ($i$047<<2)|0) + 352|0);
   HEAP32[$61>>2] = $$ph;
   $62 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i19)|0);
   $63 = ($62|0)==(0);
   if (!($63)) {
    $$0 = $62;
    label = 43;
    break;
   }
   $64 = HEAP32[$uiCodeNum$i19>>2]|0;
   $65 = $64 & 1;
   $66 = ($65|0)==(0);
   if ($66) {
    $69 = $64 >>> 1;
    $70 = (0 - ($69))|0;
    $$ph31 = $70;
   } else {
    $67 = (($64) + 1)|0;
    $68 = $67 >>> 1;
    $$ph31 = $68;
   }
   $$off14 = (($$ph31) + 128)|0;
   $71 = ($$off14>>>0)>(255);
   if ($71) {
    $$0 = 328737;
    label = 43;
    break;
   }
   $72 = ((($pSh) + ($i$047<<2)|0) + 416|0);
   HEAP32[$72>>2] = $$ph31;
  }
  $77 = HEAP32[$5>>2]|0;
  $78 = (($77) + 319|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = ($79<<24>>24)==(0);
  do {
   if (!($80)) {
    $81 = HEAP32[$18>>2]|0;
    $82 = $81 >>> 31;
    $83 = HEAP32[$19>>2]|0;
    $84 = HEAP32[$pBs>>2]|0;
    $85 = $84;
    $86 = HEAP32[$20>>2]|0;
    $87 = $81 << 1;
    HEAP32[$18>>2] = $87;
    $88 = HEAP32[$21>>2]|0;
    $89 = (($88) + 1)|0;
    HEAP32[$21>>2] = $89;
    $90 = ($88|0)>(-1);
    if ($90) {
     $91 = $86;
     $92 = $83;
     $93 = (($91) - ($85))|0;
     $94 = (($92) + 1)|0;
     $95 = (($94) - ($85))|0;
     $96 = ($93|0)>($95|0);
     if ($96) {
      $$0 = 11;
      label = 43;
      break L19;
     }
     $97 = HEAP8[$86>>0]|0;
     $98 = $97&255;
     $99 = $98 << 8;
     $100 = (($86) + 1|0);
     $101 = HEAP8[$100>>0]|0;
     $102 = $101&255;
     $103 = $99 | $102;
     $104 = $103 << $89;
     $105 = $104 | $87;
     HEAP32[$18>>2] = $105;
     $106 = (($88) + -15)|0;
     HEAP32[$21>>2] = $106;
     $107 = (($86) + 2|0);
     HEAP32[$20>>2] = $107;
    }
    HEAP32[$uiCode>>2] = $82;
    $108 = ($82|0)==(0);
    if ($108) {
     $109 = HEAP32[$22>>2]|0;
     $110 = 1 << $109;
     $111 = ((($pSh) + ($i$047<<3)|0) + 480|0);
     HEAP32[$111>>2] = $110;
     $112 = ((($pSh) + ($i$047<<3)|0) + 608|0);
     HEAP32[$112>>2] = 0;
     $113 = ((($pSh) + ($i$047<<3)|0) + 484|0);
     HEAP32[$113>>2] = $110;
     $114 = ((($pSh) + ($i$047<<3)|0) + 612|0);
     HEAP32[$114>>2] = 0;
     break;
    } else {
     $j$040 = 0;
    }
    while(1) {
     $115 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i25)|0);
     $116 = ($115|0)==(0);
     if (!($116)) {
      $$0 = $115;
      label = 43;
      break L19;
     }
     $117 = HEAP32[$uiCodeNum$i25>>2]|0;
     $118 = $117 & 1;
     $119 = ($118|0)==(0);
     if ($119) {
      $122 = $117 >>> 1;
      $123 = (0 - ($122))|0;
      $$ph34 = $123;
     } else {
      $120 = (($117) + 1)|0;
      $121 = $120 >>> 1;
      $$ph34 = $121;
     }
     $$off = (($$ph34) + 128)|0;
     $124 = ($$off>>>0)>(255);
     if ($124) {
      $$0 = 328736;
      label = 43;
      break L19;
     }
     $125 = (((($pSh) + ($i$047<<3)|0) + ($j$040<<2)|0) + 480|0);
     HEAP32[$125>>2] = $$ph34;
     $126 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i)|0);
     $127 = ($126|0)==(0);
     if (!($127)) {
      $$0 = $126;
      label = 43;
      break L19;
     }
     $128 = HEAP32[$uiCodeNum$i>>2]|0;
     $129 = $128 & 1;
     $130 = ($129|0)==(0);
     if ($130) {
      $133 = $128 >>> 1;
      $134 = (0 - ($133))|0;
      $$ph36 = $134;
     } else {
      $131 = (($128) + 1)|0;
      $132 = $131 >>> 1;
      $$ph36 = $132;
     }
     $$off12 = (($$ph36) + 128)|0;
     $135 = ($$off12>>>0)>(255);
     if ($135) {
      $$0 = 328738;
      label = 43;
      break L19;
     }
     $136 = (((($pSh) + ($i$047<<3)|0) + ($j$040<<2)|0) + 608|0);
     HEAP32[$136>>2] = $$ph36;
     $137 = (($j$040) + 1)|0;
     $138 = ($137|0)<(2);
     if ($138) {
      $j$040 = $137;
     } else {
      break;
     }
    }
   }
  } while(0);
  $139 = (($i$047) + 1)|0;
  $140 = HEAP32[$15>>2]|0;
  $141 = ($139|0)<($140|0);
  if ($141) {
   $i$047 = $139;
  } else {
   $$0 = 0;
   label = 43;
   break;
  }
 }
 if ((label|0) == 43) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec25ParseRefPicListReorderingEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersE($pBs,$pSh) {
 $pBs = $pBs|0;
 $pSh = $pSh|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iIdx$09 = 0, $iIdx$09$us = 0, $iList$0$us = 0, $or$cond3 = 0, $or$cond3$us = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 $0 = (($pSh) + 2732|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 2) | (($1|0) == 4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($pSh) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pBs) + 20|0);
 $5 = (($pBs) + 4|0);
 $6 = (($pBs) + 16|0);
 $7 = (($pBs) + 24|0);
 $8 = ($1|0)==(1);
 $9 = (($3) + 16|0);
 if ($8) {
  $iList$0$us = 0;
  L39: while(1) {
   $10 = HEAP32[$4>>2]|0;
   $11 = $10 >>> 31;
   $12 = HEAP32[$5>>2]|0;
   $13 = HEAP32[$pBs>>2]|0;
   $14 = $13;
   $15 = HEAP32[$6>>2]|0;
   $16 = $10 << 1;
   HEAP32[$4>>2] = $16;
   $17 = HEAP32[$7>>2]|0;
   $18 = (($17) + 1)|0;
   HEAP32[$7>>2] = $18;
   $19 = ($17|0)>(-1);
   if ($19) {
    $20 = $15;
    $21 = $12;
    $22 = (($20) - ($14))|0;
    $23 = (($21) + 1)|0;
    $24 = (($23) - ($14))|0;
    $25 = ($22|0)>($24|0);
    if ($25) {
     $$0 = 11;
     label = 38;
     break;
    }
    $26 = HEAP8[$15>>0]|0;
    $27 = $26&255;
    $28 = $27 << 8;
    $29 = (($15) + 1|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = $28 | $31;
    $33 = $32 << $18;
    $34 = $33 | $16;
    HEAP32[$4>>2] = $34;
    $35 = (($17) + -15)|0;
    HEAP32[$7>>2] = $35;
    $36 = (($15) + 2|0);
    HEAP32[$6>>2] = $36;
   }
   HEAP32[$uiCode>>2] = $11;
   $37 = ($11|0)==(0);
   $38 = ((($pSh) + ($iList$0$us)|0) + 340|0);
   $39 = $11&255;
   HEAP8[$38>>0] = $39;
   L45: do {
    if (!($37)) {
     $68 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
     $69 = ($68|0)==(0);
     if (!($69)) {
      $$0 = $68;
      label = 38;
      break L39;
     }
     $47 = ((($pSh) + ($iList$0$us<<2)|0) + 28|0);
     $iIdx$09$us = 0;
     while(1) {
      $40 = HEAP32[$uiCode>>2]|0;
      $41 = ($iIdx$09$us|0)>(15);
      $42 = ($40>>>0)>(3);
      $or$cond3$us = $41 | $42;
      if ($or$cond3$us) {
       $$0 = 328759;
       label = 38;
       break L39;
      }
      $43 = $40&65535;
      $44 = (((($pSh) + ($iList$0$us<<7)|0) + ($iIdx$09$us<<3)|0) + 90|0);
      HEAP16[$44>>1] = $43;
      $45 = ($40|0)==(3);
      if ($45) {
       break L45;
      }
      $46 = HEAP32[$47>>2]|0;
      $48 = ($iIdx$09$us|0)<($46|0);
      if (!($48)) {
       $$0 = 328759;
       label = 38;
       break L39;
      }
      $49 = ($40>>>0)<(2);
      if ($49) {
       $56 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
       $57 = ($56|0)==(0);
       if (!($57)) {
        $$0 = $56;
        label = 38;
        break L39;
       }
       $58 = HEAP32[$uiCode>>2]|0;
       $59 = HEAP32[$9>>2]|0;
       $60 = 1 << $59;
       $61 = ($58>>>0)>($60>>>0);
       if ($61) {
        $$0 = 328759;
        label = 38;
        break L39;
       }
       $62 = (((($pSh) + ($iList$0$us<<7)|0) + ($iIdx$09$us<<3)|0) + 84|0);
       HEAP32[$62>>2] = $58;
      } else {
       $50 = ($40|0)==(2);
       if ($50) {
        $51 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
        $52 = ($51|0)==(0);
        if (!($52)) {
         $$0 = $51;
         label = 38;
         break L39;
        }
        $53 = HEAP32[$uiCode>>2]|0;
        $54 = $53&65535;
        $55 = (((($pSh) + ($iList$0$us<<7)|0) + ($iIdx$09$us<<3)|0) + 88|0);
        HEAP16[$55>>1] = $54;
       }
      }
      $63 = (($iIdx$09$us) + 1)|0;
      $64 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
      $65 = ($64|0)==(0);
      if ($65) {
       $iIdx$09$us = $63;
      } else {
       $$0 = $64;
       label = 38;
       break L39;
      }
     }
    }
   } while(0);
   $66 = (($iList$0$us) + 1)|0;
   $67 = ($66|0)<(2);
   if ($67) {
    $iList$0$us = $66;
   } else {
    $$0 = 0;
    label = 38;
    break;
   }
  }
  if ((label|0) == 38) {
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $70 = HEAP32[$4>>2]|0;
  $71 = $70 >>> 31;
  $72 = HEAP32[$5>>2]|0;
  $73 = HEAP32[$pBs>>2]|0;
  $74 = $73;
  $75 = HEAP32[$6>>2]|0;
  $76 = $70 << 1;
  HEAP32[$4>>2] = $76;
  $77 = HEAP32[$7>>2]|0;
  $78 = (($77) + 1)|0;
  HEAP32[$7>>2] = $78;
  $79 = ($77|0)>(-1);
  do {
   if ($79) {
    $80 = $75;
    $81 = $72;
    $82 = (($80) - ($74))|0;
    $83 = (($81) + 1)|0;
    $84 = (($83) - ($74))|0;
    $85 = ($82|0)>($84|0);
    if ($85) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $86 = HEAP8[$75>>0]|0;
     $87 = $86&255;
     $88 = $87 << 8;
     $89 = (($75) + 1|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $90&255;
     $92 = $88 | $91;
     $93 = $92 << $78;
     $94 = $93 | $76;
     HEAP32[$4>>2] = $94;
     $95 = (($77) + -15)|0;
     HEAP32[$7>>2] = $95;
     $96 = (($75) + 2|0);
     HEAP32[$6>>2] = $96;
     break;
    }
   }
  } while(0);
  HEAP32[$uiCode>>2] = $71;
  $97 = ($71|0)==(0);
  $98 = (($pSh) + 340|0);
  $99 = $71&255;
  HEAP8[$98>>0] = $99;
  if ($97) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $100 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
  $101 = ($100|0)==(0);
  if (!($101)) {
   $$0 = $100;
   STACKTOP = sp;return ($$0|0);
  }
  $102 = (($pSh) + 28|0);
  $iIdx$09 = 0;
  while(1) {
   $103 = HEAP32[$uiCode>>2]|0;
   $104 = ($iIdx$09|0)>(15);
   $105 = ($103>>>0)>(3);
   $or$cond3 = $104 | $105;
   if ($or$cond3) {
    $$0 = 328759;
    label = 38;
    break;
   }
   $106 = $103&65535;
   $107 = ((($pSh) + ($iIdx$09<<3)|0) + 90|0);
   HEAP16[$107>>1] = $106;
   $108 = ($103|0)==(3);
   if ($108) {
    $$0 = 0;
    label = 38;
    break;
   }
   $109 = HEAP32[$102>>2]|0;
   $110 = ($iIdx$09|0)<($109|0);
   if (!($110)) {
    $$0 = 328759;
    label = 38;
    break;
   }
   $111 = ($103>>>0)<(2);
   if ($111) {
    $112 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
    $113 = ($112|0)==(0);
    if (!($113)) {
     $$0 = $112;
     label = 38;
     break;
    }
    $114 = HEAP32[$uiCode>>2]|0;
    $115 = HEAP32[$9>>2]|0;
    $116 = 1 << $115;
    $117 = ($114>>>0)>($116>>>0);
    if ($117) {
     $$0 = 328759;
     label = 38;
     break;
    }
    $118 = ((($pSh) + ($iIdx$09<<3)|0) + 84|0);
    HEAP32[$118>>2] = $114;
   } else {
    $119 = ($103|0)==(2);
    if ($119) {
     $120 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
     $121 = ($120|0)==(0);
     if (!($121)) {
      $$0 = $120;
      label = 38;
      break;
     }
     $122 = HEAP32[$uiCode>>2]|0;
     $123 = $122&65535;
     $124 = ((($pSh) + ($iIdx$09<<3)|0) + 88|0);
     HEAP16[$124>>1] = $123;
    }
   }
   $125 = (($iIdx$09) + 1)|0;
   $126 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
   $127 = ($126|0)==(0);
   if ($127) {
    $iIdx$09 = $125;
   } else {
    $$0 = $126;
    label = 38;
    break;
   }
  }
  if ((label|0) == 38) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 return (0)|0;
}
function __ZN7WelsDec21ParseDecRefPicMarkingEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersEPNS_6TagSpsEb($pCtx,$pBs,$pSh,$pSps,$kbIdrFlag) {
 $pCtx = $pCtx|0;
 $pBs = $pBs|0;
 $pSh = $pSh|0;
 $pSps = $pSps|0;
 $kbIdrFlag = $kbIdrFlag|0;
 var $$0 = 0, $$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iIdx$0 = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 $0 = (($pBs) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 31;
 $3 = (($pBs) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$pBs>>2]|0;
 $6 = $5;
 $7 = (($pBs) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1 << 1;
 HEAP32[$0>>2] = $9;
 $10 = (($pBs) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$10>>2] = $12;
 $13 = ($11|0)>(-1);
 if ($13) {
  $14 = $8;
  $15 = $4;
  $16 = (($14) - ($6))|0;
  $17 = (($15) + 1)|0;
  $18 = (($17) - ($6))|0;
  $19 = ($16|0)>($18|0);
  if ($19) {
   $$0$i$i = 11;
  } else {
   $20 = HEAP8[$8>>0]|0;
   $21 = $20&255;
   $22 = $21 << 8;
   $23 = (($8) + 1|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $22 | $25;
   $27 = $26 << $12;
   $28 = $27 | $9;
   HEAP32[$0>>2] = $28;
   $29 = (($11) + -15)|0;
   HEAP32[$10>>2] = $29;
   $30 = (($8) + 2|0);
   HEAP32[$7>>2] = $30;
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  HEAP32[$uiCode>>2] = $2;
  $$0$i$i = 0;
 }
 $31 = ($$0$i$i|0)==(0);
 if ($kbIdrFlag) {
  if (!($31)) {
   $$0 = $$0$i$i;
   STACKTOP = sp;return ($$0|0);
  }
  $32 = (($pSh) + 2724|0);
  $33 = $2&255;
  HEAP8[$32>>0] = $33;
  $34 = HEAP32[$0>>2]|0;
  $35 = $34 >>> 31;
  $36 = HEAP32[$3>>2]|0;
  $37 = HEAP32[$pBs>>2]|0;
  $38 = $37;
  $39 = HEAP32[$7>>2]|0;
  $40 = $34 << 1;
  HEAP32[$0>>2] = $40;
  $41 = HEAP32[$10>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$10>>2] = $42;
  $43 = ($41|0)>(-1);
  do {
   if ($43) {
    $44 = $39;
    $45 = $36;
    $46 = (($44) - ($38))|0;
    $47 = (($45) + 1)|0;
    $48 = (($47) - ($38))|0;
    $49 = ($46|0)>($48|0);
    if ($49) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $50 = HEAP8[$39>>0]|0;
     $51 = $50&255;
     $52 = $51 << 8;
     $53 = (($39) + 1|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $56 = $52 | $55;
     $57 = $56 << $42;
     $58 = $57 | $40;
     HEAP32[$0>>2] = $58;
     $59 = (($41) + -15)|0;
     HEAP32[$10>>2] = $59;
     $60 = (($39) + 2|0);
     HEAP32[$7>>2] = $60;
     break;
    }
   }
  } while(0);
  HEAP32[$uiCode>>2] = $35;
  $61 = (($pSh) + 2725|0);
  $62 = $35&255;
  HEAP8[$61>>0] = $62;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 if (!($31)) {
  $$0 = $$0$i$i;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = ($2|0)==(0);
 $64 = (($pSh) + 2726|0);
 $65 = $2&255;
 HEAP8[$64>>0] = $65;
 if ($63) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($pSh) + 4|0);
 $67 = (($pSps) + 16|0);
 $iIdx$0 = 0;
 L26: while(1) {
  $68 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
  $69 = ($68|0)==(0);
  if (!($69)) {
   $$0 = $68;
   label = 28;
   break;
  }
  $70 = HEAP32[$uiCode>>2]|0;
  $71 = ((($pSh) + (($iIdx$0*24)|0)|0) + 1140|0);
  HEAP32[$71>>2] = $70;
  $72 = ($70|0)==(0);
  if ($72) {
   $$0 = 0;
   label = 28;
   break;
  }
  $73 = $70 & -3;
  $74 = ($73|0)==(1);
  do {
   if ($74) {
    $75 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
    $76 = ($75|0)==(0);
    if (!($76)) {
     $$0 = $75;
     label = 28;
     break L26;
    }
    $77 = HEAP32[$uiCode>>2]|0;
    $78 = (($77) + 1)|0;
    $79 = ((($pSh) + (($iIdx$0*24)|0)|0) + 1148|0);
    HEAP32[$79>>2] = $78;
    $80 = HEAP32[$66>>2]|0;
    $81 = (($80) - ($78))|0;
    $82 = HEAP32[$67>>2]|0;
    $83 = 1 << $82;
    $84 = (($83) + -1)|0;
    $85 = $84 & $81;
    $86 = ((($pSh) + (($iIdx$0*24)|0)|0) + 1144|0);
    HEAP32[$86>>2] = $85;
    label = 22;
   } else {
    if ((($70|0) == 3) | (($70|0) == 6)) {
     label = 23;
     break;
    } else if ((($70|0) == 4)) {
     label = 25;
     break;
    } else if (!((($70|0) == 2))) {
     break;
    }
    $87 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
    $88 = ($87|0)==(0);
    if (!($88)) {
     $$0 = $87;
     label = 28;
     break L26;
    }
    $89 = HEAP32[$uiCode>>2]|0;
    $90 = ((($pSh) + (($iIdx$0*24)|0)|0) + 1152|0);
    HEAP32[$90>>2] = $89;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ((($70|0) == 3) | (($70|0) == 6)) {
    label = 23;
   } else if ((($70|0) == 4)) {
    label = 25;
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $91 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
   $92 = ($91|0)==(0);
   if (!($92)) {
    $$0 = $91;
    label = 28;
    break;
   }
   $93 = HEAP32[$uiCode>>2]|0;
   $94 = ((($pSh) + (($iIdx$0*24)|0)|0) + 1156|0);
   HEAP32[$94>>2] = $93;
  }
  else if ((label|0) == 25) {
   label = 0;
   $95 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
   $96 = ($95|0)==(0);
   if (!($96)) {
    $$0 = $95;
    label = 28;
    break;
   }
   $97 = HEAP32[$uiCode>>2]|0;
   $98 = (($97) + -1)|0;
   $99 = ((($pSh) + (($iIdx$0*24)|0)|0) + 1160|0);
   HEAP32[$99>>2] = $98;
  }
  $100 = (($iIdx$0) + 1)|0;
  $101 = ($100|0)<(66);
  if ($101) {
   $iIdx$0 = $100;
  } else {
   $$0 = 0;
   label = 28;
   break;
  }
 }
 if ((label|0) == 28) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec12InitBsBufferEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCtx|0)==(0|0);
 if ($0) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pCtx) + 562528|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pCtx) + 6172|0);
 HEAP32[$3>>2] = 3145728;
 $4 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($2,3145728,5016)|0);
 $5 = (($pCtx) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pCtx) + 28|0);
 HEAP32[$7>>2] = $4;
 $8 = (($pCtx) + 24|0);
 HEAP32[$8>>2] = $4;
 $9 = HEAP32[$3>>2]|0;
 $10 = (($4) + ($9)|0);
 $11 = (($pCtx) + 20|0);
 HEAP32[$11>>2] = $10;
 $12 = (($pCtx) + 242344|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($2,544,5040)|0);
 $16 = (($pCtx) + 316848|0);
 HEAP32[$16>>2] = $15;
 $17 = ($15|0)==(0|0);
 if ($17) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($15|0),0,544)|0;
 $18 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($2,7077888,5064)|0);
 $19 = HEAP32[$16>>2]|0;
 $20 = (($19) + 516|0);
 HEAP32[$20>>2] = $18;
 $21 = HEAP32[$16>>2]|0;
 $22 = (($21) + 516|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($23|0),0,7077888)|0;
 $25 = HEAP32[$3>>2]|0;
 $26 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($2,$25,5096)|0);
 $27 = (($pCtx) + 32|0);
 HEAP32[$27>>2] = $26;
 $28 = ($26|0)==(0|0);
 if ($28) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (($pCtx) + 44|0);
 HEAP32[$29>>2] = $26;
 $30 = (($pCtx) + 40|0);
 HEAP32[$30>>2] = $26;
 $31 = HEAP32[$3>>2]|0;
 $32 = (($26) + ($31)|0);
 $33 = (($pCtx) + 36|0);
 HEAP32[$33>>2] = $32;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec14ExpandBsBufferEPNS_21TagWelsDecoderContextEi($pCtx,$kiSrcLen) {
 $pCtx = $pCtx|0;
 $kiSrcLen = $kiSrcLen|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCtx|0)==(0|0);
 if ($0) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($kiSrcLen*3)|0;
 $2 = (($pCtx) + 6172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 1;
 $5 = ($1|0)>($4|0);
 $$ = $5 ? $1 : $4;
 $6 = (($pCtx) + 562528|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($7,$$,5016)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($pCtx) + 241888|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($pCtx) + 16|0);
 $14 = $11;$i$01 = 0;
 while(1) {
  $13 = HEAP32[$14>>2]|0;
  $15 = (($13) + ($i$01<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 3868|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$12>>2]|0;
  $20 = $18;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  $23 = (($8) + ($22)|0);
  HEAP32[$17>>2] = $23;
  $24 = (($16) + 3872|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$12>>2]|0;
  $27 = $25;
  $28 = $26;
  $29 = (($27) - ($28))|0;
  $30 = (($8) + ($29)|0);
  HEAP32[$24>>2] = $30;
  $31 = (($16) + 3884|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$12>>2]|0;
  $34 = $32;
  $35 = $33;
  $36 = (($34) - ($35))|0;
  $37 = (($8) + ($36)|0);
  HEAP32[$31>>2] = $37;
  $38 = (($i$01) + 1)|0;
  $39 = HEAP32[$10>>2]|0;
  $40 = (($39) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($38>>>0)>($41>>>0);
  if ($42) {
   break;
  } else {
   $14 = $39;$i$01 = $38;
  }
 }
 $43 = HEAP32[$12>>2]|0;
 $44 = HEAP32[$2>>2]|0;
 _memcpy(($8|0),($43|0),($44|0))|0;
 HEAP32[$2>>2] = $$;
 $45 = (($pCtx) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$12>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($8) + ($50)|0);
 HEAP32[$45>>2] = $51;
 $52 = (($pCtx) + 28|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53;
 $55 = (($54) - ($49))|0;
 $56 = (($8) + ($55)|0);
 HEAP32[$52>>2] = $56;
 $57 = (($8) + ($$)|0);
 $58 = (($pCtx) + 20|0);
 HEAP32[$58>>2] = $57;
 __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($7,$47,5016);
 HEAP32[$12>>2] = $8;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec13CheckBsBufferEPNS_21TagWelsDecoderContextEi($pCtx,$kiSrcLen) {
 $pCtx = $pCtx|0;
 $kiSrcLen = $kiSrcLen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($kiSrcLen|0)>(7077888);
 if ($0) {
  HEAP32[$vararg_buffer>>2] = 7077888;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $kiSrcLen;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,5120,$vararg_buffer);
  $1 = (($pCtx) + 116|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 | 4;
  HEAP32[$1>>2] = $3;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pCtx) + 6172|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5|0) / 3)&-1;
 $7 = ($6|0)<($kiSrcLen|0);
 if ($7) {
  $8 = (__ZN7WelsDec14ExpandBsBufferEPNS_21TagWelsDecoderContextEi($pCtx,$kiSrcLen)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec14WelsInitMemoryEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCtx|0)==(0|0);
 if ($0) {
  $$0 = 3;
 } else {
  $1 = (($pCtx) + 241888|0);
  $2 = (($pCtx) + 562528|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (__ZN7WelsDec14MemInitNalListEPPNS_14TagAccessUnitsEjPN10WelsCommon12CMemoryAlignE($1,32,$3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (__ZN7WelsDec12InitBsBufferEPNS_21TagWelsDecoderContextE($pCtx)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = (($pCtx) + 241948|0);
    HEAP8[$8>>0] = -1;
    $9 = (($pCtx) + 241950|0);
    HEAP8[$9>>0] = 0;
    $$0 = 0;
   } else {
    $$0 = 1;
   }
  } else {
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec14WelsFreeMemoryEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCtx|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pCtx) + 562528|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pCtx) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2,$4,5184);
  HEAP32[$3>>2] = 0;
 }
 $6 = (($pCtx) + 241888|0);
 (__ZN7WelsDec14MemFreeNalListEPPNS_14TagAccessUnitsEPN10WelsCommon12CMemoryAlignE($6,$2)|0);
 $7 = (($pCtx) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2,$8,5200);
 }
 $10 = (($pCtx) + 242344|0);
 ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (($pCtx) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2,$14,5224);
 }
 $16 = (($pCtx) + 316848|0);
 ;HEAP32[$13+0>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP32[$13+12>>2]=0|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = (($17) + 516|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $24 = $17;
 } else {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2,$20,5064);
  $22 = HEAP32[$16>>2]|0;
  $23 = (($22) + 516|0);
  HEAP32[$23>>2] = 0;
  $$pre = HEAP32[$16>>2]|0;
  $24 = $$pre;
 }
 __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2,$24,5040);
 HEAP32[$16>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec18DecodeNalHeaderExtEPNS_10TagNalUnitEPh($pNal,$pSrc) {
 $pNal = $pNal|0;
 $pSrc = $pSrc|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $$lobit3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$pSrc>>0]|0;
 $1 = $0&255;
 $2 = (($pNal) + 12|0);
 $3 = $1 >>> 6;
 $$lobit = $3 & 1;
 $4 = $$lobit&255;
 HEAP8[$2>>0] = $4;
 $5 = $1 & 63;
 $6 = $5&255;
 $7 = (($pNal) + 13|0);
 HEAP8[$7>>0] = $6;
 $8 = (($pSrc) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($9&255) >>> 7;
 $12 = (($pNal) + 14|0);
 HEAP8[$12>>0] = $11;
 $13 = $10 >>> 4;
 $14 = $13 & 7;
 $15 = $14&255;
 $16 = (($pNal) + 15|0);
 HEAP8[$16>>0] = $15;
 $17 = $10 & 15;
 $18 = $17&255;
 $19 = (($pNal) + 16|0);
 HEAP8[$19>>0] = $18;
 $20 = (($pSrc) + 2|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = ($21&255) >>> 5;
 $24 = (($pNal) + 17|0);
 HEAP8[$24>>0] = $23;
 $25 = (($pNal) + 18|0);
 $26 = $22 >>> 4;
 $$lobit1 = $26 & 1;
 $27 = $$lobit1&255;
 HEAP8[$25>>0] = $27;
 $28 = (($pNal) + 19|0);
 $29 = $22 >>> 3;
 $$lobit2 = $29 & 1;
 $30 = $$lobit2&255;
 HEAP8[$28>>0] = $30;
 $31 = (($pNal) + 20|0);
 $32 = $22 >>> 2;
 $$lobit3 = $32 & 1;
 $33 = $$lobit3&255;
 HEAP8[$31>>0] = $33;
 $34 = $22 & 3;
 $35 = $34&255;
 $36 = (($pNal) + 21|0);
 HEAP8[$36>>0] = $35;
 $37 = $14 << 4;
 $38 = $37 | $17;
 $39 = $38&255;
 $40 = (($pNal) + 22|0);
 HEAP8[$40>>0] = $39;
 STACKTOP = sp;return;
}
function __ZN7WelsDec23ParseSliceHeaderSyntaxsEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEb($pCtx,$pBs,$kbExtensionFlag) {
 $pCtx = $pCtx|0;
 $pBs = $pBs|0;
 $kbExtensionFlag = $kbExtensionFlag|0;
 var $$ = 0, $$0 = 0, $$not = 0, $$not6 = 0, $$not9 = 0, $$off = 0, $$off122 = 0, $$off123 = 0, $$off124 = 0, $$off125 = 0, $$off126 = 0, $$ph = 0, $$ph104 = 0, $$ph106 = 0, $$ph88 = 0, $$ph90 = 0, $$ph94 = 0, $$ph96 = 0, $$ph98 = 0, $$pr$pre = 0;
 var $$pr113 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge10 = 0, $brmerge12$not = 0, $brmerge13 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond24 = 0, $or$cond26 = 0, $or$cond7 = 0, $or$cond8 = 0, $pSps$0 = 0;
 var $pSubsetSps$0 = 0, $storemerge = 0, $storemerge127 = 0, $storemerge128 = 0, $sum = 0, $switch = 0, $uiCode = 0, $uiCodeNum$i = 0, $uiCodeNum$i50 = 0, $uiCodeNum$i54 = 0, $uiCodeNum$i58 = 0, $uiCodeNum$i62 = 0, $uiCodeNum$i70 = 0, $uiCodeNum$i74 = 0, $vararg_buffer85 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0;
 var $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr88 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0;
 $vararg_buffer85 = sp;
 $uiCodeNum$i74 = sp + 1088|0;
 $uiCodeNum$i70 = sp + 1084|0;
 $uiCodeNum$i62 = sp + 1080|0;
 $uiCodeNum$i58 = sp + 1076|0;
 $uiCodeNum$i54 = sp + 1072|0;
 $uiCodeNum$i50 = sp + 1068|0;
 $uiCodeNum$i = sp + 1064|0;
 $uiCode = sp + 1060|0;
 $0 = (($pCtx) + 241888|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($7) + 24|0);
 $10 = (($7) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($7) + 3853|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (($7) + 2792|0);
 _memcpy(($vararg_buffer85|0),($14|0),1060)|0;
 _memset(($9|0),0,3844)|0;
 HEAP8[$12>>0] = $13;
 _memcpy(($14|0),($vararg_buffer85|0),1060)|0;
 $15 = (($7) + 3904|0);
 $16 = $kbExtensionFlag&1;
 HEAP8[$15>>0] = $16;
 $17 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$uiCode>>2]|0;
 HEAP32[$9>>2] = $19;
 $20 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = HEAP32[$uiCode>>2]|0;
 $23 = $22 & 255;
 $24 = ($23>>>0)>(9);
 if ($24) {
  $25 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer85>>2] = $23;
  $vararg_ptr1 = (($vararg_buffer85) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $25;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,5248,$vararg_buffer85);
  $$0 = 328757;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = ($23>>>0)>(4);
 $27 = (($22) + 251)|0;
 $$ = $26 ? $27 : $22;
 $28 = $$ & 255;
 $29 = ($28|0)==(1);
 if ($29) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,5296,$vararg_buffer85);
  $$0 = 328746;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = ($11|0)==(5);
 $$not6 = $30 ^ 1;
 $31 = ($28|0)==(2);
 $or$cond7 = $31 | $$not6;
 if (!($or$cond7)) {
  HEAP32[$vararg_buffer85>>2] = $28;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,5352,$vararg_buffer85);
  $$0 = 328757;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = ($28>>>0)>(2);
 $or$cond8 = $32 & $kbExtensionFlag;
 if ($or$cond8) {
  HEAP32[$vararg_buffer85>>2] = $28;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,5392,$vararg_buffer85);
  $$0 = 328757;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = (($7) + 2756|0);
 HEAP32[$33>>2] = $28;
 $34 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
 $35 = ($34|0)==(0);
 if (!($35)) {
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = HEAP32[$uiCode>>2]|0;
 $37 = ($36|0)>(255);
 if ($37) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,5416,$vararg_buffer85);
  $$0 = 328685;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = ((($pCtx) + ($36)|0) + 242036|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = ($39<<24>>24)==(0);
 if ($40) {
  $41 = (($pCtx) + 512316|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[$41>>2] = $43;
  $44 = (($pCtx) + 242292|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==($36|0);
  $47 = (($pCtx) + 242296|0);
  $48 = HEAP32[$47>>2]|0;
  if ($46) {
   $49 = (($48) + 1)|0;
   $storemerge128 = $49;
  } else {
   HEAP32[$vararg_buffer85>>2] = $36;
   $vararg_ptr15 = (($vararg_buffer85) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $45;
   $vararg_ptr16 = (($vararg_buffer85) + 8|0);
   HEAP32[$vararg_ptr16>>2] = $48;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,5440,$vararg_buffer85);
   HEAP32[$44>>2] = $36;
   $storemerge128 = 0;
  }
  HEAP32[$47>>2] = $storemerge128;
  $50 = (($pCtx) + 116|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 | 16;
  HEAP32[$50>>2] = $52;
  $$0 = 328717;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($pCtx) + 242292|0);
 HEAP32[$53>>2] = -1;
 $54 = ((($pCtx) + (($36*684)|0)|0) + 33648|0);
 $55 = ((($pCtx) + (($36*684)|0)|0) + 33656|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(0);
 if ($57) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,5504,$vararg_buffer85);
  $58 = (($pCtx) + 116|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59 | 16;
  HEAP32[$58>>2] = $60;
  $$0 = 328682;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = HEAP32[$54>>2]|0;
 do {
  if ($kbExtensionFlag) {
   $62 = ((($pCtx) + (($61*864)|0)|0) + 209452|0);
   $63 = ((($pCtx) + ($61)|0) + 242004|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)==(0);
   if (!($65)) {
    $80 = (($pCtx) + 242308|0);
    HEAP32[$80>>2] = -1;
    $pSps$0 = $62;$pSubsetSps$0 = $62;
    break;
   }
   $66 = (($pCtx) + 512312|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + 1)|0;
   HEAP32[$66>>2] = $68;
   $69 = (($pCtx) + 242308|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP32[$54>>2]|0;
   $72 = ($70|0)==($71|0);
   $73 = (($pCtx) + 242312|0);
   $74 = HEAP32[$73>>2]|0;
   if ($72) {
    $76 = (($74) + 1)|0;
    $storemerge127 = $76;
   } else {
    HEAP32[$vararg_buffer85>>2] = $71;
    $vararg_ptr22 = (($vararg_buffer85) + 4|0);
    HEAP32[$vararg_ptr22>>2] = $70;
    $vararg_ptr23 = (($vararg_buffer85) + 8|0);
    HEAP32[$vararg_ptr23>>2] = $74;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,5528,$vararg_buffer85);
    $75 = HEAP32[$54>>2]|0;
    HEAP32[$69>>2] = $75;
    $storemerge127 = 0;
   }
   HEAP32[$73>>2] = $storemerge127;
   $77 = (($pCtx) + 116|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 | 16;
   HEAP32[$77>>2] = $79;
   $$0 = 328716;
   STACKTOP = sp;return ($$0|0);
  } else {
   $81 = ((($pCtx) + ($61)|0) + 241972|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = ($82<<24>>24)==(0);
   if (!($83)) {
    $98 = (($pCtx) + 242300|0);
    HEAP32[$98>>2] = -1;
    $99 = HEAP32[$54>>2]|0;
    $100 = ((($pCtx) + (($99*832)|0)|0) + 6192|0);
    $pSps$0 = $100;$pSubsetSps$0 = 0;
    break;
   }
   $84 = (($pCtx) + 512308|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($85) + 1)|0;
   HEAP32[$84>>2] = $86;
   $87 = (($pCtx) + 242300|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = HEAP32[$54>>2]|0;
   $90 = ($88|0)==($89|0);
   $91 = (($pCtx) + 242304|0);
   $92 = HEAP32[$91>>2]|0;
   if ($90) {
    $94 = (($92) + 1)|0;
    $storemerge = $94;
   } else {
    HEAP32[$vararg_buffer85>>2] = $89;
    $vararg_ptr27 = (($vararg_buffer85) + 4|0);
    HEAP32[$vararg_ptr27>>2] = $88;
    $vararg_ptr28 = (($vararg_buffer85) + 8|0);
    HEAP32[$vararg_ptr28>>2] = $92;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,5600,$vararg_buffer85);
    $93 = HEAP32[$54>>2]|0;
    HEAP32[$87>>2] = $93;
    $storemerge = 0;
   }
   HEAP32[$91>>2] = $storemerge;
   $95 = (($pCtx) + 116|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $96 | 16;
   HEAP32[$95>>2] = $97;
   $$0 = 328716;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $101 = (($7) + 100|0);
 HEAP32[$101>>2] = $36;
 $102 = HEAP32[$54>>2]|0;
 $103 = (($7) + 96|0);
 HEAP32[$103>>2] = $102;
 $104 = (($7) + 92|0);
 HEAP32[$104>>2] = $54;
 $105 = (($7) + 88|0);
 HEAP32[$105>>2] = $pSps$0;
 $106 = (($7) + 2768|0);
 HEAP32[$106>>2] = $pSubsetSps$0;
 $$not = $kbExtensionFlag ^ 1;
 $or$cond = $30 & $$not;
 if ($kbExtensionFlag) {
  $107 = (($7) + 12|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = ($108<<24>>24)!=(0);
  $112 = $109;
 } else {
  $112 = $or$cond;
 }
 $110 = (($7) + 104|0);
 $111 = $112&1;
 HEAP8[$110>>0] = $111;
 $113 = (($pSps$0) + 16|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)==(0);
 if ($115) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,5664,$vararg_buffer85);
  $$0 = 328682;
  STACKTOP = sp;return ($$0|0);
 }
 $116 = HEAP32[$9>>2]|0;
 $117 = (($pSps$0) + 12|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($116>>>0)>($118>>>0);
 if ($119) {
  HEAP32[$vararg_buffer85>>2] = $116;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,5696,$vararg_buffer85);
  $$0 = 328700;
  STACKTOP = sp;return ($$0|0);
 }
 $120 = (($pBs) + 20|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (32 - ($114))|0;
 $123 = $121 >>> $122;
 $124 = (($pBs) + 4|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = HEAP32[$pBs>>2]|0;
 $127 = $126;
 $128 = (($pBs) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $121 << $114;
 HEAP32[$120>>2] = $130;
 $131 = (($pBs) + 24|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + ($114))|0;
 HEAP32[$131>>2] = $133;
 $134 = ($133|0)>(0);
 do {
  if ($134) {
   $135 = $129;
   $136 = $125;
   $137 = (($135) - ($127))|0;
   $138 = (($136) + 1)|0;
   $139 = (($138) - ($127))|0;
   $140 = ($137|0)>($139|0);
   if ($140) {
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   } else {
    $141 = HEAP8[$129>>0]|0;
    $142 = $141&255;
    $143 = $142 << 8;
    $144 = (($129) + 1|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = $143 | $146;
    $148 = $147 << $133;
    $149 = $148 | $130;
    HEAP32[$120>>2] = $149;
    $150 = (($133) + -16)|0;
    HEAP32[$131>>2] = $150;
    $151 = (($129) + 2|0);
    HEAP32[$128>>2] = $151;
    break;
   }
  }
 } while(0);
 HEAP32[$uiCode>>2] = $123;
 $152 = (($7) + 28|0);
 HEAP32[$152>>2] = $123;
 $153 = (($7) + 2761|0);
 HEAP8[$153>>0] = 0;
 $154 = (($7) + 2762|0);
 HEAP8[$154>>0] = 0;
 $155 = (($pSps$0) + 324|0);
 $156 = HEAP8[$155>>0]|0;
 $157 = ($156<<24>>24)==(0);
 if ($157) {
  HEAP32[$vararg_buffer85>>2] = 0;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,5736,$vararg_buffer85);
  $$0 = 328741;
  STACKTOP = sp;return ($$0|0);
 }
 $158 = (($pSps$0) + 4|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($7) + 1156|0);
 HEAP32[$160>>2] = $159;
 $161 = (($pSps$0) + 8|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (($7) + 1160|0);
 HEAP32[$163>>2] = $162;
 do {
  if ($112) {
   $164 = ($123|0)==(0);
   if (!($164)) {
    HEAP32[$vararg_buffer85>>2] = $123;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,5808,$vararg_buffer85);
    $$0 = 328695;
    STACKTOP = sp;return ($$0|0);
   }
   $165 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
   $166 = ($165|0)==(0);
   if (!($166)) {
    $$0 = $165;
    STACKTOP = sp;return ($$0|0);
   }
   $167 = HEAP32[$uiCode>>2]|0;
   $168 = ($167>>>0)>(65535);
   if (!($168)) {
    $169 = $167&65535;
    $170 = (($7) + 2752|0);
    HEAP16[$170>>1] = $169;
    $171 = (($pCtx) + 242332|0);
    HEAP16[$171>>1] = $169;
    break;
   }
   HEAP32[$vararg_buffer85>>2] = $167;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,5896,$vararg_buffer85);
   $$0 = 328696;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $172 = (($7) + 36|0);
 HEAP32[$172>>2] = 0;
 $173 = (($7) + 44|0);
 HEAP32[$173>>2] = 0;
 $174 = (($7) + 40|0);
 HEAP32[$174>>2] = 0;
 $175 = (($pSps$0) + 20|0);
 $176 = HEAP32[$175>>2]|0;
 do {
  if ((($176|0) == 0)) {
   $177 = (($pSps$0) + 24|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = HEAP32[$120>>2]|0;
   $180 = (32 - ($178))|0;
   $181 = $179 >>> $180;
   $182 = HEAP32[$124>>2]|0;
   $183 = HEAP32[$pBs>>2]|0;
   $184 = $183;
   $185 = HEAP32[$128>>2]|0;
   $186 = $179 << $178;
   HEAP32[$120>>2] = $186;
   $187 = HEAP32[$131>>2]|0;
   $188 = (($187) + ($178))|0;
   HEAP32[$131>>2] = $188;
   $189 = ($188|0)>(0);
   do {
    if ($189) {
     $190 = $185;
     $191 = $182;
     $192 = (($190) - ($184))|0;
     $193 = (($191) + 1)|0;
     $194 = (($193) - ($184))|0;
     $195 = ($192|0)>($194|0);
     if ($195) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $196 = HEAP8[$185>>0]|0;
      $197 = $196&255;
      $198 = $197 << 8;
      $199 = (($185) + 1|0);
      $200 = HEAP8[$199>>0]|0;
      $201 = $200&255;
      $202 = $198 | $201;
      $203 = $202 << $188;
      $204 = $203 | $186;
      HEAP32[$120>>2] = $204;
      $205 = (($188) + -16)|0;
      HEAP32[$131>>2] = $205;
      $206 = (($185) + 2|0);
      HEAP32[$128>>2] = $206;
      break;
     }
    }
   } while(0);
   HEAP32[$uiCode>>2] = $181;
   $207 = (($7) + 32|0);
   HEAP32[$207>>2] = $181;
   $208 = ((($pCtx) + (($36*684)|0)|0) + 33825|0);
   $209 = HEAP8[$208>>0]|0;
   $210 = ($209<<24>>24)==(0);
   if ($210) {
    break;
   }
   $211 = HEAP8[$153>>0]|0;
   $212 = ($211<<24>>24)==(0);
   if (!($212)) {
    break;
   }
   $213 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i54)|0);
   $214 = ($213|0)==(0);
   if (!($214)) {
    $$0 = $213;
    STACKTOP = sp;return ($$0|0);
   }
   $215 = HEAP32[$uiCodeNum$i54>>2]|0;
   $216 = $215 & 1;
   $217 = ($216|0)==(0);
   if ($217) {
    $220 = $215 >>> 1;
    $221 = (0 - ($220))|0;
    $$ph = $221;
   } else {
    $218 = (($215) + 1)|0;
    $219 = $218 >>> 1;
    $$ph = $219;
   }
   HEAP32[$172>>2] = $$ph;
  } else if ((($176|0) == 1)) {
   $222 = (($pSps$0) + 322|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = ($223<<24>>24)==(0);
   if ($224) {
    $225 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i58)|0);
    $226 = ($225|0)==(0);
    if (!($226)) {
     $$0 = $225;
     STACKTOP = sp;return ($$0|0);
    }
    $227 = HEAP32[$uiCodeNum$i58>>2]|0;
    $228 = $227 & 1;
    $229 = ($228|0)==(0);
    if ($229) {
     $232 = $227 >>> 1;
     $233 = (0 - ($232))|0;
     $$ph88 = $233;
    } else {
     $230 = (($227) + 1)|0;
     $231 = $230 >>> 1;
     $$ph88 = $231;
    }
    HEAP32[$174>>2] = $$ph88;
    $234 = ((($pCtx) + (($36*684)|0)|0) + 33825|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = ($235<<24>>24)==(0);
    if ($236) {
     break;
    }
    $237 = HEAP8[$153>>0]|0;
    $238 = ($237<<24>>24)==(0);
    if (!($238)) {
     break;
    }
    $239 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i62)|0);
    $240 = ($239|0)==(0);
    if (!($240)) {
     $$0 = $239;
     STACKTOP = sp;return ($$0|0);
    }
    $241 = HEAP32[$uiCodeNum$i62>>2]|0;
    $242 = $241 & 1;
    $243 = ($242|0)==(0);
    if ($243) {
     $246 = $241 >>> 1;
     $247 = (0 - ($246))|0;
     $$ph90 = $247;
    } else {
     $244 = (($241) + 1)|0;
     $245 = $244 >>> 1;
     $$ph90 = $245;
    }
    HEAP32[$173>>2] = $$ph90;
   }
  }
 } while(0);
 $248 = (($7) + 48|0);
 HEAP32[$248>>2] = 0;
 $249 = ((($pCtx) + (($36*684)|0)|0) + 33829|0);
 $250 = HEAP8[$249>>0]|0;
 $251 = ($250<<24>>24)==(0);
 do {
  if (!($251)) {
   $252 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
   $253 = ($252|0)==(0);
   if (!($253)) {
    $$0 = $252;
    STACKTOP = sp;return ($$0|0);
   }
   $254 = HEAP32[$uiCode>>2]|0;
   $255 = ($254>>>0)>(127);
   if (!($255)) {
    HEAP32[$248>>2] = $254;
    break;
   }
   HEAP32[$vararg_buffer85>>2] = $254;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,5928,$vararg_buffer85);
   $$0 = 328697;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $256 = ((($pCtx) + (($36*684)|0)|0) + 33800|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = (($7) + 52|0);
 HEAP32[$258>>2] = $257;
 $259 = ((($pCtx) + (($36*684)|0)|0) + 33804|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = (($7) + 56|0);
 HEAP32[$261>>2] = $260;
 $262 = ($28|0)==(0);
 if ($kbExtensionFlag) {
  $263 = (($7) + 16|0);
  $264 = HEAP8[$263>>0]|0;
  $265 = ($264<<24>>24)==(0);
  $266 = $262 & $265;
  if ($266) {
   label = 84;
  } else {
   $302 = $257;
  }
 } else {
  if ($262) {
   label = 84;
  } else {
   $302 = $257;
  }
 }
 do {
  if ((label|0) == 84) {
   $267 = HEAP32[$120>>2]|0;
   $268 = $267 >>> 31;
   $269 = HEAP32[$124>>2]|0;
   $270 = HEAP32[$pBs>>2]|0;
   $271 = $270;
   $272 = HEAP32[$128>>2]|0;
   $273 = $267 << 1;
   HEAP32[$120>>2] = $273;
   $274 = HEAP32[$131>>2]|0;
   $275 = (($274) + 1)|0;
   HEAP32[$131>>2] = $275;
   $276 = ($274|0)>(-1);
   do {
    if ($276) {
     $277 = $272;
     $278 = $269;
     $279 = (($277) - ($271))|0;
     $280 = (($278) + 1)|0;
     $281 = (($280) - ($271))|0;
     $282 = ($279|0)>($281|0);
     if ($282) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $283 = HEAP8[$272>>0]|0;
      $284 = $283&255;
      $285 = $284 << 8;
      $286 = (($272) + 1|0);
      $287 = HEAP8[$286>>0]|0;
      $288 = $287&255;
      $289 = $285 | $288;
      $290 = $289 << $275;
      $291 = $290 | $273;
      HEAP32[$120>>2] = $291;
      $292 = (($274) + -15)|0;
      HEAP32[$131>>2] = $292;
      $293 = (($272) + 2|0);
      HEAP32[$128>>2] = $293;
      break;
     }
    }
   } while(0);
   HEAP32[$uiCode>>2] = $268;
   $294 = ($268|0)==(0);
   $295 = (($7) + 2760|0);
   $296 = $268&255;
   HEAP8[$295>>0] = $296;
   if ($294) {
    $$pr$pre = HEAP32[$258>>2]|0;
    $302 = $$pr$pre;
    break;
   }
   $297 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
   $298 = ($297|0)==(0);
   if (!($298)) {
    $$0 = $297;
    STACKTOP = sp;return ($$0|0);
   }
   $299 = HEAP32[$uiCode>>2]|0;
   $300 = ($299>>>0)>(15);
   if (!($300)) {
    $301 = (($299) + 1)|0;
    HEAP32[$258>>2] = $301;
    $302 = $301;
    break;
   }
   HEAP32[$vararg_buffer85>>2] = $299;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,5968,$vararg_buffer85);
   $$0 = 328701;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $303 = ($302|0)>(16);
 do {
  if (!($303)) {
   $304 = HEAP32[$261>>2]|0;
   $305 = ($304|0)>(16);
   if ($305) {
    break;
   }
   $306 = (__ZN7WelsDec25ParseRefPicListReorderingEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersE($pBs,$9)|0);
   $307 = ($306|0)==(0);
   if (!($307)) {
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6040,$vararg_buffer85);
    $$0 = $306;
    STACKTOP = sp;return ($$0|0);
   }
   $308 = ((($pCtx) + (($36*684)|0)|0) + 33830|0);
   $309 = HEAP8[$308>>0]|0;
   $310 = ($309<<24>>24)==(0);
   $$not9 = $262 ^ 1;
   $brmerge10 = $310 | $$not9;
   do {
    if (!($brmerge10)) {
     $311 = (__ZN7WelsDec22ParsePredWeightedTableEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersE($pBs,$9)|0);
     $312 = ($311|0)==(0);
     if ($312) {
      break;
     }
     __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6088,$vararg_buffer85);
     $$0 = $311;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   L180: do {
    if ($kbExtensionFlag) {
     $313 = (($7) + 14|0);
     $314 = HEAP8[$313>>0]|0;
     $315 = ($314<<24>>24)==(0);
     do {
      if ($315) {
       $316 = (($7) + 16|0);
       $317 = HEAP8[$316>>0]|0;
       $318 = ($317<<24>>24)==(0);
       if (!($318)) {
        break;
       }
       $320 = (($7) + 3852|0);
       HEAP8[$320>>0] = 1;
       break L180;
      }
     } while(0);
     $319 = (($7) + 3852|0);
     HEAP8[$319>>0] = 0;
    }
   } while(0);
   $321 = (($7) + 1|0);
   $322 = HEAP8[$321>>0]|0;
   $323 = ($322<<24>>24)==(0);
   do {
    if (!($323)) {
     $324 = (__ZN7WelsDec21ParseDecRefPicMarkingEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersEPNS_6TagSpsEb(0,$pBs,$9,$pSps$0,$112)|0);
     $325 = ($324|0)==(0);
     if (!($325)) {
      $$0 = $324;
      STACKTOP = sp;return ($$0|0);
     }
     if (!($kbExtensionFlag)) {
      break;
     }
     $326 = (($pSubsetSps$0) + 856|0);
     $327 = HEAP8[$326>>0]|0;
     $328 = ($327<<24>>24)==(0);
     if (!($328)) {
      break;
     }
     $329 = HEAP32[$120>>2]|0;
     $330 = $329 >>> 31;
     $331 = HEAP32[$124>>2]|0;
     $332 = HEAP32[$pBs>>2]|0;
     $333 = $332;
     $334 = HEAP32[$128>>2]|0;
     $335 = $329 << 1;
     HEAP32[$120>>2] = $335;
     $336 = HEAP32[$131>>2]|0;
     $337 = (($336) + 1)|0;
     HEAP32[$131>>2] = $337;
     $338 = ($336|0)>(-1);
     do {
      if ($338) {
       $339 = $334;
       $340 = $331;
       $341 = (($339) - ($333))|0;
       $342 = (($340) + 1)|0;
       $343 = (($342) - ($333))|0;
       $344 = ($341|0)>($343|0);
       if ($344) {
        $$0 = 11;
        STACKTOP = sp;return ($$0|0);
       } else {
        $345 = HEAP8[$334>>0]|0;
        $346 = $345&255;
        $347 = $346 << 8;
        $348 = (($334) + 1|0);
        $349 = HEAP8[$348>>0]|0;
        $350 = $349&255;
        $351 = $347 | $350;
        $352 = $351 << $337;
        $353 = $352 | $335;
        HEAP32[$120>>2] = $353;
        $354 = (($336) + -15)|0;
        HEAP32[$131>>2] = $354;
        $355 = (($334) + 2|0);
        HEAP32[$128>>2] = $355;
        break;
       }
      }
     } while(0);
     HEAP32[$uiCode>>2] = $330;
     $356 = $330&255;
     HEAP8[$12>>0] = $356;
     $357 = (($7) + 18|0);
     $358 = HEAP8[$357>>0]|0;
     $notlhs = ($358<<24>>24)==(0);
     $notrhs = ($330|0)==(0);
     $brmerge12$not = $notrhs & $notlhs;
     $brmerge13 = $brmerge12$not | $112;
     if ($brmerge13) {
      break;
     }
     __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6128,$vararg_buffer85);
     $$0 = 328742;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $359 = ((($pCtx) + (($36*684)|0)|0) + 33824|0);
   $360 = HEAP8[$359>>0]|0;
   $361 = ($360<<24>>24)==(0);
   do {
    if (!($361)) {
     $362 = HEAP32[$33>>2]|0;
     if ((($362|0) == 4) | (($362|0) == 2)) {
      $368 = (($7) + 1152|0);
      HEAP32[$368>>2] = 0;
      break;
     }
     $363 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
     $364 = ($363|0)==(0);
     if (!($364)) {
      $$0 = $363;
      STACKTOP = sp;return ($$0|0);
     }
     $365 = HEAP32[$uiCode>>2]|0;
     $366 = (($7) + 1152|0);
     HEAP32[$366>>2] = $365;
     $367 = ($365|0)>(2);
     if (!($367)) {
      break;
     }
     HEAP32[$vararg_buffer85>>2] = $365;
     __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,6224,$vararg_buffer85);
     $$0 = 1026;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $369 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i70)|0);
   $370 = ($369|0)==(0);
   if (!($370)) {
    $$0 = $369;
    STACKTOP = sp;return ($$0|0);
   }
   $371 = HEAP32[$uiCodeNum$i70>>2]|0;
   $372 = $371 & 1;
   $373 = ($372|0)==(0);
   if ($373) {
    $376 = $371 >>> 1;
    $377 = (0 - ($376))|0;
    $$ph94 = $377;
   } else {
    $374 = (($371) + 1)|0;
    $375 = $374 >>> 1;
    $$ph94 = $375;
   }
   $378 = (($7) + 60|0);
   HEAP32[$378>>2] = $$ph94;
   $379 = ((($pCtx) + (($36*684)|0)|0) + 33808|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = (($380) + ($$ph94))|0;
   $382 = (($7) + 64|0);
   HEAP32[$382>>2] = $381;
   $383 = ($381>>>0)>(51);
   if ($383) {
    HEAP32[$vararg_buffer85>>2] = $381;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6264,$vararg_buffer85);
    $$0 = 328707;
    STACKTOP = sp;return ($$0|0);
   }
   $$off = (($28) + -3)|0;
   $switch = ($$off>>>0)<(2);
   $or$cond26 = $switch & $$not;
   if ($or$cond26) {
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6288,$vararg_buffer85);
    $$0 = 328744;
    STACKTOP = sp;return ($$0|0);
   }
   $384 = (($7) + 72|0);
   HEAP32[$384>>2] = 0;
   $385 = (($7) + 76|0);
   HEAP32[$385>>2] = 0;
   $386 = (($7) + 80|0);
   HEAP32[$386>>2] = 0;
   $387 = ((($pCtx) + (($36*684)|0)|0) + 33827|0);
   $388 = HEAP8[$387>>0]|0;
   $389 = ($388<<24>>24)==(0);
   do {
    if (!($389)) {
     $390 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
     $391 = ($390|0)==(0);
     if (!($391)) {
      $$0 = $390;
      STACKTOP = sp;return ($$0|0);
     }
     $392 = HEAP32[$uiCode>>2]|0;
     HEAP32[$384>>2] = $392;
     $393 = ($392>>>0)>(6);
     if ($393) {
      HEAP32[$vararg_buffer85>>2] = $392;
      __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6312,$vararg_buffer85);
      $$0 = 1034;
      STACKTOP = sp;return ($$0|0);
     }
     $394 = ($392|0)==(1);
     if ($394) {
      break;
     }
     $395 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i74)|0);
     $396 = ($395|0)==(0);
     if (!($396)) {
      $$0 = $395;
      STACKTOP = sp;return ($$0|0);
     }
     $397 = HEAP32[$uiCodeNum$i74>>2]|0;
     $398 = $397 & 1;
     $399 = ($398|0)==(0);
     if ($399) {
      $402 = $397 >>> 1;
      $403 = (0 - ($402))|0;
      $$ph96 = $403;
     } else {
      $400 = (($397) + 1)|0;
      $401 = $400 >>> 1;
      $$ph96 = $401;
     }
     $404 = $$ph96 << 1;
     HEAP32[$385>>2] = $404;
     $$off122 = (($404) + 12)|0;
     $405 = ($$off122>>>0)>(24);
     if ($405) {
      HEAP32[$vararg_buffer85>>2] = $404;
      __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,6368,$vararg_buffer85);
      $$0 = 328702;
      STACKTOP = sp;return ($$0|0);
     }
     $406 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$vararg_buffer85)|0);
     $407 = ($406|0)==(0);
     if (!($407)) {
      $$0 = $406;
      STACKTOP = sp;return ($$0|0);
     }
     $408 = HEAP32[$vararg_buffer85>>2]|0;
     $409 = $408 & 1;
     $410 = ($409|0)==(0);
     if ($410) {
      $413 = $408 >>> 1;
      $414 = (0 - ($413))|0;
      $$ph98 = $414;
     } else {
      $411 = (($408) + 1)|0;
      $412 = $411 >>> 1;
      $$ph98 = $412;
     }
     $415 = $$ph98 << 1;
     HEAP32[$386>>2] = $415;
     $$off123 = (($415) + 12)|0;
     $416 = ($$off123>>>0)>(24);
     if (!($416)) {
      break;
     }
     HEAP32[$vararg_buffer85>>2] = $415;
     __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,6424,$vararg_buffer85);
     $$0 = 328703;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $417 = HEAP32[$55>>2]|0;
   $418 = ($417>>>0)>(1);
   do {
    if ($418) {
     $419 = ((($pCtx) + (($36*684)|0)|0) + 33660|0);
     $420 = HEAP32[$419>>2]|0;
     $$off126 = (($420) + -3)|0;
     $421 = ($$off126>>>0)<(3);
     if (!($421)) {
      break;
     }
     $422 = ((($pCtx) + (($36*684)|0)|0) + 33760|0);
     $423 = HEAP32[$422>>2]|0;
     $424 = ($423|0)==(0);
     if ($424) {
      $462 = (($7) + 84|0);
      HEAP32[$462>>2] = 0;
      break;
     }
     $425 = ((($pCtx) + (($36*684)|0)|0) + 33764|0);
     $426 = HEAP32[$425>>2]|0;
     $427 = (($426>>>0) / ($423>>>0))&-1;
     $428 = (($427) + 1)|0;
     $429 = (+($428>>>0));
     $430 = (+Math_log((+$429)));
     $431 = (+Math_ceil((+$430)));
     $432 = (~~(($431)));
     $433 = HEAP32[$120>>2]|0;
     $434 = (32 - ($432))|0;
     $435 = $433 >>> $434;
     $436 = HEAP32[$124>>2]|0;
     $437 = HEAP32[$pBs>>2]|0;
     $438 = $437;
     $439 = HEAP32[$128>>2]|0;
     $440 = $433 << $432;
     HEAP32[$120>>2] = $440;
     $441 = HEAP32[$131>>2]|0;
     $442 = (($441) + ($432))|0;
     HEAP32[$131>>2] = $442;
     $443 = ($442|0)>(0);
     do {
      if ($443) {
       $444 = $439;
       $445 = $436;
       $446 = (($444) - ($438))|0;
       $447 = (($445) + 1)|0;
       $448 = (($447) - ($438))|0;
       $449 = ($446|0)>($448|0);
       if ($449) {
        $$0 = 11;
        STACKTOP = sp;return ($$0|0);
       } else {
        $450 = HEAP8[$439>>0]|0;
        $451 = $450&255;
        $452 = $451 << 8;
        $453 = (($439) + 1|0);
        $454 = HEAP8[$453>>0]|0;
        $455 = $454&255;
        $456 = $452 | $455;
        $457 = $456 << $442;
        $458 = $457 | $440;
        HEAP32[$120>>2] = $458;
        $459 = (($442) + -16)|0;
        HEAP32[$131>>2] = $459;
        $460 = (($439) + 2|0);
        HEAP32[$128>>2] = $460;
        break;
       }
      }
     } while(0);
     HEAP32[$uiCode>>2] = $435;
     $461 = (($7) + 84|0);
     HEAP32[$461>>2] = $435;
    }
   } while(0);
   if (!($kbExtensionFlag)) {
    $463 = (($7) + 14|0);
    $464 = HEAP8[$463>>0]|0;
    $465 = ($464<<24>>24)==(0);
    do {
     if ($465) {
      $466 = (($7) + 16|0);
      $467 = HEAP8[$466>>0]|0;
      $468 = ($467<<24>>24)==(0);
      if (!($468)) {
       label = 157;
       break;
      }
      $470 = (($7) + 3852|0);
      HEAP8[$470>>0] = 1;
     } else {
      label = 157;
     }
    } while(0);
    if ((label|0) == 157) {
     $469 = (($7) + 3852|0);
     HEAP8[$469>>0] = 0;
    }
    $471 = (($7) + 3865|0);
    HEAP8[$471>>0] = -1;
    $472 = (($7) + 2772|0);
    HEAP32[$472>>2] = 0;
    $473 = (($7) + 2776|0);
    HEAP32[$473>>2] = 0;
    $474 = (($7) + 2780|0);
    HEAP32[$474>>2] = 0;
    $475 = (($7) + 3854|0);
    HEAP8[$475>>0] = 0;
    $476 = (($7) + 3863|0);
    HEAP8[$476>>0] = 0;
    $477 = (($7) + 3864|0);
    HEAP8[$477>>0] = 1;
    $478 = HEAP32[$160>>2]|0;
    $479 = $478 << 4;
    $480 = (($7) + 2784|0);
    HEAP32[$480>>2] = $479;
    $481 = HEAP32[$163>>2]|0;
    $482 = $481 << 4;
    $483 = (($7) + 2788|0);
    HEAP32[$483>>2] = $482;
    $484 = (($7) + 3855|0);
    $485 = (($7) + 3866|0);
    HEAP8[$485>>0] = 0;
    $486 = (($7) + 3867|0);
    $487 = $484;
    $488 = $487;
    HEAP8[$488>>0]=0&255;HEAP8[$488+1>>0]=(0>>8)&255;HEAP8[$488+2>>0]=(0>>16)&255;HEAP8[$488+3>>0]=0>>24;
    $489 = (($487) + 4)|0;
    $490 = $489;
    HEAP8[$490>>0]=0&255;HEAP8[$490+1>>0]=(0>>8)&255;HEAP8[$490+2>>0]=(0>>16)&255;HEAP8[$490+3>>0]=0>>24;
    HEAP8[$486>>0] = 15;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$106>>2] = $pSubsetSps$0;
   $491 = (($7) + 14|0);
   $492 = HEAP8[$491>>0]|0;
   $493 = ($492<<24>>24)==(0);
   if ($493) {
    $494 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
    $495 = ($494|0)==(0);
    if (!($495)) {
     $$0 = $494;
     STACKTOP = sp;return ($$0|0);
    }
    $496 = HEAP32[$uiCode>>2]|0;
    $497 = $496&255;
    $498 = (($7) + 3865|0);
    HEAP8[$498>>0] = $497;
    $499 = (($pSubsetSps$0) + 853|0);
    $500 = HEAP8[$499>>0]|0;
    $501 = ($500<<24>>24)==(0);
    do {
     if (!($501)) {
      $502 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCode)|0);
      $503 = ($502|0)==(0);
      if (!($503)) {
       $$0 = $502;
       STACKTOP = sp;return ($$0|0);
      }
      $504 = HEAP32[$uiCode>>2]|0;
      $505 = (($7) + 2772|0);
      HEAP32[$505>>2] = $504;
      $506 = ($504>>>0)>(6);
      if ($506) {
       HEAP32[$vararg_buffer85>>2] = $504;
       __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6472,$vararg_buffer85);
       $$0 = 1034;
       STACKTOP = sp;return ($$0|0);
      }
      $507 = ($504|0)==(1);
      if ($507) {
       break;
      }
      $508 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i50)|0);
      $509 = ($508|0)==(0);
      if (!($509)) {
       $$0 = $508;
       STACKTOP = sp;return ($$0|0);
      }
      $510 = HEAP32[$uiCodeNum$i50>>2]|0;
      $511 = $510 & 1;
      $512 = ($511|0)==(0);
      if ($512) {
       $515 = $510 >>> 1;
       $516 = (0 - ($515))|0;
       $$ph104 = $516;
      } else {
       $513 = (($510) + 1)|0;
       $514 = $513 >>> 1;
       $$ph104 = $514;
      }
      $517 = $$ph104 << 1;
      $518 = (($7) + 2776|0);
      HEAP32[$518>>2] = $517;
      $$off124 = (($517) + 12)|0;
      $519 = ($$off124>>>0)>(24);
      if ($519) {
       HEAP32[$vararg_buffer85>>2] = $517;
       __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,6536,$vararg_buffer85);
       $$0 = 328702;
       STACKTOP = sp;return ($$0|0);
      }
      $520 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$uiCodeNum$i)|0);
      $521 = ($520|0)==(0);
      if (!($521)) {
       $$0 = $520;
       STACKTOP = sp;return ($$0|0);
      }
      $522 = HEAP32[$uiCodeNum$i>>2]|0;
      $523 = $522 & 1;
      $524 = ($523|0)==(0);
      if ($524) {
       $527 = $522 >>> 1;
       $528 = (0 - ($527))|0;
       $$ph106 = $528;
      } else {
       $525 = (($522) + 1)|0;
       $526 = $525 >>> 1;
       $$ph106 = $526;
      }
      $529 = $$ph106 << 1;
      $530 = (($7) + 2780|0);
      HEAP32[$530>>2] = $529;
      $$off125 = (($529) + 12)|0;
      $531 = ($$off125>>>0)>(24);
      if (!($531)) {
       break;
      }
      HEAP32[$vararg_buffer85>>2] = $529;
      __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,6592,$vararg_buffer85);
      $$0 = 328703;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $532 = (($pSubsetSps$0) + 851|0);
    $533 = HEAP8[$532>>0]|0;
    $534 = (($7) + 3863|0);
    HEAP8[$534>>0] = $533;
    $535 = (($pSubsetSps$0) + 852|0);
    $536 = HEAP8[$535>>0]|0;
    $537 = (($7) + 3864|0);
    HEAP8[$537>>0] = $536;
    $538 = HEAP32[$120>>2]|0;
    $539 = $538 >>> 31;
    $540 = HEAP32[$124>>2]|0;
    $541 = HEAP32[$pBs>>2]|0;
    $542 = $541;
    $543 = HEAP32[$128>>2]|0;
    $544 = $538 << 1;
    HEAP32[$120>>2] = $544;
    $545 = HEAP32[$131>>2]|0;
    $546 = (($545) + 1)|0;
    HEAP32[$131>>2] = $546;
    $547 = ($545|0)>(-1);
    do {
     if ($547) {
      $548 = $543;
      $549 = $540;
      $550 = (($548) - ($542))|0;
      $551 = (($549) + 1)|0;
      $552 = (($551) - ($542))|0;
      $553 = ($550|0)>($552|0);
      if ($553) {
       $$0 = 11;
       STACKTOP = sp;return ($$0|0);
      } else {
       $554 = HEAP8[$543>>0]|0;
       $555 = $554&255;
       $556 = $555 << 8;
       $557 = (($543) + 1|0);
       $558 = HEAP8[$557>>0]|0;
       $559 = $558&255;
       $560 = $556 | $559;
       $561 = $560 << $546;
       $562 = $561 | $544;
       HEAP32[$120>>2] = $562;
       $563 = (($545) + -15)|0;
       HEAP32[$131>>2] = $563;
       $564 = (($543) + 2|0);
       HEAP32[$128>>2] = $564;
       break;
      }
     }
    } while(0);
    HEAP32[$uiCode>>2] = $539;
    $565 = (($7) + 3854|0);
    $566 = $539&255;
    HEAP8[$565>>0] = $566;
    $567 = (($pSubsetSps$0) + 832|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = (($pSubsetSps$0) + 836|0);
    $570 = HEAP32[$569>>2]|0;
    $571 = HEAP8[$155>>0]|0;
    $572 = $571&255;
    $573 = (2 - ($572))|0;
    $574 = (($pSubsetSps$0) + 840|0);
    $575 = HEAP32[$574>>2]|0;
    $576 = (($pSubsetSps$0) + 844|0);
    $577 = HEAP32[$576>>2]|0;
    $578 = HEAP32[$160>>2]|0;
    $579 = $578 << 4;
    $sum = (($575) + ($568))|0;
    $580 = (($579) - ($sum))|0;
    $581 = (($7) + 2784|0);
    HEAP32[$581>>2] = $580;
    $582 = HEAP32[$163>>2]|0;
    $583 = $582 << 4;
    $584 = (($577) + ($570))|0;
    $585 = Math_imul($584, $573)|0;
    $586 = HEAP8[$153>>0]|0;
    $587 = $586&255;
    $588 = (($587) + 1)|0;
    $589 = (($585|0) / ($588|0))&-1;
    $590 = (($583) - ($589))|0;
    $591 = (($7) + 2788|0);
    HEAP32[$591>>2] = $590;
    $$pre = HEAP8[$491>>0]|0;
    $600 = $$pre;
   } else {
    $592 = (($7) + 3865|0);
    HEAP8[$592>>0] = -1;
    $600 = $492;
   }
   $593 = (($7) + 3855|0);
   $594 = (($7) + 3856|0);
   $595 = (($7) + 3857|0);
   $596 = (($7) + 3858|0);
   $597 = (($7) + 3859|0);
   $598 = (($7) + 3860|0);
   $599 = (($7) + 3861|0);
   $601 = ($600<<24>>24)==(0);
   ;HEAP8[$593+0>>0]=0|0;HEAP8[$593+1>>0]=0|0;HEAP8[$593+2>>0]=0|0;HEAP8[$593+3>>0]=0|0;HEAP8[$593+4>>0]=0|0;HEAP8[$593+5>>0]=0|0;HEAP8[$593+6>>0]=0|0;
   do {
    if ($601) {
     $603 = (($pSubsetSps$0) + 854|0);
     $604 = HEAP8[$603>>0]|0;
     $605 = (($7) + 3862|0);
     HEAP8[$605>>0] = $604;
     $606 = HEAP32[$120>>2]|0;
     $607 = $606 >>> 31;
     $608 = HEAP32[$124>>2]|0;
     $609 = HEAP32[$pBs>>2]|0;
     $610 = $609;
     $611 = HEAP32[$128>>2]|0;
     $612 = $606 << 1;
     HEAP32[$120>>2] = $612;
     $613 = HEAP32[$131>>2]|0;
     $614 = (($613) + 1)|0;
     HEAP32[$131>>2] = $614;
     $615 = ($613|0)>(-1);
     do {
      if ($615) {
       $616 = $611;
       $617 = $608;
       $618 = (($616) - ($610))|0;
       $619 = (($617) + 1)|0;
       $620 = (($619) - ($610))|0;
       $621 = ($618|0)>($620|0);
       if ($621) {
        $$0 = 11;
        STACKTOP = sp;return ($$0|0);
       } else {
        $622 = HEAP8[$611>>0]|0;
        $623 = $622&255;
        $624 = $623 << 8;
        $625 = (($611) + 1|0);
        $626 = HEAP8[$625>>0]|0;
        $627 = $626&255;
        $628 = $624 | $627;
        $629 = $628 << $614;
        $630 = $629 | $612;
        HEAP32[$120>>2] = $630;
        $631 = (($613) + -15)|0;
        HEAP32[$131>>2] = $631;
        $632 = (($611) + 2|0);
        HEAP32[$128>>2] = $632;
        break;
       }
      }
     } while(0);
     HEAP32[$uiCode>>2] = $607;
     $633 = ($607|0)==(0);
     $634 = $607&255;
     HEAP8[$593>>0] = $634;
     if (!($633)) {
      __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6656,$vararg_buffer85);
      $$0 = 328748;
      STACKTOP = sp;return ($$0|0);
     }
     $635 = HEAP32[$120>>2]|0;
     $636 = $635 >>> 31;
     $637 = HEAP32[$124>>2]|0;
     $638 = HEAP32[$pBs>>2]|0;
     $639 = $638;
     $640 = HEAP32[$128>>2]|0;
     $641 = $635 << 1;
     HEAP32[$120>>2] = $641;
     $642 = HEAP32[$131>>2]|0;
     $643 = (($642) + 1)|0;
     HEAP32[$131>>2] = $643;
     $644 = ($642|0)>(-1);
     do {
      if ($644) {
       $645 = $640;
       $646 = $637;
       $647 = (($645) - ($639))|0;
       $648 = (($646) + 1)|0;
       $649 = (($648) - ($639))|0;
       $650 = ($647|0)>($649|0);
       if ($650) {
        $$0 = 11;
        STACKTOP = sp;return ($$0|0);
       } else {
        $651 = HEAP8[$640>>0]|0;
        $652 = $651&255;
        $653 = $652 << 8;
        $654 = (($640) + 1|0);
        $655 = HEAP8[$654>>0]|0;
        $656 = $655&255;
        $657 = $653 | $656;
        $658 = $657 << $643;
        $659 = $658 | $641;
        HEAP32[$120>>2] = $659;
        $660 = (($642) + -15)|0;
        HEAP32[$131>>2] = $660;
        $661 = (($640) + 2|0);
        HEAP32[$128>>2] = $661;
        break;
       }
      }
     } while(0);
     HEAP32[$uiCode>>2] = $636;
     $662 = ($636|0)==(0);
     $663 = $636&255;
     HEAP8[$594>>0] = $663;
     if ($662) {
      $664 = HEAP32[$120>>2]|0;
      $665 = $664 >>> 31;
      $666 = HEAP32[$124>>2]|0;
      $667 = HEAP32[$pBs>>2]|0;
      $668 = $667;
      $669 = HEAP32[$128>>2]|0;
      $670 = $664 << 1;
      HEAP32[$120>>2] = $670;
      $671 = HEAP32[$131>>2]|0;
      $672 = (($671) + 1)|0;
      HEAP32[$131>>2] = $672;
      $673 = ($671|0)>(-1);
      do {
       if ($673) {
        $674 = $669;
        $675 = $666;
        $676 = (($674) - ($668))|0;
        $677 = (($675) + 1)|0;
        $678 = (($677) - ($668))|0;
        $679 = ($676|0)>($678|0);
        if ($679) {
         $$0 = 11;
         STACKTOP = sp;return ($$0|0);
        } else {
         $680 = HEAP8[$669>>0]|0;
         $681 = $680&255;
         $682 = $681 << 8;
         $683 = (($669) + 1|0);
         $684 = HEAP8[$683>>0]|0;
         $685 = $684&255;
         $686 = $682 | $685;
         $687 = $686 << $672;
         $688 = $687 | $670;
         HEAP32[$120>>2] = $688;
         $689 = (($671) + -15)|0;
         HEAP32[$131>>2] = $689;
         $690 = (($669) + 2|0);
         HEAP32[$128>>2] = $690;
         break;
        }
       }
      } while(0);
      HEAP32[$uiCode>>2] = $665;
      $691 = $665&255;
      HEAP8[$595>>0] = $691;
      $692 = $691;
     } else {
      $$pr113 = HEAP8[$595>>0]|0;
      $692 = $$pr113;
     }
     $693 = ($692<<24>>24)==(0);
     do {
      if ($693) {
       $694 = HEAP32[$120>>2]|0;
       $695 = $694 >>> 31;
       $696 = HEAP32[$124>>2]|0;
       $697 = HEAP32[$pBs>>2]|0;
       $698 = $697;
       $699 = HEAP32[$128>>2]|0;
       $700 = $694 << 1;
       HEAP32[$120>>2] = $700;
       $701 = HEAP32[$131>>2]|0;
       $702 = (($701) + 1)|0;
       HEAP32[$131>>2] = $702;
       $703 = ($701|0)>(-1);
       do {
        if ($703) {
         $704 = $699;
         $705 = $696;
         $706 = (($704) - ($698))|0;
         $707 = (($705) + 1)|0;
         $708 = (($707) - ($698))|0;
         $709 = ($706|0)>($708|0);
         if ($709) {
          $$0 = 11;
          STACKTOP = sp;return ($$0|0);
         } else {
          $710 = HEAP8[$699>>0]|0;
          $711 = $710&255;
          $712 = $711 << 8;
          $713 = (($699) + 1|0);
          $714 = HEAP8[$713>>0]|0;
          $715 = $714&255;
          $716 = $712 | $715;
          $717 = $716 << $702;
          $718 = $717 | $700;
          HEAP32[$120>>2] = $718;
          $719 = (($701) + -15)|0;
          HEAP32[$131>>2] = $719;
          $720 = (($699) + 2|0);
          HEAP32[$128>>2] = $720;
          break;
         }
        }
       } while(0);
       HEAP32[$uiCode>>2] = $695;
       $721 = ($695|0)==(0);
       $722 = $695&255;
       HEAP8[$596>>0] = $722;
       if (!($721)) {
        break;
       }
       $723 = HEAP32[$120>>2]|0;
       $724 = $723 >>> 31;
       $725 = HEAP32[$124>>2]|0;
       $726 = HEAP32[$pBs>>2]|0;
       $727 = $726;
       $728 = HEAP32[$128>>2]|0;
       $729 = $723 << 1;
       HEAP32[$120>>2] = $729;
       $730 = HEAP32[$131>>2]|0;
       $731 = (($730) + 1)|0;
       HEAP32[$131>>2] = $731;
       $732 = ($730|0)>(-1);
       do {
        if ($732) {
         $733 = $728;
         $734 = $725;
         $735 = (($733) - ($727))|0;
         $736 = (($734) + 1)|0;
         $737 = (($736) - ($727))|0;
         $738 = ($735|0)>($737|0);
         if ($738) {
          $$0 = 11;
          STACKTOP = sp;return ($$0|0);
         } else {
          $739 = HEAP8[$728>>0]|0;
          $740 = $739&255;
          $741 = $740 << 8;
          $742 = (($728) + 1|0);
          $743 = HEAP8[$742>>0]|0;
          $744 = $743&255;
          $745 = $741 | $744;
          $746 = $745 << $731;
          $747 = $746 | $729;
          HEAP32[$120>>2] = $747;
          $748 = (($730) + -15)|0;
          HEAP32[$131>>2] = $748;
          $749 = (($728) + 2|0);
          HEAP32[$128>>2] = $749;
          break;
         }
        }
       } while(0);
       HEAP32[$uiCode>>2] = $724;
       $750 = $724&255;
       HEAP8[$597>>0] = $750;
      }
     } while(0);
     $751 = HEAP32[$120>>2]|0;
     $752 = $751 >>> 31;
     $753 = HEAP32[$124>>2]|0;
     $754 = HEAP32[$pBs>>2]|0;
     $755 = $754;
     $756 = HEAP32[$128>>2]|0;
     $757 = $751 << 1;
     HEAP32[$120>>2] = $757;
     $758 = HEAP32[$131>>2]|0;
     $759 = (($758) + 1)|0;
     HEAP32[$131>>2] = $759;
     $760 = ($758|0)>(-1);
     do {
      if ($760) {
       $761 = $756;
       $762 = $753;
       $763 = (($761) - ($755))|0;
       $764 = (($762) + 1)|0;
       $765 = (($764) - ($755))|0;
       $766 = ($763|0)>($765|0);
       if ($766) {
        $$0 = 11;
        STACKTOP = sp;return ($$0|0);
       } else {
        $767 = HEAP8[$756>>0]|0;
        $768 = $767&255;
        $769 = $768 << 8;
        $770 = (($756) + 1|0);
        $771 = HEAP8[$770>>0]|0;
        $772 = $771&255;
        $773 = $769 | $772;
        $774 = $773 << $759;
        $775 = $774 | $757;
        HEAP32[$120>>2] = $775;
        $776 = (($758) + -15)|0;
        HEAP32[$131>>2] = $776;
        $777 = (($756) + 2|0);
        HEAP32[$128>>2] = $777;
        break;
       }
      }
     } while(0);
     HEAP32[$uiCode>>2] = $752;
     $778 = ($752|0)==(0);
     $779 = $752&255;
     HEAP8[$598>>0] = $779;
     if ($778) {
      $780 = HEAP32[$120>>2]|0;
      $781 = $780 >>> 31;
      $782 = HEAP32[$124>>2]|0;
      $783 = HEAP32[$pBs>>2]|0;
      $784 = $783;
      $785 = HEAP32[$128>>2]|0;
      $786 = $780 << 1;
      HEAP32[$120>>2] = $786;
      $787 = HEAP32[$131>>2]|0;
      $788 = (($787) + 1)|0;
      HEAP32[$131>>2] = $788;
      $789 = ($787|0)>(-1);
      do {
       if ($789) {
        $790 = $785;
        $791 = $782;
        $792 = (($790) - ($784))|0;
        $793 = (($791) + 1)|0;
        $794 = (($793) - ($784))|0;
        $795 = ($792|0)>($794|0);
        if ($795) {
         $$0 = 11;
         STACKTOP = sp;return ($$0|0);
        } else {
         $796 = HEAP8[$785>>0]|0;
         $797 = $796&255;
         $798 = $797 << 8;
         $799 = (($785) + 1|0);
         $800 = HEAP8[$799>>0]|0;
         $801 = $800&255;
         $802 = $798 | $801;
         $803 = $802 << $788;
         $804 = $803 | $786;
         HEAP32[$120>>2] = $804;
         $805 = (($787) + -15)|0;
         HEAP32[$131>>2] = $805;
         $806 = (($785) + 2|0);
         HEAP32[$128>>2] = $806;
         break;
        }
       }
      } while(0);
      HEAP32[$uiCode>>2] = $781;
      $807 = $781&255;
      HEAP8[$599>>0] = $807;
     }
     $808 = (($pSubsetSps$0) + 855|0);
     $809 = HEAP8[$808>>0]|0;
     $810 = ($809<<24>>24)==(0);
     if ($810) {
      break;
     }
     $811 = HEAP32[$120>>2]|0;
     $812 = $811 >>> 31;
     $813 = HEAP32[$124>>2]|0;
     $814 = HEAP32[$pBs>>2]|0;
     $815 = $814;
     $816 = HEAP32[$128>>2]|0;
     $817 = $811 << 1;
     HEAP32[$120>>2] = $817;
     $818 = HEAP32[$131>>2]|0;
     $819 = (($818) + 1)|0;
     HEAP32[$131>>2] = $819;
     $820 = ($818|0)>(-1);
     do {
      if ($820) {
       $821 = $816;
       $822 = $813;
       $823 = (($821) - ($815))|0;
       $824 = (($822) + 1)|0;
       $825 = (($824) - ($815))|0;
       $826 = ($823|0)>($825|0);
       if ($826) {
        $$0 = 11;
        STACKTOP = sp;return ($$0|0);
       } else {
        $827 = HEAP8[$816>>0]|0;
        $828 = $827&255;
        $829 = $828 << 8;
        $830 = (($816) + 1|0);
        $831 = HEAP8[$830>>0]|0;
        $832 = $831&255;
        $833 = $829 | $832;
        $834 = $833 << $819;
        $835 = $834 | $817;
        HEAP32[$120>>2] = $835;
        $836 = (($818) + -15)|0;
        HEAP32[$131>>2] = $836;
        $837 = (($816) + 2|0);
        HEAP32[$128>>2] = $837;
        break;
       }
      }
     } while(0);
     HEAP32[$uiCode>>2] = $812;
     $838 = (($7) + 3862|0);
     $839 = $812&255;
     HEAP8[$838>>0] = $839;
    } else {
     $602 = (($7) + 3862|0);
     HEAP8[$602>>0] = 0;
    }
   } while(0);
   $840 = (($pSubsetSps$0) + 856|0);
   $841 = HEAP8[$840>>0]|0;
   $842 = ($841<<24>>24)==(0);
   if (!($842)) {
    $905 = (($7) + 3866|0);
    HEAP8[$905>>0] = 0;
    $906 = (($7) + 3867|0);
    HEAP8[$906>>0] = 15;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $843 = HEAP32[$120>>2]|0;
   $844 = $843 >>> 28;
   $845 = HEAP32[$124>>2]|0;
   $846 = HEAP32[$pBs>>2]|0;
   $847 = $846;
   $848 = HEAP32[$128>>2]|0;
   $849 = $843 << 4;
   HEAP32[$120>>2] = $849;
   $850 = HEAP32[$131>>2]|0;
   $851 = (($850) + 4)|0;
   HEAP32[$131>>2] = $851;
   $852 = ($851|0)>(0);
   do {
    if ($852) {
     $853 = $848;
     $854 = $845;
     $855 = (($853) - ($847))|0;
     $856 = (($854) + 1)|0;
     $857 = (($856) - ($847))|0;
     $858 = ($855|0)>($857|0);
     if ($858) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $859 = HEAP8[$848>>0]|0;
      $860 = $859&255;
      $861 = $860 << 8;
      $862 = (($848) + 1|0);
      $863 = HEAP8[$862>>0]|0;
      $864 = $863&255;
      $865 = $861 | $864;
      $866 = $865 << $851;
      $867 = $866 | $849;
      HEAP32[$120>>2] = $867;
      $868 = (($850) + -12)|0;
      HEAP32[$131>>2] = $868;
      $869 = (($848) + 2|0);
      HEAP32[$128>>2] = $869;
      break;
     }
    }
   } while(0);
   HEAP32[$uiCode>>2] = $844;
   $870 = $844&255;
   $871 = (($7) + 3866|0);
   HEAP8[$871>>0] = $870;
   $872 = HEAP32[$120>>2]|0;
   $873 = $872 >>> 28;
   $874 = HEAP32[$124>>2]|0;
   $875 = HEAP32[$pBs>>2]|0;
   $876 = $875;
   $877 = HEAP32[$128>>2]|0;
   $878 = $872 << 4;
   HEAP32[$120>>2] = $878;
   $879 = HEAP32[$131>>2]|0;
   $880 = (($879) + 4)|0;
   HEAP32[$131>>2] = $880;
   $881 = ($880|0)>(0);
   do {
    if ($881) {
     $882 = $877;
     $883 = $874;
     $884 = (($882) - ($876))|0;
     $885 = (($883) + 1)|0;
     $886 = (($885) - ($876))|0;
     $887 = ($884|0)>($886|0);
     if ($887) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $888 = HEAP8[$877>>0]|0;
      $889 = $888&255;
      $890 = $889 << 8;
      $891 = (($877) + 1|0);
      $892 = HEAP8[$891>>0]|0;
      $893 = $892&255;
      $894 = $890 | $893;
      $895 = $894 << $880;
      $896 = $895 | $878;
      HEAP32[$120>>2] = $896;
      $897 = (($879) + -12)|0;
      HEAP32[$131>>2] = $897;
      $898 = (($877) + 2|0);
      HEAP32[$128>>2] = $898;
      break;
     }
    }
   } while(0);
   HEAP32[$uiCode>>2] = $873;
   $899 = $873&255;
   $900 = (($7) + 3867|0);
   HEAP8[$900>>0] = $899;
   $901 = HEAP8[$871>>0]|0;
   $902 = ($901<<24>>24)==(0);
   $903 = ($873|0)==(15);
   $or$cond24 = $902 & $903;
   if ($or$cond24) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $904 = $901&255;
   HEAP32[$vararg_buffer85>>2] = $904;
   $vararg_ptr88 = (($vararg_buffer85) + 4|0);
   HEAP32[$vararg_ptr88>>2] = $873;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6696,$vararg_buffer85);
   $$0 = 328745;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6016,$vararg_buffer85);
 $$0 = 328690;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec26PrefetchNalHeaderExtSyntaxEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitES3_($pCtx,$kppDst,$kpSrc) {
 $pCtx = $pCtx|0;
 $kppDst = $kppDst|0;
 $kpSrc = $kpSrc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $iIdx$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kppDst|0)==(0|0);
 $1 = ($kpSrc|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($kpSrc) + 24|0);
 $3 = (($kppDst) + 100|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($pCtx) + (($4*684)|0)|0) + 33648|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($kpSrc) + 15|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = (($kppDst) + 15|0);
 HEAP8[$9>>0] = $8;
 $10 = (($kpSrc) + 16|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (($kppDst) + 16|0);
 HEAP8[$12>>0] = $11;
 $13 = (($kpSrc) + 17|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = (($kppDst) + 17|0);
 HEAP8[$15>>0] = $14;
 $16 = (($kpSrc) + 13|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = (($kppDst) + 13|0);
 HEAP8[$18>>0] = $17;
 $19 = (($kpSrc) + 12|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = (($kppDst) + 12|0);
 HEAP8[$21>>0] = $20;
 $22 = (($kpSrc) + 14|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = (($kppDst) + 14|0);
 HEAP8[$24>>0] = $23;
 $25 = (($kpSrc) + 19|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = (($kppDst) + 19|0);
 HEAP8[$27>>0] = $26;
 $28 = (($kpSrc) + 20|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = (($kppDst) + 20|0);
 HEAP8[$30>>0] = $29;
 $31 = (($kpSrc) + 18|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = (($kppDst) + 18|0);
 HEAP8[$33>>0] = $32;
 $34 = (($kpSrc) + 22|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = (($kppDst) + 22|0);
 HEAP8[$36>>0] = $35;
 $37 = (($kpSrc) + 1084|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = (($kppDst) + 3853|0);
 HEAP8[$39>>0] = $38;
 $40 = (($kppDst) + 2792|0);
 _memcpy(($40|0),($2|0),1060)|0;
 $41 = (($kppDst) + 3848|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)==(0);
 if ($43) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = (($kppDst) + 28|0);
 $45 = ((($pCtx) + (($6*832)|0)|0) + 6208|0);
 $iIdx$0 = 0;
 while(1) {
  $46 = ((($kppDst) + ($iIdx$0<<4)|0) + 2792|0);
  $47 = HEAP32[$46>>2]|0;
  if ((($47|0) == 1)) {
   $48 = HEAP32[$44>>2]|0;
   $49 = ((($kppDst) + ($iIdx$0<<4)|0) + 2800|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) - ($50))|0;
   $52 = HEAP32[$45>>2]|0;
   $53 = 1 << $52;
   $54 = (($53) + -1)|0;
   $55 = $54 & $51;
   $56 = ((($kppDst) + ($iIdx$0<<4)|0) + 2796|0);
   HEAP32[$56>>2] = $55;
  } else if ((($47|0) == 0)) {
   $$0 = 1;
   label = 7;
   break;
  }
  $57 = (($iIdx$0) + 1)|0;
  $58 = ($57|0)<(66);
  if ($58) {
   $iIdx$0 = $57;
  } else {
   $$0 = 1;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec22InitialDqLayersContextEPNS_21TagWelsDecoderContextEii($pCtx,$kiMaxWidth,$kiMaxHeight) {
 $pCtx = $pCtx|0;
 $kiMaxWidth = $kiMaxWidth|0;
 $kiMaxHeight = $kiMaxHeight|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCtx|0)==(0|0);
 $1 = ($kiMaxWidth|0)<(1);
 $or$cond = $0 | $1;
 $2 = ($kiMaxHeight|0)<(1);
 $or$cond3 = $or$cond | $2;
 if ($or$cond3) {
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($kiMaxWidth) + 15)|0;
 $4 = $3 >> 4;
 $5 = (($pCtx) + 5456|0);
 HEAP32[$5>>2] = $4;
 $6 = (($kiMaxHeight) + 15)|0;
 $7 = $6 >> 4;
 $8 = (($pCtx) + 5460|0);
 HEAP32[$8>>2] = $7;
 $9 = (($pCtx) + 241952|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = (($pCtx) + 241940|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)<($kiMaxWidth|0);
  if (!($14)) {
   $15 = (($pCtx) + 241944|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)<($kiMaxHeight|0);
   if (!($17)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $18 = (($pCtx) + 562528|0);
 $19 = HEAP32[$18>>2]|0;
 __ZN7WelsDec24UninitialDqLayersContextEPNS_21TagWelsDecoderContextE($pCtx);
 $20 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,4116,6848)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($20|0),0,4116)|0;
 $22 = HEAP32[$5>>2]|0;
 $23 = HEAP32[$8>>2]|0;
 $24 = $22 << 1;
 $25 = Math_imul($24, $23)|0;
 $26 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$25,6864)|0);
 $27 = (($pCtx) + 5344|0);
 HEAP32[$27>>2] = $26;
 $28 = HEAP32[$5>>2]|0;
 $29 = HEAP32[$8>>2]|0;
 $30 = $28 << 6;
 $31 = Math_imul($30, $29)|0;
 $32 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$31,6888)|0);
 $33 = (($pCtx) + 5348|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$5>>2]|0;
 $35 = HEAP32[$8>>2]|0;
 $36 = $34 << 4;
 $37 = Math_imul($36, $35)|0;
 $38 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$37,6912)|0);
 $39 = (($pCtx) + 5356|0);
 HEAP32[$39>>2] = $38;
 $40 = HEAP32[$5>>2]|0;
 $41 = HEAP32[$8>>2]|0;
 $42 = Math_imul($41, $40)|0;
 $43 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$42,6936)|0);
 $44 = (($pCtx) + 5372|0);
 HEAP32[$44>>2] = $43;
 $45 = HEAP32[$5>>2]|0;
 $46 = HEAP32[$8>>2]|0;
 $47 = Math_imul($46, $45)|0;
 $48 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$47,6960)|0);
 $49 = (($pCtx) + 5364|0);
 HEAP32[$49>>2] = $48;
 $50 = HEAP32[$5>>2]|0;
 $51 = HEAP32[$8>>2]|0;
 $52 = Math_imul($51, $50)|0;
 $53 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$52,7008)|0);
 $54 = (($pCtx) + 5368|0);
 HEAP32[$54>>2] = $53;
 $55 = HEAP32[$5>>2]|0;
 $56 = HEAP32[$8>>2]|0;
 $57 = $55 << 1;
 $58 = Math_imul($57, $56)|0;
 $59 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$58,7048)|0);
 $60 = (($pCtx) + 5376|0);
 HEAP32[$60>>2] = $59;
 $61 = HEAP32[$5>>2]|0;
 $62 = HEAP32[$8>>2]|0;
 $63 = $61 << 6;
 $64 = Math_imul($63, $62)|0;
 $65 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$64,7072)|0);
 $66 = (($pCtx) + 5380|0);
 HEAP32[$66>>2] = $65;
 $67 = HEAP32[$5>>2]|0;
 $68 = HEAP32[$8>>2]|0;
 $69 = $67 << 1;
 $70 = Math_imul($69, $68)|0;
 $71 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$70,7096)|0);
 $72 = (($pCtx) + 5388|0);
 HEAP32[$72>>2] = $71;
 $73 = HEAP32[$5>>2]|0;
 $74 = HEAP32[$8>>2]|0;
 $75 = ($73*24)|0;
 $76 = Math_imul($75, $74)|0;
 $77 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$76,7120)|0);
 $78 = (($pCtx) + 5392|0);
 HEAP32[$78>>2] = $77;
 $79 = HEAP32[$5>>2]|0;
 $80 = HEAP32[$8>>2]|0;
 $81 = ($79*24)|0;
 $82 = Math_imul($81, $80)|0;
 $83 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$82,7144)|0);
 $84 = (($pCtx) + 5396|0);
 HEAP32[$84>>2] = $83;
 $85 = HEAP32[$5>>2]|0;
 $86 = HEAP32[$8>>2]|0;
 $87 = ($85*768)|0;
 $88 = Math_imul($87, $86)|0;
 $89 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$88,7168)|0);
 $90 = (($pCtx) + 5400|0);
 HEAP32[$90>>2] = $89;
 $91 = HEAP32[$5>>2]|0;
 $92 = HEAP32[$8>>2]|0;
 $93 = $91 << 3;
 $94 = Math_imul($93, $92)|0;
 $95 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$94,7200)|0);
 $96 = (($pCtx) + 5404|0);
 HEAP32[$96>>2] = $95;
 $97 = HEAP32[$5>>2]|0;
 $98 = HEAP32[$8>>2]|0;
 $99 = $97 << 4;
 $100 = Math_imul($99, $98)|0;
 $101 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$100,7232)|0);
 $102 = (($pCtx) + 5408|0);
 HEAP32[$102>>2] = $101;
 $103 = HEAP32[$5>>2]|0;
 $104 = HEAP32[$8>>2]|0;
 $105 = Math_imul($104, $103)|0;
 $106 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$105,7264)|0);
 $107 = (($pCtx) + 5412|0);
 HEAP32[$107>>2] = $106;
 $108 = HEAP32[$5>>2]|0;
 $109 = HEAP32[$8>>2]|0;
 $110 = Math_imul($109, $108)|0;
 $111 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$110,7296)|0);
 $112 = (($pCtx) + 5416|0);
 HEAP32[$112>>2] = $111;
 $113 = HEAP32[$5>>2]|0;
 $114 = HEAP32[$8>>2]|0;
 $115 = Math_imul($114, $113)|0;
 $116 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$115,7328)|0);
 $117 = (($pCtx) + 5420|0);
 HEAP32[$117>>2] = $116;
 $118 = HEAP32[$5>>2]|0;
 $119 = HEAP32[$8>>2]|0;
 $120 = $118 << 2;
 $121 = Math_imul($120, $119)|0;
 $122 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$121,7352)|0);
 $123 = (($pCtx) + 5432|0);
 HEAP32[$123>>2] = $122;
 $124 = HEAP32[$5>>2]|0;
 $125 = HEAP32[$8>>2]|0;
 $126 = $124 << 2;
 $127 = Math_imul($126, $125)|0;
 $128 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$127,7376)|0);
 $129 = (($pCtx) + 5436|0);
 HEAP32[$129>>2] = $128;
 $130 = HEAP32[$5>>2]|0;
 $131 = HEAP32[$8>>2]|0;
 $132 = Math_imul($131, $130)|0;
 $133 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$132,7400)|0);
 $134 = (($pCtx) + 5440|0);
 HEAP32[$134>>2] = $133;
 $135 = HEAP32[$5>>2]|0;
 $136 = HEAP32[$8>>2]|0;
 $137 = Math_imul($136, $135)|0;
 $138 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$137,7432)|0);
 $139 = (($pCtx) + 5444|0);
 HEAP32[$139>>2] = $138;
 $140 = HEAP32[$5>>2]|0;
 $141 = HEAP32[$8>>2]|0;
 $142 = Math_imul($141, $140)|0;
 $143 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$142,7472)|0);
 $144 = (($pCtx) + 5448|0);
 HEAP32[$144>>2] = $143;
 $145 = HEAP32[$5>>2]|0;
 $146 = HEAP32[$8>>2]|0;
 $147 = Math_imul($146, $145)|0;
 $148 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($19,$147,7512)|0);
 $149 = (($pCtx) + 5452|0);
 HEAP32[$149>>2] = $148;
 $150 = HEAP32[$27>>2]|0;
 $151 = ($150|0)==(0|0);
 if ($151) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $152 = HEAP32[$33>>2]|0;
 $153 = ($152|0)==(0|0);
 if ($153) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $154 = HEAP32[$39>>2]|0;
 $155 = ($154|0)==(0|0);
 if ($155) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $156 = HEAP32[$44>>2]|0;
 $157 = ($156|0)==(0|0);
 if ($157) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $158 = HEAP32[$60>>2]|0;
 $159 = ($158|0)==(0|0);
 if ($159) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $160 = HEAP32[$66>>2]|0;
 $161 = ($160|0)==(0|0);
 if ($161) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $162 = HEAP32[$72>>2]|0;
 $163 = ($162|0)==(0|0);
 if ($163) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $164 = HEAP32[$78>>2]|0;
 $165 = ($164|0)==(0|0);
 if ($165) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $166 = HEAP32[$84>>2]|0;
 $167 = ($166|0)==(0|0);
 if ($167) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $168 = HEAP32[$90>>2]|0;
 $169 = ($168|0)==(0|0);
 if ($169) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $170 = HEAP32[$96>>2]|0;
 $171 = ($170|0)==(0|0);
 if ($171) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $172 = HEAP32[$102>>2]|0;
 $173 = ($172|0)==(0|0);
 if ($173) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $174 = HEAP32[$112>>2]|0;
 $175 = ($174|0)==(0|0);
 if ($175) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $176 = HEAP32[$117>>2]|0;
 $177 = ($176|0)==(0|0);
 if ($177) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $178 = HEAP32[$123>>2]|0;
 $179 = ($178|0)==(0|0);
 if ($179) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $180 = HEAP32[$129>>2]|0;
 $181 = ($180|0)==(0|0);
 if ($181) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $182 = HEAP32[$134>>2]|0;
 $183 = ($182|0)==(0|0);
 if ($183) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $184 = HEAP32[$139>>2]|0;
 $185 = ($184|0)==(0|0);
 $186 = ($148|0)==(0|0);
 $or$cond4 = $185 | $186;
 if ($or$cond4) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $187 = HEAP32[$144>>2]|0;
 $188 = ($187|0)==(0|0);
 if ($188) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $189 = HEAP32[$5>>2]|0;
 $190 = HEAP32[$8>>2]|0;
 $191 = $189 << 2;
 $192 = Math_imul($191, $190)|0;
 _memset(($180|0),-1,($192|0))|0;
 $193 = (($pCtx) + 241936|0);
 HEAP32[$193>>2] = $20;
 HEAP8[$9>>0] = 1;
 $194 = (($pCtx) + 241940|0);
 HEAP32[$194>>2] = $kiMaxWidth;
 $195 = (($pCtx) + 241944|0);
 HEAP32[$195>>2] = $kiMaxHeight;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec24UninitialDqLayersContextEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 562528|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 241936|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $74 = (($pCtx) + 241940|0);
  HEAP32[$74>>2] = 0;
  $75 = (($pCtx) + 241944|0);
  HEAP32[$75>>2] = 0;
  $76 = (($pCtx) + 241952|0);
  HEAP8[$76>>0] = 0;
  STACKTOP = sp;return;
 }
 $5 = (($pCtx) + 5344|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$6,6864);
  HEAP32[$5>>2] = 0;
 }
 $8 = (($pCtx) + 5348|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$9,6888);
  HEAP32[$8>>2] = 0;
 }
 $11 = (($pCtx) + 5356|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$12,6912);
  HEAP32[$11>>2] = 0;
 }
 $14 = (($pCtx) + 5364|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$15,6960);
  HEAP32[$14>>2] = 0;
 }
 $17 = (($pCtx) + 5368|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$18,7008);
  HEAP32[$17>>2] = 0;
 }
 $20 = (($pCtx) + 5372|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$21,6936);
  HEAP32[$20>>2] = 0;
 }
 $23 = (($pCtx) + 5376|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$24,7048);
  HEAP32[$23>>2] = 0;
 }
 $26 = (($pCtx) + 5380|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$27,7072);
  HEAP32[$26>>2] = 0;
 }
 $29 = (($pCtx) + 5388|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$30,7096);
  HEAP32[$29>>2] = 0;
 }
 $32 = (($pCtx) + 5392|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$33,7120);
  HEAP32[$32>>2] = 0;
 }
 $35 = (($pCtx) + 5396|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$36,7144);
  HEAP32[$35>>2] = 0;
 }
 $38 = (($pCtx) + 5400|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$39,7168);
  HEAP32[$38>>2] = 0;
 }
 $41 = (($pCtx) + 5404|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$42,7200);
  HEAP32[$41>>2] = 0;
 }
 $44 = (($pCtx) + 5408|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if (!($46)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$45,7232);
  HEAP32[$44>>2] = 0;
 }
 $47 = (($pCtx) + 5412|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$48,7264);
  HEAP32[$47>>2] = 0;
 }
 $50 = (($pCtx) + 5416|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 if (!($52)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$51,7296);
  HEAP32[$50>>2] = 0;
 }
 $53 = (($pCtx) + 5420|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0|0);
 if (!($55)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$54,7328);
  HEAP32[$53>>2] = 0;
 }
 $56 = (($pCtx) + 5432|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 if (!($58)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$57,7352);
  HEAP32[$56>>2] = 0;
 }
 $59 = (($pCtx) + 5436|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0|0);
 if (!($61)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$60,7376);
  HEAP32[$59>>2] = 0;
 }
 $62 = (($pCtx) + 5440|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(0|0);
 if (!($64)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$63,7400);
  HEAP32[$62>>2] = 0;
 }
 $65 = (($pCtx) + 5444|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(0|0);
 if (!($67)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$66,7432);
  HEAP32[$65>>2] = 0;
 }
 $68 = (($pCtx) + 5448|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)==(0|0);
 if (!($70)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$69,7472);
  HEAP32[$68>>2] = 0;
 }
 $71 = (($pCtx) + 5452|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(0|0);
 if (!($73)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$72,7544);
  HEAP32[$71>>2] = 0;
 }
 __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$3,7576);
 HEAP32[$2>>2] = 0;
 $74 = (($pCtx) + 241940|0);
 HEAP32[$74>>2] = 0;
 $75 = (($pCtx) + 241944|0);
 HEAP32[$75>>2] = 0;
 $76 = (($pCtx) + 241952|0);
 HEAP8[$76>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($pAu) {
 $pAu = $pAu|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pAu) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($1) + -1)|0;
 HEAP32[$0>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN7WelsDec32ForceResetParaSetStatusAndAUListEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241954|0);
 HEAP8[$0>>0] = 0;
 $1 = (($pCtx) + 241955|0);
 HEAP8[$1>>0] = 0;
 $2 = (($pCtx) + 241956|0);
 HEAP8[$2>>0] = 0;
 $3 = (($pCtx) + 241888|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$3>>2]|0;
 $7 = (($6) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$3>>2]|0;
 $9 = (($8) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$3>>2]|0;
 $11 = (($10) + 20|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$3>>2]|0;
 $13 = (($12) + 24|0);
 HEAP8[$13>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec26CheckIntegrityNalUnitsListEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert238 = 0, $$pre = 0, $$pre239 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bMultiSliceFind$0$off0$ph$i = 0, $bMultiSliceFind$0$off0$ph$i10 = 0, $bMultiSliceFind$0$off0$ph$i38 = 0, $bMultiSliceFind$0$off0$ph$i66 = 0, $i$0$i = 0, $i$0$i23 = 0;
 var $i$0$i51 = 0, $i$0$i79 = 0, $i$0$in$i = 0, $i$0$in$i22 = 0, $i$0$in$i50 = 0, $i$0$in$i78 = 0, $iCurIdx$0$i = 0, $iCurIdx$0$i13 = 0, $iCurIdx$0$i41 = 0, $iCurIdx$0$i69 = 0, $iCurIdx$0$in$i = 0, $iCurIdx$0$in$i12 = 0, $iCurIdx$0$in$i40 = 0, $iCurIdx$0$in$i68 = 0, $iCurIdx$0$in$ph$i = 0, $iCurIdx$0$in$ph$i36 = 0, $iCurIdx$0$in$ph$i64 = 0, $iCurIdx$0$in$ph$i8 = 0, $iCurNalUnitIdx$0$i = 0, $iCurNalUnitIdx$0$i32 = 0;
 var $iCurNalUnitIdx$0$i60 = 0, $iCurNalUnitIdx$0$i88 = 0, $iCurNalUnitIdx$0$in$i = 0, $iCurNalUnitIdx$0$in$i31 = 0, $iCurNalUnitIdx$0$in$i59 = 0, $iCurNalUnitIdx$0$in$i87 = 0, $iCurNalUnitIdx$0$in$ph$i = 0, $iCurNalUnitIdx$0$in$ph$i28 = 0, $iCurNalUnitIdx$0$in$ph$i56 = 0, $iCurNalUnitIdx$0$in$ph$i84 = 0, $iFinalIdxNoInterLayerPred$0$ph$i = 0, $iFinalIdxNoInterLayerPred$0$ph$i37 = 0, $iFinalIdxNoInterLayerPred$0$ph$i65 = 0, $iFinalIdxNoInterLayerPred$0$ph$i9 = 0, $iIdxDependId$0158 = 0, $or$cond$i = 0, $or$cond$i14 = 0, $or$cond$i33 = 0, $or$cond$i42 = 0, $or$cond$i6 = 0;
 var $or$cond$i61 = 0, $or$cond$i70 = 0, $or$cond$i89 = 0, $or$cond1$i = 0, $or$cond1$i15 = 0, $or$cond1$i43 = 0, $or$cond1$i71 = 0, $or$cond15$i = 0, $or$cond15$i19 = 0, $or$cond15$i47 = 0, $or$cond15$i75 = 0, $or$cond2$i = 0, $or$cond2$i16 = 0, $or$cond2$i44 = 0, $or$cond2$i72 = 0, $or$cond2$not$i = 0, $or$cond2$not$i17 = 0, $or$cond2$not$i45 = 0, $or$cond2$not$i73 = 0, $or$cond3$i = 0;
 var $or$cond3$i18 = 0, $or$cond3$i46 = 0, $or$cond3$i74 = 0, $storemerge$iFinalIdxNoInterLayerPred$0$ph$i9 = 0, $storemerge1$iFinalIdxNoInterLayerPred$0$ph$i65 = 0, $storemerge1132 = 0, $storemerge153 = 0, $storemerge2$iFinalIdxNoInterLayerPred$0$ph$i37 = 0, $storemerge2128 = 0, $storemerge3$iFinalIdxNoInterLayerPred$0$ph$i = 0, $storemerge3178 = 0, $uiLastNuDependencyId$0$ph$i = 0, $uiLastNuDependencyId$0$ph$i27 = 0, $uiLastNuDependencyId$0$ph$i55 = 0, $uiLastNuDependencyId$0$ph$i83 = 0, $uiLastNuLayerDqId$0$i = 0, $uiLastNuLayerDqId$0$i30 = 0, $uiLastNuLayerDqId$0$i58 = 0, $uiLastNuLayerDqId$0$i86 = 0, $uiLastNuLayerDqId$0$ph$i = 0;
 var $uiLastNuLayerDqId$0$ph$i26 = 0, $uiLastNuLayerDqId$0$ph$i54 = 0, $uiLastNuLayerDqId$0$ph$i82 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241888|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 24|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pCtx) + 242334|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  $14 = (($1) + 16|0);
  HEAP32[$14>>2] = 0;
  $15 = ($3|0)>(-1);
  if (!($15)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = HEAP32[$1>>2]|0;
  $storemerge3178 = $3;
  while(1) {
   $19 = (($16) + ($storemerge3178<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 14|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)==(0);
   if (!($23)) {
    break;
   }
   $17 = (($storemerge3178) + -1)|0;
   $18 = ($storemerge3178|0)>(0);
   if ($18) {
    $storemerge3178 = $17;
   } else {
    $$0 = 0;
    label = 82;
    break;
   }
  }
  if ((label|0) == 82) {
   STACKTOP = sp;return ($$0|0);
  }
  $24 = ($storemerge3178|0)<(0);
  if ($24) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = (($20) + 15|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = (($20) + 16|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = (($20) + 17|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = (($20) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($20) + 32|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($20) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $bMultiSliceFind$0$off0$ph$i = 1;$iCurIdx$0$in$ph$i = $storemerge3178;$iFinalIdxNoInterLayerPred$0$ph$i = 0;
  L18: while(1) {
   $iCurIdx$0$in$i = $iCurIdx$0$in$ph$i;
   while(1) {
    $iCurIdx$0$i = (($iCurIdx$0$in$i) + -1)|0;
    $37 = ($iCurIdx$0$in$i|0)>(0);
    if (!($37)) {
     break L18;
    }
    $38 = (($16) + ($iCurIdx$0$i<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + 14|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = ($41<<24>>24)==(0);
    if ($42) {
     $iCurIdx$0$in$i = $iCurIdx$0$i;
    } else {
     break;
    }
   }
   $43 = (($39) + 15|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==($26<<24>>24);
   if (!($45)) {
    break;
   }
   $46 = (($39) + 24|0);
   $47 = (($39) + 32|0);
   $48 = (($39) + 28|0);
   $49 = (($39) + 17|0);
   $50 = HEAP32[$46>>2]|0;
   $51 = HEAP32[$47>>2]|0;
   $52 = HEAP32[$48>>2]|0;
   $53 = HEAP8[$49>>0]|0;
   $54 = (($39) + 16|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = ($55<<24>>24)==($28<<24>>24);
   $57 = ($53<<24>>24)==($30<<24>>24);
   $or$cond$i = $56 & $57;
   $58 = ($52|0)==($32|0);
   $or$cond1$i = $or$cond$i & $58;
   $59 = ($51|0)==($34|0);
   $or$cond2$i = $or$cond1$i & $59;
   $or$cond2$not$i = $or$cond2$i ^ 1;
   $60 = ($50|0)==($36|0);
   $or$cond3$i = $60 | $or$cond2$not$i;
   if ($or$cond3$i) {
    break;
   } else {
    $bMultiSliceFind$0$off0$ph$i = 0;$iCurIdx$0$in$ph$i = $iCurIdx$0$i;$iFinalIdxNoInterLayerPred$0$ph$i = $iCurIdx$0$i;
   }
  }
  $61 = ($storemerge3178|0)==($iFinalIdxNoInterLayerPred$0$ph$i|0);
  $or$cond15$i = $bMultiSliceFind$0$off0$ph$i | $61;
  $storemerge3$iFinalIdxNoInterLayerPred$0$ph$i = $or$cond15$i ? $storemerge3178 : $iFinalIdxNoInterLayerPred$0$ph$i;
  HEAP32[$14>>2] = $storemerge3$iFinalIdxNoInterLayerPred$0$ph$i;
  $62 = HEAP32[$0>>2]|0;
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($storemerge3$iFinalIdxNoInterLayerPred$0$ph$i<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 15|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = (($65) + 22|0);
  $69 = HEAP8[$68>>0]|0;
  $iCurNalUnitIdx$0$in$ph$i84 = $storemerge3$iFinalIdxNoInterLayerPred$0$ph$i;$uiLastNuDependencyId$0$ph$i83 = $67;$uiLastNuLayerDqId$0$ph$i82 = $69;
  L26: while(1) {
   $iCurNalUnitIdx$0$in$i87 = $iCurNalUnitIdx$0$in$ph$i84;$uiLastNuLayerDqId$0$i86 = $uiLastNuLayerDqId$0$ph$i82;
   while(1) {
    $iCurNalUnitIdx$0$i88 = (($iCurNalUnitIdx$0$in$i87) + 1)|0;
    $70 = ($iCurNalUnitIdx$0$in$i87|0)<($3|0);
    if (!($70)) {
     break L26;
    }
    $71 = (($63) + ($iCurNalUnitIdx$0$i88<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + 15|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = (($72) + 22|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ($74<<24>>24)==($uiLastNuDependencyId$0$ph$i83<<24>>24);
    if ($77) {
     $iCurNalUnitIdx$0$in$i87 = $iCurNalUnitIdx$0$i88;$uiLastNuLayerDqId$0$i86 = $76;
    } else {
     break;
    }
   }
   $78 = (($72) + 3865|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = (($72) + 16|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = ($81<<24>>24)==(0);
   $83 = ($79<<24>>24)==($uiLastNuLayerDqId$0$i86<<24>>24);
   $or$cond$i89 = $82 & $83;
   if ($or$cond$i89) {
    $iCurNalUnitIdx$0$in$ph$i84 = $iCurNalUnitIdx$0$i88;$uiLastNuDependencyId$0$ph$i83 = $74;$uiLastNuLayerDqId$0$ph$i82 = $76;
   } else {
    break;
   }
  }
  $84 = (($62) + 20|0);
  HEAP32[$84>>2] = $iCurNalUnitIdx$0$in$i87;
  $85 = (($63) + ($iCurNalUnitIdx$0$in$i87<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + 22|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = (($pCtx) + 241948|0);
  HEAP8[$89>>0] = $88;
  $90 = HEAP32[$2>>2]|0;
  $91 = HEAP32[$1>>2]|0;
  $92 = (($91) + ($storemerge3$iFinalIdxNoInterLayerPred$0$ph$i<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + 32|0);
  $95 = HEAP32[$94>>2]|0;
  $i$0$in$i78 = $storemerge3$iFinalIdxNoInterLayerPred$0$ph$i;
  while(1) {
   $i$0$i79 = (($i$0$in$i78) + 1)|0;
   $96 = ($i$0$i79|0)<($90|0);
   if (!($96)) {
    break;
   }
   $97 = (($91) + ($i$0$i79<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + 32|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($95|0);
   if ($101) {
    $i$0$in$i78 = $i$0$i79;
   } else {
    $$0 = 0;
    label = 82;
    break;
   }
  }
  if ((label|0) == 82) {
   STACKTOP = sp;return ($$0|0);
  }
  $102 = (($91) + ($90<<2)|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + 15|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = (($pCtx) + 317136|0);
  HEAP32[$107>>2] = $106;
  $108 = HEAP32[$2>>2]|0;
  $109 = HEAP32[$1>>2]|0;
  $110 = (($109) + ($108<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + 1156|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $113 << 4;
  $115 = (($pCtx) + 317140|0);
  HEAP32[$115>>2] = $114;
  $116 = HEAP32[$2>>2]|0;
  $117 = HEAP32[$1>>2]|0;
  $118 = (($117) + ($116<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + 1160|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $121 << 4;
  $123 = (($pCtx) + 317144|0);
  HEAP32[$123>>2] = $122;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($3|0)>(-1);
 if (!($10)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($pCtx) + 317136|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 $iIdxDependId$0158 = $3;
 while(1) {
  $127 = (($13) + ($iIdxDependId$0158<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + 15|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130&255;
  $132 = ($12|0)==($131|0);
  if ($132) {
   break;
  }
  $124 = (($iIdxDependId$0158) + -1)|0;
  $125 = ($iIdxDependId$0158|0)>(0);
  if ($125) {
   $iIdxDependId$0158 = $124;
  } else {
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  if (!($10)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $126 = HEAP32[$1>>2]|0;
  $storemerge153 = $3;
  while(1) {
   $305 = (($126) + ($storemerge153<<2)|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = (($306) + 14|0);
   $308 = HEAP8[$307>>0]|0;
   $309 = ($308<<24>>24)==(0);
   if (!($309)) {
    break;
   }
   $303 = (($storemerge153) + -1)|0;
   $304 = ($storemerge153|0)>(0);
   if ($304) {
    $storemerge153 = $303;
   } else {
    $$0 = 0;
    label = 82;
    break;
   }
  }
  if ((label|0) == 82) {
   STACKTOP = sp;return ($$0|0);
  }
  $310 = ($storemerge153|0)<(0);
  if ($310) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $311 = (($306) + 15|0);
  $312 = HEAP8[$311>>0]|0;
  $313 = (($306) + 16|0);
  $314 = HEAP8[$313>>0]|0;
  $315 = (($306) + 17|0);
  $316 = HEAP8[$315>>0]|0;
  $317 = (($306) + 28|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = (($306) + 32|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = (($306) + 24|0);
  $322 = HEAP32[$321>>2]|0;
  $bMultiSliceFind$0$off0$ph$i10 = 1;$iCurIdx$0$in$ph$i8 = $storemerge153;$iFinalIdxNoInterLayerPred$0$ph$i9 = 0;
  L61: while(1) {
   $iCurIdx$0$in$i12 = $iCurIdx$0$in$ph$i8;
   while(1) {
    $iCurIdx$0$i13 = (($iCurIdx$0$in$i12) + -1)|0;
    $323 = ($iCurIdx$0$in$i12|0)>(0);
    if (!($323)) {
     break L61;
    }
    $324 = (($126) + ($iCurIdx$0$i13<<2)|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = (($325) + 14|0);
    $327 = HEAP8[$326>>0]|0;
    $328 = ($327<<24>>24)==(0);
    if ($328) {
     $iCurIdx$0$in$i12 = $iCurIdx$0$i13;
    } else {
     break;
    }
   }
   $329 = (($325) + 15|0);
   $330 = HEAP8[$329>>0]|0;
   $331 = ($330<<24>>24)==($312<<24>>24);
   if (!($331)) {
    break;
   }
   $332 = (($325) + 24|0);
   $333 = (($325) + 32|0);
   $334 = (($325) + 28|0);
   $335 = (($325) + 17|0);
   $336 = HEAP32[$332>>2]|0;
   $337 = HEAP32[$333>>2]|0;
   $338 = HEAP32[$334>>2]|0;
   $339 = HEAP8[$335>>0]|0;
   $340 = (($325) + 16|0);
   $341 = HEAP8[$340>>0]|0;
   $342 = ($341<<24>>24)==($314<<24>>24);
   $343 = ($339<<24>>24)==($316<<24>>24);
   $or$cond$i14 = $342 & $343;
   $344 = ($338|0)==($318|0);
   $or$cond1$i15 = $or$cond$i14 & $344;
   $345 = ($337|0)==($320|0);
   $or$cond2$i16 = $or$cond1$i15 & $345;
   $or$cond2$not$i17 = $or$cond2$i16 ^ 1;
   $346 = ($336|0)==($322|0);
   $or$cond3$i18 = $346 | $or$cond2$not$i17;
   if ($or$cond3$i18) {
    break;
   } else {
    $bMultiSliceFind$0$off0$ph$i10 = 0;$iCurIdx$0$in$ph$i8 = $iCurIdx$0$i13;$iFinalIdxNoInterLayerPred$0$ph$i9 = $iCurIdx$0$i13;
   }
  }
  $347 = ($storemerge153|0)==($iFinalIdxNoInterLayerPred$0$ph$i9|0);
  $or$cond15$i19 = $bMultiSliceFind$0$off0$ph$i10 | $347;
  $storemerge$iFinalIdxNoInterLayerPred$0$ph$i9 = $or$cond15$i19 ? $storemerge153 : $iFinalIdxNoInterLayerPred$0$ph$i9;
  $348 = (($1) + 16|0);
  HEAP32[$348>>2] = $storemerge$iFinalIdxNoInterLayerPred$0$ph$i9;
  $349 = HEAP32[$0>>2]|0;
  $350 = HEAP32[$349>>2]|0;
  $351 = (($350) + ($storemerge$iFinalIdxNoInterLayerPred$0$ph$i9<<2)|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = (($352) + 15|0);
  $354 = HEAP8[$353>>0]|0;
  $355 = (($352) + 22|0);
  $356 = HEAP8[$355>>0]|0;
  $iCurNalUnitIdx$0$in$ph$i = $storemerge$iFinalIdxNoInterLayerPred$0$ph$i9;$uiLastNuDependencyId$0$ph$i = $354;$uiLastNuLayerDqId$0$ph$i = $356;
  L69: while(1) {
   $iCurNalUnitIdx$0$in$i = $iCurNalUnitIdx$0$in$ph$i;$uiLastNuLayerDqId$0$i = $uiLastNuLayerDqId$0$ph$i;
   while(1) {
    $iCurNalUnitIdx$0$i = (($iCurNalUnitIdx$0$in$i) + 1)|0;
    $357 = ($iCurNalUnitIdx$0$in$i|0)<($3|0);
    if (!($357)) {
     break L69;
    }
    $358 = (($350) + ($iCurNalUnitIdx$0$i<<2)|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = (($359) + 15|0);
    $361 = HEAP8[$360>>0]|0;
    $362 = (($359) + 22|0);
    $363 = HEAP8[$362>>0]|0;
    $364 = ($361<<24>>24)==($uiLastNuDependencyId$0$ph$i<<24>>24);
    if ($364) {
     $iCurNalUnitIdx$0$in$i = $iCurNalUnitIdx$0$i;$uiLastNuLayerDqId$0$i = $363;
    } else {
     break;
    }
   }
   $365 = (($359) + 3865|0);
   $366 = HEAP8[$365>>0]|0;
   $367 = (($359) + 16|0);
   $368 = HEAP8[$367>>0]|0;
   $369 = ($368<<24>>24)==(0);
   $370 = ($366<<24>>24)==($uiLastNuLayerDqId$0$i<<24>>24);
   $or$cond$i6 = $369 & $370;
   if ($or$cond$i6) {
    $iCurNalUnitIdx$0$in$ph$i = $iCurNalUnitIdx$0$i;$uiLastNuDependencyId$0$ph$i = $361;$uiLastNuLayerDqId$0$ph$i = $363;
   } else {
    break;
   }
  }
  $371 = (($349) + 20|0);
  HEAP32[$371>>2] = $iCurNalUnitIdx$0$in$i;
  $372 = (($350) + ($iCurNalUnitIdx$0$in$i<<2)|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = (($373) + 22|0);
  $375 = HEAP8[$374>>0]|0;
  $376 = (($pCtx) + 241948|0);
  HEAP8[$376>>0] = $375;
  $377 = HEAP32[$2>>2]|0;
  $378 = HEAP32[$1>>2]|0;
  $379 = (($378) + ($storemerge$iFinalIdxNoInterLayerPred$0$ph$i9<<2)|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = (($380) + 32|0);
  $382 = HEAP32[$381>>2]|0;
  $i$0$in$i = $storemerge$iFinalIdxNoInterLayerPred$0$ph$i9;
  while(1) {
   $i$0$i = (($i$0$in$i) + 1)|0;
   $383 = ($i$0$i|0)<($377|0);
   if (!($383)) {
    $$0 = 1;
    label = 82;
    break;
   }
   $384 = (($378) + ($i$0$i<<2)|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = (($385) + 32|0);
   $387 = HEAP32[$386>>2]|0;
   $388 = ($387|0)==($382|0);
   if ($388) {
    $i$0$in$i = $i$0$i;
   } else {
    $$0 = 0;
    label = 82;
    break;
   }
  }
  if ((label|0) == 82) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $133 = ($iIdxDependId$0158|0)>(-1);
 L83: do {
  if ($133) {
   $138 = $128;$storemerge1132 = $iIdxDependId$0158;
   while(1) {
    $137 = (($138) + 14|0);
    $139 = HEAP8[$137>>0]|0;
    $140 = ($139<<24>>24)==(0);
    if (!($140)) {
     break;
    }
    $134 = (($storemerge1132) + -1)|0;
    $135 = ($storemerge1132|0)>(0);
    if (!($135)) {
     break L83;
    }
    $$phi$trans$insert = (($13) + ($134<<2)|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $138 = $$pre;$storemerge1132 = $134;
   }
   $141 = (($138) + 15|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = (($138) + 16|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = (($138) + 17|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = (($138) + 28|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (($138) + 32|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($138) + 24|0);
   $152 = HEAP32[$151>>2]|0;
   $bMultiSliceFind$0$off0$ph$i66 = 1;$iCurIdx$0$in$ph$i64 = $storemerge1132;$iFinalIdxNoInterLayerPred$0$ph$i65 = 0;
   L89: while(1) {
    $iCurIdx$0$in$i68 = $iCurIdx$0$in$ph$i64;
    while(1) {
     $iCurIdx$0$i69 = (($iCurIdx$0$in$i68) + -1)|0;
     $153 = ($iCurIdx$0$in$i68|0)>(0);
     if (!($153)) {
      break L89;
     }
     $154 = (($13) + ($iCurIdx$0$i69<<2)|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (($155) + 14|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = ($157<<24>>24)==(0);
     if ($158) {
      $iCurIdx$0$in$i68 = $iCurIdx$0$i69;
     } else {
      break;
     }
    }
    $159 = (($155) + 15|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = ($160<<24>>24)==($142<<24>>24);
    if (!($161)) {
     break;
    }
    $162 = (($155) + 24|0);
    $163 = (($155) + 32|0);
    $164 = (($155) + 28|0);
    $165 = (($155) + 17|0);
    $166 = HEAP32[$162>>2]|0;
    $167 = HEAP32[$163>>2]|0;
    $168 = HEAP32[$164>>2]|0;
    $169 = HEAP8[$165>>0]|0;
    $170 = (($155) + 16|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = ($171<<24>>24)==($144<<24>>24);
    $173 = ($169<<24>>24)==($146<<24>>24);
    $or$cond$i70 = $172 & $173;
    $174 = ($168|0)==($148|0);
    $or$cond1$i71 = $or$cond$i70 & $174;
    $175 = ($167|0)==($150|0);
    $or$cond2$i72 = $or$cond1$i71 & $175;
    $or$cond2$not$i73 = $or$cond2$i72 ^ 1;
    $176 = ($166|0)==($152|0);
    $or$cond3$i74 = $176 | $or$cond2$not$i73;
    if ($or$cond3$i74) {
     break;
    } else {
     $bMultiSliceFind$0$off0$ph$i66 = 0;$iCurIdx$0$in$ph$i64 = $iCurIdx$0$i69;$iFinalIdxNoInterLayerPred$0$ph$i65 = $iCurIdx$0$i69;
    }
   }
   $177 = ($storemerge1132|0)==($iFinalIdxNoInterLayerPred$0$ph$i65|0);
   $or$cond15$i75 = $bMultiSliceFind$0$off0$ph$i66 | $177;
   $storemerge1$iFinalIdxNoInterLayerPred$0$ph$i65 = $or$cond15$i75 ? $storemerge1132 : $iFinalIdxNoInterLayerPred$0$ph$i65;
   $178 = (($1) + 16|0);
   HEAP32[$178>>2] = $storemerge1$iFinalIdxNoInterLayerPred$0$ph$i65;
   $179 = HEAP32[$0>>2]|0;
   $180 = HEAP32[$179>>2]|0;
   $181 = (($180) + ($storemerge1$iFinalIdxNoInterLayerPred$0$ph$i65<<2)|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($182) + 15|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = (($182) + 22|0);
   $186 = HEAP8[$185>>0]|0;
   $iCurNalUnitIdx$0$in$ph$i56 = $storemerge1$iFinalIdxNoInterLayerPred$0$ph$i65;$uiLastNuDependencyId$0$ph$i55 = $184;$uiLastNuLayerDqId$0$ph$i54 = $186;
   L97: while(1) {
    $iCurNalUnitIdx$0$in$i59 = $iCurNalUnitIdx$0$in$ph$i56;$uiLastNuLayerDqId$0$i58 = $uiLastNuLayerDqId$0$ph$i54;
    while(1) {
     $iCurNalUnitIdx$0$i60 = (($iCurNalUnitIdx$0$in$i59) + 1)|0;
     $187 = ($iCurNalUnitIdx$0$in$i59|0)<($iIdxDependId$0158|0);
     if (!($187)) {
      break L97;
     }
     $188 = (($180) + ($iCurNalUnitIdx$0$i60<<2)|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = (($189) + 15|0);
     $191 = HEAP8[$190>>0]|0;
     $192 = (($189) + 22|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = ($191<<24>>24)==($uiLastNuDependencyId$0$ph$i55<<24>>24);
     if ($194) {
      $iCurNalUnitIdx$0$in$i59 = $iCurNalUnitIdx$0$i60;$uiLastNuLayerDqId$0$i58 = $193;
     } else {
      break;
     }
    }
    $195 = (($189) + 3865|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = (($189) + 16|0);
    $198 = HEAP8[$197>>0]|0;
    $199 = ($198<<24>>24)==(0);
    $200 = ($196<<24>>24)==($uiLastNuLayerDqId$0$i58<<24>>24);
    $or$cond$i61 = $199 & $200;
    if ($or$cond$i61) {
     $iCurNalUnitIdx$0$in$ph$i56 = $iCurNalUnitIdx$0$i60;$uiLastNuDependencyId$0$ph$i55 = $191;$uiLastNuLayerDqId$0$ph$i54 = $193;
    } else {
     break;
    }
   }
   $201 = (($179) + 20|0);
   HEAP32[$201>>2] = $iCurNalUnitIdx$0$in$i59;
   $202 = (($180) + ($iCurNalUnitIdx$0$in$i59<<2)|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($203) + 22|0);
   $205 = HEAP8[$204>>0]|0;
   $206 = (($pCtx) + 241948|0);
   HEAP8[$206>>0] = $205;
   $207 = HEAP32[$2>>2]|0;
   $208 = HEAP32[$1>>2]|0;
   $209 = (($208) + ($storemerge1$iFinalIdxNoInterLayerPred$0$ph$i65<<2)|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (($210) + 32|0);
   $212 = HEAP32[$211>>2]|0;
   $i$0$in$i50 = $storemerge1$iFinalIdxNoInterLayerPred$0$ph$i65;
   while(1) {
    $i$0$i51 = (($i$0$in$i50) + 1)|0;
    $213 = ($i$0$i51|0)<($207|0);
    if (!($213)) {
     $$0 = 1;
     label = 82;
     break;
    }
    $214 = (($208) + ($i$0$i51<<2)|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = (($215) + 32|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = ($217|0)==($212|0);
    if ($218) {
     $i$0$in$i50 = $i$0$i51;
    } else {
     $$0 = 0;
     label = 82;
     break;
    }
   }
   if ((label|0) == 82) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $136 = ($iIdxDependId$0158|0)>($3|0);
 if ($136) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $222 = $128;$storemerge2128 = $iIdxDependId$0158;
 }
 while(1) {
  $221 = (($222) + 14|0);
  $223 = HEAP8[$221>>0]|0;
  $224 = ($223<<24>>24)==(0);
  if (!($224)) {
   break;
  }
  $219 = (($storemerge2128) + 1)|0;
  $220 = ($storemerge2128|0)<($3|0);
  if (!($220)) {
   $$0 = 0;
   label = 82;
   break;
  }
  $$phi$trans$insert238 = (($13) + ($219<<2)|0);
  $$pre239 = HEAP32[$$phi$trans$insert238>>2]|0;
  $222 = $$pre239;$storemerge2128 = $219;
 }
 if ((label|0) == 82) {
  STACKTOP = sp;return ($$0|0);
 }
 $225 = (($222) + 15|0);
 $226 = HEAP8[$225>>0]|0;
 $227 = (($222) + 16|0);
 $228 = HEAP8[$227>>0]|0;
 $229 = (($222) + 17|0);
 $230 = HEAP8[$229>>0]|0;
 $231 = (($222) + 28|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = (($222) + 32|0);
 $234 = HEAP32[$233>>2]|0;
 $235 = (($222) + 24|0);
 $236 = HEAP32[$235>>2]|0;
 $bMultiSliceFind$0$off0$ph$i38 = 1;$iCurIdx$0$in$ph$i36 = $storemerge2128;$iFinalIdxNoInterLayerPred$0$ph$i37 = 0;
 L120: while(1) {
  $iCurIdx$0$in$i40 = $iCurIdx$0$in$ph$i36;
  while(1) {
   $iCurIdx$0$i41 = (($iCurIdx$0$in$i40) + -1)|0;
   $237 = ($iCurIdx$0$in$i40|0)>(0);
   if (!($237)) {
    break L120;
   }
   $238 = (($13) + ($iCurIdx$0$i41<<2)|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = (($239) + 14|0);
   $241 = HEAP8[$240>>0]|0;
   $242 = ($241<<24>>24)==(0);
   if ($242) {
    $iCurIdx$0$in$i40 = $iCurIdx$0$i41;
   } else {
    break;
   }
  }
  $243 = (($239) + 15|0);
  $244 = HEAP8[$243>>0]|0;
  $245 = ($244<<24>>24)==($226<<24>>24);
  if (!($245)) {
   break;
  }
  $246 = (($239) + 24|0);
  $247 = (($239) + 32|0);
  $248 = (($239) + 28|0);
  $249 = (($239) + 17|0);
  $250 = HEAP32[$246>>2]|0;
  $251 = HEAP32[$247>>2]|0;
  $252 = HEAP32[$248>>2]|0;
  $253 = HEAP8[$249>>0]|0;
  $254 = (($239) + 16|0);
  $255 = HEAP8[$254>>0]|0;
  $256 = ($255<<24>>24)==($228<<24>>24);
  $257 = ($253<<24>>24)==($230<<24>>24);
  $or$cond$i42 = $256 & $257;
  $258 = ($252|0)==($232|0);
  $or$cond1$i43 = $or$cond$i42 & $258;
  $259 = ($251|0)==($234|0);
  $or$cond2$i44 = $or$cond1$i43 & $259;
  $or$cond2$not$i45 = $or$cond2$i44 ^ 1;
  $260 = ($250|0)==($236|0);
  $or$cond3$i46 = $260 | $or$cond2$not$i45;
  if ($or$cond3$i46) {
   break;
  } else {
   $bMultiSliceFind$0$off0$ph$i38 = 0;$iCurIdx$0$in$ph$i36 = $iCurIdx$0$i41;$iFinalIdxNoInterLayerPred$0$ph$i37 = $iCurIdx$0$i41;
  }
 }
 $261 = ($storemerge2128|0)==($iFinalIdxNoInterLayerPred$0$ph$i37|0);
 $or$cond15$i47 = $bMultiSliceFind$0$off0$ph$i38 | $261;
 $storemerge2$iFinalIdxNoInterLayerPred$0$ph$i37 = $or$cond15$i47 ? $storemerge2128 : $iFinalIdxNoInterLayerPred$0$ph$i37;
 $262 = (($1) + 16|0);
 HEAP32[$262>>2] = $storemerge2$iFinalIdxNoInterLayerPred$0$ph$i37;
 $263 = HEAP32[$0>>2]|0;
 $264 = HEAP32[$263>>2]|0;
 $265 = (($264) + ($storemerge2$iFinalIdxNoInterLayerPred$0$ph$i37<<2)|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = (($266) + 15|0);
 $268 = HEAP8[$267>>0]|0;
 $269 = (($266) + 22|0);
 $270 = HEAP8[$269>>0]|0;
 $iCurNalUnitIdx$0$in$ph$i28 = $storemerge2$iFinalIdxNoInterLayerPred$0$ph$i37;$uiLastNuDependencyId$0$ph$i27 = $268;$uiLastNuLayerDqId$0$ph$i26 = $270;
 L128: while(1) {
  $iCurNalUnitIdx$0$in$i31 = $iCurNalUnitIdx$0$in$ph$i28;$uiLastNuLayerDqId$0$i30 = $uiLastNuLayerDqId$0$ph$i26;
  while(1) {
   $iCurNalUnitIdx$0$i32 = (($iCurNalUnitIdx$0$in$i31) + 1)|0;
   $271 = ($iCurNalUnitIdx$0$in$i31|0)<($3|0);
   if (!($271)) {
    break L128;
   }
   $272 = (($264) + ($iCurNalUnitIdx$0$i32<<2)|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = (($273) + 15|0);
   $275 = HEAP8[$274>>0]|0;
   $276 = (($273) + 22|0);
   $277 = HEAP8[$276>>0]|0;
   $278 = ($275<<24>>24)==($uiLastNuDependencyId$0$ph$i27<<24>>24);
   if ($278) {
    $iCurNalUnitIdx$0$in$i31 = $iCurNalUnitIdx$0$i32;$uiLastNuLayerDqId$0$i30 = $277;
   } else {
    break;
   }
  }
  $279 = (($273) + 3865|0);
  $280 = HEAP8[$279>>0]|0;
  $281 = (($273) + 16|0);
  $282 = HEAP8[$281>>0]|0;
  $283 = ($282<<24>>24)==(0);
  $284 = ($280<<24>>24)==($uiLastNuLayerDqId$0$i30<<24>>24);
  $or$cond$i33 = $283 & $284;
  if ($or$cond$i33) {
   $iCurNalUnitIdx$0$in$ph$i28 = $iCurNalUnitIdx$0$i32;$uiLastNuDependencyId$0$ph$i27 = $275;$uiLastNuLayerDqId$0$ph$i26 = $277;
  } else {
   break;
  }
 }
 $285 = (($263) + 20|0);
 HEAP32[$285>>2] = $iCurNalUnitIdx$0$in$i31;
 $286 = (($264) + ($iCurNalUnitIdx$0$in$i31<<2)|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = (($287) + 22|0);
 $289 = HEAP8[$288>>0]|0;
 $290 = (($pCtx) + 241948|0);
 HEAP8[$290>>0] = $289;
 $291 = HEAP32[$2>>2]|0;
 $292 = HEAP32[$1>>2]|0;
 $293 = (($292) + ($storemerge2$iFinalIdxNoInterLayerPred$0$ph$i37<<2)|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = (($294) + 32|0);
 $296 = HEAP32[$295>>2]|0;
 $i$0$in$i22 = $storemerge2$iFinalIdxNoInterLayerPred$0$ph$i37;
 while(1) {
  $i$0$i23 = (($i$0$in$i22) + 1)|0;
  $297 = ($i$0$i23|0)<($291|0);
  if (!($297)) {
   $$0 = 1;
   label = 82;
   break;
  }
  $298 = (($292) + ($i$0$i23<<2)|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = (($299) + 32|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = ($301|0)==($296|0);
  if ($302) {
   $i$0$in$i22 = $i$0$i23;
  } else {
   $$0 = 0;
   label = 82;
   break;
  }
 }
 if ((label|0) == 82) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec25WelsDecodeAccessUnitStartEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $9 = 0, $iCurIdx$0$i = 0, $iCurIdx$0$in$i = 0, $or$cond$i = 0, $uiActualIdx$0$lcssa$i = 0, $uiActualIdx$01$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pCtx) + 241888|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 22|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = (($pCtx) + 241948|0);
 HEAP8[$9>>0] = $8;
 $10 = (($3) + 1)|0;
 $11 = (($1) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = (($1) + 24|0);
 HEAP8[$12>>0] = 1;
 $13 = (($pCtx) + 242324|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $16 = (($pCtx) + 242334|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(0);
  if (!($18)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $19 = ($10|0)==(0);
   if (!($19)) {
    $20 = HEAP32[$1>>2]|0;
    $uiActualIdx$01$i = 0;
    while(1) {
     $23 = (($20) + ($uiActualIdx$01$i<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(5);
     if ($27) {
      $uiActualIdx$0$lcssa$i = $uiActualIdx$01$i;
      break;
     }
     $28 = (($24) + 12|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ($29<<24>>24)==(0);
     $21 = (($uiActualIdx$01$i) + 1)|0;
     if (!($30)) {
      $uiActualIdx$0$lcssa$i = $uiActualIdx$01$i;
      break;
     }
     $22 = ($21>>>0)<($10>>>0);
     if ($22) {
      $uiActualIdx$01$i = $21;
     } else {
      $uiActualIdx$0$lcssa$i = $21;
      break;
     }
    }
    $31 = ($uiActualIdx$0$lcssa$i|0)==($10|0);
    if (!($31)) {
     break;
    }
   }
   $32 = (($pCtx) + 512292|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 1)|0;
   HEAP32[$32>>2] = $34;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,6768,$vararg_buffer);
   $35 = (($pCtx) + 116|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 | 2;
   HEAP32[$35>>2] = $37;
   $38 = (($pCtx) + 242340|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = $36 | 18;
    HEAP32[$35>>2] = $41;
    $$0 = 16;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $42 = HEAP32[$0>>2]|0;
 $43 = (($42) + 16|0);
 HEAP32[$43>>2] = 0;
 $44 = (($pCtx) + 241949|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = ($45<<24>>24)==(0);
 if (!($46)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = (__ZN7WelsDec26CheckIntegrityNalUnitsListEPNS_21TagWelsDecoderContextE($pCtx)|0);
 if (!($47)) {
  $48 = (($pCtx) + 116|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $49 | 4;
  HEAP32[$48>>2] = $50;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 $$pr = HEAP8[$44>>0]|0;
 $51 = ($$pr<<24>>24)==(0);
 if (!($51)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $52 = HEAP32[$0>>2]|0;
 $53 = (($52) + 20|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$52>>2]|0;
 $58 = (($57) + ($56<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 15|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = (($59) + 16|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = (($59) + 17|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = (($pCtx) + 241953|0);
 HEAP8[$66>>0] = 1;
 $67 = ($54|0)==($56|0);
 if ($67) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $iCurIdx$0$in$i = $56;
 }
 while(1) {
  $iCurIdx$0$i = (($iCurIdx$0$in$i) + 1)|0;
  $68 = ($iCurIdx$0$in$i|0)<($54|0);
  if (!($68)) {
   $$0 = 0;
   label = 20;
   break;
  }
  $69 = HEAP32[$52>>2]|0;
  $70 = (($69) + ($iCurIdx$0$i<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 15|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = ($61<<24>>24)==($73<<24>>24);
  if (!($74)) {
   break;
  }
  $75 = (($71) + 17|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = (($71) + 16|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = ($63<<24>>24)==($78<<24>>24);
  $80 = ($65<<24>>24)==($76<<24>>24);
  $or$cond$i = $79 & $80;
  if ($or$cond$i) {
   $iCurIdx$0$in$i = $iCurIdx$0$i;
  } else {
   break;
  }
 }
 if ((label|0) == 20) {
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$66>>0] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec18DecodeFinishUpdateEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$pre = 0, $$pre$i = 0, $$pre1 = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 242334|0);
 HEAP8[$0>>0] = 0;
 $1 = (($pCtx) + 242336|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = $2;
 } else {
  $5 = (($pCtx) + 208752|0);
  $6 = (($pCtx) + 208756|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($pCtx) + (($7*684)|0)|0) + 33648|0);
  _memcpy(($8|0),($5|0),684)|0;
  $$pre$i = HEAP32[$1>>2]|0;
  $10 = $$pre$i;
 }
 $9 = $10 & 2;
 $11 = ($9|0)==(0);
 if ($11) {
  $16 = $10;
 } else {
  $12 = (($pCtx) + 32816|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($pCtx) + (($13*832)|0)|0) + 6192|0);
  _memcpy(($14|0),($12|0),832)|0;
  HEAP8[$0>>0] = 1;
  $$pre1$i = HEAP32[$1>>2]|0;
  $16 = $$pre1$i;
 }
 $15 = $16 & 4;
 $17 = ($15|0)==(0);
 if ($17) {
  $$pre = HEAP8[$0>>0]|0;
  $phitmp = ($$pre<<24>>24)==(0);
  HEAP32[$1>>2] = 0;
  if ($phitmp) {
   $21 = (($pCtx) + 242335|0);
   $22 = HEAP8[$21>>0]|0;
   HEAP8[$0>>0] = $22;
   HEAP8[$21>>0] = 0;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    STACKTOP = sp;return;
   }
  } else {
   label = 8;
  }
 } else {
  $18 = (($pCtx) + 237100|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($pCtx) + (($19*864)|0)|0) + 209452|0);
  _memcpy(($20|0),($18|0),864)|0;
  HEAP8[$0>>0] = 1;
  HEAP32[$1>>2] = 0;
  label = 8;
 }
 if ((label|0) == 8) {
  $$pre1 = (($pCtx) + 242335|0);
  HEAP8[$0>>0] = 1;
  HEAP8[$$pre1>>0] = 0;
 }
 $24 = (($pCtx) + 242320|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $scevgep$i = (($pCtx) + 241892|0);
 ;HEAP32[$scevgep$i+0>>2]=0|0;HEAP32[$scevgep$i+4>>2]=0|0;HEAP32[$scevgep$i+8>>2]=0|0;HEAP32[$scevgep$i+12>>2]=0|0;HEAP32[$scevgep$i+16>>2]=0|0;HEAP32[$scevgep$i+20>>2]=0|0;HEAP32[$scevgep$i+24>>2]=0|0;HEAP32[$scevgep$i+28>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec19ConstructAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstInfo) {
 $pCtx = $pCtx|0;
 $ppDst = $ppDst|0;
 $pDstInfo = $pDstInfo|0;
 var $$0 = 0, $$lcssa2$i = 0, $$neg1$i = 0, $$not$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bNewSeq$0$off0$lcssa$i = 0, $bNewSeq$0$off010$i = 0, $bNewSeq$1$off0$i = 0, $bNewSeq$2$off03$i = 0, $brmerge$i = 0, $exitcond$i$i = 0, $i1$09$i = 0, $i2$08$i = 0, $i3$06$i = 0, $iIdx$01$i$i = 0, $iMaxActiveLayer$0$i = 0, $iMaxCurrentLayer$0$i = 0, $phitmp$ = 0, $scevgep$i = 0, $storemerge$i = 0, $uiCurAuIdx$04$i = 0;
 var $uiSucAuIdx$0$i = 0, $uiSucAuIdx$03$i = 0, $uiSucAuIdx$05$i = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp;
 $0 = (($pCtx) + 241888|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 317168|0);
 HEAP8[$2>>0] = 0;
 $3 = (($pCtx) + 112|0);
 HEAP8[$3>>0] = 0;
 ;HEAP32[$vararg_buffer1+0>>2]=0|0;HEAP32[$vararg_buffer1+4>>2]=0|0;HEAP32[$vararg_buffer1+8>>2]=0|0;HEAP32[$vararg_buffer1+12>>2]=0|0;HEAP32[$vararg_buffer1+16>>2]=0|0;HEAP32[$vararg_buffer1+20>>2]=0|0;HEAP32[$vararg_buffer1+24>>2]=0|0;HEAP32[$vararg_buffer1+28>>2]=0|0;
 $4 = (($1) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  $bNewSeq$0$off0$lcssa$i = 0;
 } else {
  $9 = HEAP32[$1>>2]|0;
  $bNewSeq$0$off010$i = 0;$i1$09$i = $5;
  while(1) {
   $10 = (($9) + ($i1$09$i<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 15|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = (($11) + 88|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($vararg_buffer1) + ($14<<2)|0);
   HEAP32[$17>>2] = $16;
   $18 = (($11) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(5);
   if ($20) {
    label = 6;
   } else {
    $21 = (($11) + 12|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     $bNewSeq$1$off0$i = $bNewSeq$0$off010$i;
    } else {
     label = 6;
    }
   }
   if ((label|0) == 6) {
    label = 0;
    $bNewSeq$1$off0$i = 1;
   }
   $24 = (($i1$09$i) + 1)|0;
   $25 = ($24>>>0)>($7>>>0);
   if ($25) {
    $bNewSeq$0$off0$lcssa$i = $bNewSeq$1$off0$i;
    break;
   } else {
    $bNewSeq$0$off010$i = $bNewSeq$1$off0$i;$i1$09$i = $24;
   }
  }
 }
 $i2$08$i = 7;
 while(1) {
  $28 = ((($pCtx) + ($i2$08$i<<2)|0) + 241892|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   $iMaxActiveLayer$0$i = $i2$08$i;
   break;
  }
  $26 = (($i2$08$i) + -1)|0;
  $27 = ($i2$08$i|0)>(0);
  if ($27) {
   $i2$08$i = $26;
  } else {
   $iMaxActiveLayer$0$i = 0;
   break;
  }
 }
 $i3$06$i = 7;
 while(1) {
  $33 = (($vararg_buffer1) + ($i3$06$i<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0|0);
  if (!($35)) {
   $iMaxCurrentLayer$0$i = $i3$06$i;
   break;
  }
  $31 = (($i3$06$i) + -1)|0;
  $32 = ($i3$06$i|0)>(0);
  if ($32) {
   $i3$06$i = $31;
  } else {
   $iMaxCurrentLayer$0$i = 0;
   break;
  }
 }
 $36 = ($iMaxCurrentLayer$0$i|0)==($iMaxActiveLayer$0$i|0);
 if ($36) {
  $37 = (($vararg_buffer1) + ($iMaxActiveLayer$0$i<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($pCtx) + ($iMaxActiveLayer$0$i<<2)|0) + 241892|0);
  $40 = HEAP32[$39>>2]|0;
  $$not$i = ($38|0)!=($40|0);
  $brmerge$i = $$not$i | $bNewSeq$0$off0$lcssa$i;
  if ($brmerge$i) {
   label = 19;
  } else {
   $41 = (($pCtx) + 241892|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    $44 = HEAP32[$vararg_buffer1>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     HEAP32[$41>>2] = $44;
    }
   }
   $46 = (($pCtx) + 241896|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if ($48) {
    $50 = (($vararg_buffer1) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)==(0|0);
    if (!($52)) {
     HEAP32[$46>>2] = $51;
    }
   }
   $53 = (($pCtx) + 241900|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(0|0);
   if ($55) {
    $56 = (($vararg_buffer1) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==(0|0);
    if (!($58)) {
     HEAP32[$53>>2] = $57;
    }
   }
   $59 = (($pCtx) + 241904|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0|0);
   if ($61) {
    $62 = (($vararg_buffer1) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     HEAP32[$59>>2] = $63;
    }
   }
   $65 = (($pCtx) + 241908|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(0|0);
   if ($67) {
    $68 = (($vararg_buffer1) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     HEAP32[$65>>2] = $69;
    }
   }
   $71 = (($pCtx) + 241912|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==(0|0);
   if ($73) {
    $74 = (($vararg_buffer1) + 20|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if (!($76)) {
     HEAP32[$71>>2] = $75;
    }
   }
   $77 = (($pCtx) + 241916|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)==(0|0);
   if ($79) {
    $80 = (($vararg_buffer1) + 24|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)==(0|0);
    if (!($82)) {
     HEAP32[$77>>2] = $81;
    }
   }
   $83 = (($pCtx) + 241920|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(0|0);
   if ($85) {
    $86 = (($vararg_buffer1) + 28|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    if ($88) {
     $bNewSeq$2$off03$i = 0;
    } else {
     HEAP32[$83>>2] = $87;
     $bNewSeq$2$off03$i = 0;
    }
   } else {
    $bNewSeq$2$off03$i = 0;
   }
  }
 } else {
  label = 19;
 }
 if ((label|0) == 19) {
  $49 = (($pCtx) + 241892|0);
  ;HEAP32[$49+0>>2]=HEAP32[$vararg_buffer1+0>>2]|0;HEAP32[$49+4>>2]=HEAP32[$vararg_buffer1+4>>2]|0;HEAP32[$49+8>>2]=HEAP32[$vararg_buffer1+8>>2]|0;HEAP32[$49+12>>2]=HEAP32[$vararg_buffer1+12>>2]|0;HEAP32[$49+16>>2]=HEAP32[$vararg_buffer1+16>>2]|0;HEAP32[$49+20>>2]=HEAP32[$vararg_buffer1+20>>2]|0;HEAP32[$49+24>>2]=HEAP32[$vararg_buffer1+24>>2]|0;HEAP32[$49+28>>2]=HEAP32[$vararg_buffer1+28>>2]|0;
  $bNewSeq$2$off03$i = 1;
 }
 $89 = (($pCtx) + 242334|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = ($90<<24>>24)==(0);
 $phitmp$ = $91 ? $bNewSeq$2$off03$i : 1;
 HEAP8[$89>>0] = $phitmp$;
 $92 = (__ZN7WelsDec25WelsDecodeAccessUnitStartEPNS_21TagWelsDecoderContextE($pCtx)|0);
 _GetVclNalTemporalId($pCtx);
 $93 = ($92|0)==(0);
 if ($93) {
  $127 = HEAP32[$4>>2]|0;
  $128 = HEAP32[$1>>2]|0;
  $129 = (($128) + ($127<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + 88|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($pCtx) + 241924|0);
  HEAP32[$133>>2] = $132;
  $134 = HEAP32[$4>>2]|0;
  $135 = HEAP32[$1>>2]|0;
  $136 = (($135) + ($134<<2)|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + 92|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($pCtx) + 241928|0);
  HEAP32[$140>>2] = $139;
  $141 = HEAP8[$89>>0]|0;
  $142 = ($141<<24>>24)==(0);
  if (!($142)) {
   __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($pCtx);
   $143 = HEAP32[$133>>2]|0;
   $144 = (($143) + 4|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = (($143) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (_SyncPictureResolutionExt($pCtx,$145,$147)|0);
   $149 = ($148|0)==(0);
   if (!($149)) {
    HEAP32[$vararg_buffer1>>2] = $148;
    __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,7584,$vararg_buffer1);
    $$0 = $148;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $150 = (__ZN7WelsDec23DecodeCurrentAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstInfo)|0);
  $151 = HEAP32[$0>>2]|0;
  $152 = (($151) + 20|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = HEAP32[$151>>2]|0;
  $155 = (($154) + ($153<<2)|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (($pCtx) + 317180|0);
  ;HEAP32[$157+0>>2]=HEAP32[$156+0>>2]|0;HEAP32[$157+4>>2]=HEAP32[$156+4>>2]|0;HEAP32[$157+8>>2]=HEAP32[$156+8>>2]|0;HEAP32[$157+12>>2]=HEAP32[$156+12>>2]|0;HEAP32[$157+16>>2]=HEAP32[$156+16>>2]|0;HEAP32[$157+20>>2]=HEAP32[$156+20>>2]|0;
  $158 = (($pCtx) + 317204|0);
  $159 = (($156) + 24|0);
  _memcpy(($158|0),($159|0),2744)|0;
  $160 = (($151) + 16|0);
  HEAP32[$160>>2] = 0;
  HEAP32[$152>>2] = 0;
  $161 = (($151) + 24|0);
  HEAP8[$161>>0] = 0;
  $162 = (($151) + 8|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ($163|0)==(0);
  if (!($164)) {
   $165 = (($151) + 4|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) - ($163))|0;
   $168 = ($166|0)==($163|0);
   if (!($168)) {
    $iIdx$01$i$i = 0;
    while(1) {
     $169 = (($iIdx$01$i$i) + ($163))|0;
     $170 = HEAP32[$151>>2]|0;
     $171 = (($170) + ($169<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = (($170) + ($iIdx$01$i$i<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     HEAP32[$171>>2] = $174;
     $175 = HEAP32[$151>>2]|0;
     $176 = (($175) + ($iIdx$01$i$i<<2)|0);
     HEAP32[$176>>2] = $172;
     $177 = (($iIdx$01$i$i) + 1)|0;
     $exitcond$i$i = ($177|0)==($167|0);
     if ($exitcond$i$i) {
      break;
     } else {
      $iIdx$01$i$i = $177;
     }
    }
   }
   HEAP32[$165>>2] = $167;
   HEAP32[$162>>2] = $167;
  }
  $178 = ($150|0)==(0);
  if ($178) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$vararg_buffer1>>2] = $150;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,8,7640,$vararg_buffer1);
  $$0 = $150;
  STACKTOP = sp;return ($$0|0);
 }
 $94 = HEAP32[$0>>2]|0;
 $95 = (($94) + 20|0);
 $96 = HEAP32[$95>>2]|0;
 $uiSucAuIdx$03$i = (($96) + 1)|0;
 $97 = (($94) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($uiSucAuIdx$03$i>>>0)<($98>>>0);
 if ($99) {
  $uiCurAuIdx$04$i = 0;$uiSucAuIdx$05$i = $uiSucAuIdx$03$i;
  while(1) {
   $100 = HEAP32[$94>>2]|0;
   $101 = (($100) + ($uiSucAuIdx$05$i<<2)|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (($100) + ($uiCurAuIdx$04$i<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   HEAP32[$101>>2] = $104;
   $105 = HEAP32[$94>>2]|0;
   $106 = (($105) + ($uiCurAuIdx$04$i<<2)|0);
   HEAP32[$106>>2] = $102;
   $107 = (($uiCurAuIdx$04$i) + 1)|0;
   $uiSucAuIdx$0$i = (($uiSucAuIdx$05$i) + 1)|0;
   $108 = HEAP32[$97>>2]|0;
   $109 = ($uiSucAuIdx$0$i>>>0)<($108>>>0);
   if ($109) {
    $uiCurAuIdx$04$i = $107;$uiSucAuIdx$05$i = $uiSucAuIdx$0$i;
   } else {
    break;
   }
  }
  $$pre$i = HEAP32[$95>>2]|0;
  $$lcssa2$i = $108;$111 = $$pre$i;
 } else {
  $$lcssa2$i = $98;$111 = $96;
 }
 $110 = ($$lcssa2$i>>>0)>($111>>>0);
 if ($110) {
  $$neg1$i = $111 ^ -1;
  $112 = (($$lcssa2$i) + ($$neg1$i))|0;
  $storemerge$i = $112;
 } else {
  $storemerge$i = 0;
 }
 HEAP32[$97>>2] = $storemerge$i;
 $113 = (($94) + 8|0);
 HEAP32[$113>>2] = 0;
 $114 = (($94) + 16|0);
 HEAP32[$114>>2] = 0;
 HEAP32[$95>>2] = 0;
 $115 = (($94) + 24|0);
 HEAP8[$115>>0] = 0;
 $116 = (($pCtx) + 242344|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = ($117<<24>>24)==(0);
 if ($118) {
  HEAP32[$pDstInfo>>2] = 0;
 }
 $119 = HEAP8[$89>>0]|0;
 $120 = ($119<<24>>24)==(0);
 $121 = (($pCtx) + 242335|0);
 if ($120) {
  $122 = HEAP8[$121>>0]|0;
  HEAP8[$89>>0] = $122;
  HEAP8[$121>>0] = 0;
  $123 = ($122<<24>>24)==(0);
  if ($123) {
   $$0 = $92;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  HEAP8[$89>>0] = 1;
  HEAP8[$121>>0] = 0;
 }
 $124 = (($pCtx) + 242320|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)==(0);
 if (!($126)) {
  $$0 = $92;
  STACKTOP = sp;return ($$0|0);
 }
 $scevgep$i = (($pCtx) + 241892|0);
 ;HEAP32[$scevgep$i+0>>2]=0|0;HEAP32[$scevgep$i+4>>2]=0|0;HEAP32[$scevgep$i+8>>2]=0|0;HEAP32[$scevgep$i+12>>2]=0|0;HEAP32[$scevgep$i+16>>2]=0|0;HEAP32[$scevgep$i+20>>2]=0|0;HEAP32[$scevgep$i+24>>2]=0|0;HEAP32[$scevgep$i+28>>2]=0|0;
 $$0 = $92;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec23DecodeCurrentAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstInfo) {
 $pCtx = $pCtx|0;
 $ppDst = $ppDst|0;
 $pDstInfo = $pDstInfo|0;
 var $$2 = 0, $$not = 0, $$not27 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre79 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bAllRefComplete$0$off061 = 0, $bAllRefComplete$1$off0 = 0, $bAllRefComplete$2$off0 = 0;
 var $bAllRefComplete$3$off0 = 0, $bAllRefComplete$4$off0 = 0, $bAllRefComplete$5$off0 = 0, $bAllRefComplete$6$off0 = 0, $brmerge = 0, $iIdx$065 = 0, $iIdx$1 = 0, $iIdx$2 = 0, $iLastIdD$062 = 0, $iLastIdD$1 = 0, $iLastIdD$2 = 0, $iLastIdQ$063 = 0, $iLastIdQ$1 = 0, $iLastIdQ$2 = 0, $iRet$0$i = 0, $or$cond = 0, $or$cond$i = 0, $pLayerInfo$sroa$0 = 0, $pLayerInfo$sroa$9 = 0, $pNalCur$066 = 0;
 var $pNalCur$1 = 0, $pNalCur$3 = 0, $pSh$0 = 0, $pSh$1 = 0, $switch$i = 0, $uiNalRefIdc$064 = 0, $uiNalRefIdc$1 = 0, $uiNalRefIdc$2 = 0, $vararg_buffer11 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3904|0;
 $vararg_buffer11 = sp;
 $pLayerInfo$sroa$0 = sp + 16|0;
 $pLayerInfo$sroa$9 = sp + 3884|0;
 $0 = (($pCtx) + 241888|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCtx) + 241948|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($pCtx) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $13 = -1;
 } else {
  $11 = (($9) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12;
 }
 $14 = ($13&255)>($7&255);
 $15 = $14 ? $7 : $13;
 $16 = $15&255;
 $17 = $16 >>> 4;
 $18 = $17 & 7;
 $19 = (($pCtx) + 241952|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(0);
 if ($21) {
  $$phi$trans$insert = (($pCtx) + 241932|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $27 = $$pre;
 } else {
  $22 = (($pCtx) + 241936|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($pCtx) + 241932|0);
  HEAP32[$24>>2] = $23;
  $27 = $23;
 }
 $25 = (($pCtx) + 241932|0);
 $26 = ($pCtx|0)!=(0|0);
 $28 = ($27|0)!=(0|0);
 $or$cond$i = $26 & $28;
 if ($or$cond$i) {
  $29 = (($pCtx) + 5344|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($27) + 3908|0);
  HEAP32[$31>>2] = $30;
  $32 = (($pCtx) + 5436|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($27) + 3912|0);
  HEAP32[$34>>2] = $33;
  $35 = (($pCtx) + 5348|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($27) + 3916|0);
  HEAP32[$37>>2] = $36;
  $38 = (($pCtx) + 5356|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($27) + 3932|0);
  HEAP32[$40>>2] = $39;
  $41 = (($pCtx) + 5364|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($27) + 3940|0);
  HEAP32[$43>>2] = $42;
  $44 = (($pCtx) + 5368|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($27) + 3944|0);
  HEAP32[$46>>2] = $45;
  $47 = (($pCtx) + 5372|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($27) + 3948|0);
  HEAP32[$49>>2] = $48;
  $50 = (($pCtx) + 5376|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($27) + 3952|0);
  HEAP32[$52>>2] = $51;
  $53 = (($pCtx) + 5380|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($27) + 3924|0);
  HEAP32[$55>>2] = $54;
  $56 = (($pCtx) + 5388|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($27) + 3960|0);
  HEAP32[$58>>2] = $57;
  $59 = (($pCtx) + 5392|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($27) + 3964|0);
  HEAP32[$61>>2] = $60;
  $62 = (($pCtx) + 5396|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($27) + 3968|0);
  HEAP32[$64>>2] = $63;
  $65 = (($pCtx) + 5400|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($27) + 3988|0);
  HEAP32[$67>>2] = $66;
  $68 = (($pCtx) + 5404|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($27) + 3992|0);
  HEAP32[$70>>2] = $69;
  $71 = (($pCtx) + 5408|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($27) + 3996|0);
  HEAP32[$73>>2] = $72;
  $74 = (($pCtx) + 5412|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($27) + 4000|0);
  HEAP32[$76>>2] = $75;
  $77 = (($pCtx) + 5416|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($27) + 4004|0);
  HEAP32[$79>>2] = $78;
  $80 = (($pCtx) + 5420|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($27) + 3956|0);
  HEAP32[$82>>2] = $81;
  $83 = (($pCtx) + 5432|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($27) + 4008|0);
  HEAP32[$85>>2] = $84;
  $86 = (($pCtx) + 5444|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($27) + 3976|0);
  HEAP32[$88>>2] = $87;
  $89 = (($pCtx) + 5440|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($27) + 3972|0);
  HEAP32[$91>>2] = $90;
  $92 = (($pCtx) + 5448|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($27) + 3980|0);
  HEAP32[$94>>2] = $93;
  $95 = (($pCtx) + 5452|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($27) + 3984|0);
  HEAP32[$97>>2] = $96;
 }
 $98 = ($3|0)>($5|0);
 if ($98) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $99 = HEAP32[$1>>2]|0;
 $100 = (($99) + ($3<<2)|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($pCtx) + 5464|0);
 $103 = (($pCtx) + 209440|0);
 $104 = (($pCtx) + 242320|0);
 $105 = (($pCtx) + 242334|0);
 $106 = (($pCtx) + 512345|0);
 $107 = (($pCtx) + 5248|0);
 $108 = (($pLayerInfo$sroa$0) + 24|0);
 $109 = (($pCtx) + 5240|0);
 $110 = (($pCtx) + 5244|0);
 $111 = (($pCtx) + 562528|0);
 $112 = (($pCtx) + 100|0);
 $113 = (($pCtx) + 209436|0);
 $114 = (($pCtx) + 104|0);
 $115 = (($pCtx) + 108|0);
 $116 = (($pCtx) + 116|0);
 $117 = (($pCtx) + 242340|0);
 $118 = (($pCtx) + 5852|0);
 $119 = (($pCtx) + 242316|0);
 $120 = (($pCtx) + 241951|0);
 $121 = (($pCtx) + 242344|0);
 $122 = (($pCtx) + 241924|0);
 $123 = (($pCtx) + 241928|0);
 $124 = (($pCtx) + 316852|0);
 $125 = (($pCtx) + 317112|0);
 $126 = (($pCtx) + 317116|0);
 $127 = (($pCtx) + 112|0);
 $128 = (($pCtx) + 5456|0);
 $129 = (($pCtx) + 5460|0);
 $$pre79 = HEAP32[$102>>2]|0;
 $131 = $$pre79;$bAllRefComplete$0$off061 = 1;$iIdx$065 = $3;$iLastIdD$062 = -1;$iLastIdQ$063 = -1;$pNalCur$066 = $101;$uiNalRefIdc$064 = 0;
 L14: while(1) {
  $130 = HEAP32[$25>>2]|0;
  $132 = ($131|0)==(0|0);
  if ($132) {
   $133 = HEAP32[$103>>2]|0;
   $134 = (__ZN7WelsDec11PrefetchPicEPNS_10TagPicBuffE($133)|0);
   HEAP32[$102>>2] = $134;
   $135 = HEAP32[$104>>2]|0;
   $136 = ($135|0)==(0);
   if (!($136)) {
    HEAP32[$104>>2] = 0;
   }
   $137 = ($134|0)==(0|0);
   if ($137) {
    label = 14;
    break;
   }
   $143 = HEAP8[$105>>0]|0;
   $144 = (($134) + 104|0);
   HEAP8[$144>>0] = $143;
  } else {
   $145 = HEAP32[$104>>2]|0;
   $146 = ($145|0)==(0);
   if ($146) {
    $147 = HEAP8[$105>>0]|0;
    $148 = (($131) + 104|0);
    HEAP8[$148>>0] = $147;
   }
  }
  $149 = (($pNalCur$066) + 3912|0);
  $150 = $149;
  $151 = $150;
  $152 = HEAP32[$151>>2]|0;
  $153 = (($150) + 4)|0;
  $154 = $153;
  $155 = HEAP32[$154>>2]|0;
  $156 = HEAP32[$102>>2]|0;
  $157 = (($156) + 96|0);
  $158 = $157;
  $159 = $158;
  HEAP32[$159>>2] = $152;
  $160 = (($158) + 4)|0;
  $161 = $160;
  HEAP32[$161>>2] = $155;
  $162 = HEAP32[$104>>2]|0;
  $163 = ($162|0)==(0);
  if ($163) {
   $164 = (($pCtx) + 5436|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = HEAP32[$128>>2]|0;
   $167 = HEAP32[$129>>2]|0;
   $168 = $166 << 2;
   $169 = Math_imul($168, $167)|0;
   _memset(($165|0),-1,($169|0))|0;
   $170 = HEAP32[$25>>2]|0;
   $171 = (($170) + 3980|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = HEAP32[$122>>2]|0;
   $174 = (($173) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($173) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = Math_imul($177, $175)|0;
   _memset(($172|0),0,($178|0))|0;
   $179 = HEAP32[$25>>2]|0;
   $180 = (($179) + 3984|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = HEAP32[$122>>2]|0;
   $183 = (($182) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($182) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = Math_imul($186, $184)|0;
   _memset(($181|0),0,($187|0))|0;
   $188 = HEAP32[$122>>2]|0;
   $189 = (($188) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($188) + 8|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = Math_imul($192, $190)|0;
   $194 = HEAP32[$102>>2]|0;
   $195 = (($194) + 116|0);
   HEAP32[$195>>2] = $193;
   $196 = HEAP32[$102>>2]|0;
   $197 = (($196) + 108|0);
   HEAP32[$197>>2] = 0;
   $198 = HEAP32[$102>>2]|0;
   $199 = (($198) + 112|0);
   HEAP32[$199>>2] = 0;
  }
  HEAP8[$106>>0] = 0;
  $200 = HEAP32[$102>>2]|0;
  $201 = (($200) + 32|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = (($200) + 36|0);
  $204 = HEAP32[$203>>2]|0;
  __ZN7WelsDec25GetI4LumaIChromaAddrTableEPiii($107,$202,$204);
  $205 = (($pNalCur$066) + 22|0);
  $206 = HEAP8[$205>>0]|0;
  $207 = ($206&255)>($15&255);
  if ($207) {
   $$2 = 0;
   label = 89;
   break;
  }
  _memset(($pLayerInfo$sroa$0|0),0,3868)|0;
  ;HEAP16[$pLayerInfo$sroa$9+0>>1]=0|0;HEAP16[$pLayerInfo$sroa$9+2>>1]=0|0;HEAP16[$pLayerInfo$sroa$9+4>>1]=0|0;
  $208 = (($130) + 3900|0);
  $209 = (($130) + 3868|0);
  $210 = (($130) + 3872|0);
  $211 = (($130) + 3880|0);
  $212 = (($130) + 3881|0);
  $213 = (($130) + 3882|0);
  $214 = (($130) + 3888|0);
  $215 = (($130) + 3892|0);
  $216 = (($130) + 3896|0);
  $217 = (($130) + 4100|0);
  $218 = (($130) + 4044|0);
  $219 = (($130) + 4048|0);
  $220 = (($130) + 4052|0);
  $221 = (($130) + 4060|0);
  $222 = (($130) + 4064|0);
  $223 = (($130) + 4068|0);
  $224 = (($130) + 4072|0);
  $225 = (($130) + 4076|0);
  $226 = (($130) + 4105|0);
  $227 = (($130) + 4106|0);
  $228 = (($130) + 4107|0);
  $229 = (($130) + 4108|0);
  $230 = (($130) + 4109|0);
  $231 = (($130) + 4110|0);
  $232 = (($130) + 4080|0);
  $233 = (($130) + 4088|0);
  $234 = (($130) + 4104|0);
  $235 = (($130) + 4092|0);
  $236 = (($130) + 4084|0);
  $237 = (($130) + 4111|0);
  $238 = (($130) + 4112|0);
  $239 = (($130) + 12|0);
  $240 = (($130) + 4|0);
  $bAllRefComplete$1$off0 = $bAllRefComplete$0$off061;$iIdx$1 = $iIdx$065;$iLastIdD$1 = $iLastIdD$062;$iLastIdQ$1 = $iLastIdQ$063;$pNalCur$1 = $pNalCur$066;$pSh$0 = 0;$uiNalRefIdc$1 = $uiNalRefIdc$064;
  while(1) {
   $241 = ($iIdx$1|0)>($5|0);
   if ($241) {
    $bAllRefComplete$6$off0 = $bAllRefComplete$1$off0;$iIdx$2 = $iIdx$1;$iLastIdD$2 = $iLastIdD$1;$iLastIdQ$2 = $iLastIdQ$1;$pNalCur$3 = $pNalCur$1;$pSh$1 = $pSh$0;$uiNalRefIdc$2 = $uiNalRefIdc$1;
    break;
   }
   $242 = (($pNalCur$1) + 16|0);
   $243 = HEAP8[$242>>0]|0;
   $244 = $243&255;
   $245 = (($pNalCur$1) + 15|0);
   $246 = HEAP8[$245>>0]|0;
   $247 = $246&255;
   $248 = (($pNalCur$1) + 24|0);
   HEAP8[$106>>0] = 0;
   $249 = (($pNalCur$1) + 22|0);
   $250 = HEAP8[$249>>0]|0;
   $251 = ($250<<24>>24)==($15<<24>>24);
   ;HEAP32[$pLayerInfo$sroa$0+0>>2]=HEAP32[$pNalCur$1+0>>2]|0;HEAP32[$pLayerInfo$sroa$0+4>>2]=HEAP32[$pNalCur$1+4>>2]|0;HEAP32[$pLayerInfo$sroa$0+8>>2]=HEAP32[$pNalCur$1+8>>2]|0;HEAP32[$pLayerInfo$sroa$0+12>>2]=HEAP32[$pNalCur$1+12>>2]|0;HEAP32[$pLayerInfo$sroa$0+16>>2]=HEAP32[$pNalCur$1+16>>2]|0;HEAP32[$pLayerInfo$sroa$0+20>>2]=HEAP32[$pNalCur$1+20>>2]|0;
   $252 = (($pNalCur$1) + 28|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = HEAP32[$102>>2]|0;
   $255 = (($254) + 76|0);
   HEAP32[$255>>2] = $253;
   $256 = (($pNalCur$1) + 32|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = HEAP32[$102>>2]|0;
   $259 = (($258) + 64|0);
   HEAP32[$259>>2] = $257;
   $260 = (($pNalCur$1) + 12|0);
   $261 = HEAP8[$260>>0]|0;
   $262 = HEAP32[$102>>2]|0;
   $263 = (($262) + 52|0);
   HEAP8[$263>>0] = $261;
   $264 = (($pNalCur$1) + 24|0);
   _memcpy(($108|0),($264|0),3844)|0;
   $265 = (($pNalCur$1) + 3904|0);
   $266 = HEAP8[$265>>0]|0;
   $267 = (($pNalCur$1) + 2756|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = $268&255;
   $270 = (($pNalCur$1) + 64|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = (($pNalCur$1) + 3868|0);
   HEAP32[$208>>2] = $272;
   $273 = (($pNalCur$1) + 1|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = (($pNalCur$1) + 100|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = (($pNalCur$1) + 92|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = (($pNalCur$1) + 88|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = (($pNalCur$1) + 2768|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = ((($pCtx) + (($276*20)|0)|0) + 120|0);
   HEAP32[$109>>2] = $283;
   $284 = HEAP32[$111>>2]|0;
   $285 = (__ZN7WelsDec14FmoParamUpdateEPNS_6TagFmoEPNS_6TagSpsEPNS_6TagPpsEPiPN10WelsCommon12CMemoryAlignE($283,$280,$278,$110,$284)|0);
   if (!($285)) {
    label = 24;
    break L14;
   }
   $289 = $246&255;
   $290 = $iLastIdD$1 << 16 >> 16;
   $291 = ($289|0)==($290|0);
   $292 = $243&255;
   if ($291) {
    $293 = $iLastIdQ$1 << 16 >> 16;
    $294 = ($292|0)!=($293|0);
    $389 = $294;
   } else {
    $389 = 1;
   }
   $295 = HEAP32[$267>>2]|0;
   HEAP32[$112>>2] = $295;
   HEAP32[$113>>2] = $248;
   $296 = HEAP32[$252>>2]|0;
   HEAP32[$114>>2] = $296;
   $297 = ($iLastIdD$1<<16>>16)<(0);
   $or$cond = $297 | $291;
   do {
    if ($or$cond) {
     $298 = HEAP32[$102>>2]|0;
     $299 = HEAP8[$242>>0]|0;
     _memcpy(($130|0),($pLayerInfo$sroa$0|0),3868)|0;
     HEAP32[$209>>2] = $271;
     $300 = $210;
     $301 = $300;
     HEAP32[$301>>2] = 0;
     $302 = (($300) + 4)|0;
     $303 = $302;
     HEAP32[$303>>2] = 0;
     HEAP8[$211>>0] = $266;
     HEAP8[$212>>0] = $269;
     ;HEAP16[$213+0>>1]=HEAP16[$pLayerInfo$sroa$9+0>>1]|0;HEAP16[$213+2>>1]=HEAP16[$pLayerInfo$sroa$9+2>>1]|0;HEAP16[$213+4>>1]=HEAP16[$pLayerInfo$sroa$9+4>>1]|0;
     HEAP32[$214>>2] = $282;
     HEAP32[$215>>2] = $280;
     HEAP32[$216>>2] = $278;
     HEAP32[$217>>2] = $298;
     $304 = (($pNalCur$1) + 1156|0);
     $305 = HEAP32[$304>>2]|0;
     HEAP32[$218>>2] = $305;
     $306 = (($pNalCur$1) + 1160|0);
     $307 = HEAP32[$306>>2]|0;
     HEAP32[$219>>2] = $307;
     $308 = (($pNalCur$1) + 24|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = $309 << 7;
     $311 = HEAP8[$245>>0]|0;
     $312 = $311&255;
     $313 = $312 << 4;
     $314 = $313 | $310;
     $315 = HEAP8[$242>>0]|0;
     $316 = $315&255;
     $317 = $314 | $316;
     HEAP32[$220>>2] = $317;
     $318 = (($278) + 4|0);
     $319 = HEAP32[$318>>2]|0;
     HEAP32[$221>>2] = $319;
     $320 = (($pNalCur$1) + 2772|0);
     $321 = HEAP32[$320>>2]|0;
     HEAP32[$222>>2] = $321;
     $322 = (($pNalCur$1) + 2776|0);
     $323 = HEAP32[$322>>2]|0;
     HEAP32[$223>>2] = $323;
     $324 = (($pNalCur$1) + 2780|0);
     $325 = HEAP32[$324>>2]|0;
     HEAP32[$224>>2] = $325;
     $326 = (($pNalCur$1) + 84|0);
     $327 = HEAP32[$326>>2]|0;
     HEAP32[$225>>2] = $327;
     $328 = (($pNalCur$1) + 3853|0);
     $329 = HEAP8[$328>>0]|0;
     HEAP8[$226>>0] = $329;
     $330 = (($pNalCur$1) + 3862|0);
     $331 = HEAP8[$330>>0]|0;
     HEAP8[$227>>0] = $331;
     $332 = (($pNalCur$1) + 3854|0);
     $333 = HEAP8[$332>>0]|0;
     HEAP8[$228>>0] = $333;
     $334 = (($pNalCur$1) + 3865|0);
     $335 = HEAP8[$334>>0]|0;
     HEAP8[$229>>0] = $335;
     $336 = (($pNalCur$1) + 3863|0);
     $337 = HEAP8[$336>>0]|0;
     HEAP8[$230>>0] = $337;
     $338 = (($pNalCur$1) + 3864|0);
     $339 = HEAP8[$338>>0]|0;
     HEAP8[$231>>0] = $339;
     $340 = ($299<<24>>24)==(0);
     if ($340) {
      $341 = (($pNalCur$1) + 108|0);
      HEAP32[$232>>2] = $341;
      $342 = (($pNalCur$1) + 1164|0);
      HEAP32[$233>>2] = $342;
      $343 = HEAP32[$277>>2]|0;
      $344 = (($343) + 182|0);
      $345 = HEAP8[$344>>0]|0;
      $346 = ($345<<24>>24)==(0);
      if ($346) {
       HEAP8[$234>>0] = 0;
      } else {
       HEAP8[$234>>0] = 1;
       $347 = (($pNalCur$1) + 368|0);
       HEAP32[$236>>2] = $347;
      }
      $348 = (($pNalCur$1) + 2792|0);
      HEAP32[$235>>2] = $348;
     }
     $349 = HEAP8[$249>>0]|0;
     HEAP8[$237>>0] = $349;
     $350 = (($pNalCur$1) + 18|0);
     $351 = HEAP8[$350>>0]|0;
     HEAP8[$238>>0] = $351;
     $352 = (($280) + 323|0);
     $353 = HEAP8[$352>>0]|0;
     $354 = ($353<<24>>24)==(0);
     do {
      if ($354) {
       $355 = HEAP8[$239>>0]|0;
       $356 = ($355<<24>>24)==(0);
       if ($356) {
        $357 = HEAP32[$240>>2]|0;
        $358 = ($357|0)==(5);
        if ($358) {
         $bAllRefComplete$2$off0 = $bAllRefComplete$1$off0;
        } else {
         $359 = HEAP32[$252>>2]|0;
         $360 = HEAP32[$115>>2]|0;
         $361 = ($359|0)==($360|0);
         if ($361) {
          $bAllRefComplete$2$off0 = $bAllRefComplete$1$off0;
         } else {
          $362 = (($360) + 1)|0;
          $363 = (($280) + 16|0);
          $364 = HEAP32[$363>>2]|0;
          $365 = 1 << $364;
          $366 = (($365) + -1)|0;
          $367 = $366 & $362;
          $368 = ($359|0)==($367|0);
          if ($368) {
           $bAllRefComplete$2$off0 = $bAllRefComplete$1$off0;
           break;
          }
          HEAP32[$vararg_buffer11>>2] = $360;
          $vararg_ptr7 = (($vararg_buffer11) + 4|0);
          HEAP32[$vararg_ptr7>>2] = $359;
          __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,7832,$vararg_buffer11);
          $369 = HEAP32[$116>>2]|0;
          $370 = $369 | 2;
          HEAP32[$116>>2] = $370;
          $371 = HEAP32[$117>>2]|0;
          $372 = ($371|0)==(0);
          if ($372) {
           label = 39;
           break L14;
          } else {
           $bAllRefComplete$2$off0 = 0;
          }
         }
        }
       } else {
        $bAllRefComplete$2$off0 = $bAllRefComplete$1$off0;
       }
      } else {
       $bAllRefComplete$2$off0 = $bAllRefComplete$1$off0;
      }
     } while(0);
     $$not = ($289|0)!=($18|0);
     $$not27 = ($243<<24>>24)!=(0);
     $brmerge = $$not | $$not27;
     if ($brmerge) {
      $bAllRefComplete$3$off0 = $bAllRefComplete$2$off0;
     } else {
      $374 = HEAP32[$256>>2]|0;
      $375 = (__ZN7WelsDec15WelsInitRefListEPNS_21TagWelsDecoderContextEi($pCtx,$374)|0);
      $376 = HEAP32[$112>>2]|0;
      if ((($376|0) == 4) | (($376|0) == 2)) {
       $iRet$0$i = $375;
      } else {
       $377 = (__ZN7WelsDec18WelsReorderRefListEPNS_21TagWelsDecoderContextE($pCtx)|0);
       $iRet$0$i = $377;
      }
      $378 = ($iRet$0$i|0)==(0);
      if ($378) {
       $bAllRefComplete$3$off0 = $bAllRefComplete$2$off0;
      } else {
       HEAP8[$106>>0] = 1;
       $379 = (($pNalCur$1) + 17|0);
       $380 = HEAP8[$379>>0]|0;
       $switch$i = ($380&255)<(2);
       if ($switch$i) {
        HEAP8[$119>>0] = 1;
       }
       $381 = HEAP32[$116>>2]|0;
       $382 = $381 | 2;
       HEAP32[$116>>2] = $382;
       $383 = HEAP8[$379>>0]|0;
       $384 = $383&255;
       HEAP32[$vararg_buffer11>>2] = $384;
       __Z7WelsLogP13TagLogContextiPKcz($pCtx,8,7920,$vararg_buffer11);
       $385 = HEAP32[$117>>2]|0;
       $386 = ($385|0)==(0);
       if ($386) {
        label = 47;
        break L14;
       } else {
        $bAllRefComplete$3$off0 = 0;
       }
      }
     }
     $390 = (__ZN7WelsDec15WelsDecodeSliceEPNS_21TagWelsDecoderContextEbPNS_10TagNalUnitE($pCtx,$389,$pNalCur$1)|0);
     $391 = ($390|0)==(0);
     if ($391) {
      $bAllRefComplete$4$off0 = $bAllRefComplete$3$off0;
     } else {
      $392 = HEAP32[$252>>2]|0;
      HEAP32[$vararg_buffer11>>2] = $390;
      $vararg_ptr14 = (($vararg_buffer11) + 4|0);
      HEAP32[$vararg_ptr14>>2] = $392;
      $vararg_ptr15 = (($vararg_buffer11) + 8|0);
      HEAP32[$vararg_ptr15>>2] = $289;
      $vararg_ptr16 = (($vararg_buffer11) + 12|0);
      HEAP32[$vararg_ptr16>>2] = $292;
      __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,8008,$vararg_buffer11);
      $393 = (($pNalCur$1) + 17|0);
      $394 = HEAP8[$393>>0]|0;
      $395 = ($394<<24>>24)==(0);
      if ($395) {
       HEAP8[$119>>0] = 1;
      }
      $396 = HEAP32[$116>>2]|0;
      $397 = $396 | 4;
      HEAP32[$116>>2] = $397;
      $398 = HEAP32[$117>>2]|0;
      $399 = ($398|0)==(0);
      if ($399) {
       label = 53;
       break L14;
      } else {
       $bAllRefComplete$4$off0 = 0;
      }
     }
     if ($251) {
      $402 = (__ZN7WelsDec27WelsTargetSliceConstructionEPNS_21TagWelsDecoderContextE($pCtx)|0);
      $403 = ($402|0)==(0);
      if (!($403)) {
       label = 57;
       break L14;
      }
     }
     if ($bAllRefComplete$4$off0) {
      $411 = HEAP32[$112>>2]|0;
      $412 = ($411|0)==(2);
      if ($412) {
       $bAllRefComplete$5$off0 = 1;
       break;
      }
      $413 = HEAP8[$118>>0]|0;
      $414 = ($413<<24>>24)==(0);
      if ($414) {
       $bAllRefComplete$5$off0 = 0;
       break;
      }
      $415 = (__ZN7WelsDec24CheckRefPicturesCompleteEPNS_21TagWelsDecoderContextE($pCtx)|0);
      $bAllRefComplete$5$off0 = $415;
     } else {
      $bAllRefComplete$5$off0 = 0;
     }
    } else {
     $bAllRefComplete$5$off0 = $bAllRefComplete$1$off0;
    }
   } while(0);
   $416 = (($iIdx$1) + 1)|0;
   $417 = ($iIdx$1|0)<($5|0);
   if (!($417)) {
    $bAllRefComplete$6$off0 = $bAllRefComplete$5$off0;$iIdx$2 = $416;$iLastIdD$2 = $247;$iLastIdQ$2 = $244;$pNalCur$3 = 0;$pSh$1 = $248;$uiNalRefIdc$2 = $274;
    break;
   }
   $418 = HEAP32[$1>>2]|0;
   $419 = (($418) + ($416<<2)|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = ($420|0)==(0|0);
   if ($421) {
    $bAllRefComplete$6$off0 = $bAllRefComplete$5$off0;$iIdx$2 = $416;$iLastIdD$2 = $247;$iLastIdQ$2 = $244;$pNalCur$3 = 0;$pSh$1 = $248;$uiNalRefIdc$2 = $274;
    break;
   }
   $422 = (($420) + 15|0);
   $423 = HEAP8[$422>>0]|0;
   $424 = ($246<<24>>24)==($423<<24>>24);
   if (!($424)) {
    $bAllRefComplete$6$off0 = $bAllRefComplete$5$off0;$iIdx$2 = $416;$iLastIdD$2 = $247;$iLastIdQ$2 = $244;$pNalCur$3 = $420;$pSh$1 = $248;$uiNalRefIdc$2 = $274;
    break;
   }
   $425 = (($420) + 16|0);
   $426 = HEAP8[$425>>0]|0;
   $427 = ($243<<24>>24)==($426<<24>>24);
   if ($427) {
    $bAllRefComplete$1$off0 = $bAllRefComplete$5$off0;$iIdx$1 = $416;$iLastIdD$1 = $247;$iLastIdQ$1 = $244;$pNalCur$1 = $420;$pSh$0 = $248;$uiNalRefIdc$1 = $274;
   } else {
    $bAllRefComplete$6$off0 = $bAllRefComplete$5$off0;$iIdx$2 = $416;$iLastIdD$2 = $247;$iLastIdQ$2 = $244;$pNalCur$3 = $420;$pSh$1 = $248;$uiNalRefIdc$2 = $274;
    break;
   }
  }
  $428 = HEAP32[$102>>2]|0;
  $429 = (($428) + 72|0);
  $430 = $bAllRefComplete$6$off0&1;
  HEAP8[$429>>0] = $430;
  $431 = HEAP32[$102>>2]|0;
  $432 = (($431) + 72|0);
  $433 = HEAP8[$432>>0]|0;
  $434 = ($433<<24>>24)==(0);
  if ($434) {
   $435 = HEAP32[$116>>2]|0;
   $436 = $435 | 32;
   HEAP32[$116>>2] = $436;
  }
  $437 = HEAP8[$237>>0]|0;
  $438 = ($437<<24>>24)==($15<<24>>24);
  if ($438) {
   $439 = HEAP8[$120>>0]|0;
   $440 = ($439<<24>>24)==(0);
   if ($440) {
    $441 = HEAP8[$121>>0]|0;
    $442 = ($441<<24>>24)==(0);
    if ($442) {
     $443 = (__ZN7WelsDec12NeedErrorConEPNS_21TagWelsDecoderContextE($pCtx)|0);
     if ($443) {
      $444 = HEAP32[$117>>2]|0;
      $445 = ($444|0)==(0);
      if (!($445)) {
       __ZN7WelsDec17ImplementErrorConEPNS_21TagWelsDecoderContextE($pCtx);
       $446 = HEAP32[$122>>2]|0;
       $447 = (($446) + 4|0);
       $448 = HEAP32[$447>>2]|0;
       $449 = (($446) + 8|0);
       $450 = HEAP32[$449>>2]|0;
       $451 = Math_imul($450, $448)|0;
       HEAP32[$104>>2] = $451;
       $452 = HEAP32[$446>>2]|0;
       $453 = HEAP32[$102>>2]|0;
       $454 = (($453) + 84|0);
       HEAP32[$454>>2] = $452;
       $455 = HEAP32[$123>>2]|0;
       $456 = (($455) + 4|0);
       $457 = HEAP32[$456>>2]|0;
       $458 = HEAP32[$102>>2]|0;
       $459 = (($458) + 88|0);
       HEAP32[$459>>2] = $457;
      }
     }
    }
   }
   $460 = (__ZN7WelsDecL23DecodeFrameConstructionEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstInfo)|0);
   $461 = ($460|0)==(0);
   if (!($461)) {
    $$2 = $460;
    label = 89;
    break;
   }
   $462 = HEAP32[$102>>2]|0;
   HEAP32[$124>>2] = $462;
   $463 = ($uiNalRefIdc$2<<24>>24)==(0);
   if (!($463)) {
    $464 = (__ZN7WelsDec13WelsMarkAsRefEPNS_21TagWelsDecoderContextE($pCtx)|0);
    $465 = ($464|0)==(0);
    if (!($465)) {
     $466 = HEAP32[$117>>2]|0;
     $467 = ($466|0)==(0);
     if ($467) {
      label = 80;
      break;
     }
    }
    $468 = HEAP8[$121>>0]|0;
    $469 = ($468<<24>>24)==(0);
    if ($469) {
     $470 = HEAP32[$102>>2]|0;
     $471 = (($470) + 16|0);
     $472 = (($470) + 56|0);
     $473 = HEAP32[$472>>2]|0;
     $474 = (($470) + 60|0);
     $475 = HEAP32[$474>>2]|0;
     $476 = (($470) + 32|0);
     $477 = HEAP32[$125>>2]|0;
     _ExpandReferencingPicture($471,$473,$475,$476,$477,$126);
    }
   }
   HEAP32[$102>>2] = 0;
   $490 = 0;
  } else {
   $490 = $431;
  }
  $478 = HEAP32[$2>>2]|0;
  $479 = HEAP32[$1>>2]|0;
  $480 = (($479) + ($478<<2)|0);
  $481 = HEAP32[$480>>2]|0;
  $482 = (($481) + 1|0);
  $483 = HEAP8[$482>>0]|0;
  $484 = ($483<<24>>24)==(0);
  if (!($484)) {
   $485 = (($pSh$1) + 4|0);
   $486 = HEAP32[$485>>2]|0;
   HEAP32[$115>>2] = $486;
  }
  $487 = HEAP8[$127>>0]|0;
  $488 = ($487<<24>>24)==(0);
  if (!($488)) {
   HEAP32[$115>>2] = 0;
  }
  $489 = ($iIdx$2|0)>($5|0);
  if ($489) {
   $$2 = 0;
   label = 89;
   break;
  } else {
   $131 = $490;$bAllRefComplete$0$off061 = $bAllRefComplete$6$off0;$iIdx$065 = $iIdx$2;$iLastIdD$062 = $iLastIdD$2;$iLastIdQ$063 = $iLastIdQ$2;$pNalCur$066 = $pNalCur$3;$uiNalRefIdc$064 = $uiNalRefIdc$2;
  }
 }
 if ((label|0) == 14) {
  $138 = HEAP32[$122>>2]|0;
  $139 = (($138) + 296|0);
  $140 = HEAP32[$139>>2]|0;
  HEAP32[$vararg_buffer11>>2] = $140;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,7680,$vararg_buffer11);
  $141 = HEAP32[$116>>2]|0;
  $142 = $141 | 16384;
  HEAP32[$116>>2] = $142;
  $$2 = 1010;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 24) {
  $286 = HEAP32[$116>>2]|0;
  $287 = $286 | 4;
  HEAP32[$116>>2] = $287;
  $288 = HEAP32[$267>>2]|0;
  HEAP32[$vararg_buffer11>>2] = $288;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,7760,$vararg_buffer11);
  $$2 = 328704;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 39) {
  $373 = (($pCtx) + 242324|0);
  HEAP8[$373>>0] = 1;
  $$2 = 1072;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 47) {
  $387 = HEAP32[$104>>2]|0;
  $388 = ($387|0)==(0);
  if (!($388)) {
   $$2 = $iRet$0$i;
   STACKTOP = sp;return ($$2|0);
  }
  HEAP32[$102>>2] = 0;
  $$2 = $iRet$0$i;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 53) {
  $400 = HEAP32[$104>>2]|0;
  $401 = ($400|0)==(0);
  if (!($401)) {
   $$2 = $390;
   STACKTOP = sp;return ($$2|0);
  }
  HEAP32[$102>>2] = 0;
  $$2 = $390;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 57) {
  $404 = (($pNalCur$1) + 17|0);
  $405 = HEAP8[$404>>0]|0;
  $406 = ($405<<24>>24)==(0);
  if ($406) {
   HEAP8[$119>>0] = 1;
  }
  $407 = HEAP32[$116>>2]|0;
  $408 = $407 | 4;
  HEAP32[$116>>2] = $408;
  $409 = HEAP32[$102>>2]|0;
  $410 = (($409) + 72|0);
  HEAP8[$410>>0] = 0;
  $$2 = -1;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 80) {
  HEAP32[$102>>2] = 0;
  $$2 = $464;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 89) {
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function __ZN7WelsDec24CheckRefPicturesCompleteEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $bAllRefComplete$0$off0$lcssa = 0, $iMbIdx$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 3876|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 24|0);
 $5 = (($1) + 3908|0);
 $6 = (($1) + 3932|0);
 $iMbIdx$07 = 0;
 L1: while(1) {
  $7 = ($iMbIdx$07|0)<($3|0);
  if (!($7)) {
   $bAllRefComplete$0$off0$lcssa = 1;
   label = 9;
   break;
  }
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($iMbIdx$07))|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = (($10) + ($9<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  switch ($13|0) {
  case 8: case 256:  {
   $85 = HEAP32[$6>>2]|0;
   $86 = (($85) + ($9<<4)|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87 << 24 >> 24;
   $89 = ((($pCtx) + ($88<<2)|0) + 5468|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + 72|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = ($92<<24>>24)==(0);
   $94 = (($iMbIdx$07) + 1)|0;
   if ($93) {
    $bAllRefComplete$0$off0$lcssa = 0;
    label = 9;
    break L1;
   } else {
    $iMbIdx$07 = $94;
    continue L1;
   }
   break;
  }
  case 16:  {
   $15 = HEAP32[$6>>2]|0;
   $16 = (($15) + ($9<<4)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ((($pCtx) + ($18<<2)|0) + 5468|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 72|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ((($15) + ($9<<4)|0) + 8|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ((($pCtx) + ($25<<2)|0) + 5468|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 72|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $22 & $29;
   $31 = ($30<<24>>24)==(0);
   $32 = (($iMbIdx$07) + 1)|0;
   if ($31) {
    $bAllRefComplete$0$off0$lcssa = 0;
    label = 9;
    break L1;
   } else {
    $iMbIdx$07 = $32;
    continue L1;
   }
   break;
  }
  case 128: case 64:  {
   $51 = HEAP32[$6>>2]|0;
   $52 = (($51) + ($9<<4)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   $55 = ((($pCtx) + ($54<<2)|0) + 5468|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + 72|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = ((($51) + ($9<<4)|0) + 2|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60 << 24 >> 24;
   $62 = ((($pCtx) + ($61<<2)|0) + 5468|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 72|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $58 & $65;
   $67 = ((($51) + ($9<<4)|0) + 8|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68 << 24 >> 24;
   $70 = ((($pCtx) + ($69<<2)|0) + 5468|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 72|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $66 & $73;
   $75 = ((($51) + ($9<<4)|0) + 10|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76 << 24 >> 24;
   $78 = ((($pCtx) + ($77<<2)|0) + 5468|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + 72|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $74 & $81;
   $83 = ($82<<24>>24)==(0);
   $84 = (($iMbIdx$07) + 1)|0;
   if ($83) {
    $bAllRefComplete$0$off0$lcssa = 0;
    label = 9;
    break L1;
   } else {
    $iMbIdx$07 = $84;
    continue L1;
   }
   break;
  }
  case 32:  {
   $33 = HEAP32[$6>>2]|0;
   $34 = (($33) + ($9<<4)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = ((($pCtx) + ($36<<2)|0) + 5468|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 72|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ((($33) + ($9<<4)|0) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42 << 24 >> 24;
   $44 = ((($pCtx) + ($43<<2)|0) + 5468|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 72|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $40 & $47;
   $49 = ($48<<24>>24)==(0);
   $50 = (($iMbIdx$07) + 1)|0;
   if ($49) {
    $bAllRefComplete$0$off0$lcssa = 0;
    label = 9;
    break L1;
   } else {
    $iMbIdx$07 = $50;
    continue L1;
   }
   break;
  }
  default: {
   $14 = (($iMbIdx$07) + 1)|0;
   $iMbIdx$07 = $14;
   continue L1;
  }
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($bAllRefComplete$0$off0$lcssa|0);
 }
 return (0)|0;
}
function __ZN7WelsDec21CheckAndFinishLastPicEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstInfo) {
 $pCtx = $pCtx|0;
 $ppDst = $ppDst|0;
 $pDstInfo = $pDstInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241888|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((17040 + ($3<<3)|0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = (($1) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($pCtx) + 242320|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   STACKTOP = sp;return 0;
  }
  $30 = (($pCtx) + 317180|0);
  $31 = (($pCtx) + 317204|0);
  $32 = (($11) + 24|0);
  $33 = (__ZN7WelsDec26CheckAccessUnitBoundaryExtEPN10WelsCommon19TagNalUnitHeaderExtES2_PNS_15TagSliceHeadersES4_($30,$11,$31,$32)|0);
  if (!($33)) {
   STACKTOP = sp;return 0;
  }
 } else {
  switch ($3|0) {
  case 8:  {
   $23 = (($pCtx) + 242336|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    STACKTOP = sp;return 0;
   }
   break;
  }
  case 6: case 9:  {
   break;
  }
  case 15:  {
   $19 = (($pCtx) + 242336|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 & 4;
   $22 = ($21|0)==(0);
   if ($22) {
    STACKTOP = sp;return 0;
   }
   break;
  }
  case 7:  {
   $15 = (($pCtx) + 242336|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 & 2;
   $18 = ($17|0)==(0);
   if ($18) {
    STACKTOP = sp;return 0;
   }
   break;
  }
  default: {
   STACKTOP = sp;return 0;
  }
  }
  $27 = (($1) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0);
  if (!($29)) {
   (__ZN7WelsDec19ConstructAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstInfo)|0);
  }
 }
 $34 = (($pCtx) + 242320|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  STACKTOP = sp;return 0;
 }
 $37 = (__ZN7WelsDec12NeedErrorConEPNS_21TagWelsDecoderContextE($pCtx)|0);
 if (!($37)) {
  STACKTOP = sp;return 0;
 }
 $38 = (($pCtx) + 242340|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 do {
  if ($40) {
   $63 = (($pCtx) + 242344|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)==(0);
   if (!($65)) {
    $66 = (($pCtx) + 316848|0);
    $67 = HEAP32[$66>>2]|0;
    HEAP32[$67>>2] = 0;
    $68 = (($pCtx) + 242346|0);
    HEAP8[$68>>0] = 1;
    break;
   }
   $69 = (__ZN7WelsDecL23DecodeFrameConstructionEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstInfo)|0);
   $70 = ($69|0)==(0);
   if (!($70)) {
    $71 = (($pCtx) + 317181|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = ($72<<24>>24)==(0);
    if (!($73)) {
     $74 = (($pCtx) + 116|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $75 | 16;
     HEAP32[$74>>2] = $76;
    }
    $77 = (($pCtx) + 5464|0);
    HEAP32[$77>>2] = 0;
    STACKTOP = sp;return 0;
   }
  } else {
   __ZN7WelsDec17ImplementErrorConEPNS_21TagWelsDecoderContextE($pCtx);
   $41 = (($pCtx) + 241924|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = Math_imul($46, $44)|0;
   HEAP32[$34>>2] = $47;
   $48 = HEAP32[$42>>2]|0;
   $49 = (($pCtx) + 5464|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 84|0);
   HEAP32[$51>>2] = $48;
   $52 = (($pCtx) + 241928|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP32[$49>>2]|0;
   $57 = (($56) + 88|0);
   HEAP32[$57>>2] = $55;
   (__ZN7WelsDecL23DecodeFrameConstructionEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstInfo)|0);
   $58 = HEAP32[$49>>2]|0;
   $59 = (($pCtx) + 316852|0);
   HEAP32[$59>>2] = $58;
   $60 = (($pCtx) + 317181|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = ($61<<24>>24)==(0);
   if (!($62)) {
    (__ZN7WelsDec16MarkECFrameAsRefEPNS_21TagWelsDecoderContextE($pCtx)|0);
   }
  }
 } while(0);
 $78 = (($pCtx) + 5464|0);
 HEAP32[$78>>2] = 0;
 $79 = (($1) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = HEAP32[$1>>2]|0;
 $82 = (($81) + ($80<<2)|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + 1|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = ($85<<24>>24)==(0);
 if (!($86)) {
  $87 = (($pCtx) + 317208|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($pCtx) + 108|0);
  HEAP32[$89>>2] = $88;
 }
 $90 = (($pCtx) + 112|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = ($91<<24>>24)==(0);
 if ($92) {
  STACKTOP = sp;return 0;
 }
 $93 = (($pCtx) + 108|0);
 HEAP32[$93>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec12InitErrorConEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 242340|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 5: case 7:  {
  break;
 }
 case 6: case 4: case 2:  {
  $2 = (($pCtx) + 84|0);
  HEAP8[$2>>0] = 0;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $3 = (($pCtx) + 317056|0);
 HEAP32[$3>>2] = 23;
 $4 = (($pCtx) + 317060|0);
 HEAP32[$4>>2] = 24;
 STACKTOP = sp;return;
}
function __ZN7WelsDec19DoErrorConSliceCopyEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$ = 0, $$sum = 0, $$sum1$us = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum38 = 0, $$sum39 = 0, $$sum4 = 0, $$sum40 = 0, $$sum41 = 0;
 var $$sum42 = 0, $$sum43 = 0, $$sum44 = 0, $$sum45 = 0, $$sum46 = 0, $$sum47 = 0, $$sum48 = 0, $$sum49 = 0, $$sum5 = 0, $$sum50 = 0, $$sum51 = 0, $$sum52 = 0, $$sum53 = 0, $$sum54 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond24 = 0, $exitcond25 = 0, $iMbX$016 = 0, $iMbX$016$us = 0, $iMbY$018 = 0, $pSrcPic$0 = 0, $tmp$us = 0, $tmp9$us = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241924|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCtx) + 5464|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pCtx) + 316852|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pCtx) + 242340|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(2);
 $13 = (($pCtx) + 241932|0);
 $14 = HEAP32[$13>>2]|0;
 if ($12) {
  $15 = (($14) + 12|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(0);
  $$ = $17 ? $9 : 0;
  $pSrcPic$0 = $$;
 } else {
  $pSrcPic$0 = $9;
 }
 $18 = (($14) + 3980|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($7) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($5|0)>(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = ($3|0)>(0);
 $24 = ($pSrcPic$0|0)==(0|0);
 $25 = (($7) + 16|0);
 $26 = (($7) + 20|0);
 $27 = $21 << 3;
 $28 = $21 >>> 1;
 $29 = (($7) + 24|0);
 $30 = (($pSrcPic$0) + 32|0);
 $31 = (($pSrcPic$0) + 16|0);
 $32 = (($pCtx) + 317056|0);
 $33 = (($pSrcPic$0) + 20|0);
 $34 = (($pCtx) + 317060|0);
 $35 = (($pSrcPic$0) + 24|0);
 $iMbY$018 = 0;
 while(1) {
  if ($23) {
   $36 = Math_imul($iMbY$018, $3)|0;
   $37 = Math_imul($iMbY$018, $21)|0;
   $38 = Math_imul($27, $iMbY$018)|0;
   $39 = $38 >>> 1;
   $40 = $iMbY$018 << 4;
   $41 = Math_imul($40, $21)|0;
   $42 = $iMbY$018 << 3;
   $43 = Math_imul($42, $21)|0;
   $44 = $43 >>> 1;
   if ($24) {
    $iMbX$016$us = 0;
    while(1) {
     $45 = (($iMbX$016$us) + ($36))|0;
     $46 = (($19) + ($45)|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ($47<<24>>24)==(0);
     if ($48) {
      $49 = HEAP32[$6>>2]|0;
      $50 = (($49) + 108|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (($51) + 1)|0;
      HEAP32[$50>>2] = $52;
      $53 = HEAP32[$25>>2]|0;
      $tmp$us = (($iMbX$016$us) + ($37))|0;
      $tmp9$us = $tmp$us << 4;
      $54 = (($53) + ($tmp9$us)|0);
      dest=$54+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum = (($tmp9$us) + ($21))|0;
      $55 = (($53) + ($$sum)|0);
      dest=$55+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum27 = (($$sum) + ($21))|0;
      $56 = (($53) + ($$sum27)|0);
      dest=$56+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum28 = (($$sum27) + ($21))|0;
      $57 = (($53) + ($$sum28)|0);
      dest=$57+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum29 = (($$sum28) + ($21))|0;
      $58 = (($53) + ($$sum29)|0);
      dest=$58+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum30 = (($$sum29) + ($21))|0;
      $59 = (($53) + ($$sum30)|0);
      dest=$59+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum31 = (($$sum30) + ($21))|0;
      $60 = (($53) + ($$sum31)|0);
      dest=$60+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum32 = (($$sum31) + ($21))|0;
      $61 = (($53) + ($$sum32)|0);
      dest=$61+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum33 = (($$sum32) + ($21))|0;
      $62 = (($53) + ($$sum33)|0);
      dest=$62+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum34 = (($$sum33) + ($21))|0;
      $63 = (($53) + ($$sum34)|0);
      dest=$63+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum35 = (($$sum34) + ($21))|0;
      $64 = (($53) + ($$sum35)|0);
      dest=$64+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum36 = (($$sum35) + ($21))|0;
      $65 = (($53) + ($$sum36)|0);
      dest=$65+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum37 = (($$sum36) + ($21))|0;
      $66 = (($53) + ($$sum37)|0);
      dest=$66+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum38 = (($$sum37) + ($21))|0;
      $67 = (($53) + ($$sum38)|0);
      dest=$67+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum39 = (($$sum38) + ($21))|0;
      $68 = (($53) + ($$sum39)|0);
      dest=$68+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $$sum40 = (($$sum39) + ($21))|0;
      $69 = (($53) + ($$sum40)|0);
      dest=$69+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $70 = HEAP32[$26>>2]|0;
      $71 = $iMbX$016$us << 3;
      $$sum1$us = (($71) + ($39))|0;
      $72 = (($70) + ($$sum1$us)|0);
      $73 = $72;
      $74 = $73;
      HEAP8[$74>>0]=-2139062144&255;HEAP8[$74+1>>0]=(-2139062144>>8)&255;HEAP8[$74+2>>0]=(-2139062144>>16)&255;HEAP8[$74+3>>0]=-2139062144>>24;
      $75 = (($73) + 4)|0;
      $76 = $75;
      HEAP8[$76>>0]=-2139062144&255;HEAP8[$76+1>>0]=(-2139062144>>8)&255;HEAP8[$76+2>>0]=(-2139062144>>16)&255;HEAP8[$76+3>>0]=-2139062144>>24;
      $$sum41 = (($$sum1$us) + ($28))|0;
      $77 = (($70) + ($$sum41)|0);
      $78 = $77;
      $79 = $78;
      HEAP8[$79>>0]=-2139062144&255;HEAP8[$79+1>>0]=(-2139062144>>8)&255;HEAP8[$79+2>>0]=(-2139062144>>16)&255;HEAP8[$79+3>>0]=-2139062144>>24;
      $80 = (($78) + 4)|0;
      $81 = $80;
      HEAP8[$81>>0]=-2139062144&255;HEAP8[$81+1>>0]=(-2139062144>>8)&255;HEAP8[$81+2>>0]=(-2139062144>>16)&255;HEAP8[$81+3>>0]=-2139062144>>24;
      $$sum42 = (($$sum41) + ($28))|0;
      $82 = (($70) + ($$sum42)|0);
      $83 = $82;
      $84 = $83;
      HEAP8[$84>>0]=-2139062144&255;HEAP8[$84+1>>0]=(-2139062144>>8)&255;HEAP8[$84+2>>0]=(-2139062144>>16)&255;HEAP8[$84+3>>0]=-2139062144>>24;
      $85 = (($83) + 4)|0;
      $86 = $85;
      HEAP8[$86>>0]=-2139062144&255;HEAP8[$86+1>>0]=(-2139062144>>8)&255;HEAP8[$86+2>>0]=(-2139062144>>16)&255;HEAP8[$86+3>>0]=-2139062144>>24;
      $$sum43 = (($$sum42) + ($28))|0;
      $87 = (($70) + ($$sum43)|0);
      $88 = $87;
      $89 = $88;
      HEAP8[$89>>0]=-2139062144&255;HEAP8[$89+1>>0]=(-2139062144>>8)&255;HEAP8[$89+2>>0]=(-2139062144>>16)&255;HEAP8[$89+3>>0]=-2139062144>>24;
      $90 = (($88) + 4)|0;
      $91 = $90;
      HEAP8[$91>>0]=-2139062144&255;HEAP8[$91+1>>0]=(-2139062144>>8)&255;HEAP8[$91+2>>0]=(-2139062144>>16)&255;HEAP8[$91+3>>0]=-2139062144>>24;
      $$sum44 = (($$sum43) + ($28))|0;
      $92 = (($70) + ($$sum44)|0);
      $93 = $92;
      $94 = $93;
      HEAP8[$94>>0]=-2139062144&255;HEAP8[$94+1>>0]=(-2139062144>>8)&255;HEAP8[$94+2>>0]=(-2139062144>>16)&255;HEAP8[$94+3>>0]=-2139062144>>24;
      $95 = (($93) + 4)|0;
      $96 = $95;
      HEAP8[$96>>0]=-2139062144&255;HEAP8[$96+1>>0]=(-2139062144>>8)&255;HEAP8[$96+2>>0]=(-2139062144>>16)&255;HEAP8[$96+3>>0]=-2139062144>>24;
      $$sum45 = (($$sum44) + ($28))|0;
      $97 = (($70) + ($$sum45)|0);
      $98 = $97;
      $99 = $98;
      HEAP8[$99>>0]=-2139062144&255;HEAP8[$99+1>>0]=(-2139062144>>8)&255;HEAP8[$99+2>>0]=(-2139062144>>16)&255;HEAP8[$99+3>>0]=-2139062144>>24;
      $100 = (($98) + 4)|0;
      $101 = $100;
      HEAP8[$101>>0]=-2139062144&255;HEAP8[$101+1>>0]=(-2139062144>>8)&255;HEAP8[$101+2>>0]=(-2139062144>>16)&255;HEAP8[$101+3>>0]=-2139062144>>24;
      $$sum46 = (($$sum45) + ($28))|0;
      $102 = (($70) + ($$sum46)|0);
      $103 = $102;
      $104 = $103;
      HEAP8[$104>>0]=-2139062144&255;HEAP8[$104+1>>0]=(-2139062144>>8)&255;HEAP8[$104+2>>0]=(-2139062144>>16)&255;HEAP8[$104+3>>0]=-2139062144>>24;
      $105 = (($103) + 4)|0;
      $106 = $105;
      HEAP8[$106>>0]=-2139062144&255;HEAP8[$106+1>>0]=(-2139062144>>8)&255;HEAP8[$106+2>>0]=(-2139062144>>16)&255;HEAP8[$106+3>>0]=-2139062144>>24;
      $$sum47 = (($$sum46) + ($28))|0;
      $107 = (($70) + ($$sum47)|0);
      $108 = $107;
      $109 = $108;
      HEAP8[$109>>0]=-2139062144&255;HEAP8[$109+1>>0]=(-2139062144>>8)&255;HEAP8[$109+2>>0]=(-2139062144>>16)&255;HEAP8[$109+3>>0]=-2139062144>>24;
      $110 = (($108) + 4)|0;
      $111 = $110;
      HEAP8[$111>>0]=-2139062144&255;HEAP8[$111+1>>0]=(-2139062144>>8)&255;HEAP8[$111+2>>0]=(-2139062144>>16)&255;HEAP8[$111+3>>0]=-2139062144>>24;
      $112 = HEAP32[$29>>2]|0;
      $113 = (($112) + ($$sum1$us)|0);
      $114 = $113;
      $115 = $114;
      HEAP8[$115>>0]=-2139062144&255;HEAP8[$115+1>>0]=(-2139062144>>8)&255;HEAP8[$115+2>>0]=(-2139062144>>16)&255;HEAP8[$115+3>>0]=-2139062144>>24;
      $116 = (($114) + 4)|0;
      $117 = $116;
      HEAP8[$117>>0]=-2139062144&255;HEAP8[$117+1>>0]=(-2139062144>>8)&255;HEAP8[$117+2>>0]=(-2139062144>>16)&255;HEAP8[$117+3>>0]=-2139062144>>24;
      $$sum48 = (($$sum1$us) + ($28))|0;
      $118 = (($112) + ($$sum48)|0);
      $119 = $118;
      $120 = $119;
      HEAP8[$120>>0]=-2139062144&255;HEAP8[$120+1>>0]=(-2139062144>>8)&255;HEAP8[$120+2>>0]=(-2139062144>>16)&255;HEAP8[$120+3>>0]=-2139062144>>24;
      $121 = (($119) + 4)|0;
      $122 = $121;
      HEAP8[$122>>0]=-2139062144&255;HEAP8[$122+1>>0]=(-2139062144>>8)&255;HEAP8[$122+2>>0]=(-2139062144>>16)&255;HEAP8[$122+3>>0]=-2139062144>>24;
      $$sum49 = (($$sum48) + ($28))|0;
      $123 = (($112) + ($$sum49)|0);
      $124 = $123;
      $125 = $124;
      HEAP8[$125>>0]=-2139062144&255;HEAP8[$125+1>>0]=(-2139062144>>8)&255;HEAP8[$125+2>>0]=(-2139062144>>16)&255;HEAP8[$125+3>>0]=-2139062144>>24;
      $126 = (($124) + 4)|0;
      $127 = $126;
      HEAP8[$127>>0]=-2139062144&255;HEAP8[$127+1>>0]=(-2139062144>>8)&255;HEAP8[$127+2>>0]=(-2139062144>>16)&255;HEAP8[$127+3>>0]=-2139062144>>24;
      $$sum50 = (($$sum49) + ($28))|0;
      $128 = (($112) + ($$sum50)|0);
      $129 = $128;
      $130 = $129;
      HEAP8[$130>>0]=-2139062144&255;HEAP8[$130+1>>0]=(-2139062144>>8)&255;HEAP8[$130+2>>0]=(-2139062144>>16)&255;HEAP8[$130+3>>0]=-2139062144>>24;
      $131 = (($129) + 4)|0;
      $132 = $131;
      HEAP8[$132>>0]=-2139062144&255;HEAP8[$132+1>>0]=(-2139062144>>8)&255;HEAP8[$132+2>>0]=(-2139062144>>16)&255;HEAP8[$132+3>>0]=-2139062144>>24;
      $$sum51 = (($$sum50) + ($28))|0;
      $133 = (($112) + ($$sum51)|0);
      $134 = $133;
      $135 = $134;
      HEAP8[$135>>0]=-2139062144&255;HEAP8[$135+1>>0]=(-2139062144>>8)&255;HEAP8[$135+2>>0]=(-2139062144>>16)&255;HEAP8[$135+3>>0]=-2139062144>>24;
      $136 = (($134) + 4)|0;
      $137 = $136;
      HEAP8[$137>>0]=-2139062144&255;HEAP8[$137+1>>0]=(-2139062144>>8)&255;HEAP8[$137+2>>0]=(-2139062144>>16)&255;HEAP8[$137+3>>0]=-2139062144>>24;
      $$sum52 = (($$sum51) + ($28))|0;
      $138 = (($112) + ($$sum52)|0);
      $139 = $138;
      $140 = $139;
      HEAP8[$140>>0]=-2139062144&255;HEAP8[$140+1>>0]=(-2139062144>>8)&255;HEAP8[$140+2>>0]=(-2139062144>>16)&255;HEAP8[$140+3>>0]=-2139062144>>24;
      $141 = (($139) + 4)|0;
      $142 = $141;
      HEAP8[$142>>0]=-2139062144&255;HEAP8[$142+1>>0]=(-2139062144>>8)&255;HEAP8[$142+2>>0]=(-2139062144>>16)&255;HEAP8[$142+3>>0]=-2139062144>>24;
      $$sum53 = (($$sum52) + ($28))|0;
      $143 = (($112) + ($$sum53)|0);
      $144 = $143;
      $145 = $144;
      HEAP8[$145>>0]=-2139062144&255;HEAP8[$145+1>>0]=(-2139062144>>8)&255;HEAP8[$145+2>>0]=(-2139062144>>16)&255;HEAP8[$145+3>>0]=-2139062144>>24;
      $146 = (($144) + 4)|0;
      $147 = $146;
      HEAP8[$147>>0]=-2139062144&255;HEAP8[$147+1>>0]=(-2139062144>>8)&255;HEAP8[$147+2>>0]=(-2139062144>>16)&255;HEAP8[$147+3>>0]=-2139062144>>24;
      $$sum54 = (($$sum53) + ($28))|0;
      $148 = (($112) + ($$sum54)|0);
      $149 = $148;
      $150 = $149;
      HEAP8[$150>>0]=-2139062144&255;HEAP8[$150+1>>0]=(-2139062144>>8)&255;HEAP8[$150+2>>0]=(-2139062144>>16)&255;HEAP8[$150+3>>0]=-2139062144>>24;
      $151 = (($149) + 4)|0;
      $152 = $151;
      HEAP8[$152>>0]=-2139062144&255;HEAP8[$152+1>>0]=(-2139062144>>8)&255;HEAP8[$152+2>>0]=(-2139062144>>16)&255;HEAP8[$152+3>>0]=-2139062144>>24;
     }
     $153 = (($iMbX$016$us) + 1)|0;
     $exitcond24 = ($153|0)==($3|0);
     if ($exitcond24) {
      break;
     } else {
      $iMbX$016$us = $153;
     }
    }
   } else {
    $iMbX$016 = 0;
    while(1) {
     $154 = (($iMbX$016) + ($36))|0;
     $155 = (($19) + ($154)|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = ($156<<24>>24)==(0);
     if ($157) {
      $158 = HEAP32[$6>>2]|0;
      $159 = (($158) + 108|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = (($160) + 1)|0;
      HEAP32[$159>>2] = $161;
      $162 = HEAP32[$30>>2]|0;
      $163 = HEAP32[$25>>2]|0;
      $164 = $iMbX$016 << 4;
      $$sum3 = (($164) + ($41))|0;
      $165 = (($163) + ($$sum3)|0);
      $166 = HEAP32[$31>>2]|0;
      $167 = Math_imul($162, $40)|0;
      $$sum4 = (($167) + ($164))|0;
      $168 = (($166) + ($$sum4)|0);
      $169 = HEAP32[$32>>2]|0;
      FUNCTION_TABLE_viiii[$169 & 31]($165,$21,$168,$162);
      $170 = HEAP32[$26>>2]|0;
      $171 = $iMbX$016 << 3;
      $$sum5 = (($171) + ($44))|0;
      $172 = (($170) + ($$sum5)|0);
      $173 = HEAP32[$33>>2]|0;
      $174 = Math_imul($162, $42)|0;
      $175 = $174 >>> 1;
      $$sum6 = (($175) + ($171))|0;
      $176 = (($173) + ($$sum6)|0);
      $177 = HEAP32[$34>>2]|0;
      $178 = $162 >>> 1;
      FUNCTION_TABLE_viiii[$177 & 31]($172,$28,$176,$178);
      $179 = HEAP32[$29>>2]|0;
      $180 = (($179) + ($$sum5)|0);
      $181 = HEAP32[$35>>2]|0;
      $182 = (($181) + ($$sum6)|0);
      $183 = HEAP32[$34>>2]|0;
      FUNCTION_TABLE_viiii[$183 & 31]($180,$28,$182,$178);
     }
     $184 = (($iMbX$016) + 1)|0;
     $exitcond = ($184|0)==($3|0);
     if ($exitcond) {
      break;
     } else {
      $iMbX$016 = $184;
     }
    }
   }
  }
  $185 = (($iMbY$018) + 1)|0;
  $exitcond25 = ($185|0)==($5|0);
  if ($exitcond25) {
   break;
  } else {
   $iMbY$018 = $185;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec12DoMbECMvCopyEPNS_21TagWelsDecoderContextEPNS_10TagPictureES3_iiiPNS_14TagMCRefMemberE($pCtx,$pDec,$pRef,$iMbXy,$iMbX,$iMbY,$pMCRefMem) {
 $pCtx = $pCtx|0;
 $pDec = $pDec|0;
 $pRef = $pRef|0;
 $iMbXy = $iMbXy|0;
 $iMbX = $iMbX|0;
 $iMbY = $iMbY|0;
 $pMCRefMem = $pMCRefMem|0;
 var $$ = 0, $$7 = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum1 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iFullMVx$0 = 0, $iFullMVy$0 = 0, $iMVs = 0, $iPicHeightBottomLimit$0 = 0, $iPicHeightTopLimit$0 = 0, $iPicWidthLeftLimit$0 = 0, $iPicWidthRightLimit$0 = 0, $phitmp = 0, $phitmp3 = 0, $sext = 0, $tmp = 0, $tmp8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iMVs = sp;
 $0 = ($pDec|0)==($pRef|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = $iMbX << 4;
 $2 = $iMbY << 4;
 $3 = (($pDec) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pDec) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pMCRefMem) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = Math_imul($8, $2)|0;
 $$sum = (($9) + ($1))|0;
 $10 = (($6) + ($$sum)|0);
 $11 = (($pDec) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1 >> 1;
 $14 = $2 >> 1;
 $15 = (($pMCRefMem) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($16, $14)|0;
 $$sum1 = (($17) + ($13))|0;
 $18 = (($12) + ($$sum1)|0);
 $19 = (($pDec) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($$sum1)|0);
 $22 = (($pDec) + 52|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 if ($24) {
  $25 = (($pCtx) + 512476|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   $54 = ($26|0)==($pRef|0);
   if ($54) {
    $55 = (($pCtx) + 512348|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $56&65535;
    HEAP16[$iMVs>>1] = $57;
    $58 = (($pCtx) + 512352|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $59&65535;
    $61 = (($iMVs) + 2|0);
    HEAP16[$61>>1] = $60;
    $$pre$phiZ2D = $iMVs;$82 = $56;$88 = $60;
   } else {
    $62 = (($26) + 64|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) - ($4))|0;
    $65 = (($pRef) + 64|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) - ($4))|0;
    $68 = ($63|0)==($4|0);
    if ($68) {
     HEAP16[$iMVs>>1] = 0;
     $139 = 0;$78 = 0;
    } else {
     $69 = (($pCtx) + 512348|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = Math_imul($70, $67)|0;
     $72 = (($71|0) / ($64|0))&-1;
     $phitmp = $72&65535;
     HEAP16[$iMVs>>1] = $phitmp;
     $73 = (($pCtx) + 512352|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = Math_imul($74, $67)|0;
     $76 = (($75|0) / ($64|0))&-1;
     $phitmp3 = $76&65535;
     $139 = $72;$78 = $phitmp3;
    }
    $77 = (($iMVs) + 2|0);
    HEAP16[$77>>1] = $78;
    $$pre$phiZ2D = $iMVs;$82 = $139;$88 = $78;
   }
   HEAP32[$pMCRefMem>>2] = $10;
   $79 = (($pMCRefMem) + 4|0);
   HEAP32[$79>>2] = $18;
   $80 = (($pMCRefMem) + 8|0);
   HEAP32[$80>>2] = $21;
   $81 = $iMbX << 6;
   $sext = $82 << 16;
   $83 = $sext >> 16;
   $84 = (($83) + ($81))|0;
   $85 = $iMbY << 6;
   $86 = (($iMVs) + 2|0);
   $87 = $88 << 16 >> 16;
   $89 = (($87) + ($85))|0;
   $90 = (($pMCRefMem) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($pMCRefMem) + 44|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($pCtx) + 241924|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + 327|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = ($97<<24>>24)==(0);
   if ($98) {
    $iPicHeightBottomLimit$0 = $93;$iPicHeightTopLimit$0 = 0;$iPicWidthLeftLimit$0 = 0;$iPicWidthRightLimit$0 = $91;
   } else {
    $99 = (($pCtx) + 6176|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 << 1;
    $102 = (($pCtx) + 6184|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $103 << 1;
    $105 = (($91) - ($104))|0;
    $106 = (($pCtx) + 6180|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $107 << 1;
    $109 = (($93) - ($108))|0;
    $iPicHeightBottomLimit$0 = $109;$iPicHeightTopLimit$0 = $108;$iPicWidthLeftLimit$0 = $101;$iPicWidthRightLimit$0 = $105;
   }
   $110 = $iPicWidthLeftLimit$0 << 2;
   $111 = (($110) + 8)|0;
   $112 = $iPicHeightTopLimit$0 << 2;
   $113 = (($112) + 8)|0;
   $114 = $iPicHeightBottomLimit$0 << 2;
   $115 = (($114) + -76)|0;
   $116 = ($84|0)<($111|0);
   if ($116) {
    $117 = $84 & -4;
    $118 = ($iPicWidthLeftLimit$0|0)>($117|0);
    $119 = $118 ? $iPicWidthLeftLimit$0 : $117;
    $iFullMVx$0 = $119;
   } else {
    $120 = $iPicWidthRightLimit$0 << 2;
    $121 = (($120) + -76)|0;
    $122 = ($84|0)>($121|0);
    if ($122) {
     $123 = $84 & -4;
     $124 = (($120) + -68)|0;
     $125 = ($124|0)<($123|0);
     $$ = $125 ? $124 : $123;
     $iFullMVx$0 = $$;
    } else {
     $iFullMVx$0 = $84;
    }
   }
   $126 = ($89|0)<($113|0);
   if ($126) {
    $127 = $89 & -4;
    $128 = ($iPicHeightTopLimit$0|0)>($127|0);
    $129 = $128 ? $iPicHeightTopLimit$0 : $127;
    $iFullMVy$0 = $129;
   } else {
    $130 = ($89|0)>($115|0);
    if ($130) {
     $131 = $89 & -4;
     $132 = (($114) + -68)|0;
     $133 = ($132|0)<($131|0);
     $$7 = $133 ? $132 : $131;
     $iFullMVy$0 = $$7;
    } else {
     $iFullMVy$0 = $89;
    }
   }
   $134 = (($iFullMVx$0) - ($81))|0;
   $135 = $134&65535;
   HEAP16[$$pre$phiZ2D>>1] = $135;
   $136 = (($iFullMVy$0) - ($85))|0;
   $137 = $136&65535;
   HEAP16[$86>>1] = $137;
   $138 = (($pCtx) + 316972|0);
   __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$1,$2,$138,16,16,$$pre$phiZ2D);
   STACKTOP = sp;return;
  }
 }
 $28 = (($pMCRefMem) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($pMCRefMem) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = Math_imul($31, $iMbY)|0;
 $tmp = (($32) + ($iMbX))|0;
 $tmp8 = $tmp << 4;
 $33 = (($29) + ($tmp8)|0);
 $34 = (($pCtx) + 317056|0);
 $35 = HEAP32[$34>>2]|0;
 FUNCTION_TABLE_viiii[$35 & 31]($10,$8,$33,$31);
 $36 = (($pMCRefMem) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $iMbY << 3;
 $39 = (($pMCRefMem) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = Math_imul($40, $38)|0;
 $42 = $iMbX << 3;
 $$sum5 = (($41) + ($42))|0;
 $43 = (($37) + ($$sum5)|0);
 $44 = (($pCtx) + 317060|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_viiii[$45 & 31]($18,$46,$43,$40);
 $47 = (($pMCRefMem) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$39>>2]|0;
 $50 = Math_imul($49, $38)|0;
 $$sum6 = (($50) + ($42))|0;
 $51 = (($48) + ($$sum6)|0);
 $52 = HEAP32[$44>>2]|0;
 $53 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_viiii[$52 & 31]($21,$53,$51,$49);
 STACKTOP = sp;return;
}
function __ZN7WelsDec24GetAvilInfoFromCorrectMbEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $exitcond12 = 0, $i$05 = 0, $i1$01 = 0, $iInterMbCorrectNum = 0, $iMbX$07 = 0, $iMbY$08 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $iInterMbCorrectNum = sp;
 $0 = (($pCtx) + 241924|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCtx) + 241932|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 3980|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pCtx) + 512348|0);
 _memset(($10|0),0,192)|0;
 dest=$iInterMbCorrectNum+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $11 = ($5|0)>(0);
 if ($11) {
  $12 = ($3|0)>(0);
  $13 = (($7) + 3908|0);
  $14 = (($7) + 3932|0);
  $15 = (($7) + 3916|0);
  $16 = (($7) + 4008|0);
  $iMbY$08 = 0;
  while(1) {
   if ($12) {
    $17 = Math_imul($iMbY$08, $3)|0;
    $iMbX$07 = 0;
    while(1) {
     $18 = (($iMbX$07) + ($17))|0;
     $19 = (($9) + ($18)|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20<<24>>24)==(0);
     L9: do {
      if (!($21)) {
       $22 = HEAP32[$13>>2]|0;
       $23 = (($22) + ($18<<1)|0);
       $24 = HEAP16[$23>>1]|0;
       $25 = $24 << 16 >> 16;
       $26 = $25 & 504;
       $27 = ($26|0)==(0);
       if (!($27)) {
        switch ($25|0) {
        case 32:  {
         $100 = HEAP32[$14>>2]|0;
         $101 = (($100) + ($18<<4)|0);
         $102 = HEAP8[$101>>0]|0;
         $103 = HEAP32[$15>>2]|0;
         $104 = (($103) + ($18<<6)|0);
         $105 = HEAP16[$104>>1]|0;
         $106 = $105 << 16 >> 16;
         $107 = $102 << 24 >> 24;
         $108 = ((($pCtx) + ($107<<3)|0) + 512348|0);
         $109 = HEAP32[$108>>2]|0;
         $110 = (($109) + ($106))|0;
         HEAP32[$108>>2] = $110;
         $111 = HEAP32[$15>>2]|0;
         $112 = ((($111) + ($18<<6)|0) + 2|0);
         $113 = HEAP16[$112>>1]|0;
         $114 = $113 << 16 >> 16;
         $115 = ((($pCtx) + ($107<<3)|0) + 512352|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (($116) + ($114))|0;
         HEAP32[$115>>2] = $117;
         $118 = ((($pCtx) + ($107<<2)|0) + 5468|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = ((($pCtx) + ($107<<2)|0) + 512476|0);
         HEAP32[$120>>2] = $119;
         $121 = (($iInterMbCorrectNum) + ($107<<2)|0);
         $122 = HEAP32[$121>>2]|0;
         $123 = (($122) + 1)|0;
         HEAP32[$121>>2] = $123;
         $124 = HEAP32[$14>>2]|0;
         $125 = ((($124) + ($18<<4)|0) + 2|0);
         $126 = HEAP8[$125>>0]|0;
         $127 = HEAP32[$15>>2]|0;
         $128 = ((($127) + ($18<<6)|0) + 8|0);
         $129 = HEAP16[$128>>1]|0;
         $130 = $129 << 16 >> 16;
         $131 = $126 << 24 >> 24;
         $132 = ((($pCtx) + ($131<<3)|0) + 512348|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = (($133) + ($130))|0;
         HEAP32[$132>>2] = $134;
         $135 = HEAP32[$15>>2]|0;
         $136 = ((($135) + ($18<<6)|0) + 10|0);
         $137 = HEAP16[$136>>1]|0;
         $138 = $137 << 16 >> 16;
         $139 = ((($pCtx) + ($131<<3)|0) + 512352|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = (($140) + ($138))|0;
         HEAP32[$139>>2] = $141;
         $142 = ((($pCtx) + ($131<<2)|0) + 5468|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = ((($pCtx) + ($131<<2)|0) + 512476|0);
         HEAP32[$144>>2] = $143;
         $145 = (($iInterMbCorrectNum) + ($131<<2)|0);
         $146 = HEAP32[$145>>2]|0;
         $147 = (($146) + 1)|0;
         HEAP32[$145>>2] = $147;
         break L9;
         break;
        }
        case 128: case 64:  {
         $i$05 = 0;
         while(1) {
          $148 = HEAP32[$16>>2]|0;
          $149 = ((($148) + ($18<<2)|0) + ($i$05)|0);
          $150 = HEAP8[$149>>0]|0;
          $151 = $150 << 24 >> 24;
          $152 = $i$05 >>> 1;
          $153 = $152 << 3;
          $154 = $i$05 << 1;
          $155 = $154 & 2;
          $156 = $153 | $155;
          $157 = HEAP32[$14>>2]|0;
          $158 = ((($157) + ($18<<4)|0) + ($156)|0);
          $159 = HEAP8[$158>>0]|0;
          $160 = $159 << 24 >> 24;
          $161 = ((($pCtx) + ($160<<2)|0) + 5468|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ((($pCtx) + ($160<<2)|0) + 512476|0);
          HEAP32[$163>>2] = $162;
          if ((($151|0) == 4)) {
           $259 = HEAP32[$15>>2]|0;
           $260 = ((($259) + ($18<<6)|0) + ($156<<2)|0);
           $261 = HEAP16[$260>>1]|0;
           $262 = $261 << 16 >> 16;
           $263 = ((($pCtx) + ($160<<3)|0) + 512348|0);
           $264 = HEAP32[$263>>2]|0;
           $265 = (($264) + ($262))|0;
           HEAP32[$263>>2] = $265;
           $266 = HEAP32[$15>>2]|0;
           $267 = (((($266) + ($18<<6)|0) + ($156<<2)|0) + 2|0);
           $268 = HEAP16[$267>>1]|0;
           $269 = $268 << 16 >> 16;
           $270 = ((($pCtx) + ($160<<3)|0) + 512352|0);
           $271 = HEAP32[$270>>2]|0;
           $272 = (($271) + ($269))|0;
           HEAP32[$270>>2] = $272;
           $273 = $156 | 1;
           $274 = HEAP32[$15>>2]|0;
           $275 = ((($274) + ($18<<6)|0) + ($273<<2)|0);
           $276 = HEAP16[$275>>1]|0;
           $277 = $276 << 16 >> 16;
           $278 = (($265) + ($277))|0;
           HEAP32[$263>>2] = $278;
           $279 = HEAP32[$15>>2]|0;
           $280 = (((($279) + ($18<<6)|0) + ($273<<2)|0) + 2|0);
           $281 = HEAP16[$280>>1]|0;
           $282 = $281 << 16 >> 16;
           $283 = (($272) + ($282))|0;
           HEAP32[$270>>2] = $283;
           $284 = (($iInterMbCorrectNum) + ($160<<2)|0);
           $285 = HEAP32[$284>>2]|0;
           $286 = (($285) + 2)|0;
           HEAP32[$284>>2] = $286;
          } else if ((($151|0) == 1)) {
           $214 = HEAP32[$15>>2]|0;
           $215 = ((($214) + ($18<<6)|0) + ($156<<2)|0);
           $216 = HEAP16[$215>>1]|0;
           $217 = $216 << 16 >> 16;
           $218 = ((($pCtx) + ($160<<3)|0) + 512348|0);
           $219 = HEAP32[$218>>2]|0;
           $220 = (($219) + ($217))|0;
           HEAP32[$218>>2] = $220;
           $221 = HEAP32[$15>>2]|0;
           $222 = (((($221) + ($18<<6)|0) + ($156<<2)|0) + 2|0);
           $223 = HEAP16[$222>>1]|0;
           $224 = $223 << 16 >> 16;
           $225 = ((($pCtx) + ($160<<3)|0) + 512352|0);
           $226 = HEAP32[$225>>2]|0;
           $227 = (($226) + ($224))|0;
           HEAP32[$225>>2] = $227;
           $228 = (($iInterMbCorrectNum) + ($160<<2)|0);
           $229 = HEAP32[$228>>2]|0;
           $230 = (($229) + 1)|0;
           HEAP32[$228>>2] = $230;
          } else if ((($151|0) == 2)) {
           $231 = HEAP32[$15>>2]|0;
           $232 = ((($231) + ($18<<6)|0) + ($156<<2)|0);
           $233 = HEAP16[$232>>1]|0;
           $234 = $233 << 16 >> 16;
           $235 = ((($pCtx) + ($160<<3)|0) + 512348|0);
           $236 = HEAP32[$235>>2]|0;
           $237 = (($236) + ($234))|0;
           HEAP32[$235>>2] = $237;
           $238 = HEAP32[$15>>2]|0;
           $239 = (((($238) + ($18<<6)|0) + ($156<<2)|0) + 2|0);
           $240 = HEAP16[$239>>1]|0;
           $241 = $240 << 16 >> 16;
           $242 = ((($pCtx) + ($160<<3)|0) + 512352|0);
           $243 = HEAP32[$242>>2]|0;
           $244 = (($243) + ($241))|0;
           HEAP32[$242>>2] = $244;
           $245 = $156 | 4;
           $246 = HEAP32[$15>>2]|0;
           $247 = ((($246) + ($18<<6)|0) + ($245<<2)|0);
           $248 = HEAP16[$247>>1]|0;
           $249 = $248 << 16 >> 16;
           $250 = (($237) + ($249))|0;
           HEAP32[$235>>2] = $250;
           $251 = HEAP32[$15>>2]|0;
           $252 = (((($251) + ($18<<6)|0) + ($245<<2)|0) + 2|0);
           $253 = HEAP16[$252>>1]|0;
           $254 = $253 << 16 >> 16;
           $255 = (($244) + ($254))|0;
           HEAP32[$242>>2] = $255;
           $256 = (($iInterMbCorrectNum) + ($160<<2)|0);
           $257 = HEAP32[$256>>2]|0;
           $258 = (($257) + 2)|0;
           HEAP32[$256>>2] = $258;
          } else if ((($151|0) == 8)) {
           $164 = ((($pCtx) + ($160<<3)|0) + 512348|0);
           $165 = ((($pCtx) + ($160<<3)|0) + 512352|0);
           $166 = HEAP32[$15>>2]|0;
           $167 = ((($166) + ($18<<6)|0) + ($156<<2)|0);
           $168 = HEAP16[$167>>1]|0;
           $169 = $168 << 16 >> 16;
           $170 = HEAP32[$164>>2]|0;
           $171 = (($170) + ($169))|0;
           HEAP32[$164>>2] = $171;
           $172 = HEAP32[$15>>2]|0;
           $173 = (((($172) + ($18<<6)|0) + ($156<<2)|0) + 2|0);
           $174 = HEAP16[$173>>1]|0;
           $175 = $174 << 16 >> 16;
           $176 = HEAP32[$165>>2]|0;
           $177 = (($176) + ($175))|0;
           HEAP32[$165>>2] = $177;
           $178 = $156 | 1;
           $179 = HEAP32[$15>>2]|0;
           $180 = ((($179) + ($18<<6)|0) + ($178<<2)|0);
           $181 = HEAP16[$180>>1]|0;
           $182 = $181 << 16 >> 16;
           $183 = (($171) + ($182))|0;
           HEAP32[$164>>2] = $183;
           $184 = HEAP32[$15>>2]|0;
           $185 = (((($184) + ($18<<6)|0) + ($178<<2)|0) + 2|0);
           $186 = HEAP16[$185>>1]|0;
           $187 = $186 << 16 >> 16;
           $188 = (($177) + ($187))|0;
           HEAP32[$165>>2] = $188;
           $189 = $156 | 4;
           $190 = HEAP32[$15>>2]|0;
           $191 = ((($190) + ($18<<6)|0) + ($189<<2)|0);
           $192 = HEAP16[$191>>1]|0;
           $193 = $192 << 16 >> 16;
           $194 = (($183) + ($193))|0;
           HEAP32[$164>>2] = $194;
           $195 = HEAP32[$15>>2]|0;
           $196 = (((($195) + ($18<<6)|0) + ($189<<2)|0) + 2|0);
           $197 = HEAP16[$196>>1]|0;
           $198 = $197 << 16 >> 16;
           $199 = (($188) + ($198))|0;
           HEAP32[$165>>2] = $199;
           $200 = $156 | 5;
           $201 = HEAP32[$15>>2]|0;
           $202 = ((($201) + ($18<<6)|0) + ($200<<2)|0);
           $203 = HEAP16[$202>>1]|0;
           $204 = $203 << 16 >> 16;
           $205 = (($194) + ($204))|0;
           HEAP32[$164>>2] = $205;
           $206 = HEAP32[$15>>2]|0;
           $207 = (((($206) + ($18<<6)|0) + ($200<<2)|0) + 2|0);
           $208 = HEAP16[$207>>1]|0;
           $209 = $208 << 16 >> 16;
           $210 = (($199) + ($209))|0;
           HEAP32[$165>>2] = $210;
           $211 = (($iInterMbCorrectNum) + ($160<<2)|0);
           $212 = HEAP32[$211>>2]|0;
           $213 = (($212) + 4)|0;
           HEAP32[$211>>2] = $213;
          }
          $287 = (($i$05) + 1)|0;
          $exitcond10 = ($287|0)==(4);
          if ($exitcond10) {
           break;
          } else {
           $i$05 = $287;
          }
         }
         break;
        }
        case 8: case 256:  {
         $28 = HEAP32[$14>>2]|0;
         $29 = (($28) + ($18<<4)|0);
         $30 = HEAP8[$29>>0]|0;
         $31 = HEAP32[$15>>2]|0;
         $32 = (($31) + ($18<<6)|0);
         $33 = HEAP16[$32>>1]|0;
         $34 = $33 << 16 >> 16;
         $35 = $30 << 24 >> 24;
         $36 = ((($pCtx) + ($35<<3)|0) + 512348|0);
         $37 = HEAP32[$36>>2]|0;
         $38 = (($37) + ($34))|0;
         HEAP32[$36>>2] = $38;
         $39 = HEAP32[$15>>2]|0;
         $40 = ((($39) + ($18<<6)|0) + 2|0);
         $41 = HEAP16[$40>>1]|0;
         $42 = $41 << 16 >> 16;
         $43 = ((($pCtx) + ($35<<3)|0) + 512352|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = (($44) + ($42))|0;
         HEAP32[$43>>2] = $45;
         $46 = ((($pCtx) + ($35<<2)|0) + 5468|0);
         $47 = HEAP32[$46>>2]|0;
         $48 = ((($pCtx) + ($35<<2)|0) + 512476|0);
         HEAP32[$48>>2] = $47;
         $49 = (($iInterMbCorrectNum) + ($35<<2)|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($50) + 1)|0;
         HEAP32[$49>>2] = $51;
         break L9;
         break;
        }
        case 16:  {
         $52 = HEAP32[$14>>2]|0;
         $53 = (($52) + ($18<<4)|0);
         $54 = HEAP8[$53>>0]|0;
         $55 = HEAP32[$15>>2]|0;
         $56 = (($55) + ($18<<6)|0);
         $57 = HEAP16[$56>>1]|0;
         $58 = $57 << 16 >> 16;
         $59 = $54 << 24 >> 24;
         $60 = ((($pCtx) + ($59<<3)|0) + 512348|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = (($61) + ($58))|0;
         HEAP32[$60>>2] = $62;
         $63 = HEAP32[$15>>2]|0;
         $64 = ((($63) + ($18<<6)|0) + 2|0);
         $65 = HEAP16[$64>>1]|0;
         $66 = $65 << 16 >> 16;
         $67 = ((($pCtx) + ($59<<3)|0) + 512352|0);
         $68 = HEAP32[$67>>2]|0;
         $69 = (($68) + ($66))|0;
         HEAP32[$67>>2] = $69;
         $70 = ((($pCtx) + ($59<<2)|0) + 5468|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = ((($pCtx) + ($59<<2)|0) + 512476|0);
         HEAP32[$72>>2] = $71;
         $73 = (($iInterMbCorrectNum) + ($59<<2)|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (($74) + 1)|0;
         HEAP32[$73>>2] = $75;
         $76 = HEAP32[$14>>2]|0;
         $77 = ((($76) + ($18<<4)|0) + 8|0);
         $78 = HEAP8[$77>>0]|0;
         $79 = HEAP32[$15>>2]|0;
         $80 = ((($79) + ($18<<6)|0) + 32|0);
         $81 = HEAP16[$80>>1]|0;
         $82 = $81 << 16 >> 16;
         $83 = $78 << 24 >> 24;
         $84 = ((($pCtx) + ($83<<3)|0) + 512348|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = (($85) + ($82))|0;
         HEAP32[$84>>2] = $86;
         $87 = HEAP32[$15>>2]|0;
         $88 = ((($87) + ($18<<6)|0) + 34|0);
         $89 = HEAP16[$88>>1]|0;
         $90 = $89 << 16 >> 16;
         $91 = ((($pCtx) + ($83<<3)|0) + 512352|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = (($92) + ($90))|0;
         HEAP32[$91>>2] = $93;
         $94 = ((($pCtx) + ($83<<2)|0) + 5468|0);
         $95 = HEAP32[$94>>2]|0;
         $96 = ((($pCtx) + ($83<<2)|0) + 512476|0);
         HEAP32[$96>>2] = $95;
         $97 = (($iInterMbCorrectNum) + ($83<<2)|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = (($98) + 1)|0;
         HEAP32[$97>>2] = $99;
         break L9;
         break;
        }
        default: {
         break L9;
        }
        }
       }
      }
     } while(0);
     $288 = (($iMbX$07) + 1)|0;
     $exitcond11 = ($288|0)==($3|0);
     if ($exitcond11) {
      break;
     } else {
      $iMbX$07 = $288;
     }
    }
   }
   $289 = (($iMbY$08) + 1)|0;
   $exitcond12 = ($289|0)==($5|0);
   if ($exitcond12) {
    $i1$01 = 0;
    break;
   } else {
    $iMbY$08 = $289;
   }
  }
 } else {
  $i1$01 = 0;
 }
 while(1) {
  $290 = (($iInterMbCorrectNum) + ($i1$01<<2)|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = ($291|0)==(0);
  if (!($292)) {
   $293 = ((($pCtx) + ($i1$01<<3)|0) + 512348|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = (($294|0) / ($291|0))&-1;
   HEAP32[$293>>2] = $295;
   $296 = ((($pCtx) + ($i1$01<<3)|0) + 512352|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = (($297|0) / ($291|0))&-1;
   HEAP32[$296>>2] = $298;
  }
  $299 = (($i1$01) + 1)|0;
  $exitcond = ($299|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i1$01 = $299;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec21DoErrorConSliceMVCopyEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$sum = 0, $$sum1 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0;
 var $$sum36 = 0, $$sum37 = 0, $$sum38 = 0, $$sum39 = 0, $$sum40 = 0, $$sum41 = 0, $$sum42 = 0, $$sum43 = 0, $$sum44 = 0, $$sum45 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond17 = 0, $iMbX$010 = 0, $iMbY$013 = 0, $sMCRefMem = 0;
 var $tmp = 0, $tmp3 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp;
 $sMCRefMem = sp + 8|0;
 $0 = (($pCtx) + 241924|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCtx) + 5464|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pCtx) + 316852|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pCtx) + 241932|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 3980|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($7) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($9|0)!=(0|0);
 if ($16) {
  $17 = (($9) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($sMCRefMem) + 24|0);
  HEAP32[$19>>2] = $18;
  $20 = (($9) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($sMCRefMem) + 28|0);
  HEAP32[$22>>2] = $21;
  $23 = (($9) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($sMCRefMem) + 12|0);
  HEAP32[$25>>2] = $24;
  $26 = (($9) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($sMCRefMem) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = (($9) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($sMCRefMem) + 20|0);
  HEAP32[$31>>2] = $30;
  $32 = HEAP32[$14>>2]|0;
  $33 = (($sMCRefMem) + 32|0);
  HEAP32[$33>>2] = $32;
  $34 = (($7) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($sMCRefMem) + 36|0);
  HEAP32[$36>>2] = $35;
  $37 = (($7) + 56|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($sMCRefMem) + 40|0);
  HEAP32[$39>>2] = $38;
  $40 = (($7) + 60|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($sMCRefMem) + 44|0);
  HEAP32[$42>>2] = $41;
  $43 = ($7|0)==($9|0);
  if ($43) {
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,14264,$vararg_buffer);
  }
 }
 $44 = ($5|0)>(0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = ($3|0)>(0);
 $46 = (($7) + 16|0);
 $47 = (($7) + 20|0);
 $48 = $15 << 3;
 $49 = $15 >>> 1;
 $50 = (($7) + 24|0);
 $iMbY$013 = 0;
 while(1) {
  if ($45) {
   $51 = Math_imul($iMbY$013, $3)|0;
   $52 = Math_imul($iMbY$013, $15)|0;
   $53 = Math_imul($48, $iMbY$013)|0;
   $54 = $53 >>> 1;
   $iMbX$010 = 0;
   while(1) {
    $55 = (($iMbX$010) + ($51))|0;
    $56 = (($13) + ($55)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ($57<<24>>24)==(0);
    do {
     if ($58) {
      $59 = HEAP32[$6>>2]|0;
      $60 = (($59) + 108|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($61) + 1)|0;
      HEAP32[$60>>2] = $62;
      if ($16) {
       __ZN7WelsDec12DoMbECMvCopyEPNS_21TagWelsDecoderContextEPNS_10TagPictureES3_iiiPNS_14TagMCRefMemberE($pCtx,$7,$9,0,$iMbX$010,$iMbY$013,$sMCRefMem);
       break;
      } else {
       $63 = HEAP32[$46>>2]|0;
       $tmp = (($iMbX$010) + ($52))|0;
       $tmp3 = $tmp << 4;
       $64 = (($63) + ($tmp3)|0);
       dest=$64+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum = (($tmp3) + ($15))|0;
       $65 = (($63) + ($$sum)|0);
       dest=$65+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum18 = (($$sum) + ($15))|0;
       $66 = (($63) + ($$sum18)|0);
       dest=$66+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum19 = (($$sum18) + ($15))|0;
       $67 = (($63) + ($$sum19)|0);
       dest=$67+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum20 = (($$sum19) + ($15))|0;
       $68 = (($63) + ($$sum20)|0);
       dest=$68+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum21 = (($$sum20) + ($15))|0;
       $69 = (($63) + ($$sum21)|0);
       dest=$69+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum22 = (($$sum21) + ($15))|0;
       $70 = (($63) + ($$sum22)|0);
       dest=$70+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum23 = (($$sum22) + ($15))|0;
       $71 = (($63) + ($$sum23)|0);
       dest=$71+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum24 = (($$sum23) + ($15))|0;
       $72 = (($63) + ($$sum24)|0);
       dest=$72+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum25 = (($$sum24) + ($15))|0;
       $73 = (($63) + ($$sum25)|0);
       dest=$73+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum26 = (($$sum25) + ($15))|0;
       $74 = (($63) + ($$sum26)|0);
       dest=$74+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum27 = (($$sum26) + ($15))|0;
       $75 = (($63) + ($$sum27)|0);
       dest=$75+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum28 = (($$sum27) + ($15))|0;
       $76 = (($63) + ($$sum28)|0);
       dest=$76+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum29 = (($$sum28) + ($15))|0;
       $77 = (($63) + ($$sum29)|0);
       dest=$77+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum30 = (($$sum29) + ($15))|0;
       $78 = (($63) + ($$sum30)|0);
       dest=$78+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $$sum31 = (($$sum30) + ($15))|0;
       $79 = (($63) + ($$sum31)|0);
       dest=$79+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=128|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $80 = HEAP32[$47>>2]|0;
       $81 = $iMbX$010 << 3;
       $$sum1 = (($81) + ($54))|0;
       $82 = (($80) + ($$sum1)|0);
       $83 = $82;
       $84 = $83;
       HEAP8[$84>>0]=-2139062144&255;HEAP8[$84+1>>0]=(-2139062144>>8)&255;HEAP8[$84+2>>0]=(-2139062144>>16)&255;HEAP8[$84+3>>0]=-2139062144>>24;
       $85 = (($83) + 4)|0;
       $86 = $85;
       HEAP8[$86>>0]=-2139062144&255;HEAP8[$86+1>>0]=(-2139062144>>8)&255;HEAP8[$86+2>>0]=(-2139062144>>16)&255;HEAP8[$86+3>>0]=-2139062144>>24;
       $$sum32 = (($$sum1) + ($49))|0;
       $87 = (($80) + ($$sum32)|0);
       $88 = $87;
       $89 = $88;
       HEAP8[$89>>0]=-2139062144&255;HEAP8[$89+1>>0]=(-2139062144>>8)&255;HEAP8[$89+2>>0]=(-2139062144>>16)&255;HEAP8[$89+3>>0]=-2139062144>>24;
       $90 = (($88) + 4)|0;
       $91 = $90;
       HEAP8[$91>>0]=-2139062144&255;HEAP8[$91+1>>0]=(-2139062144>>8)&255;HEAP8[$91+2>>0]=(-2139062144>>16)&255;HEAP8[$91+3>>0]=-2139062144>>24;
       $$sum33 = (($$sum32) + ($49))|0;
       $92 = (($80) + ($$sum33)|0);
       $93 = $92;
       $94 = $93;
       HEAP8[$94>>0]=-2139062144&255;HEAP8[$94+1>>0]=(-2139062144>>8)&255;HEAP8[$94+2>>0]=(-2139062144>>16)&255;HEAP8[$94+3>>0]=-2139062144>>24;
       $95 = (($93) + 4)|0;
       $96 = $95;
       HEAP8[$96>>0]=-2139062144&255;HEAP8[$96+1>>0]=(-2139062144>>8)&255;HEAP8[$96+2>>0]=(-2139062144>>16)&255;HEAP8[$96+3>>0]=-2139062144>>24;
       $$sum34 = (($$sum33) + ($49))|0;
       $97 = (($80) + ($$sum34)|0);
       $98 = $97;
       $99 = $98;
       HEAP8[$99>>0]=-2139062144&255;HEAP8[$99+1>>0]=(-2139062144>>8)&255;HEAP8[$99+2>>0]=(-2139062144>>16)&255;HEAP8[$99+3>>0]=-2139062144>>24;
       $100 = (($98) + 4)|0;
       $101 = $100;
       HEAP8[$101>>0]=-2139062144&255;HEAP8[$101+1>>0]=(-2139062144>>8)&255;HEAP8[$101+2>>0]=(-2139062144>>16)&255;HEAP8[$101+3>>0]=-2139062144>>24;
       $$sum35 = (($$sum34) + ($49))|0;
       $102 = (($80) + ($$sum35)|0);
       $103 = $102;
       $104 = $103;
       HEAP8[$104>>0]=-2139062144&255;HEAP8[$104+1>>0]=(-2139062144>>8)&255;HEAP8[$104+2>>0]=(-2139062144>>16)&255;HEAP8[$104+3>>0]=-2139062144>>24;
       $105 = (($103) + 4)|0;
       $106 = $105;
       HEAP8[$106>>0]=-2139062144&255;HEAP8[$106+1>>0]=(-2139062144>>8)&255;HEAP8[$106+2>>0]=(-2139062144>>16)&255;HEAP8[$106+3>>0]=-2139062144>>24;
       $$sum36 = (($$sum35) + ($49))|0;
       $107 = (($80) + ($$sum36)|0);
       $108 = $107;
       $109 = $108;
       HEAP8[$109>>0]=-2139062144&255;HEAP8[$109+1>>0]=(-2139062144>>8)&255;HEAP8[$109+2>>0]=(-2139062144>>16)&255;HEAP8[$109+3>>0]=-2139062144>>24;
       $110 = (($108) + 4)|0;
       $111 = $110;
       HEAP8[$111>>0]=-2139062144&255;HEAP8[$111+1>>0]=(-2139062144>>8)&255;HEAP8[$111+2>>0]=(-2139062144>>16)&255;HEAP8[$111+3>>0]=-2139062144>>24;
       $$sum37 = (($$sum36) + ($49))|0;
       $112 = (($80) + ($$sum37)|0);
       $113 = $112;
       $114 = $113;
       HEAP8[$114>>0]=-2139062144&255;HEAP8[$114+1>>0]=(-2139062144>>8)&255;HEAP8[$114+2>>0]=(-2139062144>>16)&255;HEAP8[$114+3>>0]=-2139062144>>24;
       $115 = (($113) + 4)|0;
       $116 = $115;
       HEAP8[$116>>0]=-2139062144&255;HEAP8[$116+1>>0]=(-2139062144>>8)&255;HEAP8[$116+2>>0]=(-2139062144>>16)&255;HEAP8[$116+3>>0]=-2139062144>>24;
       $$sum38 = (($$sum37) + ($49))|0;
       $117 = (($80) + ($$sum38)|0);
       $118 = $117;
       $119 = $118;
       HEAP8[$119>>0]=-2139062144&255;HEAP8[$119+1>>0]=(-2139062144>>8)&255;HEAP8[$119+2>>0]=(-2139062144>>16)&255;HEAP8[$119+3>>0]=-2139062144>>24;
       $120 = (($118) + 4)|0;
       $121 = $120;
       HEAP8[$121>>0]=-2139062144&255;HEAP8[$121+1>>0]=(-2139062144>>8)&255;HEAP8[$121+2>>0]=(-2139062144>>16)&255;HEAP8[$121+3>>0]=-2139062144>>24;
       $122 = HEAP32[$50>>2]|0;
       $123 = (($122) + ($$sum1)|0);
       $124 = $123;
       $125 = $124;
       HEAP8[$125>>0]=-2139062144&255;HEAP8[$125+1>>0]=(-2139062144>>8)&255;HEAP8[$125+2>>0]=(-2139062144>>16)&255;HEAP8[$125+3>>0]=-2139062144>>24;
       $126 = (($124) + 4)|0;
       $127 = $126;
       HEAP8[$127>>0]=-2139062144&255;HEAP8[$127+1>>0]=(-2139062144>>8)&255;HEAP8[$127+2>>0]=(-2139062144>>16)&255;HEAP8[$127+3>>0]=-2139062144>>24;
       $$sum39 = (($$sum1) + ($49))|0;
       $128 = (($122) + ($$sum39)|0);
       $129 = $128;
       $130 = $129;
       HEAP8[$130>>0]=-2139062144&255;HEAP8[$130+1>>0]=(-2139062144>>8)&255;HEAP8[$130+2>>0]=(-2139062144>>16)&255;HEAP8[$130+3>>0]=-2139062144>>24;
       $131 = (($129) + 4)|0;
       $132 = $131;
       HEAP8[$132>>0]=-2139062144&255;HEAP8[$132+1>>0]=(-2139062144>>8)&255;HEAP8[$132+2>>0]=(-2139062144>>16)&255;HEAP8[$132+3>>0]=-2139062144>>24;
       $$sum40 = (($$sum39) + ($49))|0;
       $133 = (($122) + ($$sum40)|0);
       $134 = $133;
       $135 = $134;
       HEAP8[$135>>0]=-2139062144&255;HEAP8[$135+1>>0]=(-2139062144>>8)&255;HEAP8[$135+2>>0]=(-2139062144>>16)&255;HEAP8[$135+3>>0]=-2139062144>>24;
       $136 = (($134) + 4)|0;
       $137 = $136;
       HEAP8[$137>>0]=-2139062144&255;HEAP8[$137+1>>0]=(-2139062144>>8)&255;HEAP8[$137+2>>0]=(-2139062144>>16)&255;HEAP8[$137+3>>0]=-2139062144>>24;
       $$sum41 = (($$sum40) + ($49))|0;
       $138 = (($122) + ($$sum41)|0);
       $139 = $138;
       $140 = $139;
       HEAP8[$140>>0]=-2139062144&255;HEAP8[$140+1>>0]=(-2139062144>>8)&255;HEAP8[$140+2>>0]=(-2139062144>>16)&255;HEAP8[$140+3>>0]=-2139062144>>24;
       $141 = (($139) + 4)|0;
       $142 = $141;
       HEAP8[$142>>0]=-2139062144&255;HEAP8[$142+1>>0]=(-2139062144>>8)&255;HEAP8[$142+2>>0]=(-2139062144>>16)&255;HEAP8[$142+3>>0]=-2139062144>>24;
       $$sum42 = (($$sum41) + ($49))|0;
       $143 = (($122) + ($$sum42)|0);
       $144 = $143;
       $145 = $144;
       HEAP8[$145>>0]=-2139062144&255;HEAP8[$145+1>>0]=(-2139062144>>8)&255;HEAP8[$145+2>>0]=(-2139062144>>16)&255;HEAP8[$145+3>>0]=-2139062144>>24;
       $146 = (($144) + 4)|0;
       $147 = $146;
       HEAP8[$147>>0]=-2139062144&255;HEAP8[$147+1>>0]=(-2139062144>>8)&255;HEAP8[$147+2>>0]=(-2139062144>>16)&255;HEAP8[$147+3>>0]=-2139062144>>24;
       $$sum43 = (($$sum42) + ($49))|0;
       $148 = (($122) + ($$sum43)|0);
       $149 = $148;
       $150 = $149;
       HEAP8[$150>>0]=-2139062144&255;HEAP8[$150+1>>0]=(-2139062144>>8)&255;HEAP8[$150+2>>0]=(-2139062144>>16)&255;HEAP8[$150+3>>0]=-2139062144>>24;
       $151 = (($149) + 4)|0;
       $152 = $151;
       HEAP8[$152>>0]=-2139062144&255;HEAP8[$152+1>>0]=(-2139062144>>8)&255;HEAP8[$152+2>>0]=(-2139062144>>16)&255;HEAP8[$152+3>>0]=-2139062144>>24;
       $$sum44 = (($$sum43) + ($49))|0;
       $153 = (($122) + ($$sum44)|0);
       $154 = $153;
       $155 = $154;
       HEAP8[$155>>0]=-2139062144&255;HEAP8[$155+1>>0]=(-2139062144>>8)&255;HEAP8[$155+2>>0]=(-2139062144>>16)&255;HEAP8[$155+3>>0]=-2139062144>>24;
       $156 = (($154) + 4)|0;
       $157 = $156;
       HEAP8[$157>>0]=-2139062144&255;HEAP8[$157+1>>0]=(-2139062144>>8)&255;HEAP8[$157+2>>0]=(-2139062144>>16)&255;HEAP8[$157+3>>0]=-2139062144>>24;
       $$sum45 = (($$sum44) + ($49))|0;
       $158 = (($122) + ($$sum45)|0);
       $159 = $158;
       $160 = $159;
       HEAP8[$160>>0]=-2139062144&255;HEAP8[$160+1>>0]=(-2139062144>>8)&255;HEAP8[$160+2>>0]=(-2139062144>>16)&255;HEAP8[$160+3>>0]=-2139062144>>24;
       $161 = (($159) + 4)|0;
       $162 = $161;
       HEAP8[$162>>0]=-2139062144&255;HEAP8[$162+1>>0]=(-2139062144>>8)&255;HEAP8[$162+2>>0]=(-2139062144>>16)&255;HEAP8[$162+3>>0]=-2139062144>>24;
       break;
      }
     }
    } while(0);
    $163 = (($iMbX$010) + 1)|0;
    $exitcond = ($163|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $iMbX$010 = $163;
    }
   }
  }
  $164 = (($iMbY$013) + 1)|0;
  $exitcond17 = ($164|0)==($5|0);
  if ($exitcond17) {
   break;
  } else {
   $iMbY$013 = $164;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec16MarkECFrameAsRefEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN7WelsDec13WelsMarkAsRefEPNS_21TagWelsDecoderContextE($pCtx)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($pCtx) + 5464|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 16|0);
 $5 = (($3) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + 32|0);
 $10 = (($pCtx) + 317112|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($pCtx) + 317116|0);
 _ExpandReferencingPicture($4,$6,$8,$9,$11,$12);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec12NeedErrorConEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bNeedEC$0$off0 = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241924|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($5, $3)|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  $bNeedEC$0$off0 = 0;
  STACKTOP = sp;return ($bNeedEC$0$off0|0);
 }
 $8 = (($pCtx) + 241932|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 3980|0);
 $11 = HEAP32[$10>>2]|0;
 $i$01 = 0;
 while(1) {
  $14 = (($11) + ($i$01)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  $12 = (($i$01) + 1)|0;
  if ($16) {
   $bNeedEC$0$off0 = 1;
   label = 5;
   break;
  }
  $13 = ($12|0)<($6|0);
  if ($13) {
   $i$01 = $12;
  } else {
   $bNeedEC$0$off0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($bNeedEC$0$off0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec17ImplementErrorConEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 242340|0);
 $1 = HEAP32[$0>>2]|0;
 L1: do {
  switch ($1|0) {
  case 7: case 6:  {
   __ZN7WelsDec24GetAvilInfoFromCorrectMbEPNS_21TagWelsDecoderContextE($pCtx);
   __ZN7WelsDec21DoErrorConSliceMVCopyEPNS_21TagWelsDecoderContextE($pCtx);
   break;
  }
  case 0:  {
   $2 = (($pCtx) + 116|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = $3 | 4;
   HEAP32[$2>>2] = $4;
   STACKTOP = sp;return;
   break;
  }
  case 3: case 1:  {
   $5 = (($pCtx) + 5464|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($pCtx) + 316852|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($pCtx) + 241924|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 << 4;
   $14 = (($6) + 32|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($6) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($10) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = Math_imul($19, $12)|0;
   $21 = (($6) + 108|0);
   HEAP32[$21>>2] = $20;
   $22 = HEAP32[$0>>2]|0;
   $23 = ($22|0)==(1);
   if ($23) {
    $24 = (($pCtx) + 241932|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + 12|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = ($27<<24>>24)==(0);
    if ($28) {
     label = 6;
    } else {
     $29 = (($6) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $35 = $30;
    }
   } else {
    label = 6;
   }
   if ((label|0) == 6) {
    $31 = ($8|0)==(0|0);
    $32 = (($6) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    if ($31) {
     $35 = $33;
    } else {
     $43 = (($8) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = Math_imul($13, $15)|0;
     _memcpy(($33|0),($44|0),($45|0))|0;
     $46 = (($6) + 20|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = (($8) + 20|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $12 << 3;
     $51 = $50 & 2147483640;
     $52 = Math_imul($51, $17)|0;
     _memcpy(($47|0),($49|0),($52|0))|0;
     $53 = (($6) + 24|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($8) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     _memcpy(($54|0),($56|0),($52|0))|0;
     break L1;
    }
   }
   $34 = Math_imul($13, $15)|0;
   _memset(($35|0),-128,($34|0))|0;
   $36 = (($6) + 20|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $12 << 3;
   $39 = $38 & 2147483640;
   $40 = Math_imul($39, $17)|0;
   _memset(($37|0),-128,($40|0))|0;
   $41 = (($6) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   _memset(($42|0),-128,($40|0))|0;
   break;
  }
  case 5: case 4: case 2:  {
   __ZN7WelsDec19DoErrorConSliceCopyEPNS_21TagWelsDecoderContextE($pCtx);
   break;
  }
  default: {
  }
  }
 } while(0);
 $57 = (($pCtx) + 116|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 | 32;
 HEAP32[$57>>2] = $59;
 $60 = (($pCtx) + 5464|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 72|0);
 HEAP8[$62>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec7InitFmoEPNS_6TagFmoEPNS_6TagPpsEiiPN10WelsCommon12CMemoryAlignE($pFmo,$pPps,$kiMbWidth,$kiMbHeight,$pMa) {
 $pFmo = $pFmo|0;
 $pPps = $pPps|0;
 $kiMbWidth = $kiMbWidth|0;
 $kiMbHeight = $kiMbHeight|0;
 $pMa = $pMa|0;
 var $$0$i = 0, $$mux$i$i = 0, $$op$i$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i7$i = 0, $exitcond$i714$i = 0, $i$1$i$i = 0, $j$0$i$i = 0, $or$cond$i = 0, $or$cond3$i = 0, $or$cond5$i$i = 0, $or$cond5$i6$i = 0, $or$cond7$i$i = 0, $or$cond9$i$i = 0, $smax10$i$i = 0, $uiGroup$0$i$i = 0, $umax$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pFmo|0)==(0|0);
 $1 = ($pPps|0)==(0|0);
 $or$cond$i = $0 | $1;
 if ($or$cond$i) {
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $2 = (($pFmo) + 4|0);
 $3 = Math_imul($kiMbHeight, $kiMbWidth)|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $5 = HEAP32[$pFmo>>2]|0;
 __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($pMa,$5,14368);
 $6 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($pMa,$3,14368)|0);
 HEAP32[$pFmo>>2] = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 }
 HEAP32[$2>>2] = $3;
 $8 = (($pPps) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)<(2);
 $11 = ($3|0)>(0);
 $or$cond3$i = $10 & $11;
 if ($or$cond3$i) {
  _memset(($6|0),0,($3|0))|0;
  $12 = (($pFmo) + 8|0);
  HEAP32[$12>>2] = 1;
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 $13 = (($pPps) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($pFmo) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14|0)==($16|0);
 if ($17) {
  $18 = (($pFmo) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($9|0)==($19|0);
  if (!($20)) {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   if ((($14|0) == 0)) {
    $21 = ($3|0)<(1);
    $22 = ($9>>>0)>(7);
    $or$cond5$i$i = $21 | $22;
    if ($or$cond5$i$i) {
     $$0$i = 1;
     STACKTOP = sp;return ($$0$i|0);
    } else {
     $i$1$i$i = 0;$uiGroup$0$i$i = 0;
    }
    while(1) {
     $23 = $uiGroup$0$i$i&255;
     $24 = ((($pPps) + ($23<<2)|0) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)>(1);
     $$op$i$i = (0 - ($25))|0;
     $27 = $26 ? $$op$i$i : -1;
     $28 = (($i$1$i$i) + 1)|0;
     $29 = ($3|0)>($28|0);
     $smax10$i$i = $29 ? $3 : $28;
     $30 = (($i$1$i$i) - ($smax10$i$i))|0;
     $31 = ($27>>>0)>($30>>>0);
     $umax$i$i = $31 ? $27 : $30;
     $32 = (0 - ($umax$i$i))|0;
     $j$0$i$i = 0;
     while(1) {
      $33 = (($j$0$i$i) + ($i$1$i$i))|0;
      $34 = HEAP32[$pFmo>>2]|0;
      $35 = (($34) + ($33)|0);
      HEAP8[$35>>0] = $uiGroup$0$i$i;
      $36 = (($j$0$i$i) + 1)|0;
      $exitcond$i$i = ($36|0)==($32|0);
      if ($exitcond$i$i) {
       break;
      } else {
       $j$0$i$i = $36;
      }
     }
     $37 = (($25) + ($i$1$i$i))|0;
     $38 = (($uiGroup$0$i$i) + 1)<<24>>24;
     $39 = $38&255;
     $40 = ($39>>>0)<($9>>>0);
     $41 = ($37|0)<($3|0);
     $or$cond9$i$i = $40 & $41;
     $$mux$i$i = $or$cond9$i$i ? $38 : 0;
     if ($41) {
      $i$1$i$i = $37;$uiGroup$0$i$i = $$mux$i$i;
     } else {
      break;
     }
    }
   } else if ((($14|0) == 1)) {
    $42 = ($3|0)<(1);
    $43 = ($kiMbWidth|0)==(0);
    $or$cond5$i6$i = $42 | $43;
    $44 = ($9>>>0)>(7);
    $or$cond7$i$i = $or$cond5$i6$i | $44;
    if ($or$cond7$i$i) {
     $$0$i = 1;
     STACKTOP = sp;return ($$0$i|0);
    }
    HEAP8[$6>>0] = 0;
    $exitcond$i714$i = ($3|0)==(1);
    if ($exitcond$i714$i) {
     break;
    } else {
     $46 = 1;
    }
    while(1) {
     $$pre$i$i = HEAP32[$pFmo>>2]|0;
     $45 = (($46|0) % ($kiMbWidth|0))&-1;
     $47 = (($46|0) / ($kiMbWidth|0))&-1;
     $48 = Math_imul($47, $9)|0;
     $49 = $48 >>> 1;
     $50 = (($49) + ($45))|0;
     $51 = (($50>>>0) % ($9>>>0))&-1;
     $52 = $51&255;
     $53 = (($$pre$i$i) + ($46)|0);
     HEAP8[$53>>0] = $52;
     $54 = (($46) + 1)|0;
     $exitcond$i7$i = ($54|0)==($3|0);
     if ($exitcond$i7$i) {
      break;
     } else {
      $46 = $54;
     }
    }
   } else {
    $$0$i = 1;
    STACKTOP = sp;return ($$0$i|0);
   }
  }
 } while(0);
 $55 = HEAP32[$8>>2]|0;
 $56 = (($pFmo) + 8|0);
 HEAP32[$56>>2] = $55;
 $57 = HEAP32[$13>>2]|0;
 HEAP32[$15>>2] = $57;
 $$0$i = 0;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZN7WelsDec13UninitFmoListEPNS_6TagFmoEiiPN10WelsCommon12CMemoryAlignE($pFmo,$kiCnt,$kiAvail,$pMa) {
 $pFmo = $pFmo|0;
 $kiCnt = $kiCnt|0;
 $kiAvail = $kiAvail|0;
 $pMa = $pMa|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $iFreeNodes$05 = 0;
 var $iFreeNodes$1 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond2$not = 0, $or$cond6 = 0, $pIter$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pFmo|0)==(0|0);
 $1 = ($kiAvail|0)<(1);
 $or$cond = $0 | $1;
 $2 = ($kiCnt|0)<($kiAvail|0);
 $or$cond2 = $or$cond | $2;
 $or$cond2$not = $or$cond2 ^ 1;
 $3 = ($kiCnt|0)>(0);
 $or$cond6 = $3 & $or$cond2$not;
 if ($or$cond6) {
  $i$04 = 0;$iFreeNodes$05 = 0;$pIter$03 = $pFmo;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $4 = ($pIter$03|0)==(0|0);
  if ($4) {
   $iFreeNodes$1 = $iFreeNodes$05;
  } else {
   $5 = (($pIter$03) + 16|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $iFreeNodes$1 = $iFreeNodes$05;
   } else {
    $8 = HEAP32[$pIter$03>>2]|0;
    $9 = ($8|0)==(0|0);
    if (!($9)) {
     __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($pMa,$8,14344);
     HEAP32[$pIter$03>>2] = 0;
    }
    $10 = (($pIter$03) + 8|0);
    HEAP32[$10>>2] = 0;
    $11 = (($pIter$03) + 12|0);
    HEAP32[$11>>2] = -1;
    $12 = (($pIter$03) + 4|0);
    HEAP32[$12>>2] = 0;
    HEAP8[$5>>0] = 0;
    $13 = (($iFreeNodes$05) + 1)|0;
    $14 = ($13|0)<($kiAvail|0);
    if ($14) {
     $iFreeNodes$1 = $13;
    } else {
     label = 8;
     break;
    }
   }
  }
  $15 = (($pIter$03) + 20|0);
  $16 = (($i$04) + 1)|0;
  $17 = ($16|0)<($kiCnt|0);
  if ($17) {
   $i$04 = $16;$iFreeNodes$05 = $iFreeNodes$1;$pIter$03 = $15;
  } else {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function __ZN7WelsDec14FmoParamUpdateEPNS_6TagFmoEPNS_6TagSpsEPNS_6TagPpsEPiPN10WelsCommon12CMemoryAlignE($pFmo,$pSps,$pPps,$pActiveFmoNum,$pMa) {
 $pFmo = $pFmo|0;
 $pSps = $pSps|0;
 $pPps = $pPps|0;
 $pActiveFmoNum = $pActiveFmoNum|0;
 $pMa = $pMa|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pSps) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pSps) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = (($pPps) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pPps) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($pFmo|0)==(0|0);
 if ($9) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($pFmo) + 16|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if (!($12)) {
  $13 = (($pFmo) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==($4|0);
  if ($15) {
   $16 = (($pFmo) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($6|0);
   if ($18) {
    $19 = (($pFmo) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($8|0);
    if ($21) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $22 = (__ZN7WelsDec7InitFmoEPNS_6TagFmoEPNS_6TagPpsEiiPN10WelsCommon12CMemoryAlignE($pFmo,$pPps,$1,$3,$pMa)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = HEAP8[$10>>0]|0;
 $25 = ($24<<24>>24)==(0);
 if (!($25)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = HEAP32[$pActiveFmoNum>>2]|0;
 $27 = ($26|0)<(256);
 if (!($27)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = (($26) + 1)|0;
 HEAP32[$pActiveFmoNum>>2] = $28;
 HEAP8[$10>>0] = 1;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec9FmoNextMbEPNS_6TagFmoEs($pFmo,$kiMbXy) {
 $pFmo = $pFmo|0;
 $kiMbXy = $kiMbXy|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iNextMb$0 = 0, $or$cond$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pFmo) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pFmo>>2]|0;
 $3 = $kiMbXy << 16 >> 16;
 $4 = ($kiMbXy<<16>>16)<(0);
 L1: do {
  if ($4) {
   $$0 = -1;
  } else {
   $5 = ($3|0)>=($1|0);
   $6 = ($2|0)==(0|0);
   $or$cond$i = $5 | $6;
   if ($or$cond$i) {
    $$0 = -1;
   } else {
    $7 = (($2) + ($3)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-1);
    if ($9) {
     $$0 = -1;
    } else {
     $iNextMb$0 = $kiMbXy;
     while(1) {
      $10 = (($iNextMb$0) + 1)<<16>>16;
      $11 = $10 << 16 >> 16;
      $12 = ($11|0)<($1|0);
      if (!($12)) {
       $$0 = -1;
       break L1;
      }
      $13 = (($2) + ($11)|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==($8<<24>>24);
      if ($15) {
       $$0 = $10;
       break;
      } else {
       $iNextMb$0 = $10;
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec19WelsI4x4LumaPredV_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (0 - ($kiStride))|0;
 $1 = (($pPred) + ($0)|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$pPred>>2] = $2;
 $3 = (($pPred) + ($kiStride)|0);
 HEAP32[$3>>2] = $2;
 $4 = $kiStride << 1;
 $5 = (($pPred) + ($4)|0);
 HEAP32[$5>>2] = $2;
 $$sum = (($4) + ($kiStride))|0;
 $6 = (($pPred) + ($$sum)|0);
 HEAP32[$6>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN7WelsDec19WelsI4x4LumaPredH_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $2 = (($pPred) + -1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = Math_imul($4, 16843009)|0;
 $6 = (($kiStride) + -1)|0;
 $7 = (($pPred) + ($6)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = Math_imul($9, 16843009)|0;
 $11 = (($0) + -1)|0;
 $12 = (($pPred) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = Math_imul($14, 16843009)|0;
 $16 = (($1) + -1)|0;
 $17 = (($pPred) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = Math_imul($19, 16843009)|0;
 HEAP32[$pPred>>2] = $5;
 $21 = (($pPred) + ($kiStride)|0);
 HEAP32[$21>>2] = $10;
 $22 = (($pPred) + ($0)|0);
 HEAP32[$22>>2] = $15;
 $23 = (($pPred) + ($1)|0);
 HEAP32[$23>>2] = $20;
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsI4x4LumaPredDc_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $2 = (($pPred) + -1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($kiStride) + -1)|0;
 $6 = (($pPred) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($0) + -1)|0;
 $10 = (($pPred) + ($9)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($1) + -1)|0;
 $14 = (($pPred) + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (0 - ($kiStride))|0;
 $18 = (($pPred) + ($17)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (1 - ($kiStride))|0;
 $22 = (($pPred) + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (2 - ($kiStride))|0;
 $26 = (($pPred) + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = (3 - ($kiStride))|0;
 $30 = (($pPred) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = (($4) + 4)|0;
 $34 = (($33) + ($8))|0;
 $35 = (($34) + ($12))|0;
 $36 = (($35) + ($16))|0;
 $37 = (($36) + ($20))|0;
 $38 = (($37) + ($24))|0;
 $39 = (($38) + ($28))|0;
 $40 = (($39) + ($32))|0;
 $41 = $40 >>> 3;
 $42 = $41 & 255;
 $43 = Math_imul($42, 16843009)|0;
 HEAP32[$pPred>>2] = $43;
 $44 = (($pPred) + ($kiStride)|0);
 HEAP32[$44>>2] = $43;
 $45 = (($pPred) + ($0)|0);
 HEAP32[$45>>2] = $43;
 $46 = (($pPred) + ($1)|0);
 HEAP32[$46>>2] = $43;
 STACKTOP = sp;return;
}
function __ZN7WelsDec24WelsI4x4LumaPredDcLeft_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $2 = (($pPred) + -1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($kiStride) + -1)|0;
 $6 = (($pPred) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($0) + -1)|0;
 $10 = (($pPred) + ($9)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($1) + -1)|0;
 $14 = (($pPred) + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($4) + 2)|0;
 $18 = (($17) + ($8))|0;
 $19 = (($18) + ($12))|0;
 $20 = (($19) + ($16))|0;
 $21 = $20 >>> 2;
 $22 = $21 & 255;
 $23 = Math_imul($22, 16843009)|0;
 HEAP32[$pPred>>2] = $23;
 $24 = (($pPred) + ($kiStride)|0);
 HEAP32[$24>>2] = $23;
 $25 = (($pPred) + ($0)|0);
 HEAP32[$25>>2] = $23;
 $26 = (($pPred) + ($1)|0);
 HEAP32[$26>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN7WelsDec23WelsI4x4LumaPredDcTop_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $2 = (0 - ($kiStride))|0;
 $3 = (($pPred) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (1 - ($kiStride))|0;
 $7 = (($pPred) + ($6)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (2 - ($kiStride))|0;
 $11 = (($pPred) + ($10)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (3 - ($kiStride))|0;
 $15 = (($pPred) + ($14)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = (($5) + 2)|0;
 $19 = (($18) + ($9))|0;
 $20 = (($19) + ($13))|0;
 $21 = (($20) + ($17))|0;
 $22 = $21 >>> 2;
 $23 = $22 & 255;
 $24 = Math_imul($23, 16843009)|0;
 HEAP32[$pPred>>2] = $24;
 $25 = (($pPred) + ($kiStride)|0);
 HEAP32[$25>>2] = $24;
 $26 = (($pPred) + ($0)|0);
 HEAP32[$26>>2] = $24;
 $27 = (($pPred) + ($1)|0);
 HEAP32[$27>>2] = $24;
 STACKTOP = sp;return;
}
function __ZN7WelsDec22WelsI4x4LumaPredDcNA_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pPred>>2] = -2139062144;
 $0 = (($pPred) + ($kiStride)|0);
 HEAP32[$0>>2] = -2139062144;
 $1 = $kiStride << 1;
 $2 = (($pPred) + ($1)|0);
 HEAP32[$2>>2] = -2139062144;
 $$sum = (($1) + ($kiStride))|0;
 $3 = (($pPred) + ($$sum)|0);
 HEAP32[$3>>2] = -2139062144;
 STACKTOP = sp;return;
}
function __ZN7WelsDec21WelsI4x4LumaPredDDL_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $kuiList$sroa$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $kuiList$sroa$0 = sp;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $2 = (0 - ($kiStride))|0;
 $3 = (($pPred) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $$sum = (1 - ($kiStride))|0;
 $5 = (($pPred) + ($$sum)|0);
 $6 = HEAP8[$5>>0]|0;
 $$sum1 = (2 - ($kiStride))|0;
 $7 = (($pPred) + ($$sum1)|0);
 $8 = HEAP8[$7>>0]|0;
 $$sum2 = (3 - ($kiStride))|0;
 $9 = (($pPred) + ($$sum2)|0);
 $10 = HEAP8[$9>>0]|0;
 $$sum3 = (4 - ($kiStride))|0;
 $11 = (($pPred) + ($$sum3)|0);
 $12 = HEAP8[$11>>0]|0;
 $$sum4 = (5 - ($kiStride))|0;
 $13 = (($pPred) + ($$sum4)|0);
 $14 = HEAP8[$13>>0]|0;
 $$sum5 = (6 - ($kiStride))|0;
 $15 = (($pPred) + ($$sum5)|0);
 $16 = HEAP8[$15>>0]|0;
 $$sum6 = (7 - ($kiStride))|0;
 $17 = (($pPred) + ($$sum6)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $4&255;
 $20 = (($19) + 2)|0;
 $21 = $8&255;
 $22 = (($20) + ($21))|0;
 $23 = $6&255;
 $24 = $23 << 1;
 $25 = (($22) + ($24))|0;
 $26 = $25 >>> 2;
 $27 = $26&255;
 $28 = (($23) + 2)|0;
 $29 = $10&255;
 $30 = (($28) + ($29))|0;
 $31 = $21 << 1;
 $32 = (($30) + ($31))|0;
 $33 = $32 >>> 2;
 $34 = $33&255;
 $35 = (($21) + 2)|0;
 $36 = $12&255;
 $37 = (($35) + ($36))|0;
 $38 = $29 << 1;
 $39 = (($37) + ($38))|0;
 $40 = $39 >>> 2;
 $41 = $40&255;
 $42 = (($29) + 2)|0;
 $43 = $14&255;
 $44 = (($42) + ($43))|0;
 $45 = $36 << 1;
 $46 = (($44) + ($45))|0;
 $47 = $46 >>> 2;
 $48 = $47&255;
 $49 = (($36) + 2)|0;
 $50 = $16&255;
 $51 = (($49) + ($50))|0;
 $52 = $43 << 1;
 $53 = (($51) + ($52))|0;
 $54 = $53 >>> 2;
 $55 = $54&255;
 $56 = (($43) + 2)|0;
 $57 = $18&255;
 $58 = (($56) + ($57))|0;
 $59 = $50 << 1;
 $60 = (($58) + ($59))|0;
 $61 = $60 >>> 2;
 $62 = $61&255;
 $63 = (($50) + 2)|0;
 $64 = (($63) + ($57))|0;
 $65 = $57 << 1;
 $66 = (($64) + ($65))|0;
 $67 = $66 >>> 2;
 $68 = $67&255;
 HEAP8[$kuiList$sroa$0>>0] = $27;
 $69 = (($kuiList$sroa$0) + 1|0);
 HEAP8[$69>>0] = $34;
 $70 = (($kuiList$sroa$0) + 2|0);
 HEAP8[$70>>0] = $41;
 $71 = (($kuiList$sroa$0) + 3|0);
 HEAP8[$71>>0] = $48;
 $72 = (($kuiList$sroa$0) + 4|0);
 HEAP8[$72>>0] = $55;
 $73 = (($kuiList$sroa$0) + 5|0);
 HEAP8[$73>>0] = $62;
 $74 = (($kuiList$sroa$0) + 6|0);
 HEAP8[$74>>0] = $68;
 $75 = HEAP32[$kuiList$sroa$0>>2]|0;
 HEAP32[$pPred>>2] = $75;
 $76 = HEAPU8[$69>>0]|(HEAPU8[$69+1>>0]<<8)|(HEAPU8[$69+2>>0]<<16)|(HEAPU8[$69+3>>0]<<24);
 $77 = (($pPred) + ($kiStride)|0);
 HEAP32[$77>>2] = $76;
 $78 = HEAPU16[$70>>1]|(HEAPU16[$70+2>>1]<<16);
 $79 = (($pPred) + ($0)|0);
 HEAP32[$79>>2] = $78;
 $80 = HEAPU8[$71>>0]|(HEAPU8[$71+1>>0]<<8)|(HEAPU8[$71+2>>0]<<16)|(HEAPU8[$71+3>>0]<<24);
 $81 = (($pPred) + ($1)|0);
 HEAP32[$81>>2] = $80;
 STACKTOP = sp;return;
}
function __ZN7WelsDec24WelsI4x4LumaPredDDLTop_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kuiList$sroa$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $kuiList$sroa$0 = sp;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $2 = (0 - ($kiStride))|0;
 $3 = (($pPred) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $$sum = (1 - ($kiStride))|0;
 $5 = (($pPred) + ($$sum)|0);
 $6 = HEAP8[$5>>0]|0;
 $$sum1 = (2 - ($kiStride))|0;
 $7 = (($pPred) + ($$sum1)|0);
 $8 = HEAP8[$7>>0]|0;
 $$sum2 = (3 - ($kiStride))|0;
 $9 = (($pPred) + ($$sum2)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $4&255;
 $12 = (($11) + 1)|0;
 $13 = $6&255;
 $14 = (($12) + ($13))|0;
 $15 = (($13) + 1)|0;
 $16 = $8&255;
 $17 = (($15) + ($16))|0;
 $18 = (($16) + 1)|0;
 $19 = $10&255;
 $20 = (($18) + ($19))|0;
 $21 = $19 << 1;
 $22 = $21 | 1;
 $23 = (($14) + ($17))|0;
 $24 = $23 >>> 2;
 $25 = $24&255;
 $26 = (($20) + ($17))|0;
 $27 = $26 >>> 2;
 $28 = $27&255;
 $29 = (($22) + ($20))|0;
 $30 = $29 >>> 2;
 $31 = $30&255;
 HEAP8[$kuiList$sroa$0>>0] = $25;
 $32 = (($kuiList$sroa$0) + 1|0);
 HEAP8[$32>>0] = $28;
 $33 = (($kuiList$sroa$0) + 2|0);
 HEAP8[$33>>0] = $31;
 $34 = (($kuiList$sroa$0) + 3|0);
 _memset(($34|0),($10|0),4)|0;
 $35 = HEAP32[$kuiList$sroa$0>>2]|0;
 HEAP32[$pPred>>2] = $35;
 $36 = HEAPU8[$32>>0]|(HEAPU8[$32+1>>0]<<8)|(HEAPU8[$32+2>>0]<<16)|(HEAPU8[$32+3>>0]<<24);
 $37 = (($pPred) + ($kiStride)|0);
 HEAP32[$37>>2] = $36;
 $38 = HEAPU16[$33>>1]|(HEAPU16[$33+2>>1]<<16);
 $39 = (($pPred) + ($0)|0);
 HEAP32[$39>>2] = $38;
 $40 = HEAPU8[$34>>0]|(HEAPU8[$34+1>>0]<<8)|(HEAPU8[$34+2>>0]<<16)|(HEAPU8[$34+3>>0]<<24);
 $41 = (($pPred) + ($1)|0);
 HEAP32[$41>>2] = $40;
 STACKTOP = sp;return;
}
function __ZN7WelsDec21WelsI4x4LumaPredDDR_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $kuiList$sroa$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $kuiList$sroa$0 = sp;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $2 = $kiStride ^ -1;
 $3 = (($pPred) + ($2)|0);
 $4 = (($pPred) + -1|0);
 $5 = HEAP8[$3>>0]|0;
 $6 = HEAP8[$4>>0]|0;
 $$sum = (($kiStride) + -1)|0;
 $7 = (($pPred) + ($$sum)|0);
 $8 = HEAP8[$7>>0]|0;
 $$sum1 = (($0) + -1)|0;
 $9 = (($pPred) + ($$sum1)|0);
 $10 = HEAP8[$9>>0]|0;
 $$sum2 = (($1) + -1)|0;
 $11 = (($pPred) + ($$sum2)|0);
 $12 = HEAP8[$11>>0]|0;
 $$sum3 = (0 - ($kiStride))|0;
 $13 = (($pPred) + ($$sum3)|0);
 $14 = HEAP8[$13>>0]|0;
 $$sum4 = (1 - ($kiStride))|0;
 $15 = (($pPred) + ($$sum4)|0);
 $16 = HEAP8[$15>>0]|0;
 $$sum5 = (2 - ($kiStride))|0;
 $17 = (($pPred) + ($$sum5)|0);
 $18 = HEAP8[$17>>0]|0;
 $$sum6 = (3 - ($kiStride))|0;
 $19 = (($pPred) + ($$sum6)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $5&255;
 $22 = (($21) + 1)|0;
 $23 = $6&255;
 $24 = (($22) + ($23))|0;
 $25 = $14&255;
 $26 = (($25) + ($22))|0;
 $27 = (($25) + 1)|0;
 $28 = $16&255;
 $29 = (($27) + ($28))|0;
 $30 = (($28) + 1)|0;
 $31 = $18&255;
 $32 = (($30) + ($31))|0;
 $33 = (($31) + 1)|0;
 $34 = $20&255;
 $35 = (($33) + ($34))|0;
 $36 = (($23) + 1)|0;
 $37 = $8&255;
 $38 = (($36) + ($37))|0;
 $39 = (($37) + 1)|0;
 $40 = $10&255;
 $41 = (($39) + ($40))|0;
 $42 = (($40) + 1)|0;
 $43 = $12&255;
 $44 = (($42) + ($43))|0;
 $45 = (($26) + ($24))|0;
 $46 = $45 >>> 2;
 $47 = $46&255;
 $48 = (($29) + ($26))|0;
 $49 = $48 >>> 2;
 $50 = $49&255;
 $51 = (($32) + ($29))|0;
 $52 = $51 >>> 2;
 $53 = $52&255;
 $54 = (($35) + ($32))|0;
 $55 = $54 >>> 2;
 $56 = $55&255;
 $57 = (($38) + ($24))|0;
 $58 = $57 >>> 2;
 $59 = $58&255;
 $60 = (($41) + ($38))|0;
 $61 = $60 >>> 2;
 $62 = $61&255;
 $63 = (($44) + ($41))|0;
 $64 = $63 >>> 2;
 $65 = $64&255;
 HEAP8[$kuiList$sroa$0>>0] = $65;
 $66 = (($kuiList$sroa$0) + 1|0);
 HEAP8[$66>>0] = $62;
 $67 = (($kuiList$sroa$0) + 2|0);
 HEAP8[$67>>0] = $59;
 $68 = (($kuiList$sroa$0) + 3|0);
 HEAP8[$68>>0] = $47;
 $69 = (($kuiList$sroa$0) + 4|0);
 HEAP8[$69>>0] = $50;
 $70 = (($kuiList$sroa$0) + 5|0);
 HEAP8[$70>>0] = $53;
 $71 = (($kuiList$sroa$0) + 6|0);
 HEAP8[$71>>0] = $56;
 $72 = HEAPU8[$68>>0]|(HEAPU8[$68+1>>0]<<8)|(HEAPU8[$68+2>>0]<<16)|(HEAPU8[$68+3>>0]<<24);
 HEAP32[$pPred>>2] = $72;
 $73 = HEAPU16[$67>>1]|(HEAPU16[$67+2>>1]<<16);
 $74 = (($pPred) + ($kiStride)|0);
 HEAP32[$74>>2] = $73;
 $75 = HEAPU8[$66>>0]|(HEAPU8[$66+1>>0]<<8)|(HEAPU8[$66+2>>0]<<16)|(HEAPU8[$66+3>>0]<<24);
 $76 = (($pPred) + ($0)|0);
 HEAP32[$76>>2] = $75;
 $77 = HEAP32[$kuiList$sroa$0>>2]|0;
 $78 = (($pPred) + ($1)|0);
 HEAP32[$78>>2] = $77;
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsI4x4LumaPredVL_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $8 = 0, $9 = 0, $kuiList$sroa$0 = 0, $kuiList$sroa$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $kuiList$sroa$0 = sp + 8|0;
 $kuiList$sroa$7 = sp;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $$sum = (0 - ($kiStride))|0;
 $2 = (($pPred) + ($$sum)|0);
 $3 = HEAP8[$2>>0]|0;
 $$sum1 = (1 - ($kiStride))|0;
 $4 = (($pPred) + ($$sum1)|0);
 $5 = HEAP8[$4>>0]|0;
 $$sum2 = (2 - ($kiStride))|0;
 $6 = (($pPred) + ($$sum2)|0);
 $7 = HEAP8[$6>>0]|0;
 $$sum3 = (3 - ($kiStride))|0;
 $8 = (($pPred) + ($$sum3)|0);
 $9 = HEAP8[$8>>0]|0;
 $$sum4 = (4 - ($kiStride))|0;
 $10 = (($pPred) + ($$sum4)|0);
 $11 = HEAP8[$10>>0]|0;
 $$sum5 = (5 - ($kiStride))|0;
 $12 = (($pPred) + ($$sum5)|0);
 $13 = HEAP8[$12>>0]|0;
 $$sum6 = (6 - ($kiStride))|0;
 $14 = (($pPred) + ($$sum6)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $3&255;
 $17 = (($16) + 1)|0;
 $18 = $5&255;
 $19 = (($17) + ($18))|0;
 $20 = (($18) + 1)|0;
 $21 = $7&255;
 $22 = (($20) + ($21))|0;
 $23 = (($21) + 1)|0;
 $24 = $9&255;
 $25 = (($23) + ($24))|0;
 $26 = (($24) + 1)|0;
 $27 = $11&255;
 $28 = (($26) + ($27))|0;
 $29 = (($27) + 1)|0;
 $30 = $13&255;
 $31 = (($29) + ($30))|0;
 $32 = (($30) + 1)|0;
 $33 = $15&255;
 $34 = (($32) + ($33))|0;
 $35 = $19 >>> 1;
 $36 = $35&255;
 $37 = $22 >>> 1;
 $38 = $37&255;
 $39 = $25 >>> 1;
 $40 = $39&255;
 $41 = $28 >>> 1;
 $42 = $41&255;
 $43 = $31 >>> 1;
 $44 = $43&255;
 $45 = (($22) + ($19))|0;
 $46 = $45 >>> 2;
 $47 = $46&255;
 $48 = (($25) + ($22))|0;
 $49 = $48 >>> 2;
 $50 = $49&255;
 $51 = (($28) + ($25))|0;
 $52 = $51 >>> 2;
 $53 = $52&255;
 $54 = (($31) + ($28))|0;
 $55 = $54 >>> 2;
 $56 = $55&255;
 $57 = (($34) + ($31))|0;
 $58 = $57 >>> 2;
 $59 = $58&255;
 HEAP8[$kuiList$sroa$0>>0] = $36;
 $60 = (($kuiList$sroa$0) + 1|0);
 HEAP8[$60>>0] = $38;
 $61 = (($kuiList$sroa$0) + 2|0);
 HEAP8[$61>>0] = $40;
 $62 = (($kuiList$sroa$0) + 3|0);
 HEAP8[$62>>0] = $42;
 $63 = (($kuiList$sroa$0) + 4|0);
 HEAP8[$63>>0] = $44;
 HEAP8[$kuiList$sroa$7>>0] = $47;
 $64 = (($kuiList$sroa$7) + 1|0);
 HEAP8[$64>>0] = $50;
 $65 = (($kuiList$sroa$7) + 2|0);
 HEAP8[$65>>0] = $53;
 $66 = (($kuiList$sroa$7) + 3|0);
 HEAP8[$66>>0] = $56;
 $67 = (($kuiList$sroa$7) + 4|0);
 HEAP8[$67>>0] = $59;
 $68 = HEAP32[$kuiList$sroa$0>>2]|0;
 HEAP32[$pPred>>2] = $68;
 $69 = HEAP32[$kuiList$sroa$7>>2]|0;
 $70 = (($pPred) + ($kiStride)|0);
 HEAP32[$70>>2] = $69;
 $71 = HEAPU8[$60>>0]|(HEAPU8[$60+1>>0]<<8)|(HEAPU8[$60+2>>0]<<16)|(HEAPU8[$60+3>>0]<<24);
 $72 = (($pPred) + ($0)|0);
 HEAP32[$72>>2] = $71;
 $73 = HEAPU8[$64>>0]|(HEAPU8[$64+1>>0]<<8)|(HEAPU8[$64+2>>0]<<16)|(HEAPU8[$64+3>>0]<<24);
 $74 = (($pPred) + ($1)|0);
 HEAP32[$74>>2] = $73;
 STACKTOP = sp;return;
}
function __ZN7WelsDec23WelsI4x4LumaPredVLTop_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kuiList$sroa$0 = 0, $kuiList$sroa$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $kuiList$sroa$0 = sp + 8|0;
 $kuiList$sroa$7 = sp;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $$sum = (0 - ($kiStride))|0;
 $2 = (($pPred) + ($$sum)|0);
 $3 = HEAP8[$2>>0]|0;
 $$sum1 = (1 - ($kiStride))|0;
 $4 = (($pPred) + ($$sum1)|0);
 $5 = HEAP8[$4>>0]|0;
 $$sum2 = (2 - ($kiStride))|0;
 $6 = (($pPred) + ($$sum2)|0);
 $7 = HEAP8[$6>>0]|0;
 $$sum3 = (3 - ($kiStride))|0;
 $8 = (($pPred) + ($$sum3)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $3&255;
 $11 = (($10) + 1)|0;
 $12 = $5&255;
 $13 = (($11) + ($12))|0;
 $14 = (($12) + 1)|0;
 $15 = $7&255;
 $16 = (($14) + ($15))|0;
 $17 = (($15) + 1)|0;
 $18 = $9&255;
 $19 = (($17) + ($18))|0;
 $20 = $18 << 1;
 $21 = $20 | 1;
 $22 = $13 >>> 1;
 $23 = $22&255;
 $24 = $16 >>> 1;
 $25 = $24&255;
 $26 = $19 >>> 1;
 $27 = $26&255;
 $28 = (($16) + ($13))|0;
 $29 = $28 >>> 2;
 $30 = $29&255;
 $31 = (($19) + ($16))|0;
 $32 = $31 >>> 2;
 $33 = $32&255;
 $34 = (($21) + ($19))|0;
 $35 = $34 >>> 2;
 $36 = $35&255;
 HEAP8[$kuiList$sroa$0>>0] = $23;
 $37 = (($kuiList$sroa$0) + 1|0);
 HEAP8[$37>>0] = $25;
 $38 = (($kuiList$sroa$0) + 2|0);
 HEAP8[$38>>0] = $27;
 $39 = (($kuiList$sroa$0) + 3|0);
 HEAP8[$39>>0] = $9;
 $40 = (($kuiList$sroa$0) + 4|0);
 HEAP8[$40>>0] = $9;
 HEAP8[$kuiList$sroa$7>>0] = $30;
 $41 = (($kuiList$sroa$7) + 1|0);
 HEAP8[$41>>0] = $33;
 $42 = (($kuiList$sroa$7) + 2|0);
 HEAP8[$42>>0] = $36;
 $43 = (($kuiList$sroa$7) + 3|0);
 HEAP8[$43>>0] = $9;
 $44 = (($kuiList$sroa$7) + 4|0);
 HEAP8[$44>>0] = $9;
 $45 = HEAP32[$kuiList$sroa$0>>2]|0;
 HEAP32[$pPred>>2] = $45;
 $46 = HEAP32[$kuiList$sroa$7>>2]|0;
 $47 = (($pPred) + ($kiStride)|0);
 HEAP32[$47>>2] = $46;
 $48 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8)|(HEAPU8[$37+2>>0]<<16)|(HEAPU8[$37+3>>0]<<24);
 $49 = (($pPred) + ($0)|0);
 HEAP32[$49>>2] = $48;
 $50 = HEAPU8[$41>>0]|(HEAPU8[$41+1>>0]<<8)|(HEAPU8[$41+2>>0]<<16)|(HEAPU8[$41+3>>0]<<24);
 $51 = (($pPred) + ($1)|0);
 HEAP32[$51>>2] = $50;
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsI4x4LumaPredVR_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $kuiList$sroa$0 = 0, $kuiList$sroa$7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $kuiList$sroa$0 = sp + 8|0;
 $kuiList$sroa$7 = sp;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $2 = (0 - ($kiStride))|0;
 $3 = $kiStride ^ -1;
 $4 = (($pPred) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = (($pPred) + -1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($kiStride) + -1)|0;
 $9 = (($pPred) + ($8)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = (($0) + -1)|0;
 $12 = (($pPred) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (($pPred) + ($2)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = (1 - ($kiStride))|0;
 $17 = (($pPred) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = (2 - ($kiStride))|0;
 $20 = (($pPred) + ($19)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = (3 - ($kiStride))|0;
 $23 = (($pPred) + ($22)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $5&255;
 $26 = (($25) + 1)|0;
 $27 = $15&255;
 $28 = (($26) + ($27))|0;
 $29 = $28 >>> 1;
 $30 = $29&255;
 $31 = (($27) + 1)|0;
 $32 = $18&255;
 $33 = (($31) + ($32))|0;
 $34 = $33 >>> 1;
 $35 = $34&255;
 $36 = (($32) + 1)|0;
 $37 = $21&255;
 $38 = (($36) + ($37))|0;
 $39 = $38 >>> 1;
 $40 = $39&255;
 $41 = (($37) + 1)|0;
 $42 = $24&255;
 $43 = (($41) + ($42))|0;
 $44 = $43 >>> 1;
 $45 = $44&255;
 $46 = $7&255;
 $47 = (($46) + 2)|0;
 $48 = $25 << 1;
 $49 = (($47) + ($48))|0;
 $50 = (($49) + ($27))|0;
 $51 = $50 >>> 2;
 $52 = $51&255;
 $53 = (($25) + 2)|0;
 $54 = $27 << 1;
 $55 = (($54) + ($53))|0;
 $56 = (($55) + ($32))|0;
 $57 = $56 >>> 2;
 $58 = $57&255;
 $59 = (($27) + 2)|0;
 $60 = $32 << 1;
 $61 = (($59) + ($60))|0;
 $62 = (($61) + ($37))|0;
 $63 = $62 >>> 2;
 $64 = $63&255;
 $65 = (($32) + 2)|0;
 $66 = $37 << 1;
 $67 = (($65) + ($66))|0;
 $68 = (($67) + ($42))|0;
 $69 = $68 >>> 2;
 $70 = $69&255;
 $71 = $46 << 1;
 $72 = (($71) + ($53))|0;
 $73 = $10&255;
 $74 = (($72) + ($73))|0;
 $75 = $74 >>> 2;
 $76 = $75&255;
 $77 = $73 << 1;
 $78 = (($77) + ($47))|0;
 $79 = $13&255;
 $80 = (($78) + ($79))|0;
 $81 = $80 >>> 2;
 $82 = $81&255;
 HEAP8[$kuiList$sroa$0>>0] = $76;
 $83 = (($kuiList$sroa$0) + 1|0);
 HEAP8[$83>>0] = $30;
 $84 = (($kuiList$sroa$0) + 2|0);
 HEAP8[$84>>0] = $35;
 $85 = (($kuiList$sroa$0) + 3|0);
 HEAP8[$85>>0] = $40;
 $86 = (($kuiList$sroa$0) + 4|0);
 HEAP8[$86>>0] = $45;
 HEAP8[$kuiList$sroa$7>>0] = $82;
 $87 = (($kuiList$sroa$7) + 1|0);
 HEAP8[$87>>0] = $52;
 $88 = (($kuiList$sroa$7) + 2|0);
 HEAP8[$88>>0] = $58;
 $89 = (($kuiList$sroa$7) + 3|0);
 HEAP8[$89>>0] = $64;
 $90 = (($kuiList$sroa$7) + 4|0);
 HEAP8[$90>>0] = $70;
 $91 = HEAPU8[$83>>0]|(HEAPU8[$83+1>>0]<<8)|(HEAPU8[$83+2>>0]<<16)|(HEAPU8[$83+3>>0]<<24);
 HEAP32[$pPred>>2] = $91;
 $92 = HEAPU8[$87>>0]|(HEAPU8[$87+1>>0]<<8)|(HEAPU8[$87+2>>0]<<16)|(HEAPU8[$87+3>>0]<<24);
 $93 = (($pPred) + ($kiStride)|0);
 HEAP32[$93>>2] = $92;
 $94 = HEAP32[$kuiList$sroa$0>>2]|0;
 $95 = (($pPred) + ($0)|0);
 HEAP32[$95>>2] = $94;
 $96 = HEAP32[$kuiList$sroa$7>>2]|0;
 $97 = (($pPred) + ($1)|0);
 HEAP32[$97>>2] = $96;
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsI4x4LumaPredHU_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kuiList = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $kuiList = sp;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $2 = (($pPred) + -1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($kiStride) + -1)|0;
 $5 = (($pPred) + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($0) + -1)|0;
 $8 = (($pPred) + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($1) + -1)|0;
 $11 = (($pPred) + ($10)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $3&255;
 $14 = (($13) + 1)|0;
 $15 = $6&255;
 $16 = (($14) + ($15))|0;
 $17 = (($15) + 1)|0;
 $18 = $9&255;
 $19 = (($17) + ($18))|0;
 $20 = (($18) + 1)|0;
 $21 = $12&255;
 $22 = (($20) + ($21))|0;
 $23 = $16 >>> 1;
 $24 = $23&255;
 $25 = (($19) + ($16))|0;
 $26 = $25 >>> 2;
 $27 = $26&255;
 $28 = $19 >>> 1;
 $29 = $28&255;
 $30 = (($22) + ($19))|0;
 $31 = $30 >>> 2;
 $32 = $31&255;
 $33 = $22 >>> 1;
 $34 = $33&255;
 $35 = (($22) + 1)|0;
 $36 = $21 << 1;
 $37 = (($35) + ($36))|0;
 $38 = $37 >>> 2;
 $39 = $38&255;
 HEAP8[$kuiList>>0] = $24;
 $40 = (($kuiList) + 1|0);
 HEAP8[$40>>0] = $27;
 $41 = (($kuiList) + 2|0);
 HEAP8[$41>>0] = $29;
 $42 = (($kuiList) + 3|0);
 HEAP8[$42>>0] = $32;
 $43 = (($kuiList) + 4|0);
 HEAP8[$43>>0] = $34;
 $44 = (($kuiList) + 5|0);
 HEAP8[$44>>0] = $39;
 $45 = (($kuiList) + 6|0);
 _memset(($45|0),($12|0),4)|0;
 $46 = HEAP32[$kuiList>>2]|0;
 HEAP32[$pPred>>2] = $46;
 $47 = HEAPU16[$41>>1]|(HEAPU16[$41+2>>1]<<16);
 $48 = (($pPred) + ($kiStride)|0);
 HEAP32[$48>>2] = $47;
 $49 = HEAP32[$43>>2]|0;
 $50 = (($pPred) + ($0)|0);
 HEAP32[$50>>2] = $49;
 $51 = HEAPU16[$45>>1]|(HEAPU16[$45+2>>1]<<16);
 $52 = (($pPred) + ($1)|0);
 HEAP32[$52>>2] = $51;
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsI4x4LumaPredHD_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $kuiList = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $kuiList = sp;
 $0 = $kiStride << 1;
 $1 = (($0) + ($kiStride))|0;
 $2 = $kiStride ^ -1;
 $3 = (($pPred) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($pPred) + -1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($kiStride) + -1)|0;
 $8 = (($pPred) + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($0) + -1)|0;
 $11 = (($pPred) + ($10)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = (($1) + -1)|0;
 $14 = (($pPred) + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = (0 - ($kiStride))|0;
 $17 = (($pPred) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = (1 - ($kiStride))|0;
 $20 = (($pPred) + ($19)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = (2 - ($kiStride))|0;
 $23 = (($pPred) + ($22)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $4&255;
 $26 = (($25) + 1)|0;
 $27 = $6&255;
 $28 = (($26) + ($27))|0;
 $29 = $18&255;
 $30 = (($29) + ($26))|0;
 $31 = (($29) + 1)|0;
 $32 = $21&255;
 $33 = (($31) + ($32))|0;
 $34 = (($32) + 1)|0;
 $35 = $24&255;
 $36 = (($34) + ($35))|0;
 $37 = (($27) + 1)|0;
 $38 = $9&255;
 $39 = (($37) + ($38))|0;
 $40 = (($38) + 1)|0;
 $41 = $12&255;
 $42 = (($40) + ($41))|0;
 $43 = (($41) + 1)|0;
 $44 = $15&255;
 $45 = (($43) + ($44))|0;
 $46 = $28 >>> 1;
 $47 = $46&255;
 $48 = (($30) + ($28))|0;
 $49 = $48 >>> 2;
 $50 = $49&255;
 $51 = (($33) + ($30))|0;
 $52 = $51 >>> 2;
 $53 = $52&255;
 $54 = (($36) + ($33))|0;
 $55 = $54 >>> 2;
 $56 = $55&255;
 $57 = $39 >>> 1;
 $58 = $57&255;
 $59 = (($39) + ($28))|0;
 $60 = $59 >>> 2;
 $61 = $60&255;
 $62 = $42 >>> 1;
 $63 = $62&255;
 $64 = (($42) + ($39))|0;
 $65 = $64 >>> 2;
 $66 = $65&255;
 $67 = $45 >>> 1;
 $68 = $67&255;
 $69 = (($45) + ($42))|0;
 $70 = $69 >>> 2;
 $71 = $70&255;
 HEAP8[$kuiList>>0] = $68;
 $72 = (($kuiList) + 1|0);
 HEAP8[$72>>0] = $71;
 $73 = (($kuiList) + 2|0);
 HEAP8[$73>>0] = $63;
 $74 = (($kuiList) + 3|0);
 HEAP8[$74>>0] = $66;
 $75 = (($kuiList) + 4|0);
 HEAP8[$75>>0] = $58;
 $76 = (($kuiList) + 5|0);
 HEAP8[$76>>0] = $61;
 $77 = (($kuiList) + 6|0);
 HEAP8[$77>>0] = $47;
 $78 = (($kuiList) + 7|0);
 HEAP8[$78>>0] = $50;
 $79 = (($kuiList) + 8|0);
 HEAP8[$79>>0] = $53;
 $80 = (($kuiList) + 9|0);
 HEAP8[$80>>0] = $56;
 $81 = HEAPU16[$77>>1]|(HEAPU16[$77+2>>1]<<16);
 HEAP32[$pPred>>2] = $81;
 $82 = HEAP32[$75>>2]|0;
 $83 = (($pPred) + ($kiStride)|0);
 HEAP32[$83>>2] = $82;
 $84 = HEAPU16[$73>>1]|(HEAPU16[$73+2>>1]<<16);
 $85 = (($pPred) + ($0)|0);
 HEAP32[$85>>2] = $84;
 $86 = HEAP32[$kuiList>>2]|0;
 $87 = (($pPred) + ($1)|0);
 HEAP32[$87>>2] = $86;
 STACKTOP = sp;return;
}
function __ZN7WelsDec19WelsI8x8LumaPredV_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$mask = 0, $$mask10 = 0, $$mask11 = 0, $$mask12 = 0, $$mask13 = 0, $$mask14 = 0, $$mask9 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $uiPixelFilterT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiPixelFilterT = sp;
 $0 = (0 - ($kiStride))|0;
 if ($bTLAvail) {
  $1 = $kiStride ^ -1;
  $2 = (($pPred) + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (($pPred) + ($0)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $7 << 1;
  $9 = (($8) + ($4))|0;
  $10 = (1 - ($kiStride))|0;
  $11 = (($pPred) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (($9) + ($13))|0;
  $$pre$phiZ2D = $1;$$sink1 = $14;
 } else {
  $15 = (($pPred) + ($0)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17*3)|0;
  $19 = (1 - ($kiStride))|0;
  $20 = (($pPred) + ($19)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = (($18) + ($22))|0;
  $$pre = $kiStride ^ -1;
  $$pre$phiZ2D = $$pre;$$sink1 = $23;
 }
 $24 = (($$sink1) + 2)|0;
 $25 = $24 >>> 2;
 $26 = $25&255;
 HEAP8[$uiPixelFilterT>>0] = $26;
 $27 = (($$pre$phiZ2D) + 1)|0;
 $28 = (($pPred) + ($27)|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = (1 - ($kiStride))|0;
 $32 = (($pPred) + ($31)|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 << 1;
 $36 = (2 - ($kiStride))|0;
 $37 = (($pPred) + ($36)|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = (($30) + 2)|0;
 $41 = (($40) + ($35))|0;
 $42 = (($41) + ($39))|0;
 $43 = $42 >>> 2;
 $44 = $43&255;
 $45 = (($uiPixelFilterT) + 1|0);
 HEAP8[$45>>0] = $44;
 $46 = (($$pre$phiZ2D) + 2)|0;
 $47 = (($pPred) + ($46)|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $39 << 1;
 $51 = (3 - ($kiStride))|0;
 $52 = (($pPred) + ($51)|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = (($49) + 2)|0;
 $56 = (($55) + ($50))|0;
 $57 = (($56) + ($54))|0;
 $58 = $57 >>> 2;
 $59 = $58&255;
 $60 = (($uiPixelFilterT) + 2|0);
 HEAP8[$60>>0] = $59;
 $61 = (($$pre$phiZ2D) + 3)|0;
 $62 = (($pPred) + ($61)|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $54 << 1;
 $66 = (4 - ($kiStride))|0;
 $67 = (($pPred) + ($66)|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = (($64) + 2)|0;
 $71 = (($70) + ($65))|0;
 $72 = (($71) + ($69))|0;
 $73 = $72 >>> 2;
 $74 = $73&255;
 $75 = (($uiPixelFilterT) + 3|0);
 HEAP8[$75>>0] = $74;
 $76 = (($$pre$phiZ2D) + 4)|0;
 $77 = (($pPred) + ($76)|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $69 << 1;
 $81 = (5 - ($kiStride))|0;
 $82 = (($pPred) + ($81)|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = (($79) + 2)|0;
 $86 = (($85) + ($80))|0;
 $87 = (($86) + ($84))|0;
 $88 = $87 >>> 2;
 $89 = $88&255;
 $90 = (($uiPixelFilterT) + 4|0);
 HEAP8[$90>>0] = $89;
 $91 = (($$pre$phiZ2D) + 5)|0;
 $92 = (($pPred) + ($91)|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $84 << 1;
 $96 = (6 - ($kiStride))|0;
 $97 = (($pPred) + ($96)|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = (($94) + 2)|0;
 $101 = (($100) + ($95))|0;
 $102 = (($101) + ($99))|0;
 $103 = $102 >>> 2;
 $104 = $103&255;
 $105 = (($uiPixelFilterT) + 5|0);
 HEAP8[$105>>0] = $104;
 $106 = (($$pre$phiZ2D) + 6)|0;
 $107 = (($pPred) + ($106)|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 $110 = $99 << 1;
 $111 = (7 - ($kiStride))|0;
 $112 = (($pPred) + ($111)|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = (($109) + 2)|0;
 $116 = (($115) + ($110))|0;
 $117 = (($116) + ($114))|0;
 $118 = $117 >>> 2;
 $119 = $118&255;
 $120 = (($uiPixelFilterT) + 6|0);
 HEAP8[$120>>0] = $119;
 if ($bTRAvail) {
  $121 = $114 << 1;
  $122 = (($121) + ($99))|0;
  $123 = (8 - ($kiStride))|0;
  $124 = (($pPred) + ($123)|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = (($122) + ($126))|0;
  $$sink2 = $127;
 } else {
  $128 = ($114*3)|0;
  $129 = (($128) + ($99))|0;
  $$sink2 = $129;
 }
 $130 = (($$sink2) + 2)|0;
 $131 = $130 >>> 2;
 $132 = $131&255;
 $133 = (($uiPixelFilterT) + 7|0);
 HEAP8[$133>>0] = $132;
 $$mask = $131 & 255;
 $134 = (_bitshift64Shl(($$mask|0),0,8)|0);
 $135 = tempRet0;
 $$mask9 = $118 & 255;
 $136 = $$mask9 | $134;
 $137 = (_bitshift64Shl(($136|0),($135|0),8)|0);
 $138 = tempRet0;
 $$mask10 = $103 & 255;
 $139 = $$mask10 | $137;
 $140 = (_bitshift64Shl(($139|0),($138|0),8)|0);
 $141 = tempRet0;
 $$mask11 = $88 & 255;
 $142 = $$mask11 | $140;
 $143 = (_bitshift64Shl(($142|0),($141|0),8)|0);
 $144 = tempRet0;
 $$mask12 = $73 & 255;
 $145 = $$mask12 | $143;
 $146 = (_bitshift64Shl(($145|0),($144|0),8)|0);
 $147 = tempRet0;
 $$mask13 = $58 & 255;
 $148 = $$mask13 | $146;
 $149 = (_bitshift64Shl(($148|0),($147|0),8)|0);
 $150 = tempRet0;
 $$mask14 = $43 & 255;
 $151 = $$mask14 | $149;
 $152 = (_bitshift64Shl(($151|0),($150|0),8)|0);
 $153 = tempRet0;
 $154 = HEAP8[$uiPixelFilterT>>0]|0;
 $155 = $154&255;
 $156 = $155 | $152;
 $157 = $pPred;
 $158 = $157;
 HEAP32[$158>>2] = $156;
 $159 = (($157) + 4)|0;
 $160 = $159;
 HEAP32[$160>>2] = $153;
 $161 = (($pPred) + ($kiStride)|0);
 $162 = $161;
 $163 = $162;
 HEAP32[$163>>2] = $156;
 $164 = (($162) + 4)|0;
 $165 = $164;
 HEAP32[$165>>2] = $153;
 $166 = $kiStride << 1;
 $167 = (($pPred) + ($166)|0);
 $168 = $167;
 $169 = $168;
 HEAP32[$169>>2] = $156;
 $170 = (($168) + 4)|0;
 $171 = $170;
 HEAP32[$171>>2] = $153;
 $172 = ($kiStride*3)|0;
 $173 = (($pPred) + ($172)|0);
 $174 = $173;
 $175 = $174;
 HEAP32[$175>>2] = $156;
 $176 = (($174) + 4)|0;
 $177 = $176;
 HEAP32[$177>>2] = $153;
 $178 = $kiStride << 2;
 $179 = (($pPred) + ($178)|0);
 $180 = $179;
 $181 = $180;
 HEAP32[$181>>2] = $156;
 $182 = (($180) + 4)|0;
 $183 = $182;
 HEAP32[$183>>2] = $153;
 $184 = ($kiStride*5)|0;
 $185 = (($pPred) + ($184)|0);
 $186 = $185;
 $187 = $186;
 HEAP32[$187>>2] = $156;
 $188 = (($186) + 4)|0;
 $189 = $188;
 HEAP32[$189>>2] = $153;
 $190 = ($kiStride*6)|0;
 $191 = (($pPred) + ($190)|0);
 $192 = $191;
 $193 = $192;
 HEAP32[$193>>2] = $156;
 $194 = (($192) + 4)|0;
 $195 = $194;
 HEAP32[$195>>2] = $153;
 $196 = ($kiStride*7)|0;
 $197 = (($pPred) + ($196)|0);
 $198 = $197;
 $199 = $198;
 HEAP32[$199>>2] = $156;
 $200 = (($198) + 4)|0;
 $201 = $200;
 HEAP32[$201>>2] = $153;
 STACKTOP = sp;return;
}
function __ZN7WelsDec19WelsI8x8LumaPredH_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$mask = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $40$phi = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$13 = 0, $iStride = 0, $uiPixelFilterL = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterL = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 if ($bTLAvail) {
  $13 = $kiStride ^ -1;
  $14 = (($pPred) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($pPred) + -1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 << 1;
  $21 = (($20) + ($16))|0;
  $22 = (($kiStride) + -1)|0;
  $23 = (($pPred) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $$sink1 = $26;$146 = $24;$147 = $18;
 } else {
  $27 = (($pPred) + -1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($29*3)|0;
  $31 = (($kiStride) + -1)|0;
  $32 = (($pPred) + ($31)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($34) + ($30))|0;
  $$sink1 = $35;$146 = $33;$147 = $28;
 }
 $36 = (($$sink1) + 2)|0;
 $37 = $36 >>> 2;
 $38 = $37&255;
 HEAP8[$uiPixelFilterL>>0] = $38;
 $40 = $147;$42 = $146;$i$13 = 1;
 while(1) {
  $39 = $40&255;
  $41 = $42&255;
  $43 = $41 << 1;
  $44 = (($i$13) + 1)|0;
  $45 = (($iStride) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + -1)|0;
  $48 = (($pPred) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = (($39) + 2)|0;
  $52 = (($51) + ($43))|0;
  $53 = (($52) + ($50))|0;
  $54 = $53 >>> 2;
  $55 = $54&255;
  $56 = (($uiPixelFilterL) + ($i$13)|0);
  HEAP8[$56>>0] = $55;
  $exitcond = ($44|0)==(7);
  if ($exitcond) {
   break;
  } else {
   $40$phi = $42;$42 = $49;$i$13 = $44;$40 = $40$phi;
  }
 }
 $57 = (($9) + -1)|0;
 $58 = (($pPred) + ($57)|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = (($11) + -1)|0;
 $62 = (($pPred) + ($61)|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = ($64*3)|0;
 $66 = (($60) + 2)|0;
 $67 = (($66) + ($65))|0;
 $68 = $67 >>> 2;
 $69 = $68&255;
 $70 = (($uiPixelFilterL) + 7|0);
 HEAP8[$70>>0] = $69;
 $71 = HEAP8[$uiPixelFilterL>>0]|0;
 $72 = $71&255;
 $73 = (___muldi3(($72|0),0,16843009,16843009)|0);
 $74 = tempRet0;
 $75 = $pPred;
 $76 = $75;
 HEAP32[$76>>2] = $73;
 $77 = (($75) + 4)|0;
 $78 = $77;
 HEAP32[$78>>2] = $74;
 $79 = (($uiPixelFilterL) + 1|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = (___muldi3(($81|0),0,16843009,16843009)|0);
 $83 = tempRet0;
 $84 = (($pPred) + ($kiStride)|0);
 $85 = $84;
 $86 = $85;
 HEAP32[$86>>2] = $82;
 $87 = (($85) + 4)|0;
 $88 = $87;
 HEAP32[$88>>2] = $83;
 $89 = (($uiPixelFilterL) + 2|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 $92 = (___muldi3(($91|0),0,16843009,16843009)|0);
 $93 = tempRet0;
 $94 = (($pPred) + ($1)|0);
 $95 = $94;
 $96 = $95;
 HEAP32[$96>>2] = $92;
 $97 = (($95) + 4)|0;
 $98 = $97;
 HEAP32[$98>>2] = $93;
 $99 = (($uiPixelFilterL) + 3|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $100&255;
 $102 = (___muldi3(($101|0),0,16843009,16843009)|0);
 $103 = tempRet0;
 $104 = (($pPred) + ($3)|0);
 $105 = $104;
 $106 = $105;
 HEAP32[$106>>2] = $102;
 $107 = (($105) + 4)|0;
 $108 = $107;
 HEAP32[$108>>2] = $103;
 $109 = (($uiPixelFilterL) + 4|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110&255;
 $112 = (___muldi3(($111|0),0,16843009,16843009)|0);
 $113 = tempRet0;
 $114 = (($pPred) + ($5)|0);
 $115 = $114;
 $116 = $115;
 HEAP32[$116>>2] = $112;
 $117 = (($115) + 4)|0;
 $118 = $117;
 HEAP32[$118>>2] = $113;
 $119 = (($uiPixelFilterL) + 5|0);
 $120 = HEAP8[$119>>0]|0;
 $121 = $120&255;
 $122 = (___muldi3(($121|0),0,16843009,16843009)|0);
 $123 = tempRet0;
 $124 = (($pPred) + ($7)|0);
 $125 = $124;
 $126 = $125;
 HEAP32[$126>>2] = $122;
 $127 = (($125) + 4)|0;
 $128 = $127;
 HEAP32[$128>>2] = $123;
 $129 = (($uiPixelFilterL) + 6|0);
 $130 = HEAP8[$129>>0]|0;
 $131 = $130&255;
 $132 = (___muldi3(($131|0),0,16843009,16843009)|0);
 $133 = tempRet0;
 $134 = (($pPred) + ($9)|0);
 $135 = $134;
 $136 = $135;
 HEAP32[$136>>2] = $132;
 $137 = (($135) + 4)|0;
 $138 = $137;
 HEAP32[$138>>2] = $133;
 $$mask = $68 & 255;
 $139 = (___muldi3(($$mask|0),0,16843009,16843009)|0);
 $140 = tempRet0;
 $141 = (($pPred) + ($11)|0);
 $142 = $141;
 $143 = $142;
 HEAP32[$143>>2] = $139;
 $144 = (($142) + 4)|0;
 $145 = $144;
 HEAP32[$145>>2] = $140;
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsI8x8LumaPredDc_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$mask = 0, $$sink2 = 0, $$sink3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $68$phi = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$17 = 0, $iStride = 0, $uiPixelFilterL = 0, $uiPixelFilterT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterL = sp + 40|0;
 $uiPixelFilterT = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 if ($bTLAvail) {
  $13 = $kiStride ^ -1;
  $14 = (($pPred) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($pPred) + -1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 << 1;
  $21 = (($kiStride) + -1)|0;
  $22 = (($pPred) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($16) + 2)|0;
  $26 = (($25) + ($20))|0;
  $27 = (($26) + ($24))|0;
  $28 = $27 >>> 2;
  $29 = $28&255;
  HEAP8[$uiPixelFilterL>>0] = $29;
  $30 = (0 - ($kiStride))|0;
  $31 = (($pPred) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $33 << 1;
  $35 = (($34) + ($16))|0;
  $36 = (1 - ($kiStride))|0;
  $37 = (($pPred) + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($35) + ($39))|0;
  $$sink2 = $40;$239 = $23;$240 = $18;
 } else {
  $41 = (($pPred) + -1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($43*3)|0;
  $45 = (($kiStride) + -1)|0;
  $46 = (($pPred) + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = (($44) + 2)|0;
  $50 = (($49) + ($48))|0;
  $51 = $50 >>> 2;
  $52 = $51&255;
  HEAP8[$uiPixelFilterL>>0] = $52;
  $53 = (0 - ($kiStride))|0;
  $54 = (($pPred) + ($53)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = ($56*3)|0;
  $58 = (1 - ($kiStride))|0;
  $59 = (($pPred) + ($58)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($57) + ($61))|0;
  $$sink2 = $62;$239 = $47;$240 = $42;
 }
 $63 = (($$sink2) + 2)|0;
 $64 = $63 >>> 2;
 $65 = $64&255;
 HEAP8[$uiPixelFilterT>>0] = $65;
 $68 = $240;$70 = $239;$i$17 = 1;
 while(1) {
  $66 = (($i$17) + -1)|0;
  $67 = $68&255;
  $69 = $70&255;
  $71 = $69 << 1;
  $72 = (($i$17) + 1)|0;
  $73 = (($iStride) + ($72<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + -1)|0;
  $76 = (($pPred) + ($75)|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = (($67) + 2)|0;
  $80 = (($79) + ($71))|0;
  $81 = (($80) + ($78))|0;
  $82 = $81 >>> 2;
  $83 = $82&255;
  $84 = (($uiPixelFilterL) + ($i$17)|0);
  HEAP8[$84>>0] = $83;
  $85 = (($66) - ($kiStride))|0;
  $86 = (($pPred) + ($85)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = (($i$17) - ($kiStride))|0;
  $90 = (($pPred) + ($89)|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $92 << 1;
  $94 = (($72) - ($kiStride))|0;
  $95 = (($pPred) + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = (($88) + 2)|0;
  $99 = (($98) + ($93))|0;
  $100 = (($99) + ($97))|0;
  $101 = $100 >>> 2;
  $102 = $101&255;
  $103 = (($uiPixelFilterT) + ($i$17)|0);
  HEAP8[$103>>0] = $102;
  $exitcond = ($72|0)==(7);
  if ($exitcond) {
   break;
  } else {
   $68$phi = $70;$70 = $77;$i$17 = $72;$68 = $68$phi;
  }
 }
 $104 = (($9) + -1)|0;
 $105 = (($pPred) + ($104)|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = (($11) + -1)|0;
 $109 = (($pPred) + ($108)|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110&255;
 $112 = ($111*3)|0;
 $113 = (($107) + 2)|0;
 $114 = (($113) + ($112))|0;
 $115 = $114 >>> 2;
 $116 = $115&255;
 $117 = (($uiPixelFilterL) + 7|0);
 HEAP8[$117>>0] = $116;
 $118 = (6 - ($kiStride))|0;
 $119 = (($pPred) + ($118)|0);
 $120 = HEAP8[$119>>0]|0;
 $121 = $120&255;
 $122 = (7 - ($kiStride))|0;
 $123 = (($pPred) + ($122)|0);
 $124 = HEAP8[$123>>0]|0;
 $125 = $124&255;
 if ($bTRAvail) {
  $126 = $125 << 1;
  $127 = (($126) + ($121))|0;
  $128 = (8 - ($kiStride))|0;
  $129 = (($pPred) + ($128)|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130&255;
  $132 = (($127) + ($131))|0;
  $$sink3 = $132;
 } else {
  $133 = ($125*3)|0;
  $134 = (($133) + ($121))|0;
  $$sink3 = $134;
 }
 $135 = (($$sink3) + 2)|0;
 $136 = $135 >>> 2;
 $137 = $136&255;
 $138 = (($uiPixelFilterT) + 7|0);
 HEAP8[$138>>0] = $137;
 $139 = HEAP8[$uiPixelFilterL>>0]|0;
 $140 = $139&255;
 $141 = HEAP8[$uiPixelFilterT>>0]|0;
 $142 = $141&255;
 $143 = (($140) + ($142))|0;
 $144 = (($uiPixelFilterL) + 1|0);
 $145 = HEAP8[$144>>0]|0;
 $146 = $145&255;
 $147 = (($146) + ($143))|0;
 $148 = (($uiPixelFilterT) + 1|0);
 $149 = HEAP8[$148>>0]|0;
 $150 = $149&255;
 $151 = (($147) + ($150))|0;
 $152 = (($uiPixelFilterL) + 2|0);
 $153 = HEAP8[$152>>0]|0;
 $154 = $153&255;
 $155 = (($154) + ($151))|0;
 $156 = (($uiPixelFilterT) + 2|0);
 $157 = HEAP8[$156>>0]|0;
 $158 = $157&255;
 $159 = (($155) + ($158))|0;
 $160 = (($uiPixelFilterL) + 3|0);
 $161 = HEAP8[$160>>0]|0;
 $162 = $161&255;
 $163 = (($162) + ($159))|0;
 $164 = (($uiPixelFilterT) + 3|0);
 $165 = HEAP8[$164>>0]|0;
 $166 = $165&255;
 $167 = (($163) + ($166))|0;
 $168 = (($uiPixelFilterL) + 4|0);
 $169 = HEAP8[$168>>0]|0;
 $170 = $169&255;
 $171 = (($170) + ($167))|0;
 $172 = (($uiPixelFilterT) + 4|0);
 $173 = HEAP8[$172>>0]|0;
 $174 = $173&255;
 $175 = (($171) + ($174))|0;
 $176 = (($uiPixelFilterL) + 5|0);
 $177 = HEAP8[$176>>0]|0;
 $178 = $177&255;
 $179 = (($178) + ($175))|0;
 $180 = (($uiPixelFilterT) + 5|0);
 $181 = HEAP8[$180>>0]|0;
 $182 = $181&255;
 $183 = (($179) + ($182))|0;
 $184 = (($uiPixelFilterL) + 6|0);
 $185 = HEAP8[$184>>0]|0;
 $186 = $185&255;
 $187 = (($186) + ($183))|0;
 $188 = (($uiPixelFilterT) + 6|0);
 $189 = HEAP8[$188>>0]|0;
 $190 = $189&255;
 $191 = (($187) + ($190))|0;
 $192 = $115 & 255;
 $193 = (($192) + ($191))|0;
 $194 = $136 & 255;
 $195 = (($193) + ($194))|0;
 $196 = (($195) + 8)|0;
 $197 = $196 >>> 4;
 $$mask = $197 & 255;
 $198 = (___muldi3(($$mask|0),0,16843009,16843009)|0);
 $199 = tempRet0;
 $200 = $pPred;
 $201 = $200;
 HEAP32[$201>>2] = $198;
 $202 = (($200) + 4)|0;
 $203 = $202;
 HEAP32[$203>>2] = $199;
 $204 = (($pPred) + ($kiStride)|0);
 $205 = $204;
 $206 = $205;
 HEAP32[$206>>2] = $198;
 $207 = (($205) + 4)|0;
 $208 = $207;
 HEAP32[$208>>2] = $199;
 $209 = (($pPred) + ($1)|0);
 $210 = $209;
 $211 = $210;
 HEAP32[$211>>2] = $198;
 $212 = (($210) + 4)|0;
 $213 = $212;
 HEAP32[$213>>2] = $199;
 $214 = (($pPred) + ($3)|0);
 $215 = $214;
 $216 = $215;
 HEAP32[$216>>2] = $198;
 $217 = (($215) + 4)|0;
 $218 = $217;
 HEAP32[$218>>2] = $199;
 $219 = (($pPred) + ($5)|0);
 $220 = $219;
 $221 = $220;
 HEAP32[$221>>2] = $198;
 $222 = (($220) + 4)|0;
 $223 = $222;
 HEAP32[$223>>2] = $199;
 $224 = (($pPred) + ($7)|0);
 $225 = $224;
 $226 = $225;
 HEAP32[$226>>2] = $198;
 $227 = (($225) + 4)|0;
 $228 = $227;
 HEAP32[$228>>2] = $199;
 $229 = (($pPred) + ($9)|0);
 $230 = $229;
 $231 = $230;
 HEAP32[$231>>2] = $198;
 $232 = (($230) + 4)|0;
 $233 = $232;
 HEAP32[$233>>2] = $199;
 $234 = (($pPred) + ($11)|0);
 $235 = $234;
 $236 = $235;
 HEAP32[$236>>2] = $198;
 $237 = (($235) + 4)|0;
 $238 = $237;
 HEAP32[$238>>2] = $199;
 STACKTOP = sp;return;
}
function __ZN7WelsDec24WelsI8x8LumaPredDcLeft_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$mask = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $40$phi = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $fold = 0, $i$15 = 0, $iStride = 0, $uiPixelFilterL = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterL = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 if ($bTLAvail) {
  $13 = $kiStride ^ -1;
  $14 = (($pPred) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($pPred) + -1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 << 1;
  $21 = (($20) + ($16))|0;
  $22 = (($kiStride) + -1)|0;
  $23 = (($pPred) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $$sink1 = $26;$141 = $24;$142 = $18;
 } else {
  $27 = (($pPred) + -1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($29*3)|0;
  $31 = (($kiStride) + -1)|0;
  $32 = (($pPred) + ($31)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($34) + ($30))|0;
  $$sink1 = $35;$141 = $33;$142 = $28;
 }
 $36 = (($$sink1) + 2)|0;
 $37 = $36 >>> 2;
 $38 = $37&255;
 HEAP8[$uiPixelFilterL>>0] = $38;
 $40 = $142;$42 = $141;$i$15 = 1;
 while(1) {
  $39 = $40&255;
  $41 = $42&255;
  $43 = $41 << 1;
  $44 = (($i$15) + 1)|0;
  $45 = (($iStride) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + -1)|0;
  $48 = (($pPred) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = (($39) + 2)|0;
  $52 = (($51) + ($43))|0;
  $53 = (($52) + ($50))|0;
  $54 = $53 >>> 2;
  $55 = $54&255;
  $56 = (($uiPixelFilterL) + ($i$15)|0);
  HEAP8[$56>>0] = $55;
  $exitcond = ($44|0)==(7);
  if ($exitcond) {
   break;
  } else {
   $40$phi = $42;$42 = $49;$i$15 = $44;$40 = $40$phi;
  }
 }
 $57 = (($9) + -1)|0;
 $58 = (($pPred) + ($57)|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = (($11) + -1)|0;
 $62 = (($pPred) + ($61)|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = ($64*3)|0;
 $66 = (($60) + 2)|0;
 $67 = (($66) + ($65))|0;
 $68 = $67 >>> 2;
 $69 = $68&255;
 $70 = (($uiPixelFilterL) + 7|0);
 HEAP8[$70>>0] = $69;
 $71 = HEAP8[$uiPixelFilterL>>0]|0;
 $72 = $71&255;
 $73 = (($uiPixelFilterL) + 1|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = (($75) + ($72))|0;
 $77 = (($uiPixelFilterL) + 2|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = (($79) + ($76))|0;
 $81 = (($uiPixelFilterL) + 3|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = (($83) + ($80))|0;
 $85 = (($uiPixelFilterL) + 4|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&255;
 $88 = (($87) + ($84))|0;
 $89 = (($uiPixelFilterL) + 5|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 $92 = (($91) + ($88))|0;
 $93 = (($uiPixelFilterL) + 6|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = (($95) + ($92))|0;
 $97 = $68 & 255;
 $fold = (($96) + ($97))|0;
 $98 = (($fold) + 4)|0;
 $99 = $98 >>> 3;
 $$mask = $99 & 255;
 $100 = (___muldi3(($$mask|0),0,16843009,16843009)|0);
 $101 = tempRet0;
 $102 = $pPred;
 $103 = $102;
 HEAP32[$103>>2] = $100;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = $101;
 $106 = (($pPred) + ($kiStride)|0);
 $107 = $106;
 $108 = $107;
 HEAP32[$108>>2] = $100;
 $109 = (($107) + 4)|0;
 $110 = $109;
 HEAP32[$110>>2] = $101;
 $111 = (($pPred) + ($1)|0);
 $112 = $111;
 $113 = $112;
 HEAP32[$113>>2] = $100;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $101;
 $116 = (($pPred) + ($3)|0);
 $117 = $116;
 $118 = $117;
 HEAP32[$118>>2] = $100;
 $119 = (($117) + 4)|0;
 $120 = $119;
 HEAP32[$120>>2] = $101;
 $121 = (($pPred) + ($5)|0);
 $122 = $121;
 $123 = $122;
 HEAP32[$123>>2] = $100;
 $124 = (($122) + 4)|0;
 $125 = $124;
 HEAP32[$125>>2] = $101;
 $126 = (($pPred) + ($7)|0);
 $127 = $126;
 $128 = $127;
 HEAP32[$128>>2] = $100;
 $129 = (($127) + 4)|0;
 $130 = $129;
 HEAP32[$130>>2] = $101;
 $131 = (($pPred) + ($9)|0);
 $132 = $131;
 $133 = $132;
 HEAP32[$133>>2] = $100;
 $134 = (($132) + 4)|0;
 $135 = $134;
 HEAP32[$135>>2] = $101;
 $136 = (($pPred) + ($11)|0);
 $137 = $136;
 $138 = $137;
 HEAP32[$138>>2] = $100;
 $139 = (($137) + 4)|0;
 $140 = $139;
 HEAP32[$140>>2] = $101;
 STACKTOP = sp;return;
}
function __ZN7WelsDec23WelsI8x8LumaPredDcTop_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$mask = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fold = 0;
 var $iStride = 0, $uiPixelFilterT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterT = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 $13 = (0 - ($kiStride))|0;
 if ($bTLAvail) {
  $14 = $kiStride ^ -1;
  $15 = (($pPred) + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($pPred) + ($13)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 1;
  $22 = (($21) + ($17))|0;
  $23 = (1 - ($kiStride))|0;
  $24 = (($pPred) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($22) + ($26))|0;
  $$pre$phiZ2D = $14;$$sink1 = $27;
 } else {
  $28 = (($pPred) + ($13)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30*3)|0;
  $32 = (1 - ($kiStride))|0;
  $33 = (($pPred) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($31) + ($35))|0;
  $$pre = $kiStride ^ -1;
  $$pre$phiZ2D = $$pre;$$sink1 = $36;
 }
 $37 = (($$sink1) + 2)|0;
 $38 = $37 >>> 2;
 $39 = $38&255;
 HEAP8[$uiPixelFilterT>>0] = $39;
 $40 = (($$pre$phiZ2D) + 1)|0;
 $41 = (($pPred) + ($40)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = (1 - ($kiStride))|0;
 $45 = (($pPred) + ($44)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 << 1;
 $49 = (2 - ($kiStride))|0;
 $50 = (($pPred) + ($49)|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = (($43) + 2)|0;
 $54 = (($53) + ($48))|0;
 $55 = (($54) + ($52))|0;
 $56 = $55 >>> 2;
 $57 = $56&255;
 $58 = (($uiPixelFilterT) + 1|0);
 HEAP8[$58>>0] = $57;
 $59 = (($$pre$phiZ2D) + 2)|0;
 $60 = (($pPred) + ($59)|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = $52 << 1;
 $64 = (3 - ($kiStride))|0;
 $65 = (($pPred) + ($64)|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = (($62) + 2)|0;
 $69 = (($68) + ($63))|0;
 $70 = (($69) + ($67))|0;
 $71 = $70 >>> 2;
 $72 = $71&255;
 $73 = (($uiPixelFilterT) + 2|0);
 HEAP8[$73>>0] = $72;
 $74 = (($$pre$phiZ2D) + 3)|0;
 $75 = (($pPred) + ($74)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = $67 << 1;
 $79 = (4 - ($kiStride))|0;
 $80 = (($pPred) + ($79)|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = (($77) + 2)|0;
 $84 = (($83) + ($78))|0;
 $85 = (($84) + ($82))|0;
 $86 = $85 >>> 2;
 $87 = $86&255;
 $88 = (($uiPixelFilterT) + 3|0);
 HEAP8[$88>>0] = $87;
 $89 = (($$pre$phiZ2D) + 4)|0;
 $90 = (($pPred) + ($89)|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 $93 = $82 << 1;
 $94 = (5 - ($kiStride))|0;
 $95 = (($pPred) + ($94)|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = (($92) + 2)|0;
 $99 = (($98) + ($93))|0;
 $100 = (($99) + ($97))|0;
 $101 = $100 >>> 2;
 $102 = $101&255;
 $103 = (($uiPixelFilterT) + 4|0);
 HEAP8[$103>>0] = $102;
 $104 = (($$pre$phiZ2D) + 5)|0;
 $105 = (($pPred) + ($104)|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = $97 << 1;
 $109 = (6 - ($kiStride))|0;
 $110 = (($pPred) + ($109)|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = (($107) + 2)|0;
 $114 = (($113) + ($108))|0;
 $115 = (($114) + ($112))|0;
 $116 = $115 >>> 2;
 $117 = $116&255;
 $118 = (($uiPixelFilterT) + 5|0);
 HEAP8[$118>>0] = $117;
 $119 = (($$pre$phiZ2D) + 6)|0;
 $120 = (($pPred) + ($119)|0);
 $121 = HEAP8[$120>>0]|0;
 $122 = $121&255;
 $123 = $112 << 1;
 $124 = (7 - ($kiStride))|0;
 $125 = (($pPred) + ($124)|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = (($122) + 2)|0;
 $129 = (($128) + ($123))|0;
 $130 = (($129) + ($127))|0;
 $131 = $130 >>> 2;
 $132 = $131&255;
 $133 = (($uiPixelFilterT) + 6|0);
 HEAP8[$133>>0] = $132;
 if ($bTRAvail) {
  $134 = $127 << 1;
  $135 = (($134) + ($112))|0;
  $136 = (8 - ($kiStride))|0;
  $137 = (($pPred) + ($136)|0);
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $140 = (($135) + ($139))|0;
  $$sink2 = $140;
 } else {
  $141 = ($127*3)|0;
  $142 = (($141) + ($112))|0;
  $$sink2 = $142;
 }
 $143 = (($$sink2) + 2)|0;
 $144 = $143 >>> 2;
 $145 = $144&255;
 $146 = (($uiPixelFilterT) + 7|0);
 HEAP8[$146>>0] = $145;
 $147 = HEAP8[$uiPixelFilterT>>0]|0;
 $148 = $147&255;
 $149 = $56 & 255;
 $150 = (($149) + ($148))|0;
 $151 = $71 & 255;
 $152 = (($151) + ($150))|0;
 $153 = $86 & 255;
 $154 = (($153) + ($152))|0;
 $155 = $101 & 255;
 $156 = (($155) + ($154))|0;
 $157 = $116 & 255;
 $158 = (($157) + ($156))|0;
 $159 = $131 & 255;
 $160 = (($159) + ($158))|0;
 $161 = $144 & 255;
 $fold = (($160) + ($161))|0;
 $162 = (($fold) + 4)|0;
 $163 = $162 >>> 3;
 $$mask = $163 & 255;
 $164 = (___muldi3(($$mask|0),0,16843009,16843009)|0);
 $165 = tempRet0;
 $166 = HEAP32[$iStride>>2]|0;
 $167 = (($pPred) + ($166)|0);
 $168 = $167;
 $169 = $168;
 HEAP32[$169>>2] = $164;
 $170 = (($168) + 4)|0;
 $171 = $170;
 HEAP32[$171>>2] = $165;
 $172 = HEAP32[$0>>2]|0;
 $173 = (($pPred) + ($172)|0);
 $174 = $173;
 $175 = $174;
 HEAP32[$175>>2] = $164;
 $176 = (($174) + 4)|0;
 $177 = $176;
 HEAP32[$177>>2] = $165;
 $178 = HEAP32[$2>>2]|0;
 $179 = (($pPred) + ($178)|0);
 $180 = $179;
 $181 = $180;
 HEAP32[$181>>2] = $164;
 $182 = (($180) + 4)|0;
 $183 = $182;
 HEAP32[$183>>2] = $165;
 $184 = HEAP32[$4>>2]|0;
 $185 = (($pPred) + ($184)|0);
 $186 = $185;
 $187 = $186;
 HEAP32[$187>>2] = $164;
 $188 = (($186) + 4)|0;
 $189 = $188;
 HEAP32[$189>>2] = $165;
 $190 = HEAP32[$6>>2]|0;
 $191 = (($pPred) + ($190)|0);
 $192 = $191;
 $193 = $192;
 HEAP32[$193>>2] = $164;
 $194 = (($192) + 4)|0;
 $195 = $194;
 HEAP32[$195>>2] = $165;
 $196 = HEAP32[$8>>2]|0;
 $197 = (($pPred) + ($196)|0);
 $198 = $197;
 $199 = $198;
 HEAP32[$199>>2] = $164;
 $200 = (($198) + 4)|0;
 $201 = $200;
 HEAP32[$201>>2] = $165;
 $202 = HEAP32[$10>>2]|0;
 $203 = (($pPred) + ($202)|0);
 $204 = $203;
 $205 = $204;
 HEAP32[$205>>2] = $164;
 $206 = (($204) + 4)|0;
 $207 = $206;
 HEAP32[$207>>2] = $165;
 $208 = HEAP32[$12>>2]|0;
 $209 = (($pPred) + ($208)|0);
 $210 = $209;
 $211 = $210;
 HEAP32[$211>>2] = $164;
 $212 = (($210) + 4)|0;
 $213 = $212;
 HEAP32[$213>>2] = $165;
 STACKTOP = sp;return;
}
function __ZN7WelsDec22WelsI8x8LumaPredDcNA_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pPred;
 $1 = $0;
 HEAP32[$1>>2] = -2139062144;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = -2139062144;
 $4 = (($pPred) + ($kiStride)|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = -2139062144;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = -2139062144;
 $9 = $kiStride << 1;
 $10 = (($pPred) + ($9)|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -2139062144;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -2139062144;
 $15 = (($9) + ($kiStride))|0;
 $16 = (($pPred) + ($15)|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = -2139062144;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = -2139062144;
 $21 = (($15) + ($kiStride))|0;
 $22 = (($pPred) + ($21)|0);
 $23 = $22;
 $24 = $23;
 HEAP32[$24>>2] = -2139062144;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = -2139062144;
 $27 = (($21) + ($kiStride))|0;
 $28 = (($pPred) + ($27)|0);
 $29 = $28;
 $30 = $29;
 HEAP32[$30>>2] = -2139062144;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = -2139062144;
 $33 = (($27) + ($kiStride))|0;
 $34 = (($pPred) + ($33)|0);
 $35 = $34;
 $36 = $35;
 HEAP32[$36>>2] = -2139062144;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = -2139062144;
 $39 = (($33) + ($kiStride))|0;
 $40 = (($pPred) + ($39)|0);
 $41 = $40;
 $42 = $41;
 HEAP32[$42>>2] = -2139062144;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = -2139062144;
 STACKTOP = sp;return;
}
function __ZN7WelsDec21WelsI8x8LumaPredDDL_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond10 = 0, $exitcond8 = 0;
 var $exitcond9 = 0, $i$16 = 0, $i$24 = 0, $iStride = 0, $j$03 = 0, $j$03$us = 0, $uiPixelFilterT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterT = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 $13 = (0 - ($kiStride))|0;
 if ($bTLAvail) {
  $14 = $kiStride ^ -1;
  $15 = (($pPred) + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($pPred) + ($13)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 1;
  $22 = (($21) + ($17))|0;
  $23 = (1 - ($kiStride))|0;
  $24 = (($pPred) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($22) + ($26))|0;
  $$pre$phiZ2D = $14;$$sink1 = $27;
 } else {
  $28 = (($pPred) + ($13)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30*3)|0;
  $32 = (1 - ($kiStride))|0;
  $33 = (($pPred) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($31) + ($35))|0;
  $$pre = $kiStride ^ -1;
  $$pre$phiZ2D = $$pre;$$sink1 = $36;
 }
 $37 = (($$sink1) + 2)|0;
 $38 = $37 >>> 2;
 $39 = $38&255;
 HEAP8[$uiPixelFilterT>>0] = $39;
 $i$16 = 1;
 while(1) {
  $40 = (($i$16) + ($$pre$phiZ2D))|0;
  $41 = (($pPred) + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($i$16) - ($kiStride))|0;
  $45 = (($pPred) + ($44)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $47 << 1;
  $49 = (($i$16) + 1)|0;
  $50 = (($49) - ($kiStride))|0;
  $51 = (($pPred) + ($50)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = (($43) + 2)|0;
  $55 = (($54) + ($48))|0;
  $56 = (($55) + ($53))|0;
  $57 = $56 >>> 2;
  $58 = $57&255;
  $59 = (($uiPixelFilterT) + ($i$16)|0);
  HEAP8[$59>>0] = $58;
  $exitcond10 = ($49|0)==(15);
  if ($exitcond10) {
   break;
  } else {
   $i$16 = $49;
  }
 }
 $60 = (14 - ($kiStride))|0;
 $61 = (($pPred) + ($60)|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = (15 - ($kiStride))|0;
 $65 = (($pPred) + ($64)|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = ($67*3)|0;
 $69 = (($63) + 2)|0;
 $70 = (($69) + ($68))|0;
 $71 = $70 >>> 2;
 $72 = $71&255;
 $73 = (($uiPixelFilterT) + 15|0);
 HEAP8[$73>>0] = $72;
 $74 = (($uiPixelFilterT) + 14|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $71 & 255;
 $78 = ($77*3)|0;
 $79 = (($76) + 2)|0;
 $80 = (($79) + ($78))|0;
 $81 = $80 >>> 2;
 $82 = $81&255;
 $i$24 = 0;
 while(1) {
  $83 = ($i$24|0)==(7);
  $84 = (($iStride) + ($i$24<<2)|0);
  L10: do {
   if ($83) {
    $j$03$us = 0;
    while(1) {
     $85 = ($j$03$us|0)==(7);
     if ($85) {
      break;
     }
     $89 = (($j$03$us) + 7)|0;
     $90 = (($uiPixelFilterT) + ($89)|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $93 = (($j$03$us) + 8)|0;
     $94 = (($uiPixelFilterT) + ($93)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $95&255;
     $97 = $96 << 1;
     $98 = (($j$03$us) + 9)|0;
     $99 = (($uiPixelFilterT) + ($98)|0);
     $100 = HEAP8[$99>>0]|0;
     $101 = $100&255;
     $102 = (($92) + 2)|0;
     $103 = (($102) + ($97))|0;
     $104 = (($103) + ($101))|0;
     $105 = $104 >>> 2;
     $106 = $105&255;
     $107 = HEAP32[$84>>2]|0;
     $108 = (($107) + ($j$03$us))|0;
     $109 = (($pPred) + ($108)|0);
     HEAP8[$109>>0] = $106;
     $110 = (($j$03$us) + 1)|0;
     $exitcond8 = ($110|0)==(8);
     if ($exitcond8) {
      break L10;
     } else {
      $j$03$us = $110;
     }
    }
    $86 = HEAP32[$84>>2]|0;
    $87 = (($86) + 7)|0;
    $88 = (($pPred) + ($87)|0);
    HEAP8[$88>>0] = $82;
   } else {
    $j$03 = 0;
    while(1) {
     $111 = (($j$03) + ($i$24))|0;
     $112 = (($uiPixelFilterT) + ($111)|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = $113&255;
     $115 = (($111) + 1)|0;
     $116 = (($uiPixelFilterT) + ($115)|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = $117&255;
     $119 = $118 << 1;
     $120 = (($111) + 2)|0;
     $121 = (($uiPixelFilterT) + ($120)|0);
     $122 = HEAP8[$121>>0]|0;
     $123 = $122&255;
     $124 = (($114) + 2)|0;
     $125 = (($124) + ($119))|0;
     $126 = (($125) + ($123))|0;
     $127 = $126 >>> 2;
     $128 = $127&255;
     $129 = HEAP32[$84>>2]|0;
     $130 = (($129) + ($j$03))|0;
     $131 = (($pPred) + ($130)|0);
     HEAP8[$131>>0] = $128;
     $132 = (($j$03) + 1)|0;
     $exitcond = ($132|0)==(8);
     if ($exitcond) {
      break;
     } else {
      $j$03 = $132;
     }
    }
   }
  } while(0);
  $133 = (($i$24) + 1)|0;
  $exitcond9 = ($133|0)==(8);
  if ($exitcond9) {
   break;
  } else {
   $i$24 = $133;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec24WelsI8x8LumaPredDDLTop_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond10 = 0;
 var $exitcond11 = 0, $i$35 = 0, $iStride = 0, $j$03 = 0, $j$03$us = 0, $scevgep = 0, $uiPixelFilterT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterT = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 $13 = (0 - ($kiStride))|0;
 if ($bTLAvail) {
  $14 = $kiStride ^ -1;
  $15 = (($pPred) + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($pPred) + ($13)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 1;
  $22 = (($21) + ($17))|0;
  $23 = (1 - ($kiStride))|0;
  $24 = (($pPred) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($22) + ($26))|0;
  $$pre$phiZ2D = $14;$$sink1 = $27;
 } else {
  $28 = (($pPred) + ($13)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30*3)|0;
  $32 = (1 - ($kiStride))|0;
  $33 = (($pPred) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($31) + ($35))|0;
  $$pre = $kiStride ^ -1;
  $$pre$phiZ2D = $$pre;$$sink1 = $36;
 }
 $37 = (($$sink1) + 2)|0;
 $38 = $37 >>> 2;
 $39 = $38&255;
 HEAP8[$uiPixelFilterT>>0] = $39;
 $40 = (($$pre$phiZ2D) + 1)|0;
 $41 = (($pPred) + ($40)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = (1 - ($kiStride))|0;
 $45 = (($pPred) + ($44)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 << 1;
 $49 = (2 - ($kiStride))|0;
 $50 = (($pPred) + ($49)|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = (($43) + 2)|0;
 $54 = (($53) + ($48))|0;
 $55 = (($54) + ($52))|0;
 $56 = $55 >>> 2;
 $57 = $56&255;
 $58 = (($uiPixelFilterT) + 1|0);
 HEAP8[$58>>0] = $57;
 $59 = (($$pre$phiZ2D) + 2)|0;
 $60 = (($pPred) + ($59)|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = $52 << 1;
 $64 = (3 - ($kiStride))|0;
 $65 = (($pPred) + ($64)|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = (($62) + 2)|0;
 $69 = (($68) + ($63))|0;
 $70 = (($69) + ($67))|0;
 $71 = $70 >>> 2;
 $72 = $71&255;
 $73 = (($uiPixelFilterT) + 2|0);
 HEAP8[$73>>0] = $72;
 $74 = (($$pre$phiZ2D) + 3)|0;
 $75 = (($pPred) + ($74)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = $67 << 1;
 $79 = (4 - ($kiStride))|0;
 $80 = (($pPred) + ($79)|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = (($77) + 2)|0;
 $84 = (($83) + ($78))|0;
 $85 = (($84) + ($82))|0;
 $86 = $85 >>> 2;
 $87 = $86&255;
 $88 = (($uiPixelFilterT) + 3|0);
 HEAP8[$88>>0] = $87;
 $89 = (($$pre$phiZ2D) + 4)|0;
 $90 = (($pPred) + ($89)|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 $93 = $82 << 1;
 $94 = (5 - ($kiStride))|0;
 $95 = (($pPred) + ($94)|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = (($92) + 2)|0;
 $99 = (($98) + ($93))|0;
 $100 = (($99) + ($97))|0;
 $101 = $100 >>> 2;
 $102 = $101&255;
 $103 = (($uiPixelFilterT) + 4|0);
 HEAP8[$103>>0] = $102;
 $104 = (($$pre$phiZ2D) + 5)|0;
 $105 = (($pPred) + ($104)|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = $97 << 1;
 $109 = (6 - ($kiStride))|0;
 $110 = (($pPred) + ($109)|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = (($107) + 2)|0;
 $114 = (($113) + ($108))|0;
 $115 = (($114) + ($112))|0;
 $116 = $115 >>> 2;
 $117 = $116&255;
 $118 = (($uiPixelFilterT) + 5|0);
 HEAP8[$118>>0] = $117;
 $119 = (($$pre$phiZ2D) + 6)|0;
 $120 = (($pPred) + ($119)|0);
 $121 = HEAP8[$120>>0]|0;
 $122 = $121&255;
 $123 = $112 << 1;
 $124 = (7 - ($kiStride))|0;
 $125 = (($pPred) + ($124)|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = (($122) + 2)|0;
 $129 = (($128) + ($123))|0;
 $130 = (($129) + ($127))|0;
 $131 = $130 >>> 2;
 $132 = $131&255;
 $133 = (($uiPixelFilterT) + 6|0);
 HEAP8[$133>>0] = $132;
 $134 = ($127*3)|0;
 $135 = (($112) + 2)|0;
 $136 = (($135) + ($134))|0;
 $137 = $136 >>> 2;
 $138 = $137&255;
 $139 = (($uiPixelFilterT) + 7|0);
 HEAP8[$139>>0] = $138;
 $scevgep = (($uiPixelFilterT) + 8|0);
 _memset(($scevgep|0),($126|0),8)|0;
 $140 = (($127) + 2)|0;
 $141 = (($140) + ($134))|0;
 $142 = $141 >>> 2;
 $143 = $142&255;
 $i$35 = 0;
 while(1) {
  $144 = ($i$35|0)==(7);
  $145 = (($iStride) + ($i$35<<2)|0);
  L7: do {
   if ($144) {
    $j$03$us = 0;
    while(1) {
     $146 = ($j$03$us|0)==(7);
     if ($146) {
      break;
     }
     $150 = (($j$03$us) + 7)|0;
     $151 = (($uiPixelFilterT) + ($150)|0);
     $152 = HEAP8[$151>>0]|0;
     $153 = $152&255;
     $154 = (($j$03$us) + 8)|0;
     $155 = (($uiPixelFilterT) + ($154)|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = $156&255;
     $158 = $157 << 1;
     $159 = (($j$03$us) + 9)|0;
     $160 = (($uiPixelFilterT) + ($159)|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161&255;
     $163 = (($153) + 2)|0;
     $164 = (($163) + ($158))|0;
     $165 = (($164) + ($162))|0;
     $166 = $165 >>> 2;
     $167 = $166&255;
     $168 = HEAP32[$145>>2]|0;
     $169 = (($168) + ($j$03$us))|0;
     $170 = (($pPred) + ($169)|0);
     HEAP8[$170>>0] = $167;
     $171 = (($j$03$us) + 1)|0;
     $exitcond10 = ($171|0)==(8);
     if ($exitcond10) {
      break L7;
     } else {
      $j$03$us = $171;
     }
    }
    $147 = HEAP32[$145>>2]|0;
    $148 = (($147) + 7)|0;
    $149 = (($pPred) + ($148)|0);
    HEAP8[$149>>0] = $143;
   } else {
    $j$03 = 0;
    while(1) {
     $172 = (($j$03) + ($i$35))|0;
     $173 = (($uiPixelFilterT) + ($172)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = (($172) + 1)|0;
     $177 = (($uiPixelFilterT) + ($176)|0);
     $178 = HEAP8[$177>>0]|0;
     $179 = $178&255;
     $180 = $179 << 1;
     $181 = (($172) + 2)|0;
     $182 = (($uiPixelFilterT) + ($181)|0);
     $183 = HEAP8[$182>>0]|0;
     $184 = $183&255;
     $185 = (($175) + 2)|0;
     $186 = (($185) + ($180))|0;
     $187 = (($186) + ($184))|0;
     $188 = $187 >>> 2;
     $189 = $188&255;
     $190 = HEAP32[$145>>2]|0;
     $191 = (($190) + ($j$03))|0;
     $192 = (($pPred) + ($191)|0);
     HEAP8[$192>>0] = $189;
     $193 = (($j$03) + 1)|0;
     $exitcond = ($193|0)==(8);
     if ($exitcond) {
      break;
     } else {
      $j$03 = $193;
     }
    }
   }
  } while(0);
  $194 = (($i$35) + 1)|0;
  $exitcond11 = ($194|0)==(8);
  if ($exitcond11) {
   break;
  } else {
   $i$35 = $194;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec21WelsI8x8LumaPredDDR_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $50$phi = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $exitcond12 = 0, $i$18 = 0, $i$27 = 0;
 var $iStride = 0, $indvars$iv = 0, $indvars$iv$next = 0, $j$02 = 0, $j$13 = 0, $uiPixelFilterL = 0, $uiPixelFilterT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterL = sp + 40|0;
 $uiPixelFilterT = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 $13 = (($pPred) + -1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $kiStride ^ -1;
 $17 = (($pPred) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 1;
 $21 = (0 - ($kiStride))|0;
 $22 = (($pPred) + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($15) + 2)|0;
 $26 = (($25) + ($20))|0;
 $27 = (($26) + ($24))|0;
 $28 = $15 << 1;
 $29 = (($kiStride) + -1)|0;
 $30 = (($pPred) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = (($28) + 2)|0;
 $34 = (($33) + ($19))|0;
 $35 = (($34) + ($32))|0;
 $36 = $35 >>> 2;
 $37 = $36&255;
 HEAP8[$uiPixelFilterL>>0] = $37;
 $38 = $24 << 1;
 $39 = (1 - ($kiStride))|0;
 $40 = (($pPred) + ($39)|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = (($19) + 2)|0;
 $44 = (($43) + ($38))|0;
 $45 = (($44) + ($42))|0;
 $46 = $45 >>> 2;
 $47 = $46&255;
 HEAP8[$uiPixelFilterT>>0] = $47;
 $50 = $14;$52 = $31;$i$18 = 1;
 while(1) {
  $48 = (($i$18) + -1)|0;
  $49 = $50&255;
  $51 = $52&255;
  $53 = $51 << 1;
  $54 = (($i$18) + 1)|0;
  $55 = (($iStride) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + -1)|0;
  $58 = (($pPred) + ($57)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = (($49) + 2)|0;
  $62 = (($61) + ($53))|0;
  $63 = (($62) + ($60))|0;
  $64 = $63 >>> 2;
  $65 = $64&255;
  $66 = (($uiPixelFilterL) + ($i$18)|0);
  HEAP8[$66>>0] = $65;
  $67 = (($48) - ($kiStride))|0;
  $68 = (($pPred) + ($67)|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($i$18) - ($kiStride))|0;
  $72 = (($pPred) + ($71)|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $74 << 1;
  $76 = (($54) - ($kiStride))|0;
  $77 = (($pPred) + ($76)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (($70) + 2)|0;
  $81 = (($80) + ($75))|0;
  $82 = (($81) + ($79))|0;
  $83 = $82 >>> 2;
  $84 = $83&255;
  $85 = (($uiPixelFilterT) + ($i$18)|0);
  HEAP8[$85>>0] = $84;
  $exitcond12 = ($54|0)==(7);
  if ($exitcond12) {
   break;
  } else {
   $50$phi = $52;$52 = $59;$i$18 = $54;$50 = $50$phi;
  }
 }
 $86 = $27 >>> 2;
 $87 = (($9) + -1)|0;
 $88 = (($pPred) + ($87)|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = (($11) + -1)|0;
 $92 = (($pPred) + ($91)|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = ($94*3)|0;
 $96 = (($90) + 2)|0;
 $97 = (($96) + ($95))|0;
 $98 = $97 >>> 2;
 $99 = $98&255;
 $100 = (($uiPixelFilterL) + 7|0);
 HEAP8[$100>>0] = $99;
 $101 = (6 - ($kiStride))|0;
 $102 = (($pPred) + ($101)|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = (7 - ($kiStride))|0;
 $106 = (($pPred) + ($105)|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 if ($bTRAvail) {
  $109 = $108 << 1;
  $110 = (($109) + ($104))|0;
  $111 = (8 - ($kiStride))|0;
  $112 = (($pPred) + ($111)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = (($110) + ($114))|0;
  $$sink1 = $115;
 } else {
  $116 = ($108*3)|0;
  $117 = (($116) + ($104))|0;
  $$sink1 = $117;
 }
 $118 = (($$sink1) + 2)|0;
 $119 = $118 >>> 2;
 $120 = $119&255;
 $121 = (($uiPixelFilterT) + 7|0);
 HEAP8[$121>>0] = $120;
 $122 = $86 & 255;
 $123 = HEAP8[$uiPixelFilterL>>0]|0;
 $124 = $123&255;
 $125 = $124 << 1;
 $126 = (($uiPixelFilterL) + 1|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&255;
 $129 = (($122) + 2)|0;
 $130 = (($129) + ($125))|0;
 $131 = (($130) + ($128))|0;
 $132 = $131 >>> 2;
 $133 = $132&255;
 $134 = HEAP8[$uiPixelFilterT>>0]|0;
 $135 = $134&255;
 $136 = $122 << 1;
 $137 = (($136) + 2)|0;
 $138 = (($137) + ($135))|0;
 $139 = (($138) + ($124))|0;
 $140 = $139 >>> 2;
 $141 = $140&255;
 $142 = $135 << 1;
 $143 = (($uiPixelFilterT) + 1|0);
 $144 = HEAP8[$143>>0]|0;
 $145 = $144&255;
 $146 = (($129) + ($142))|0;
 $147 = (($146) + ($145))|0;
 $148 = $147 >>> 2;
 $149 = $148&255;
 $i$27 = 0;$indvars$iv = -1;
 while(1) {
  $150 = (($i$27) + -1)|0;
  $151 = ($150|0)>(0);
  if ($151) {
   $152 = (($iStride) + ($i$27<<2)|0);
   $153 = HEAP32[$152>>2]|0;
   $j$02 = 0;
   while(1) {
    $154 = (($i$27) - ($j$02))|0;
    $155 = (($154) + -2)|0;
    $156 = (($uiPixelFilterL) + ($155)|0);
    $157 = HEAP8[$156>>0]|0;
    $158 = $157&255;
    $159 = (($154) + -1)|0;
    $160 = (($uiPixelFilterL) + ($159)|0);
    $161 = HEAP8[$160>>0]|0;
    $162 = $161&255;
    $163 = $162 << 1;
    $164 = (($uiPixelFilterL) + ($154)|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = $165&255;
    $167 = (($158) + 2)|0;
    $168 = (($167) + ($163))|0;
    $169 = (($168) + ($166))|0;
    $170 = $169 >>> 2;
    $171 = $170&255;
    $172 = (($153) + ($j$02))|0;
    $173 = (($pPred) + ($172)|0);
    HEAP8[$173>>0] = $171;
    $174 = (($j$02) + 1)|0;
    $exitcond = ($174|0)==($indvars$iv|0);
    if ($exitcond) {
     break;
    } else {
     $j$02 = $174;
    }
   }
  }
  $175 = ($i$27|0)>(0);
  $176 = (($iStride) + ($i$27<<2)|0);
  $177 = HEAP32[$176>>2]|0;
  if ($175) {
   $180 = (($177) + ($150))|0;
   $181 = (($pPred) + ($180)|0);
   HEAP8[$181>>0] = $133;
   $182 = (($177) + ($i$27))|0;
   $183 = (($pPred) + ($182)|0);
   HEAP8[$183>>0] = $141;
   $184 = ($i$27|0)<(7);
   if ($184) {
    label = 13;
   }
  } else {
   $178 = (($177) + ($i$27))|0;
   $179 = (($pPred) + ($178)|0);
   HEAP8[$179>>0] = $141;
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $185 = (($i$27) + 1)|0;
   $186 = (($185) + ($177))|0;
   $187 = (($pPred) + ($186)|0);
   HEAP8[$187>>0] = $149;
  }
  $188 = (($i$27) + 2)|0;
  $189 = ($188|0)<(8);
  if ($189) {
   $j$13 = $188;
   while(1) {
    $190 = (($j$13) - ($i$27))|0;
    $191 = (($190) + -2)|0;
    $192 = (($uiPixelFilterT) + ($191)|0);
    $193 = HEAP8[$192>>0]|0;
    $194 = $193&255;
    $195 = (($190) + -1)|0;
    $196 = (($uiPixelFilterT) + ($195)|0);
    $197 = HEAP8[$196>>0]|0;
    $198 = $197&255;
    $199 = $198 << 1;
    $200 = (($uiPixelFilterT) + ($190)|0);
    $201 = HEAP8[$200>>0]|0;
    $202 = $201&255;
    $203 = (($194) + 2)|0;
    $204 = (($203) + ($199))|0;
    $205 = (($204) + ($202))|0;
    $206 = $205 >>> 2;
    $207 = $206&255;
    $208 = (($177) + ($j$13))|0;
    $209 = (($pPred) + ($208)|0);
    HEAP8[$209>>0] = $207;
    $210 = (($j$13) + 1)|0;
    $exitcond10 = ($210|0)==(8);
    if ($exitcond10) {
     break;
    } else {
     $j$13 = $210;
    }
   }
  }
  $211 = (($i$27) + 1)|0;
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $exitcond11 = ($211|0)==(8);
  if ($exitcond11) {
   break;
  } else {
   $i$27 = $211;$indvars$iv = $indvars$iv$next;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsI8x8LumaPredVL_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond11 = 0, $exitcond12 = 0, $i$17 = 0, $i$26 = 0, $iStride = 0, $j$12 = 0, $uiPixelFilterT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterT = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 $13 = (0 - ($kiStride))|0;
 if ($bTLAvail) {
  $14 = $kiStride ^ -1;
  $15 = (($pPred) + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($pPred) + ($13)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 1;
  $22 = (($21) + ($17))|0;
  $23 = (1 - ($kiStride))|0;
  $24 = (($pPred) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($22) + ($26))|0;
  $$pre$phiZ2D = $14;$$sink1 = $27;
 } else {
  $28 = (($pPred) + ($13)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30*3)|0;
  $32 = (1 - ($kiStride))|0;
  $33 = (($pPred) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($31) + ($35))|0;
  $$pre = $kiStride ^ -1;
  $$pre$phiZ2D = $$pre;$$sink1 = $36;
 }
 $37 = (($$sink1) + 2)|0;
 $38 = $37 >>> 2;
 $39 = $38&255;
 HEAP8[$uiPixelFilterT>>0] = $39;
 $i$17 = 1;
 while(1) {
  $40 = (($i$17) + ($$pre$phiZ2D))|0;
  $41 = (($pPred) + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($i$17) - ($kiStride))|0;
  $45 = (($pPred) + ($44)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $47 << 1;
  $49 = (($i$17) + 1)|0;
  $50 = (($49) - ($kiStride))|0;
  $51 = (($pPred) + ($50)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = (($43) + 2)|0;
  $55 = (($54) + ($48))|0;
  $56 = (($55) + ($53))|0;
  $57 = $56 >>> 2;
  $58 = $57&255;
  $59 = (($uiPixelFilterT) + ($i$17)|0);
  HEAP8[$59>>0] = $58;
  $exitcond12 = ($49|0)==(15);
  if ($exitcond12) {
   break;
  } else {
   $i$17 = $49;
  }
 }
 $60 = (14 - ($kiStride))|0;
 $61 = (($pPred) + ($60)|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = (15 - ($kiStride))|0;
 $65 = (($pPred) + ($64)|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = ($67*3)|0;
 $69 = (($63) + 2)|0;
 $70 = (($69) + ($68))|0;
 $71 = $70 >>> 2;
 $72 = $71&255;
 $73 = (($uiPixelFilterT) + 15|0);
 HEAP8[$73>>0] = $72;
 $i$26 = 0;
 while(1) {
  $74 = $i$26 & 1;
  $75 = ($74|0)==(0);
  $76 = $i$26 >> 1;
  $77 = (($iStride) + ($i$26<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  if ($75) {
   $79 = (($uiPixelFilterT) + ($76)|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = (($76) + 1)|0;
   $83 = (($uiPixelFilterT) + ($82)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = (($81) + 1)|0;
   $87 = (($86) + ($85))|0;
   $88 = $87 >>> 1;
   $89 = $88&255;
   $90 = (($pPred) + ($78)|0);
   HEAP8[$90>>0] = $89;
   $91 = (($76) + 2)|0;
   $92 = (($uiPixelFilterT) + ($91)|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = (($85) + 1)|0;
   $96 = (($95) + ($94))|0;
   $97 = $96 >>> 1;
   $98 = $97&255;
   $99 = (($78) + 1)|0;
   $100 = (($pPred) + ($99)|0);
   HEAP8[$100>>0] = $98;
   $101 = (($76) + 2)|0;
   $102 = (($uiPixelFilterT) + ($101)|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = (($76) + 3)|0;
   $106 = (($uiPixelFilterT) + ($105)|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = (($104) + 1)|0;
   $110 = (($109) + ($108))|0;
   $111 = $110 >>> 1;
   $112 = $111&255;
   $113 = (($78) + 2)|0;
   $114 = (($pPred) + ($113)|0);
   HEAP8[$114>>0] = $112;
   $115 = (($76) + 3)|0;
   $116 = (($uiPixelFilterT) + ($115)|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $119 = (($76) + 4)|0;
   $120 = (($uiPixelFilterT) + ($119)|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $121&255;
   $123 = (($118) + 1)|0;
   $124 = (($123) + ($122))|0;
   $125 = $124 >>> 1;
   $126 = $125&255;
   $127 = (($78) + 3)|0;
   $128 = (($pPred) + ($127)|0);
   HEAP8[$128>>0] = $126;
   $129 = (($76) + 4)|0;
   $130 = (($uiPixelFilterT) + ($129)|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $131&255;
   $133 = (($76) + 5)|0;
   $134 = (($uiPixelFilterT) + ($133)|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = $135&255;
   $137 = (($132) + 1)|0;
   $138 = (($137) + ($136))|0;
   $139 = $138 >>> 1;
   $140 = $139&255;
   $141 = (($78) + 4)|0;
   $142 = (($pPred) + ($141)|0);
   HEAP8[$142>>0] = $140;
   $143 = (($76) + 5)|0;
   $144 = (($uiPixelFilterT) + ($143)|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = $145&255;
   $147 = (($76) + 6)|0;
   $148 = (($uiPixelFilterT) + ($147)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($146) + 1)|0;
   $152 = (($151) + ($150))|0;
   $153 = $152 >>> 1;
   $154 = $153&255;
   $155 = (($78) + 5)|0;
   $156 = (($pPred) + ($155)|0);
   HEAP8[$156>>0] = $154;
   $157 = (($76) + 6)|0;
   $158 = (($uiPixelFilterT) + ($157)|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = $159&255;
   $161 = (($76) + 7)|0;
   $162 = (($uiPixelFilterT) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($160) + 1)|0;
   $166 = (($165) + ($164))|0;
   $167 = $166 >>> 1;
   $168 = $167&255;
   $169 = (($78) + 6)|0;
   $170 = (($pPred) + ($169)|0);
   HEAP8[$170>>0] = $168;
   $171 = (($76) + 7)|0;
   $172 = (($uiPixelFilterT) + ($171)|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = (($76) + 8)|0;
   $176 = (($uiPixelFilterT) + ($175)|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = (($174) + 1)|0;
   $180 = (($179) + ($178))|0;
   $181 = $180 >>> 1;
   $182 = $181&255;
   $183 = (($78) + 7)|0;
   $184 = (($pPred) + ($183)|0);
   HEAP8[$184>>0] = $182;
  } else {
   $j$12 = 0;
   while(1) {
    $185 = (($j$12) + ($76))|0;
    $186 = (($uiPixelFilterT) + ($185)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = (($185) + 1)|0;
    $190 = (($uiPixelFilterT) + ($189)|0);
    $191 = HEAP8[$190>>0]|0;
    $192 = $191&255;
    $193 = $192 << 1;
    $194 = (($185) + 2)|0;
    $195 = (($uiPixelFilterT) + ($194)|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = $196&255;
    $198 = (($188) + 2)|0;
    $199 = (($198) + ($193))|0;
    $200 = (($199) + ($197))|0;
    $201 = $200 >>> 2;
    $202 = $201&255;
    $203 = (($78) + ($j$12))|0;
    $204 = (($pPred) + ($203)|0);
    HEAP8[$204>>0] = $202;
    $205 = (($j$12) + 1)|0;
    $exitcond = ($205|0)==(8);
    if ($exitcond) {
     break;
    } else {
     $j$12 = $205;
    }
   }
  }
  $206 = (($i$26) + 1)|0;
  $exitcond11 = ($206|0)==(8);
  if ($exitcond11) {
   break;
  } else {
   $i$26 = $206;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec23WelsI8x8LumaPredVLTop_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond13 = 0, $i$37 = 0, $iStride = 0;
 var $j$12 = 0, $scevgep = 0, $uiPixelFilterT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterT = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 $13 = (0 - ($kiStride))|0;
 if ($bTLAvail) {
  $14 = $kiStride ^ -1;
  $15 = (($pPred) + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($pPred) + ($13)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 1;
  $22 = (($21) + ($17))|0;
  $23 = (1 - ($kiStride))|0;
  $24 = (($pPred) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($22) + ($26))|0;
  $$pre$phiZ2D = $14;$$sink1 = $27;
 } else {
  $28 = (($pPred) + ($13)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30*3)|0;
  $32 = (1 - ($kiStride))|0;
  $33 = (($pPred) + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($31) + ($35))|0;
  $$pre = $kiStride ^ -1;
  $$pre$phiZ2D = $$pre;$$sink1 = $36;
 }
 $37 = (($$sink1) + 2)|0;
 $38 = $37 >>> 2;
 $39 = $38&255;
 HEAP8[$uiPixelFilterT>>0] = $39;
 $40 = (($$pre$phiZ2D) + 1)|0;
 $41 = (($pPred) + ($40)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = (1 - ($kiStride))|0;
 $45 = (($pPred) + ($44)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 << 1;
 $49 = (2 - ($kiStride))|0;
 $50 = (($pPred) + ($49)|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = (($43) + 2)|0;
 $54 = (($53) + ($48))|0;
 $55 = (($54) + ($52))|0;
 $56 = $55 >>> 2;
 $57 = $56&255;
 $58 = (($uiPixelFilterT) + 1|0);
 HEAP8[$58>>0] = $57;
 $59 = (($$pre$phiZ2D) + 2)|0;
 $60 = (($pPred) + ($59)|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = $52 << 1;
 $64 = (3 - ($kiStride))|0;
 $65 = (($pPred) + ($64)|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = (($62) + 2)|0;
 $69 = (($68) + ($63))|0;
 $70 = (($69) + ($67))|0;
 $71 = $70 >>> 2;
 $72 = $71&255;
 $73 = (($uiPixelFilterT) + 2|0);
 HEAP8[$73>>0] = $72;
 $74 = (($$pre$phiZ2D) + 3)|0;
 $75 = (($pPred) + ($74)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = $67 << 1;
 $79 = (4 - ($kiStride))|0;
 $80 = (($pPred) + ($79)|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = (($77) + 2)|0;
 $84 = (($83) + ($78))|0;
 $85 = (($84) + ($82))|0;
 $86 = $85 >>> 2;
 $87 = $86&255;
 $88 = (($uiPixelFilterT) + 3|0);
 HEAP8[$88>>0] = $87;
 $89 = (($$pre$phiZ2D) + 4)|0;
 $90 = (($pPred) + ($89)|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 $93 = $82 << 1;
 $94 = (5 - ($kiStride))|0;
 $95 = (($pPred) + ($94)|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = (($92) + 2)|0;
 $99 = (($98) + ($93))|0;
 $100 = (($99) + ($97))|0;
 $101 = $100 >>> 2;
 $102 = $101&255;
 $103 = (($uiPixelFilterT) + 4|0);
 HEAP8[$103>>0] = $102;
 $104 = (($$pre$phiZ2D) + 5)|0;
 $105 = (($pPred) + ($104)|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = $97 << 1;
 $109 = (6 - ($kiStride))|0;
 $110 = (($pPred) + ($109)|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = (($107) + 2)|0;
 $114 = (($113) + ($108))|0;
 $115 = (($114) + ($112))|0;
 $116 = $115 >>> 2;
 $117 = $116&255;
 $118 = (($uiPixelFilterT) + 5|0);
 HEAP8[$118>>0] = $117;
 $119 = (($$pre$phiZ2D) + 6)|0;
 $120 = (($pPred) + ($119)|0);
 $121 = HEAP8[$120>>0]|0;
 $122 = $121&255;
 $123 = $112 << 1;
 $124 = (7 - ($kiStride))|0;
 $125 = (($pPred) + ($124)|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = (($122) + 2)|0;
 $129 = (($128) + ($123))|0;
 $130 = (($129) + ($127))|0;
 $131 = $130 >>> 2;
 $132 = $131&255;
 $133 = (($uiPixelFilterT) + 6|0);
 HEAP8[$133>>0] = $132;
 $134 = ($127*3)|0;
 $135 = (($112) + 2)|0;
 $136 = (($135) + ($134))|0;
 $137 = $136 >>> 2;
 $138 = $137&255;
 $139 = (($uiPixelFilterT) + 7|0);
 HEAP8[$139>>0] = $138;
 $scevgep = (($uiPixelFilterT) + 8|0);
 _memset(($scevgep|0),($126|0),8)|0;
 $i$37 = 0;
 while(1) {
  $140 = $i$37 & 1;
  $141 = ($140|0)==(0);
  $142 = $i$37 >> 1;
  $143 = (($iStride) + ($i$37<<2)|0);
  $144 = HEAP32[$143>>2]|0;
  if ($141) {
   $145 = (($uiPixelFilterT) + ($142)|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = (($142) + 1)|0;
   $149 = (($uiPixelFilterT) + ($148)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = (($147) + 1)|0;
   $153 = (($152) + ($151))|0;
   $154 = $153 >>> 1;
   $155 = $154&255;
   $156 = (($pPred) + ($144)|0);
   HEAP8[$156>>0] = $155;
   $157 = (($142) + 2)|0;
   $158 = (($uiPixelFilterT) + ($157)|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = $159&255;
   $161 = (($151) + 1)|0;
   $162 = (($161) + ($160))|0;
   $163 = $162 >>> 1;
   $164 = $163&255;
   $165 = (($144) + 1)|0;
   $166 = (($pPred) + ($165)|0);
   HEAP8[$166>>0] = $164;
   $167 = (($142) + 2)|0;
   $168 = (($uiPixelFilterT) + ($167)|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = $169&255;
   $171 = (($142) + 3)|0;
   $172 = (($uiPixelFilterT) + ($171)|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = (($170) + 1)|0;
   $176 = (($175) + ($174))|0;
   $177 = $176 >>> 1;
   $178 = $177&255;
   $179 = (($144) + 2)|0;
   $180 = (($pPred) + ($179)|0);
   HEAP8[$180>>0] = $178;
   $181 = (($142) + 3)|0;
   $182 = (($uiPixelFilterT) + ($181)|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = (($142) + 4)|0;
   $186 = (($uiPixelFilterT) + ($185)|0);
   $187 = HEAP8[$186>>0]|0;
   $188 = $187&255;
   $189 = (($184) + 1)|0;
   $190 = (($189) + ($188))|0;
   $191 = $190 >>> 1;
   $192 = $191&255;
   $193 = (($144) + 3)|0;
   $194 = (($pPred) + ($193)|0);
   HEAP8[$194>>0] = $192;
   $195 = (($142) + 4)|0;
   $196 = (($uiPixelFilterT) + ($195)|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = (($142) + 5)|0;
   $200 = (($uiPixelFilterT) + ($199)|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = (($198) + 1)|0;
   $204 = (($203) + ($202))|0;
   $205 = $204 >>> 1;
   $206 = $205&255;
   $207 = (($144) + 4)|0;
   $208 = (($pPred) + ($207)|0);
   HEAP8[$208>>0] = $206;
   $209 = (($142) + 5)|0;
   $210 = (($uiPixelFilterT) + ($209)|0);
   $211 = HEAP8[$210>>0]|0;
   $212 = $211&255;
   $213 = (($142) + 6)|0;
   $214 = (($uiPixelFilterT) + ($213)|0);
   $215 = HEAP8[$214>>0]|0;
   $216 = $215&255;
   $217 = (($212) + 1)|0;
   $218 = (($217) + ($216))|0;
   $219 = $218 >>> 1;
   $220 = $219&255;
   $221 = (($144) + 5)|0;
   $222 = (($pPred) + ($221)|0);
   HEAP8[$222>>0] = $220;
   $223 = (($142) + 6)|0;
   $224 = (($uiPixelFilterT) + ($223)|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = $225&255;
   $227 = (($142) + 7)|0;
   $228 = (($uiPixelFilterT) + ($227)|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229&255;
   $231 = (($226) + 1)|0;
   $232 = (($231) + ($230))|0;
   $233 = $232 >>> 1;
   $234 = $233&255;
   $235 = (($144) + 6)|0;
   $236 = (($pPred) + ($235)|0);
   HEAP8[$236>>0] = $234;
   $237 = (($142) + 7)|0;
   $238 = (($uiPixelFilterT) + ($237)|0);
   $239 = HEAP8[$238>>0]|0;
   $240 = $239&255;
   $241 = (($142) + 8)|0;
   $242 = (($uiPixelFilterT) + ($241)|0);
   $243 = HEAP8[$242>>0]|0;
   $244 = $243&255;
   $245 = (($240) + 1)|0;
   $246 = (($245) + ($244))|0;
   $247 = $246 >>> 1;
   $248 = $247&255;
   $249 = (($144) + 7)|0;
   $250 = (($pPred) + ($249)|0);
   HEAP8[$250>>0] = $248;
  } else {
   $j$12 = 0;
   while(1) {
    $251 = (($j$12) + ($142))|0;
    $252 = (($uiPixelFilterT) + ($251)|0);
    $253 = HEAP8[$252>>0]|0;
    $254 = $253&255;
    $255 = (($251) + 1)|0;
    $256 = (($uiPixelFilterT) + ($255)|0);
    $257 = HEAP8[$256>>0]|0;
    $258 = $257&255;
    $259 = $258 << 1;
    $260 = (($251) + 2)|0;
    $261 = (($uiPixelFilterT) + ($260)|0);
    $262 = HEAP8[$261>>0]|0;
    $263 = $262&255;
    $264 = (($254) + 2)|0;
    $265 = (($264) + ($259))|0;
    $266 = (($265) + ($263))|0;
    $267 = $266 >>> 2;
    $268 = $267&255;
    $269 = (($144) + ($j$12))|0;
    $270 = (($pPred) + ($269)|0);
    HEAP8[$270>>0] = $268;
    $271 = (($j$12) + 1)|0;
    $exitcond = ($271|0)==(8);
    if ($exitcond) {
     break;
    } else {
     $j$12 = $271;
    }
   }
  }
  $272 = (($i$37) + 1)|0;
  $exitcond13 = ($272|0)==(8);
  if ($exitcond13) {
   break;
  } else {
   $i$37 = $272;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsI8x8LumaPredVR_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $50$phi = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond6 = 0;
 var $exitcond7 = 0, $i$14 = 0, $i$23 = 0, $iStride = 0, $j$02 = 0, $uiPixelFilterL = 0, $uiPixelFilterT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterL = sp + 40|0;
 $uiPixelFilterT = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 $13 = (($pPred) + -1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $kiStride ^ -1;
 $17 = (($pPred) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 1;
 $21 = (0 - ($kiStride))|0;
 $22 = (($pPred) + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($15) + 2)|0;
 $26 = (($25) + ($20))|0;
 $27 = (($26) + ($24))|0;
 $28 = $15 << 1;
 $29 = (($kiStride) + -1)|0;
 $30 = (($pPred) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = (($28) + 2)|0;
 $34 = (($33) + ($19))|0;
 $35 = (($34) + ($32))|0;
 $36 = $35 >>> 2;
 $37 = $36&255;
 HEAP8[$uiPixelFilterL>>0] = $37;
 $38 = $24 << 1;
 $39 = (1 - ($kiStride))|0;
 $40 = (($pPred) + ($39)|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = (($19) + 2)|0;
 $44 = (($43) + ($38))|0;
 $45 = (($44) + ($42))|0;
 $46 = $45 >>> 2;
 $47 = $46&255;
 HEAP8[$uiPixelFilterT>>0] = $47;
 $50 = $14;$52 = $31;$i$14 = 1;
 while(1) {
  $48 = (($i$14) + -1)|0;
  $49 = $50&255;
  $51 = $52&255;
  $53 = $51 << 1;
  $54 = (($i$14) + 1)|0;
  $55 = (($iStride) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + -1)|0;
  $58 = (($pPred) + ($57)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = (($49) + 2)|0;
  $62 = (($61) + ($53))|0;
  $63 = (($62) + ($60))|0;
  $64 = $63 >>> 2;
  $65 = $64&255;
  $66 = (($uiPixelFilterL) + ($i$14)|0);
  HEAP8[$66>>0] = $65;
  $67 = (($48) - ($kiStride))|0;
  $68 = (($pPred) + ($67)|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($i$14) - ($kiStride))|0;
  $72 = (($pPred) + ($71)|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $74 << 1;
  $76 = (($54) - ($kiStride))|0;
  $77 = (($pPred) + ($76)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (($70) + 2)|0;
  $81 = (($80) + ($75))|0;
  $82 = (($81) + ($79))|0;
  $83 = $82 >>> 2;
  $84 = $83&255;
  $85 = (($uiPixelFilterT) + ($i$14)|0);
  HEAP8[$85>>0] = $84;
  $exitcond7 = ($54|0)==(7);
  if ($exitcond7) {
   break;
  } else {
   $50$phi = $52;$52 = $59;$i$14 = $54;$50 = $50$phi;
  }
 }
 $86 = $27 >>> 2;
 $87 = (($9) + -1)|0;
 $88 = (($pPred) + ($87)|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = (($11) + -1)|0;
 $92 = (($pPred) + ($91)|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = ($94*3)|0;
 $96 = (($90) + 2)|0;
 $97 = (($96) + ($95))|0;
 $98 = $97 >>> 2;
 $99 = $98&255;
 $100 = (($uiPixelFilterL) + 7|0);
 HEAP8[$100>>0] = $99;
 $101 = (6 - ($kiStride))|0;
 $102 = (($pPred) + ($101)|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = (7 - ($kiStride))|0;
 $106 = (($pPred) + ($105)|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 if ($bTRAvail) {
  $109 = $108 << 1;
  $110 = (($109) + ($104))|0;
  $111 = (8 - ($kiStride))|0;
  $112 = (($pPred) + ($111)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = (($110) + ($114))|0;
  $$sink1 = $115;
 } else {
  $116 = ($108*3)|0;
  $117 = (($116) + ($104))|0;
  $$sink1 = $117;
 }
 $118 = (($$sink1) + 2)|0;
 $119 = $118 >>> 2;
 $120 = $119&255;
 $121 = (($uiPixelFilterT) + 7|0);
 HEAP8[$121>>0] = $120;
 $122 = $86 & 255;
 $123 = HEAP8[$uiPixelFilterT>>0]|0;
 $124 = $123&255;
 $125 = (($122) + 1)|0;
 $126 = (($125) + ($124))|0;
 $127 = $126 >>> 1;
 $128 = $127&255;
 $129 = $124 << 1;
 $130 = (($uiPixelFilterT) + 1|0);
 $131 = HEAP8[$130>>0]|0;
 $132 = $131&255;
 $133 = (($122) + 2)|0;
 $134 = (($133) + ($129))|0;
 $135 = (($134) + ($132))|0;
 $136 = $135 >>> 2;
 $137 = $136&255;
 $138 = HEAP8[$uiPixelFilterL>>0]|0;
 $139 = $138&255;
 $140 = $86 << 1;
 $141 = $140 & 510;
 $142 = (($141) + 2)|0;
 $143 = (($142) + ($139))|0;
 $144 = (($143) + ($124))|0;
 $145 = $144 >>> 2;
 $146 = $145&255;
 $147 = (($uiPixelFilterL) + 1|0);
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = $139 << 1;
 $151 = (($133) + ($149))|0;
 $152 = (($151) + ($150))|0;
 $153 = $152 >>> 2;
 $154 = $153&255;
 $i$23 = 0;
 while(1) {
  $155 = $i$23 >> 1;
  $156 = (($iStride) + ($i$23<<2)|0);
  $j$02 = 0;
  while(1) {
   $157 = $j$02 << 1;
   $158 = (($157) - ($i$23))|0;
   $159 = (($j$02) - ($155))|0;
   $160 = ($158|0)>(-1);
   do {
    if ($160) {
     $161 = $158 & 1;
     $162 = ($161|0)==(0);
     if ($162) {
      $163 = ($159|0)>(0);
      if ($163) {
       $164 = (($159) + -1)|0;
       $165 = (($uiPixelFilterT) + ($164)|0);
       $166 = HEAP8[$165>>0]|0;
       $167 = $166&255;
       $168 = (($uiPixelFilterT) + ($159)|0);
       $169 = HEAP8[$168>>0]|0;
       $170 = $169&255;
       $171 = (($167) + 1)|0;
       $172 = (($171) + ($170))|0;
       $173 = $172 >>> 1;
       $174 = $173&255;
       $175 = HEAP32[$156>>2]|0;
       $176 = (($175) + ($j$02))|0;
       $177 = (($pPred) + ($176)|0);
       HEAP8[$177>>0] = $174;
       break;
      } else {
       $178 = HEAP32[$156>>2]|0;
       $179 = (($178) + ($j$02))|0;
       $180 = (($pPred) + ($179)|0);
       HEAP8[$180>>0] = $128;
       break;
      }
     } else {
      $181 = ($159|0)>(1);
      if ($181) {
       $182 = (($159) + -2)|0;
       $183 = (($uiPixelFilterT) + ($182)|0);
       $184 = HEAP8[$183>>0]|0;
       $185 = $184&255;
       $186 = (($159) + -1)|0;
       $187 = (($uiPixelFilterT) + ($186)|0);
       $188 = HEAP8[$187>>0]|0;
       $189 = $188&255;
       $190 = $189 << 1;
       $191 = (($uiPixelFilterT) + ($159)|0);
       $192 = HEAP8[$191>>0]|0;
       $193 = $192&255;
       $194 = (($185) + 2)|0;
       $195 = (($194) + ($190))|0;
       $196 = (($195) + ($193))|0;
       $197 = $196 >>> 2;
       $198 = $197&255;
       $199 = HEAP32[$156>>2]|0;
       $200 = (($199) + ($j$02))|0;
       $201 = (($pPred) + ($200)|0);
       HEAP8[$201>>0] = $198;
       break;
      } else {
       $202 = HEAP32[$156>>2]|0;
       $203 = (($202) + ($j$02))|0;
       $204 = (($pPred) + ($203)|0);
       HEAP8[$204>>0] = $137;
       break;
      }
     }
    } else {
     $205 = ($158|0)==(-1);
     if ($205) {
      $206 = HEAP32[$156>>2]|0;
      $207 = (($206) + ($j$02))|0;
      $208 = (($pPred) + ($207)|0);
      HEAP8[$208>>0] = $146;
      break;
     }
     $209 = ($158|0)<(-2);
     if ($209) {
      $210 = $158 ^ -1;
      $211 = (($uiPixelFilterL) + ($210)|0);
      $212 = HEAP8[$211>>0]|0;
      $213 = $212&255;
      $214 = (-2 - ($158))|0;
      $215 = (($uiPixelFilterL) + ($214)|0);
      $216 = HEAP8[$215>>0]|0;
      $217 = $216&255;
      $218 = $217 << 1;
      $219 = (-3 - ($158))|0;
      $220 = (($uiPixelFilterL) + ($219)|0);
      $221 = HEAP8[$220>>0]|0;
      $222 = $221&255;
      $223 = (($213) + 2)|0;
      $224 = (($223) + ($218))|0;
      $225 = (($224) + ($222))|0;
      $226 = $225 >>> 2;
      $227 = $226&255;
      $228 = HEAP32[$156>>2]|0;
      $229 = (($228) + ($j$02))|0;
      $230 = (($pPred) + ($229)|0);
      HEAP8[$230>>0] = $227;
      break;
     } else {
      $231 = HEAP32[$156>>2]|0;
      $232 = (($231) + ($j$02))|0;
      $233 = (($pPred) + ($232)|0);
      HEAP8[$233>>0] = $154;
      break;
     }
    }
   } while(0);
   $234 = (($j$02) + 1)|0;
   $exitcond = ($234|0)==(8);
   if ($exitcond) {
    break;
   } else {
    $j$02 = $234;
   }
  }
  $235 = (($i$23) + 1)|0;
  $exitcond6 = ($235|0)==(8);
  if ($exitcond6) {
   break;
  } else {
   $i$23 = $235;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsI8x8LumaPredHU_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $40$phi = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond6 = 0, $exitcond7 = 0, $i$14 = 0, $i$23 = 0, $iStride = 0, $j$02 = 0, $uiPixelFilterL = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterL = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 if ($bTLAvail) {
  $13 = $kiStride ^ -1;
  $14 = (($pPred) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($pPred) + -1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 << 1;
  $21 = (($20) + ($16))|0;
  $22 = (($kiStride) + -1)|0;
  $23 = (($pPred) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $$sink1 = $26;$120 = $24;$121 = $18;
 } else {
  $27 = (($pPred) + -1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($29*3)|0;
  $31 = (($kiStride) + -1)|0;
  $32 = (($pPred) + ($31)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($34) + ($30))|0;
  $$sink1 = $35;$120 = $33;$121 = $28;
 }
 $36 = (($$sink1) + 2)|0;
 $37 = $36 >>> 2;
 $38 = $37&255;
 HEAP8[$uiPixelFilterL>>0] = $38;
 $40 = $121;$42 = $120;$i$14 = 1;
 while(1) {
  $39 = $40&255;
  $41 = $42&255;
  $43 = $41 << 1;
  $44 = (($i$14) + 1)|0;
  $45 = (($iStride) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + -1)|0;
  $48 = (($pPred) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = (($39) + 2)|0;
  $52 = (($51) + ($43))|0;
  $53 = (($52) + ($50))|0;
  $54 = $53 >>> 2;
  $55 = $54&255;
  $56 = (($uiPixelFilterL) + ($i$14)|0);
  HEAP8[$56>>0] = $55;
  $exitcond7 = ($44|0)==(7);
  if ($exitcond7) {
   break;
  } else {
   $40$phi = $42;$42 = $49;$i$14 = $44;$40 = $40$phi;
  }
 }
 $57 = (($9) + -1)|0;
 $58 = (($pPred) + ($57)|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = (($11) + -1)|0;
 $62 = (($pPred) + ($61)|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = ($64*3)|0;
 $66 = (($60) + 2)|0;
 $67 = (($66) + ($65))|0;
 $68 = $67 >>> 2;
 $69 = $68&255;
 $70 = (($uiPixelFilterL) + 7|0);
 HEAP8[$70>>0] = $69;
 $71 = (($uiPixelFilterL) + 6|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $68 & 255;
 $75 = ($74*3)|0;
 $76 = (($73) + 2)|0;
 $77 = (($76) + ($75))|0;
 $78 = $77 >>> 2;
 $79 = $78&255;
 $i$23 = 0;
 while(1) {
  $80 = $i$23 << 1;
  $81 = (($iStride) + ($i$23<<2)|0);
  $j$02 = 0;
  while(1) {
   $82 = (($j$02) + ($80))|0;
   $83 = ($82|0)<(13);
   do {
    if ($83) {
     $84 = $82 & 1;
     $85 = ($84|0)==(0);
     $86 = $82 >> 1;
     $87 = (($uiPixelFilterL) + ($86)|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $88&255;
     $90 = (($86) + 1)|0;
     $91 = (($uiPixelFilterL) + ($90)|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     if ($85) {
      $94 = (($89) + 1)|0;
      $95 = (($94) + ($93))|0;
      $96 = $95 >>> 1;
      $97 = $96&255;
      $98 = HEAP32[$81>>2]|0;
      $99 = (($98) + ($j$02))|0;
      $100 = (($pPred) + ($99)|0);
      HEAP8[$100>>0] = $97;
      break;
     } else {
      $101 = $93 << 1;
      $102 = (($86) + 2)|0;
      $103 = (($uiPixelFilterL) + ($102)|0);
      $104 = HEAP8[$103>>0]|0;
      $105 = $104&255;
      $106 = (($89) + 2)|0;
      $107 = (($106) + ($101))|0;
      $108 = (($107) + ($105))|0;
      $109 = $108 >>> 2;
      $110 = $109&255;
      $111 = HEAP32[$81>>2]|0;
      $112 = (($111) + ($j$02))|0;
      $113 = (($pPred) + ($112)|0);
      HEAP8[$113>>0] = $110;
      break;
     }
    } else {
     $114 = ($82|0)==(13);
     $115 = HEAP32[$81>>2]|0;
     $116 = (($115) + ($j$02))|0;
     $117 = (($pPred) + ($116)|0);
     if ($114) {
      HEAP8[$117>>0] = $79;
      break;
     } else {
      HEAP8[$117>>0] = $69;
      break;
     }
    }
   } while(0);
   $118 = (($j$02) + 1)|0;
   $exitcond = ($118|0)==(8);
   if ($exitcond) {
    break;
   } else {
    $j$02 = $118;
   }
  }
  $119 = (($i$23) + 1)|0;
  $exitcond6 = ($119|0)==(8);
  if ($exitcond6) {
   break;
  } else {
   $i$23 = $119;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec20WelsI8x8LumaPredHD_cEPhibb($pPred,$kiStride,$bTLAvail,$bTRAvail) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 $bTLAvail = $bTLAvail|0;
 $bTRAvail = $bTRAvail|0;
 var $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $50$phi = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond6 = 0;
 var $exitcond7 = 0, $i$14 = 0, $i$23 = 0, $iStride = 0, $j$02 = 0, $uiPixelFilterL = 0, $uiPixelFilterT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iStride = sp;
 $uiPixelFilterL = sp + 40|0;
 $uiPixelFilterT = sp + 32|0;
 HEAP32[$iStride>>2] = 0;
 $0 = (($iStride) + 4|0);
 HEAP32[$0>>2] = $kiStride;
 $1 = $kiStride << 1;
 $2 = (($iStride) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + ($kiStride))|0;
 $4 = (($iStride) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($3) + ($kiStride))|0;
 $6 = (($iStride) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (($5) + ($kiStride))|0;
 $8 = (($iStride) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + ($kiStride))|0;
 $10 = (($iStride) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + ($kiStride))|0;
 $12 = (($iStride) + 28|0);
 HEAP32[$12>>2] = $11;
 $13 = (($pPred) + -1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $kiStride ^ -1;
 $17 = (($pPred) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 1;
 $21 = (0 - ($kiStride))|0;
 $22 = (($pPred) + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($15) + 2)|0;
 $26 = (($25) + ($20))|0;
 $27 = (($26) + ($24))|0;
 $28 = $15 << 1;
 $29 = (($kiStride) + -1)|0;
 $30 = (($pPred) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = (($28) + 2)|0;
 $34 = (($33) + ($19))|0;
 $35 = (($34) + ($32))|0;
 $36 = $35 >>> 2;
 $37 = $36&255;
 HEAP8[$uiPixelFilterL>>0] = $37;
 $38 = $24 << 1;
 $39 = (1 - ($kiStride))|0;
 $40 = (($pPred) + ($39)|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = (($19) + 2)|0;
 $44 = (($43) + ($38))|0;
 $45 = (($44) + ($42))|0;
 $46 = $45 >>> 2;
 $47 = $46&255;
 HEAP8[$uiPixelFilterT>>0] = $47;
 $50 = $14;$52 = $31;$i$14 = 1;
 while(1) {
  $48 = (($i$14) + -1)|0;
  $49 = $50&255;
  $51 = $52&255;
  $53 = $51 << 1;
  $54 = (($i$14) + 1)|0;
  $55 = (($iStride) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + -1)|0;
  $58 = (($pPred) + ($57)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = (($49) + 2)|0;
  $62 = (($61) + ($53))|0;
  $63 = (($62) + ($60))|0;
  $64 = $63 >>> 2;
  $65 = $64&255;
  $66 = (($uiPixelFilterL) + ($i$14)|0);
  HEAP8[$66>>0] = $65;
  $67 = (($48) - ($kiStride))|0;
  $68 = (($pPred) + ($67)|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($i$14) - ($kiStride))|0;
  $72 = (($pPred) + ($71)|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $74 << 1;
  $76 = (($54) - ($kiStride))|0;
  $77 = (($pPred) + ($76)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (($70) + 2)|0;
  $81 = (($80) + ($75))|0;
  $82 = (($81) + ($79))|0;
  $83 = $82 >>> 2;
  $84 = $83&255;
  $85 = (($uiPixelFilterT) + ($i$14)|0);
  HEAP8[$85>>0] = $84;
  $exitcond7 = ($54|0)==(7);
  if ($exitcond7) {
   break;
  } else {
   $50$phi = $52;$52 = $59;$i$14 = $54;$50 = $50$phi;
  }
 }
 $86 = $27 >>> 2;
 $87 = (($9) + -1)|0;
 $88 = (($pPred) + ($87)|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = (($11) + -1)|0;
 $92 = (($pPred) + ($91)|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = ($94*3)|0;
 $96 = (($90) + 2)|0;
 $97 = (($96) + ($95))|0;
 $98 = $97 >>> 2;
 $99 = $98&255;
 $100 = (($uiPixelFilterL) + 7|0);
 HEAP8[$100>>0] = $99;
 $101 = (6 - ($kiStride))|0;
 $102 = (($pPred) + ($101)|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = (7 - ($kiStride))|0;
 $106 = (($pPred) + ($105)|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 if ($bTRAvail) {
  $109 = $108 << 1;
  $110 = (($109) + ($104))|0;
  $111 = (8 - ($kiStride))|0;
  $112 = (($pPred) + ($111)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = (($110) + ($114))|0;
  $$sink1 = $115;
 } else {
  $116 = ($108*3)|0;
  $117 = (($116) + ($104))|0;
  $$sink1 = $117;
 }
 $118 = (($$sink1) + 2)|0;
 $119 = $118 >>> 2;
 $120 = $119&255;
 $121 = (($uiPixelFilterT) + 7|0);
 HEAP8[$121>>0] = $120;
 $122 = $86 & 255;
 $123 = HEAP8[$uiPixelFilterL>>0]|0;
 $124 = $123&255;
 $125 = (($122) + 1)|0;
 $126 = (($125) + ($124))|0;
 $127 = $126 >>> 1;
 $128 = $127&255;
 $129 = $124 << 1;
 $130 = (($uiPixelFilterL) + 1|0);
 $131 = HEAP8[$130>>0]|0;
 $132 = $131&255;
 $133 = (($122) + 2)|0;
 $134 = (($133) + ($129))|0;
 $135 = (($134) + ($132))|0;
 $136 = $135 >>> 2;
 $137 = $136&255;
 $138 = $86 << 1;
 $139 = $138 & 510;
 $140 = HEAP8[$uiPixelFilterT>>0]|0;
 $141 = $140&255;
 $142 = (($139) + 2)|0;
 $143 = (($142) + ($124))|0;
 $144 = (($143) + ($141))|0;
 $145 = $144 >>> 2;
 $146 = $145&255;
 $147 = (($uiPixelFilterT) + 1|0);
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = $141 << 1;
 $151 = (($133) + ($149))|0;
 $152 = (($151) + ($150))|0;
 $153 = $152 >>> 2;
 $154 = $153&255;
 $i$23 = 0;
 while(1) {
  $155 = $i$23 << 1;
  $156 = (($iStride) + ($i$23<<2)|0);
  $j$02 = 0;
  while(1) {
   $157 = (($155) - ($j$02))|0;
   $158 = $j$02 >> 1;
   $159 = (($i$23) - ($158))|0;
   $160 = ($157|0)>(-1);
   do {
    if ($160) {
     $161 = $157 & 1;
     $162 = ($161|0)==(0);
     if ($162) {
      $163 = ($i$23|0)==($158|0);
      if ($163) {
       $164 = HEAP32[$156>>2]|0;
       $165 = (($164) + ($j$02))|0;
       $166 = (($pPred) + ($165)|0);
       HEAP8[$166>>0] = $128;
       break;
      } else {
       $167 = (($159) + -1)|0;
       $168 = (($uiPixelFilterL) + ($167)|0);
       $169 = HEAP8[$168>>0]|0;
       $170 = $169&255;
       $171 = (($uiPixelFilterL) + ($159)|0);
       $172 = HEAP8[$171>>0]|0;
       $173 = $172&255;
       $174 = (($170) + 1)|0;
       $175 = (($174) + ($173))|0;
       $176 = $175 >>> 1;
       $177 = $176&255;
       $178 = HEAP32[$156>>2]|0;
       $179 = (($178) + ($j$02))|0;
       $180 = (($pPred) + ($179)|0);
       HEAP8[$180>>0] = $177;
       break;
      }
     } else {
      $181 = ($159|0)==(1);
      if ($181) {
       $182 = HEAP32[$156>>2]|0;
       $183 = (($182) + ($j$02))|0;
       $184 = (($pPred) + ($183)|0);
       HEAP8[$184>>0] = $137;
       break;
      } else {
       $185 = (($159) + -2)|0;
       $186 = (($uiPixelFilterL) + ($185)|0);
       $187 = HEAP8[$186>>0]|0;
       $188 = $187&255;
       $189 = (($159) + -1)|0;
       $190 = (($uiPixelFilterL) + ($189)|0);
       $191 = HEAP8[$190>>0]|0;
       $192 = $191&255;
       $193 = $192 << 1;
       $194 = (($uiPixelFilterL) + ($159)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = (($188) + 2)|0;
       $198 = (($197) + ($193))|0;
       $199 = (($198) + ($196))|0;
       $200 = $199 >>> 2;
       $201 = $200&255;
       $202 = HEAP32[$156>>2]|0;
       $203 = (($202) + ($j$02))|0;
       $204 = (($pPred) + ($203)|0);
       HEAP8[$204>>0] = $201;
       break;
      }
     }
    } else {
     $205 = ($157|0)==(-1);
     if ($205) {
      $206 = HEAP32[$156>>2]|0;
      $207 = (($206) + ($j$02))|0;
      $208 = (($pPred) + ($207)|0);
      HEAP8[$208>>0] = $146;
      break;
     }
     $209 = ($157|0)<(-2);
     if ($209) {
      $210 = $157 ^ -1;
      $211 = (($uiPixelFilterT) + ($210)|0);
      $212 = HEAP8[$211>>0]|0;
      $213 = $212&255;
      $214 = (-2 - ($157))|0;
      $215 = (($uiPixelFilterT) + ($214)|0);
      $216 = HEAP8[$215>>0]|0;
      $217 = $216&255;
      $218 = $217 << 1;
      $219 = (-3 - ($157))|0;
      $220 = (($uiPixelFilterT) + ($219)|0);
      $221 = HEAP8[$220>>0]|0;
      $222 = $221&255;
      $223 = (($213) + 2)|0;
      $224 = (($223) + ($218))|0;
      $225 = (($224) + ($222))|0;
      $226 = $225 >>> 2;
      $227 = $226&255;
      $228 = HEAP32[$156>>2]|0;
      $229 = (($228) + ($j$02))|0;
      $230 = (($pPred) + ($229)|0);
      HEAP8[$230>>0] = $227;
      break;
     } else {
      $231 = HEAP32[$156>>2]|0;
      $232 = (($231) + ($j$02))|0;
      $233 = (($pPred) + ($232)|0);
      HEAP8[$233>>0] = $154;
      break;
     }
    }
   } while(0);
   $234 = (($j$02) + 1)|0;
   $exitcond = ($234|0)==(8);
   if ($exitcond) {
    break;
   } else {
    $j$02 = $234;
   }
  }
  $235 = (($i$23) + 1)|0;
  $exitcond6 = ($235|0)==(8);
  if ($exitcond6) {
   break;
  } else {
   $i$23 = $235;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec18WelsIChromaPredV_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (0 - ($kiStride))|0;
 $1 = (($pPred) + ($0)|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $kiStride << 1;
 $9 = $kiStride << 2;
 $10 = $pPred;
 $11 = $10;
 HEAP32[$11>>2] = $4;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $7;
 $14 = (($pPred) + ($kiStride)|0);
 $15 = $14;
 $16 = $15;
 HEAP32[$16>>2] = $4;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $7;
 $19 = (($pPred) + ($8)|0);
 $20 = $19;
 $21 = $20;
 HEAP32[$21>>2] = $4;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $7;
 $$sum = (($8) + ($kiStride))|0;
 $24 = (($pPred) + ($$sum)|0);
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = $4;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $7;
 $29 = (($pPred) + ($9)|0);
 $30 = $29;
 $31 = $30;
 HEAP32[$31>>2] = $4;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $7;
 $$sum1 = (($9) + ($kiStride))|0;
 $34 = (($pPred) + ($$sum1)|0);
 $35 = $34;
 $36 = $35;
 HEAP32[$36>>2] = $4;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $7;
 $$sum2 = (($9) + ($8))|0;
 $39 = (($pPred) + ($$sum2)|0);
 $40 = $39;
 $41 = $40;
 HEAP32[$41>>2] = $4;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $7;
 $$sum3 = ($kiStride*7)|0;
 $44 = (($pPred) + ($$sum3)|0);
 $45 = $44;
 $46 = $45;
 HEAP32[$46>>2] = $4;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN7WelsDec18WelsIChromaPredH_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kiStride*7)|0;
 $1 = (($0) + -1)|0;
 $2 = (($pPred) + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (___muldi3(($4|0),0,16843009,16843009)|0);
 $6 = tempRet0;
 $7 = (($pPred) + ($0)|0);
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 $12 = (($0) - ($kiStride))|0;
 $13 = (($12) + -1)|0;
 $14 = (($pPred) + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (___muldi3(($16|0),0,16843009,16843009)|0);
 $18 = tempRet0;
 $19 = (($pPred) + ($12)|0);
 $20 = $19;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $18;
 $24 = (($12) - ($kiStride))|0;
 $25 = (($24) + -1)|0;
 $26 = (($pPred) + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = (___muldi3(($28|0),0,16843009,16843009)|0);
 $30 = tempRet0;
 $31 = (($pPred) + ($24)|0);
 $32 = $31;
 $33 = $32;
 HEAP32[$33>>2] = $29;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($24) - ($kiStride))|0;
 $37 = (($36) + -1)|0;
 $38 = (($pPred) + ($37)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = (___muldi3(($40|0),0,16843009,16843009)|0);
 $42 = tempRet0;
 $43 = (($pPred) + ($36)|0);
 $44 = $43;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = $42;
 $48 = (($36) - ($kiStride))|0;
 $49 = (($48) + -1)|0;
 $50 = (($pPred) + ($49)|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = (___muldi3(($52|0),0,16843009,16843009)|0);
 $54 = tempRet0;
 $55 = (($pPred) + ($48)|0);
 $56 = $55;
 $57 = $56;
 HEAP32[$57>>2] = $53;
 $58 = (($56) + 4)|0;
 $59 = $58;
 HEAP32[$59>>2] = $54;
 $60 = (($48) - ($kiStride))|0;
 $61 = (($60) + -1)|0;
 $62 = (($pPred) + ($61)|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = (___muldi3(($64|0),0,16843009,16843009)|0);
 $66 = tempRet0;
 $67 = (($pPred) + ($60)|0);
 $68 = $67;
 $69 = $68;
 HEAP32[$69>>2] = $65;
 $70 = (($68) + 4)|0;
 $71 = $70;
 HEAP32[$71>>2] = $66;
 $72 = (($60) - ($kiStride))|0;
 $73 = (($72) + -1)|0;
 $74 = (($pPred) + ($73)|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = (___muldi3(($76|0),0,16843009,16843009)|0);
 $78 = tempRet0;
 $79 = (($pPred) + ($72)|0);
 $80 = $79;
 $81 = $80;
 HEAP32[$81>>2] = $77;
 $82 = (($80) + 4)|0;
 $83 = $82;
 HEAP32[$83>>2] = $78;
 $84 = (($72) - ($kiStride))|0;
 $85 = (($84) + -1)|0;
 $86 = (($pPred) + ($85)|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87&255;
 $89 = (___muldi3(($88|0),0,16843009,16843009)|0);
 $90 = tempRet0;
 $91 = (($pPred) + ($84)|0);
 $92 = $91;
 $93 = $92;
 HEAP32[$93>>2] = $89;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = $90;
 STACKTOP = sp;return;
}
function __ZN7WelsDec22WelsIChromaPredPlane_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$08 = 0, $$sum2 = 0, $$sum2$1 = 0, $$sum2$2 = 0, $$sum2$3 = 0, $$sum3 = 0, $$sum3$1 = 0, $$sum3$2 = 0, $$sum3$3 = 0, $$sum4 = 0, $$sum4$1 = 0, $$sum4$2 = 0, $$sum4$3 = 0, $$sum5 = 0, $$sum5$1 = 0, $$sum5$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sum2 = (4 - ($kiStride))|0;
 $0 = (($pPred) + ($$sum2)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $$sum3 = (2 - ($kiStride))|0;
 $3 = (($pPred) + ($$sum3)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($2) - ($5))|0;
 $7 = $kiStride << 2;
 $$sum4 = (($7) + -1)|0;
 $8 = (($pPred) + ($$sum4)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $kiStride << 1;
 $$sum5 = (($11) + -1)|0;
 $12 = (($pPred) + ($$sum5)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (($10) - ($14))|0;
 $$sum2$1 = (5 - ($kiStride))|0;
 $16 = (($pPred) + ($$sum2$1)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $$sum3$1 = (1 - ($kiStride))|0;
 $19 = (($pPred) + ($$sum3$1)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = (($18) - ($21))|0;
 $23 = $22 << 1;
 $24 = (($23) + ($6))|0;
 $25 = ($kiStride*5)|0;
 $$sum4$1 = (($25) + -1)|0;
 $26 = (($pPred) + ($$sum4$1)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $$sum5$1 = (($kiStride) + -1)|0;
 $29 = (($pPred) + ($$sum5$1)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (($28) - ($31))|0;
 $33 = $32 << 1;
 $34 = (($33) + ($15))|0;
 $$sum2$2 = (6 - ($kiStride))|0;
 $35 = (($pPred) + ($$sum2$2)|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $$sum3$2 = (0 - ($kiStride))|0;
 $38 = (($pPred) + ($$sum3$2)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = (($37) - ($40))|0;
 $42 = ($41*3)|0;
 $43 = (($42) + ($24))|0;
 $44 = ($kiStride*6)|0;
 $$sum4$2 = (($44) + -1)|0;
 $45 = (($pPred) + ($$sum4$2)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = (($pPred) + -1|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = (($47) - ($50))|0;
 $52 = ($51*3)|0;
 $53 = (($52) + ($34))|0;
 $$sum2$3 = (7 - ($kiStride))|0;
 $54 = (($pPred) + ($$sum2$3)|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $$sum3$3 = $kiStride ^ -1;
 $57 = (($pPred) + ($$sum3$3)|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = (($56) - ($59))|0;
 $61 = $60 << 2;
 $62 = (($61) + ($43))|0;
 $63 = ($kiStride*7)|0;
 $$sum4$3 = (($63) + -1)|0;
 $64 = (($pPred) + ($$sum4$3)|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $$sum5$3 = $kiStride ^ -1;
 $67 = (($pPred) + ($$sum5$3)|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = (($66) - ($69))|0;
 $71 = $70 << 2;
 $72 = (($71) + ($53))|0;
 $73 = (($56) + ($66))|0;
 $74 = $73 << 4;
 $75 = ($62*17)|0;
 $76 = (($75) + 16)|0;
 $77 = $76 >> 5;
 $78 = ($72*17)|0;
 $79 = (($78) + 16)|0;
 $80 = $79 >> 5;
 $81 = (($74) + 16)|0;
 $$08 = $pPred;$i$17 = 0;
 while(1) {
  $82 = (($i$17) + -3)|0;
  $83 = Math_imul($82, $80)|0;
  $84 = (($81) + ($83))|0;
  $85 = Math_imul($77, -3)|0;
  $86 = (($84) + ($85))|0;
  $87 = $86 >> 5;
  $88 = ($87>>>0)>(255);
  if ($88) {
   $89 = (0 - ($87))|0;
   $90 = $89 >> 31;
   $92 = $90;
  } else {
   $92 = $87;
  }
  $91 = $92&255;
  HEAP8[$$08>>0] = $91;
  $93 = Math_imul($77, -2)|0;
  $94 = (($84) + ($93))|0;
  $95 = $94 >> 5;
  $96 = ($95>>>0)>(255);
  if ($96) {
   $97 = (0 - ($95))|0;
   $98 = $97 >> 31;
   $100 = $98;
  } else {
   $100 = $95;
  }
  $99 = $100&255;
  $101 = (($$08) + 1|0);
  HEAP8[$101>>0] = $99;
  $102 = (($84) - ($77))|0;
  $103 = $102 >> 5;
  $104 = ($103>>>0)>(255);
  if ($104) {
   $105 = (0 - ($103))|0;
   $106 = $105 >> 31;
   $108 = $106;
  } else {
   $108 = $103;
  }
  $107 = $108&255;
  $109 = (($$08) + 2|0);
  HEAP8[$109>>0] = $107;
  $110 = $84 >> 5;
  $111 = ($110>>>0)>(255);
  if ($111) {
   $112 = (0 - ($110))|0;
   $113 = $112 >> 31;
   $115 = $113;
  } else {
   $115 = $110;
  }
  $114 = $115&255;
  $116 = (($$08) + 3|0);
  HEAP8[$116>>0] = $114;
  $117 = (($84) + ($77))|0;
  $118 = $117 >> 5;
  $119 = ($118>>>0)>(255);
  if ($119) {
   $120 = (0 - ($118))|0;
   $121 = $120 >> 31;
   $123 = $121;
  } else {
   $123 = $118;
  }
  $122 = $123&255;
  $124 = (($$08) + 4|0);
  HEAP8[$124>>0] = $122;
  $125 = $77 << 1;
  $126 = (($84) + ($125))|0;
  $127 = $126 >> 5;
  $128 = ($127>>>0)>(255);
  if ($128) {
   $129 = (0 - ($127))|0;
   $130 = $129 >> 31;
   $132 = $130;
  } else {
   $132 = $127;
  }
  $131 = $132&255;
  $133 = (($$08) + 5|0);
  HEAP8[$133>>0] = $131;
  $134 = ($77*3)|0;
  $135 = (($84) + ($134))|0;
  $136 = $135 >> 5;
  $137 = ($136>>>0)>(255);
  if ($137) {
   $138 = (0 - ($136))|0;
   $139 = $138 >> 31;
   $141 = $139;
  } else {
   $141 = $136;
  }
  $140 = $141&255;
  $142 = (($$08) + 6|0);
  HEAP8[$142>>0] = $140;
  $143 = $77 << 2;
  $144 = (($84) + ($143))|0;
  $145 = $144 >> 5;
  $146 = ($145>>>0)>(255);
  if ($146) {
   $147 = (0 - ($145))|0;
   $148 = $147 >> 31;
   $150 = $148;
  } else {
   $150 = $145;
  }
  $149 = $150&255;
  $151 = (($$08) + 7|0);
  HEAP8[$151>>0] = $149;
  $152 = (($$08) + ($kiStride)|0);
  $153 = (($i$17) + 1)|0;
  $exitcond = ($153|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$08 = $152;$i$17 = $153;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec19WelsIChromaPredDc_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$mask = 0, $$mask1 = 0, $$mask2 = 0, $$mask3 = 0, $$sum = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($kiStride) + -1)|0;
 $1 = (($0) + ($kiStride))|0;
 $2 = (($1) + ($kiStride))|0;
 $3 = (($2) + ($kiStride))|0;
 $4 = (($3) + ($kiStride))|0;
 $5 = (($4) + ($kiStride))|0;
 $6 = (($5) + ($kiStride))|0;
 $7 = (0 - ($kiStride))|0;
 $8 = (($pPred) + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (1 - ($kiStride))|0;
 $12 = (($pPred) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (2 - ($kiStride))|0;
 $16 = (($pPred) + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (3 - ($kiStride))|0;
 $20 = (($pPred) + ($19)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($pPred) + -1|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = (($pPred) + ($0)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = (($pPred) + ($1)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (($pPred) + ($2)|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = (($10) + 4)|0;
 $36 = (($35) + ($14))|0;
 $37 = (($36) + ($18))|0;
 $38 = (($37) + ($22))|0;
 $39 = (($38) + ($25))|0;
 $40 = (($39) + ($28))|0;
 $41 = (($40) + ($31))|0;
 $42 = (($41) + ($34))|0;
 $43 = $42 >>> 3;
 $44 = (4 - ($kiStride))|0;
 $45 = (($pPred) + ($44)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = (5 - ($kiStride))|0;
 $49 = (($pPred) + ($48)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = (($51) + ($47))|0;
 $53 = (6 - ($kiStride))|0;
 $54 = (($pPred) + ($53)|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = (($52) + ($56))|0;
 $58 = (7 - ($kiStride))|0;
 $59 = (($pPred) + ($58)|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = (($57) + ($61))|0;
 $63 = (($pPred) + ($3)|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = (($pPred) + ($4)|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = (($68) + ($65))|0;
 $70 = (($pPred) + ($5)|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = (($69) + ($72))|0;
 $74 = (($pPred) + ($6)|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = (($73) + ($76))|0;
 $78 = (($62) + 2)|0;
 $79 = $78 >>> 2;
 $80 = (($77) + 2)|0;
 $81 = $80 >>> 2;
 $82 = (($62) + 4)|0;
 $83 = (($82) + ($77))|0;
 $84 = $83 >>> 3;
 $$mask = $79 & 255;
 $85 = (_bitshift64Shl(($$mask|0),0,56)|0);
 $86 = tempRet0;
 $87 = (_bitshift64Shl(($$mask|0),0,48)|0);
 $88 = tempRet0;
 $89 = (_bitshift64Shl(($$mask|0),0,40)|0);
 $90 = tempRet0;
 $$mask1 = $43 & 255;
 $91 = (_bitshift64Shl(($$mask1|0),0,24)|0);
 $92 = tempRet0;
 $93 = (_bitshift64Shl(($$mask1|0),0,16)|0);
 $94 = tempRet0;
 $95 = (_bitshift64Shl(($$mask1|0),0,8)|0);
 $96 = tempRet0;
 $97 = $91 | $$mask1;
 $98 = $97 | $93;
 $99 = $92 | $94;
 $100 = $98 | $95;
 $101 = $99 | $96;
 $102 = $100 | $87;
 $103 = $101 | $88;
 $104 = $102 | $85;
 $105 = $103 | $86;
 $106 = $104 | $89;
 $107 = $105 | $90;
 $108 = $107 | $$mask;
 $$mask2 = $84 & 255;
 $109 = (_bitshift64Shl(($$mask2|0),0,56)|0);
 $110 = tempRet0;
 $111 = (_bitshift64Shl(($$mask2|0),0,48)|0);
 $112 = tempRet0;
 $113 = (_bitshift64Shl(($$mask2|0),0,40)|0);
 $114 = tempRet0;
 $$mask3 = $81 & 255;
 $115 = (_bitshift64Shl(($$mask3|0),0,24)|0);
 $116 = tempRet0;
 $117 = (_bitshift64Shl(($$mask3|0),0,16)|0);
 $118 = tempRet0;
 $119 = (_bitshift64Shl(($$mask3|0),0,8)|0);
 $120 = tempRet0;
 $121 = $111 | $$mask3;
 $122 = $121 | $109;
 $123 = $112 | $110;
 $124 = $122 | $113;
 $125 = $123 | $114;
 $126 = $125 | $$mask2;
 $127 = $124 | $115;
 $128 = $126 | $116;
 $129 = $127 | $117;
 $130 = $128 | $118;
 $131 = $129 | $119;
 $132 = $130 | $120;
 $133 = $pPred;
 $134 = $133;
 HEAP32[$134>>2] = $106;
 $135 = (($133) + 4)|0;
 $136 = $135;
 HEAP32[$136>>2] = $108;
 $137 = (($pPred) + ($kiStride)|0);
 $138 = $137;
 $139 = $138;
 HEAP32[$139>>2] = $106;
 $140 = (($138) + 4)|0;
 $141 = $140;
 HEAP32[$141>>2] = $108;
 $$sum = $kiStride << 1;
 $142 = (($pPred) + ($$sum)|0);
 $143 = $142;
 $144 = $143;
 HEAP32[$144>>2] = $106;
 $145 = (($143) + 4)|0;
 $146 = $145;
 HEAP32[$146>>2] = $108;
 $$sum4 = (($2) + 1)|0;
 $147 = (($pPred) + ($$sum4)|0);
 $148 = $147;
 $149 = $148;
 HEAP32[$149>>2] = $106;
 $150 = (($148) + 4)|0;
 $151 = $150;
 HEAP32[$151>>2] = $108;
 $$sum5 = (($3) + 1)|0;
 $152 = (($pPred) + ($$sum5)|0);
 $153 = $152;
 $154 = $153;
 HEAP32[$154>>2] = $131;
 $155 = (($153) + 4)|0;
 $156 = $155;
 HEAP32[$156>>2] = $132;
 $$sum6 = (($4) + 1)|0;
 $157 = (($pPred) + ($$sum6)|0);
 $158 = $157;
 $159 = $158;
 HEAP32[$159>>2] = $131;
 $160 = (($158) + 4)|0;
 $161 = $160;
 HEAP32[$161>>2] = $132;
 $$sum7 = (($5) + 1)|0;
 $162 = (($pPred) + ($$sum7)|0);
 $163 = $162;
 $164 = $163;
 HEAP32[$164>>2] = $131;
 $165 = (($163) + 4)|0;
 $166 = $165;
 HEAP32[$166>>2] = $132;
 $$sum8 = (($6) + 1)|0;
 $167 = (($pPred) + ($$sum8)|0);
 $168 = $167;
 $169 = $168;
 HEAP32[$169>>2] = $131;
 $170 = (($168) + 4)|0;
 $171 = $170;
 HEAP32[$171>>2] = $132;
 STACKTOP = sp;return;
}
function __ZN7WelsDec23WelsIChromaPredDcLeft_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$mask = 0, $$mask1 = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($kiStride) + -1)|0;
 $1 = (($0) + ($kiStride))|0;
 $2 = (($1) + ($kiStride))|0;
 $3 = (($2) + ($kiStride))|0;
 $4 = (($3) + ($kiStride))|0;
 $5 = (($4) + ($kiStride))|0;
 $6 = (($5) + ($kiStride))|0;
 $7 = (($pPred) + -1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($pPred) + ($0)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($pPred) + ($1)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($pPred) + ($2)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (($9) + 2)|0;
 $20 = (($19) + ($12))|0;
 $21 = (($20) + ($15))|0;
 $22 = (($21) + ($18))|0;
 $23 = $22 >>> 2;
 $24 = (($pPred) + ($3)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = (($pPred) + ($4)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (($pPred) + ($5)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = (($pPred) + ($6)|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = (($26) + 2)|0;
 $37 = (($36) + ($29))|0;
 $38 = (($37) + ($32))|0;
 $39 = (($38) + ($35))|0;
 $40 = $39 >>> 2;
 $$mask = $23 & 255;
 $41 = (___muldi3(($$mask|0),0,16843009,16843009)|0);
 $42 = tempRet0;
 $$mask1 = $40 & 255;
 $43 = (___muldi3(($$mask1|0),0,16843009,16843009)|0);
 $44 = tempRet0;
 $45 = $pPred;
 $46 = $45;
 HEAP32[$46>>2] = $41;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $42;
 $49 = (($pPred) + ($kiStride)|0);
 $50 = $49;
 $51 = $50;
 HEAP32[$51>>2] = $41;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = $42;
 $$sum = $kiStride << 1;
 $54 = (($pPred) + ($$sum)|0);
 $55 = $54;
 $56 = $55;
 HEAP32[$56>>2] = $41;
 $57 = (($55) + 4)|0;
 $58 = $57;
 HEAP32[$58>>2] = $42;
 $$sum2 = (($2) + 1)|0;
 $59 = (($pPred) + ($$sum2)|0);
 $60 = $59;
 $61 = $60;
 HEAP32[$61>>2] = $41;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $42;
 $$sum3 = (($3) + 1)|0;
 $64 = (($pPred) + ($$sum3)|0);
 $65 = $64;
 $66 = $65;
 HEAP32[$66>>2] = $43;
 $67 = (($65) + 4)|0;
 $68 = $67;
 HEAP32[$68>>2] = $44;
 $$sum4 = (($4) + 1)|0;
 $69 = (($pPred) + ($$sum4)|0);
 $70 = $69;
 $71 = $70;
 HEAP32[$71>>2] = $43;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = $44;
 $$sum5 = (($5) + 1)|0;
 $74 = (($pPred) + ($$sum5)|0);
 $75 = $74;
 $76 = $75;
 HEAP32[$76>>2] = $43;
 $77 = (($75) + 4)|0;
 $78 = $77;
 HEAP32[$78>>2] = $44;
 $$sum6 = (($6) + 1)|0;
 $79 = (($pPred) + ($$sum6)|0);
 $80 = $79;
 $81 = $80;
 HEAP32[$81>>2] = $43;
 $82 = (($80) + 4)|0;
 $83 = $82;
 HEAP32[$83>>2] = $44;
 STACKTOP = sp;return;
}
function __ZN7WelsDec22WelsIChromaPredDcTop_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kiStride*7)|0;
 $1 = (0 - ($kiStride))|0;
 $2 = (($pPred) + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (1 - ($kiStride))|0;
 $6 = (($pPred) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (2 - ($kiStride))|0;
 $10 = (($pPred) + ($9)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (3 - ($kiStride))|0;
 $14 = (($pPred) + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($4) + 2)|0;
 $18 = (($17) + ($8))|0;
 $19 = (($18) + ($12))|0;
 $20 = (($19) + ($16))|0;
 $21 = $20 >>> 2;
 $22 = (4 - ($kiStride))|0;
 $23 = (($pPred) + ($22)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = (5 - ($kiStride))|0;
 $27 = (($pPred) + ($26)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (6 - ($kiStride))|0;
 $31 = (($pPred) + ($30)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = (7 - ($kiStride))|0;
 $35 = (($pPred) + ($34)|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = (($25) + 2)|0;
 $39 = (($38) + ($29))|0;
 $40 = (($39) + ($33))|0;
 $41 = (($40) + ($37))|0;
 $42 = $41 >>> 2;
 $$mask = $42 & 255;
 $43 = (_bitshift64Shl(($$mask|0),0,56)|0);
 $44 = tempRet0;
 $45 = (_bitshift64Shl(($$mask|0),0,48)|0);
 $46 = tempRet0;
 $47 = (_bitshift64Shl(($$mask|0),0,40)|0);
 $48 = tempRet0;
 $$mask1 = $21 & 255;
 $49 = (_bitshift64Shl(($$mask1|0),0,24)|0);
 $50 = tempRet0;
 $51 = (_bitshift64Shl(($$mask1|0),0,16)|0);
 $52 = tempRet0;
 $53 = (_bitshift64Shl(($$mask1|0),0,8)|0);
 $54 = tempRet0;
 $55 = $49 | $$mask1;
 $56 = $55 | $51;
 $57 = $50 | $52;
 $58 = $56 | $53;
 $59 = $57 | $54;
 $60 = $58 | $45;
 $61 = $59 | $46;
 $62 = $60 | $43;
 $63 = $61 | $44;
 $64 = $62 | $47;
 $65 = $63 | $48;
 $66 = $65 | $$mask;
 $67 = (($pPred) + ($0)|0);
 $68 = $67;
 $69 = $68;
 HEAP32[$69>>2] = $64;
 $70 = (($68) + 4)|0;
 $71 = $70;
 HEAP32[$71>>2] = $66;
 $72 = (($0) - ($kiStride))|0;
 $73 = (($pPred) + ($72)|0);
 $74 = $73;
 $75 = $74;
 HEAP32[$75>>2] = $64;
 $76 = (($74) + 4)|0;
 $77 = $76;
 HEAP32[$77>>2] = $66;
 $78 = (($72) - ($kiStride))|0;
 $79 = (($pPred) + ($78)|0);
 $80 = $79;
 $81 = $80;
 HEAP32[$81>>2] = $64;
 $82 = (($80) + 4)|0;
 $83 = $82;
 HEAP32[$83>>2] = $66;
 $84 = (($78) - ($kiStride))|0;
 $85 = (($pPred) + ($84)|0);
 $86 = $85;
 $87 = $86;
 HEAP32[$87>>2] = $64;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = $66;
 $90 = (($84) - ($kiStride))|0;
 $91 = (($pPred) + ($90)|0);
 $92 = $91;
 $93 = $92;
 HEAP32[$93>>2] = $64;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = $66;
 $96 = (($90) - ($kiStride))|0;
 $97 = (($pPred) + ($96)|0);
 $98 = $97;
 $99 = $98;
 HEAP32[$99>>2] = $64;
 $100 = (($98) + 4)|0;
 $101 = $100;
 HEAP32[$101>>2] = $66;
 $102 = (($96) - ($kiStride))|0;
 $103 = (($pPred) + ($102)|0);
 $104 = $103;
 $105 = $104;
 HEAP32[$105>>2] = $64;
 $106 = (($104) + 4)|0;
 $107 = $106;
 HEAP32[$107>>2] = $66;
 $108 = (($102) - ($kiStride))|0;
 $109 = (($pPred) + ($108)|0);
 $110 = $109;
 $111 = $110;
 HEAP32[$111>>2] = $64;
 $112 = (($110) + 4)|0;
 $113 = $112;
 HEAP32[$113>>2] = $66;
 STACKTOP = sp;return;
}
function __ZN7WelsDec21WelsIChromaPredDcNA_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kiStride*7)|0;
 $1 = (($pPred) + ($0)|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = -2139062144;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = -2139062144;
 $6 = (($0) - ($kiStride))|0;
 $7 = (($pPred) + ($6)|0);
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = -2139062144;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = -2139062144;
 $12 = (($6) - ($kiStride))|0;
 $13 = (($pPred) + ($12)|0);
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = -2139062144;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = -2139062144;
 $18 = (($12) - ($kiStride))|0;
 $19 = (($pPred) + ($18)|0);
 $20 = $19;
 $21 = $20;
 HEAP32[$21>>2] = -2139062144;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = -2139062144;
 $24 = (($18) - ($kiStride))|0;
 $25 = (($pPred) + ($24)|0);
 $26 = $25;
 $27 = $26;
 HEAP32[$27>>2] = -2139062144;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = -2139062144;
 $30 = (($24) - ($kiStride))|0;
 $31 = (($pPred) + ($30)|0);
 $32 = $31;
 $33 = $32;
 HEAP32[$33>>2] = -2139062144;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = -2139062144;
 $36 = (($30) - ($kiStride))|0;
 $37 = (($pPred) + ($36)|0);
 $38 = $37;
 $39 = $38;
 HEAP32[$39>>2] = -2139062144;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = -2139062144;
 $42 = (($36) - ($kiStride))|0;
 $43 = (($pPred) + ($42)|0);
 $44 = $43;
 $45 = $44;
 HEAP32[$45>>2] = -2139062144;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = -2139062144;
 STACKTOP = sp;return;
}
function __ZN7WelsDec21WelsI16x16LumaPredV_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $$sum1 = 0, $$sum1$1 = 0, $$sum1$10 = 0, $$sum1$11 = 0, $$sum1$12 = 0, $$sum1$13 = 0, $$sum1$14 = 0, $$sum1$15 = 0, $$sum1$2 = 0, $$sum1$3 = 0, $$sum1$4 = 0, $$sum1$5 = 0, $$sum1$6 = 0, $$sum1$7 = 0, $$sum1$8 = 0, $$sum1$9 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kiStride*15)|0;
 $1 = (0 - ($kiStride))|0;
 $2 = (($pPred) + ($1)|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $$sum = (8 - ($kiStride))|0;
 $9 = (($pPred) + ($$sum)|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($pPred) + ($0)|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $5;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $8;
 $$sum1 = (($0) + 8)|0;
 $21 = (($pPred) + ($$sum1)|0);
 $22 = $21;
 $23 = $22;
 HEAP32[$23>>2] = $12;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $15;
 $26 = (($0) - ($kiStride))|0;
 $27 = (($pPred) + ($26)|0);
 $28 = $27;
 $29 = $28;
 HEAP32[$29>>2] = $5;
 $30 = (($28) + 4)|0;
 $31 = $30;
 HEAP32[$31>>2] = $8;
 $$sum1$1 = (($26) + 8)|0;
 $32 = (($pPred) + ($$sum1$1)|0);
 $33 = $32;
 $34 = $33;
 HEAP32[$34>>2] = $12;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $15;
 $37 = (($26) - ($kiStride))|0;
 $38 = (($pPred) + ($37)|0);
 $39 = $38;
 $40 = $39;
 HEAP32[$40>>2] = $5;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $8;
 $$sum1$2 = (($37) + 8)|0;
 $43 = (($pPred) + ($$sum1$2)|0);
 $44 = $43;
 $45 = $44;
 HEAP32[$45>>2] = $12;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = $15;
 $48 = (($37) - ($kiStride))|0;
 $49 = (($pPred) + ($48)|0);
 $50 = $49;
 $51 = $50;
 HEAP32[$51>>2] = $5;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = $8;
 $$sum1$3 = (($48) + 8)|0;
 $54 = (($pPred) + ($$sum1$3)|0);
 $55 = $54;
 $56 = $55;
 HEAP32[$56>>2] = $12;
 $57 = (($55) + 4)|0;
 $58 = $57;
 HEAP32[$58>>2] = $15;
 $59 = (($48) - ($kiStride))|0;
 $60 = (($pPred) + ($59)|0);
 $61 = $60;
 $62 = $61;
 HEAP32[$62>>2] = $5;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $8;
 $$sum1$4 = (($59) + 8)|0;
 $65 = (($pPred) + ($$sum1$4)|0);
 $66 = $65;
 $67 = $66;
 HEAP32[$67>>2] = $12;
 $68 = (($66) + 4)|0;
 $69 = $68;
 HEAP32[$69>>2] = $15;
 $70 = (($59) - ($kiStride))|0;
 $71 = (($pPred) + ($70)|0);
 $72 = $71;
 $73 = $72;
 HEAP32[$73>>2] = $5;
 $74 = (($72) + 4)|0;
 $75 = $74;
 HEAP32[$75>>2] = $8;
 $$sum1$5 = (($70) + 8)|0;
 $76 = (($pPred) + ($$sum1$5)|0);
 $77 = $76;
 $78 = $77;
 HEAP32[$78>>2] = $12;
 $79 = (($77) + 4)|0;
 $80 = $79;
 HEAP32[$80>>2] = $15;
 $81 = (($70) - ($kiStride))|0;
 $82 = (($pPred) + ($81)|0);
 $83 = $82;
 $84 = $83;
 HEAP32[$84>>2] = $5;
 $85 = (($83) + 4)|0;
 $86 = $85;
 HEAP32[$86>>2] = $8;
 $$sum1$6 = (($81) + 8)|0;
 $87 = (($pPred) + ($$sum1$6)|0);
 $88 = $87;
 $89 = $88;
 HEAP32[$89>>2] = $12;
 $90 = (($88) + 4)|0;
 $91 = $90;
 HEAP32[$91>>2] = $15;
 $92 = (($81) - ($kiStride))|0;
 $93 = (($pPred) + ($92)|0);
 $94 = $93;
 $95 = $94;
 HEAP32[$95>>2] = $5;
 $96 = (($94) + 4)|0;
 $97 = $96;
 HEAP32[$97>>2] = $8;
 $$sum1$7 = (($92) + 8)|0;
 $98 = (($pPred) + ($$sum1$7)|0);
 $99 = $98;
 $100 = $99;
 HEAP32[$100>>2] = $12;
 $101 = (($99) + 4)|0;
 $102 = $101;
 HEAP32[$102>>2] = $15;
 $103 = (($92) - ($kiStride))|0;
 $104 = (($pPred) + ($103)|0);
 $105 = $104;
 $106 = $105;
 HEAP32[$106>>2] = $5;
 $107 = (($105) + 4)|0;
 $108 = $107;
 HEAP32[$108>>2] = $8;
 $$sum1$8 = (($103) + 8)|0;
 $109 = (($pPred) + ($$sum1$8)|0);
 $110 = $109;
 $111 = $110;
 HEAP32[$111>>2] = $12;
 $112 = (($110) + 4)|0;
 $113 = $112;
 HEAP32[$113>>2] = $15;
 $114 = (($103) - ($kiStride))|0;
 $115 = (($pPred) + ($114)|0);
 $116 = $115;
 $117 = $116;
 HEAP32[$117>>2] = $5;
 $118 = (($116) + 4)|0;
 $119 = $118;
 HEAP32[$119>>2] = $8;
 $$sum1$9 = (($114) + 8)|0;
 $120 = (($pPred) + ($$sum1$9)|0);
 $121 = $120;
 $122 = $121;
 HEAP32[$122>>2] = $12;
 $123 = (($121) + 4)|0;
 $124 = $123;
 HEAP32[$124>>2] = $15;
 $125 = (($114) - ($kiStride))|0;
 $126 = (($pPred) + ($125)|0);
 $127 = $126;
 $128 = $127;
 HEAP32[$128>>2] = $5;
 $129 = (($127) + 4)|0;
 $130 = $129;
 HEAP32[$130>>2] = $8;
 $$sum1$10 = (($125) + 8)|0;
 $131 = (($pPred) + ($$sum1$10)|0);
 $132 = $131;
 $133 = $132;
 HEAP32[$133>>2] = $12;
 $134 = (($132) + 4)|0;
 $135 = $134;
 HEAP32[$135>>2] = $15;
 $136 = (($125) - ($kiStride))|0;
 $137 = (($pPred) + ($136)|0);
 $138 = $137;
 $139 = $138;
 HEAP32[$139>>2] = $5;
 $140 = (($138) + 4)|0;
 $141 = $140;
 HEAP32[$141>>2] = $8;
 $$sum1$11 = (($136) + 8)|0;
 $142 = (($pPred) + ($$sum1$11)|0);
 $143 = $142;
 $144 = $143;
 HEAP32[$144>>2] = $12;
 $145 = (($143) + 4)|0;
 $146 = $145;
 HEAP32[$146>>2] = $15;
 $147 = (($136) - ($kiStride))|0;
 $148 = (($pPred) + ($147)|0);
 $149 = $148;
 $150 = $149;
 HEAP32[$150>>2] = $5;
 $151 = (($149) + 4)|0;
 $152 = $151;
 HEAP32[$152>>2] = $8;
 $$sum1$12 = (($147) + 8)|0;
 $153 = (($pPred) + ($$sum1$12)|0);
 $154 = $153;
 $155 = $154;
 HEAP32[$155>>2] = $12;
 $156 = (($154) + 4)|0;
 $157 = $156;
 HEAP32[$157>>2] = $15;
 $158 = (($147) - ($kiStride))|0;
 $159 = (($pPred) + ($158)|0);
 $160 = $159;
 $161 = $160;
 HEAP32[$161>>2] = $5;
 $162 = (($160) + 4)|0;
 $163 = $162;
 HEAP32[$163>>2] = $8;
 $$sum1$13 = (($158) + 8)|0;
 $164 = (($pPred) + ($$sum1$13)|0);
 $165 = $164;
 $166 = $165;
 HEAP32[$166>>2] = $12;
 $167 = (($165) + 4)|0;
 $168 = $167;
 HEAP32[$168>>2] = $15;
 $169 = (($158) - ($kiStride))|0;
 $170 = (($pPred) + ($169)|0);
 $171 = $170;
 $172 = $171;
 HEAP32[$172>>2] = $5;
 $173 = (($171) + 4)|0;
 $174 = $173;
 HEAP32[$174>>2] = $8;
 $$sum1$14 = (($169) + 8)|0;
 $175 = (($pPred) + ($$sum1$14)|0);
 $176 = $175;
 $177 = $176;
 HEAP32[$177>>2] = $12;
 $178 = (($176) + 4)|0;
 $179 = $178;
 HEAP32[$179>>2] = $15;
 $180 = (($169) - ($kiStride))|0;
 $181 = (($pPred) + ($180)|0);
 $182 = $181;
 $183 = $182;
 HEAP32[$183>>2] = $5;
 $184 = (($182) + 4)|0;
 $185 = $184;
 HEAP32[$185>>2] = $8;
 $$sum1$15 = (($180) + 8)|0;
 $186 = (($pPred) + ($$sum1$15)|0);
 $187 = $186;
 $188 = $187;
 HEAP32[$188>>2] = $12;
 $189 = (($187) + 4)|0;
 $190 = $189;
 HEAP32[$190>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN7WelsDec21WelsI16x16LumaPredH_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$0 = 0, $iTmp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kiStride*15)|0;
 $i$0 = 15;$iTmp$0 = $0;
 while(1) {
  $1 = (($iTmp$0) + -1)|0;
  $2 = (($pPred) + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (___muldi3(($4|0),0,16843009,16843009)|0);
  $6 = tempRet0;
  $7 = (($pPred) + ($iTmp$0)|0);
  $8 = $7;
  $9 = $8;
  HEAP32[$9>>2] = $5;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $6;
  $$sum = (($iTmp$0) + 8)|0;
  $12 = (($pPred) + ($$sum)|0);
  $13 = $12;
  $14 = $13;
  HEAP32[$14>>2] = $5;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $6;
  $17 = (($iTmp$0) - ($kiStride))|0;
  $18 = (($i$0) + -1)<<24>>24;
  $19 = ($i$0<<24>>24)==(0);
  if ($19) {
   break;
  } else {
   $i$0 = $18;$iTmp$0 = $17;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec25WelsI16x16LumaPredPlane_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$08 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $H$09 = 0, $V$010 = 0, $exitcond = 0, $exitcond12 = 0, $exitcond14 = 0, $i$011 = 0, $i$17 = 0, $j$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $H$09 = 0;$V$010 = 0;$i$011 = 0;
 while(1) {
  $0 = (($i$011) + 1)|0;
  $1 = (($i$011) + 8)|0;
  $$sum2 = (($1) - ($kiStride))|0;
  $2 = (($pPred) + ($$sum2)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (6 - ($i$011))|0;
  $$sum3 = (($5) - ($kiStride))|0;
  $6 = (($pPred) + ($$sum3)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (($4) - ($8))|0;
  $10 = Math_imul($9, $0)|0;
  $11 = (($10) + ($H$09))|0;
  $12 = Math_imul($1, $kiStride)|0;
  $$sum4 = (($12) + -1)|0;
  $13 = (($pPred) + ($$sum4)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = Math_imul($5, $kiStride)|0;
  $$sum5 = (($16) + -1)|0;
  $17 = (($pPred) + ($$sum5)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($15) - ($19))|0;
  $21 = Math_imul($20, $0)|0;
  $22 = (($21) + ($V$010))|0;
  $exitcond14 = ($0|0)==(8);
  if ($exitcond14) {
   break;
  } else {
   $H$09 = $11;$V$010 = $22;$i$011 = $0;
  }
 }
 $23 = ($kiStride*15)|0;
 $$sum = (($23) + -1)|0;
 $24 = (($pPred) + ($$sum)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $$sum1 = (15 - ($kiStride))|0;
 $27 = (($pPred) + ($$sum1)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (($29) + ($26))|0;
 $31 = $30 << 4;
 $32 = ($11*5)|0;
 $33 = (($32) + 32)|0;
 $34 = $33 >> 6;
 $35 = ($22*5)|0;
 $36 = (($35) + 32)|0;
 $37 = $36 >> 6;
 $38 = (($31) + 16)|0;
 $$08 = $pPred;$i$17 = 0;
 while(1) {
  $39 = (($i$17) + -7)|0;
  $40 = Math_imul($39, $37)|0;
  $41 = (($38) + ($40))|0;
  $j$06 = 0;
  while(1) {
   $42 = (($j$06) + -7)|0;
   $43 = Math_imul($42, $34)|0;
   $44 = (($41) + ($43))|0;
   $45 = $44 >> 5;
   $46 = ($45>>>0)>(255);
   if ($46) {
    $47 = (0 - ($45))|0;
    $48 = $47 >> 31;
    $50 = $48;
   } else {
    $50 = $45;
   }
   $49 = $50&255;
   $51 = (($$08) + ($j$06)|0);
   HEAP8[$51>>0] = $49;
   $52 = (($j$06) + 1)|0;
   $exitcond = ($52|0)==(16);
   if ($exitcond) {
    break;
   } else {
    $j$06 = $52;
   }
  }
  $53 = (($$08) + ($kiStride)|0);
  $54 = (($i$17) + 1)|0;
  $exitcond12 = ($54|0)==(16);
  if ($exitcond12) {
   break;
  } else {
   $$08 = $53;$i$17 = $54;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec22WelsI16x16LumaPredDc_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iSum$0 = 0, $iTmp$0 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kiStride*15)|0;
 $iSum$0 = 0;$iTmp$0 = $0;$indvars$iv = 15;
 while(1) {
  $1 = (($iTmp$0) + -1)|0;
  $2 = (($pPred) + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (($indvars$iv) - ($kiStride))|0;
  $6 = (($pPred) + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (($4) + ($iSum$0))|0;
  $10 = (($9) + ($8))|0;
  $11 = (($iTmp$0) - ($kiStride))|0;
  $12 = $indvars$iv&255;
  $13 = ($12<<24>>24)==(0);
  $indvars$iv$next = (($indvars$iv) + -1)|0;
  if ($13) {
   break;
  } else {
   $iSum$0 = $10;$iTmp$0 = $11;$indvars$iv = $indvars$iv$next;
  }
 }
 $14 = (($10) + 16)|0;
 $15 = $14 >>> 5;
 $16 = $15&255;
 $17 = (($pPred) + ($0)|0);
 _memset(($17|0),($16|0),16)|0;
 $18 = (($0) - ($kiStride))|0;
 $19 = (($pPred) + ($18)|0);
 _memset(($19|0),($16|0),16)|0;
 $20 = (($18) - ($kiStride))|0;
 $21 = (($pPred) + ($20)|0);
 _memset(($21|0),($16|0),16)|0;
 $22 = (($20) - ($kiStride))|0;
 $23 = (($pPred) + ($22)|0);
 _memset(($23|0),($16|0),16)|0;
 $24 = (($22) - ($kiStride))|0;
 $25 = (($pPred) + ($24)|0);
 _memset(($25|0),($16|0),16)|0;
 $26 = (($24) - ($kiStride))|0;
 $27 = (($pPred) + ($26)|0);
 _memset(($27|0),($16|0),16)|0;
 $28 = (($26) - ($kiStride))|0;
 $29 = (($pPred) + ($28)|0);
 _memset(($29|0),($16|0),16)|0;
 $30 = (($28) - ($kiStride))|0;
 $31 = (($pPred) + ($30)|0);
 _memset(($31|0),($16|0),16)|0;
 $32 = (($30) - ($kiStride))|0;
 $33 = (($pPred) + ($32)|0);
 _memset(($33|0),($16|0),16)|0;
 $34 = (($32) - ($kiStride))|0;
 $35 = (($pPred) + ($34)|0);
 _memset(($35|0),($16|0),16)|0;
 $36 = (($34) - ($kiStride))|0;
 $37 = (($pPred) + ($36)|0);
 _memset(($37|0),($16|0),16)|0;
 $38 = (($36) - ($kiStride))|0;
 $39 = (($pPred) + ($38)|0);
 _memset(($39|0),($16|0),16)|0;
 $40 = (($38) - ($kiStride))|0;
 $41 = (($pPred) + ($40)|0);
 _memset(($41|0),($16|0),16)|0;
 $42 = (($40) - ($kiStride))|0;
 $43 = (($pPred) + ($42)|0);
 _memset(($43|0),($16|0),16)|0;
 $44 = (($42) - ($kiStride))|0;
 $45 = (($pPred) + ($44)|0);
 _memset(($45|0),($16|0),16)|0;
 $46 = (($44) - ($kiStride))|0;
 $47 = (($pPred) + ($46)|0);
 _memset(($47|0),($16|0),16)|0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec25WelsI16x16LumaPredDcTop_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (15 - ($kiStride))|0;
 $1 = (($pPred) + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (14 - ($kiStride))|0;
 $5 = (($pPred) + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($7) + ($3))|0;
 $9 = (13 - ($kiStride))|0;
 $10 = (($pPred) + ($9)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($12) + ($8))|0;
 $14 = (12 - ($kiStride))|0;
 $15 = (($pPred) + ($14)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = (($17) + ($13))|0;
 $19 = (11 - ($kiStride))|0;
 $20 = (($pPred) + ($19)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($22) + ($18))|0;
 $24 = (10 - ($kiStride))|0;
 $25 = (($pPred) + ($24)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = (($27) + ($23))|0;
 $29 = (9 - ($kiStride))|0;
 $30 = (($pPred) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = (($32) + ($28))|0;
 $34 = (8 - ($kiStride))|0;
 $35 = (($pPred) + ($34)|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = (($37) + ($33))|0;
 $39 = (7 - ($kiStride))|0;
 $40 = (($pPred) + ($39)|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = (($42) + ($38))|0;
 $44 = (6 - ($kiStride))|0;
 $45 = (($pPred) + ($44)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = (($47) + ($43))|0;
 $49 = (5 - ($kiStride))|0;
 $50 = (($pPred) + ($49)|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = (($52) + ($48))|0;
 $54 = (4 - ($kiStride))|0;
 $55 = (($pPred) + ($54)|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = (($57) + ($53))|0;
 $59 = (3 - ($kiStride))|0;
 $60 = (($pPred) + ($59)|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = (($62) + ($58))|0;
 $64 = (2 - ($kiStride))|0;
 $65 = (($pPred) + ($64)|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = (($67) + ($63))|0;
 $69 = (1 - ($kiStride))|0;
 $70 = (($pPred) + ($69)|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = (($72) + ($68))|0;
 $74 = (0 - ($kiStride))|0;
 $75 = (($pPred) + ($74)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = (($77) + ($73))|0;
 $79 = ($kiStride*15)|0;
 $80 = (($78) + 8)|0;
 $81 = $80 >>> 4;
 $82 = $81&255;
 $83 = (($pPred) + ($79)|0);
 _memset(($83|0),($82|0),16)|0;
 $84 = (($79) - ($kiStride))|0;
 $85 = (($pPred) + ($84)|0);
 _memset(($85|0),($82|0),16)|0;
 $86 = (($84) - ($kiStride))|0;
 $87 = (($pPred) + ($86)|0);
 _memset(($87|0),($82|0),16)|0;
 $88 = (($86) - ($kiStride))|0;
 $89 = (($pPred) + ($88)|0);
 _memset(($89|0),($82|0),16)|0;
 $90 = (($88) - ($kiStride))|0;
 $91 = (($pPred) + ($90)|0);
 _memset(($91|0),($82|0),16)|0;
 $92 = (($90) - ($kiStride))|0;
 $93 = (($pPred) + ($92)|0);
 _memset(($93|0),($82|0),16)|0;
 $94 = (($92) - ($kiStride))|0;
 $95 = (($pPred) + ($94)|0);
 _memset(($95|0),($82|0),16)|0;
 $96 = (($94) - ($kiStride))|0;
 $97 = (($pPred) + ($96)|0);
 _memset(($97|0),($82|0),16)|0;
 $98 = (($96) - ($kiStride))|0;
 $99 = (($pPred) + ($98)|0);
 _memset(($99|0),($82|0),16)|0;
 $100 = (($98) - ($kiStride))|0;
 $101 = (($pPred) + ($100)|0);
 _memset(($101|0),($82|0),16)|0;
 $102 = (($100) - ($kiStride))|0;
 $103 = (($pPred) + ($102)|0);
 _memset(($103|0),($82|0),16)|0;
 $104 = (($102) - ($kiStride))|0;
 $105 = (($pPred) + ($104)|0);
 _memset(($105|0),($82|0),16)|0;
 $106 = (($104) - ($kiStride))|0;
 $107 = (($pPred) + ($106)|0);
 _memset(($107|0),($82|0),16)|0;
 $108 = (($106) - ($kiStride))|0;
 $109 = (($pPred) + ($108)|0);
 _memset(($109|0),($82|0),16)|0;
 $110 = (($108) - ($kiStride))|0;
 $111 = (($pPred) + ($110)|0);
 _memset(($111|0),($82|0),16)|0;
 $112 = (($110) - ($kiStride))|0;
 $113 = (($pPred) + ($112)|0);
 _memset(($113|0),($82|0),16)|0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec26WelsI16x16LumaPredDcLeft_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$mask = 0, $$sum = 0, $$sum$1 = 0, $$sum$10 = 0, $$sum$11 = 0, $$sum$12 = 0, $$sum$13 = 0, $$sum$14 = 0, $$sum$15 = 0, $$sum$2 = 0, $$sum$3 = 0, $$sum$4 = 0, $$sum$5 = 0, $$sum$6 = 0, $$sum$7 = 0, $$sum$8 = 0, $$sum$9 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kiStride*15)|0;
 $1 = (($0) + -1)|0;
 $2 = (($pPred) + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($0) - ($kiStride))|0;
 $6 = (($5) + -1)|0;
 $7 = (($pPred) + ($6)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($9) + ($4))|0;
 $11 = (($5) - ($kiStride))|0;
 $12 = (($11) + -1)|0;
 $13 = (($pPred) + ($12)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($15) + ($10))|0;
 $17 = (($11) - ($kiStride))|0;
 $18 = (($17) + -1)|0;
 $19 = (($pPred) + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = (($21) + ($16))|0;
 $23 = (($17) - ($kiStride))|0;
 $24 = (($23) + -1)|0;
 $25 = (($pPred) + ($24)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = (($27) + ($22))|0;
 $29 = (($23) - ($kiStride))|0;
 $30 = (($29) + -1)|0;
 $31 = (($pPred) + ($30)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = (($33) + ($28))|0;
 $35 = (($29) - ($kiStride))|0;
 $36 = (($35) + -1)|0;
 $37 = (($pPred) + ($36)|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = (($39) + ($34))|0;
 $41 = (($35) - ($kiStride))|0;
 $42 = (($41) + -1)|0;
 $43 = (($pPred) + ($42)|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = (($45) + ($40))|0;
 $47 = (($41) - ($kiStride))|0;
 $48 = (($47) + -1)|0;
 $49 = (($pPred) + ($48)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = (($51) + ($46))|0;
 $53 = (($47) - ($kiStride))|0;
 $54 = (($53) + -1)|0;
 $55 = (($pPred) + ($54)|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = (($57) + ($52))|0;
 $59 = (($53) - ($kiStride))|0;
 $60 = (($59) + -1)|0;
 $61 = (($pPred) + ($60)|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = (($63) + ($58))|0;
 $65 = (($59) - ($kiStride))|0;
 $66 = (($65) + -1)|0;
 $67 = (($pPred) + ($66)|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = (($69) + ($64))|0;
 $71 = (($65) - ($kiStride))|0;
 $72 = (($71) + -1)|0;
 $73 = (($pPred) + ($72)|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = (($75) + ($70))|0;
 $77 = (($71) - ($kiStride))|0;
 $78 = (($77) + -1)|0;
 $79 = (($pPred) + ($78)|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = (($81) + ($76))|0;
 $83 = (($77) - ($kiStride))|0;
 $84 = (($83) + -1)|0;
 $85 = (($pPred) + ($84)|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&255;
 $88 = (($87) + ($82))|0;
 $89 = (($83) - ($kiStride))|0;
 $90 = (($89) + -1)|0;
 $91 = (($pPred) + ($90)|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $94 = (($93) + ($88))|0;
 $95 = (($94) + 8)|0;
 $96 = $95 >>> 4;
 $$mask = $96 & 255;
 $97 = (___muldi3(($$mask|0),0,16843009,16843009)|0);
 $98 = tempRet0;
 $99 = (($pPred) + ($0)|0);
 $100 = $99;
 $101 = $100;
 HEAP32[$101>>2] = $97;
 $102 = (($100) + 4)|0;
 $103 = $102;
 HEAP32[$103>>2] = $98;
 $$sum = (($0) + 8)|0;
 $104 = (($pPred) + ($$sum)|0);
 $105 = $104;
 $106 = $105;
 HEAP32[$106>>2] = $97;
 $107 = (($105) + 4)|0;
 $108 = $107;
 HEAP32[$108>>2] = $98;
 $109 = (($pPred) + ($5)|0);
 $110 = $109;
 $111 = $110;
 HEAP32[$111>>2] = $97;
 $112 = (($110) + 4)|0;
 $113 = $112;
 HEAP32[$113>>2] = $98;
 $$sum$1 = (($5) + 8)|0;
 $114 = (($pPred) + ($$sum$1)|0);
 $115 = $114;
 $116 = $115;
 HEAP32[$116>>2] = $97;
 $117 = (($115) + 4)|0;
 $118 = $117;
 HEAP32[$118>>2] = $98;
 $119 = (($pPred) + ($11)|0);
 $120 = $119;
 $121 = $120;
 HEAP32[$121>>2] = $97;
 $122 = (($120) + 4)|0;
 $123 = $122;
 HEAP32[$123>>2] = $98;
 $$sum$2 = (($11) + 8)|0;
 $124 = (($pPred) + ($$sum$2)|0);
 $125 = $124;
 $126 = $125;
 HEAP32[$126>>2] = $97;
 $127 = (($125) + 4)|0;
 $128 = $127;
 HEAP32[$128>>2] = $98;
 $129 = (($pPred) + ($17)|0);
 $130 = $129;
 $131 = $130;
 HEAP32[$131>>2] = $97;
 $132 = (($130) + 4)|0;
 $133 = $132;
 HEAP32[$133>>2] = $98;
 $$sum$3 = (($17) + 8)|0;
 $134 = (($pPred) + ($$sum$3)|0);
 $135 = $134;
 $136 = $135;
 HEAP32[$136>>2] = $97;
 $137 = (($135) + 4)|0;
 $138 = $137;
 HEAP32[$138>>2] = $98;
 $139 = (($pPred) + ($23)|0);
 $140 = $139;
 $141 = $140;
 HEAP32[$141>>2] = $97;
 $142 = (($140) + 4)|0;
 $143 = $142;
 HEAP32[$143>>2] = $98;
 $$sum$4 = (($23) + 8)|0;
 $144 = (($pPred) + ($$sum$4)|0);
 $145 = $144;
 $146 = $145;
 HEAP32[$146>>2] = $97;
 $147 = (($145) + 4)|0;
 $148 = $147;
 HEAP32[$148>>2] = $98;
 $149 = (($pPred) + ($29)|0);
 $150 = $149;
 $151 = $150;
 HEAP32[$151>>2] = $97;
 $152 = (($150) + 4)|0;
 $153 = $152;
 HEAP32[$153>>2] = $98;
 $$sum$5 = (($29) + 8)|0;
 $154 = (($pPred) + ($$sum$5)|0);
 $155 = $154;
 $156 = $155;
 HEAP32[$156>>2] = $97;
 $157 = (($155) + 4)|0;
 $158 = $157;
 HEAP32[$158>>2] = $98;
 $159 = (($pPred) + ($35)|0);
 $160 = $159;
 $161 = $160;
 HEAP32[$161>>2] = $97;
 $162 = (($160) + 4)|0;
 $163 = $162;
 HEAP32[$163>>2] = $98;
 $$sum$6 = (($35) + 8)|0;
 $164 = (($pPred) + ($$sum$6)|0);
 $165 = $164;
 $166 = $165;
 HEAP32[$166>>2] = $97;
 $167 = (($165) + 4)|0;
 $168 = $167;
 HEAP32[$168>>2] = $98;
 $169 = (($pPred) + ($41)|0);
 $170 = $169;
 $171 = $170;
 HEAP32[$171>>2] = $97;
 $172 = (($170) + 4)|0;
 $173 = $172;
 HEAP32[$173>>2] = $98;
 $$sum$7 = (($41) + 8)|0;
 $174 = (($pPred) + ($$sum$7)|0);
 $175 = $174;
 $176 = $175;
 HEAP32[$176>>2] = $97;
 $177 = (($175) + 4)|0;
 $178 = $177;
 HEAP32[$178>>2] = $98;
 $179 = (($pPred) + ($47)|0);
 $180 = $179;
 $181 = $180;
 HEAP32[$181>>2] = $97;
 $182 = (($180) + 4)|0;
 $183 = $182;
 HEAP32[$183>>2] = $98;
 $$sum$8 = (($47) + 8)|0;
 $184 = (($pPred) + ($$sum$8)|0);
 $185 = $184;
 $186 = $185;
 HEAP32[$186>>2] = $97;
 $187 = (($185) + 4)|0;
 $188 = $187;
 HEAP32[$188>>2] = $98;
 $189 = (($pPred) + ($53)|0);
 $190 = $189;
 $191 = $190;
 HEAP32[$191>>2] = $97;
 $192 = (($190) + 4)|0;
 $193 = $192;
 HEAP32[$193>>2] = $98;
 $$sum$9 = (($53) + 8)|0;
 $194 = (($pPred) + ($$sum$9)|0);
 $195 = $194;
 $196 = $195;
 HEAP32[$196>>2] = $97;
 $197 = (($195) + 4)|0;
 $198 = $197;
 HEAP32[$198>>2] = $98;
 $199 = (($pPred) + ($59)|0);
 $200 = $199;
 $201 = $200;
 HEAP32[$201>>2] = $97;
 $202 = (($200) + 4)|0;
 $203 = $202;
 HEAP32[$203>>2] = $98;
 $$sum$10 = (($59) + 8)|0;
 $204 = (($pPred) + ($$sum$10)|0);
 $205 = $204;
 $206 = $205;
 HEAP32[$206>>2] = $97;
 $207 = (($205) + 4)|0;
 $208 = $207;
 HEAP32[$208>>2] = $98;
 $209 = (($pPred) + ($65)|0);
 $210 = $209;
 $211 = $210;
 HEAP32[$211>>2] = $97;
 $212 = (($210) + 4)|0;
 $213 = $212;
 HEAP32[$213>>2] = $98;
 $$sum$11 = (($65) + 8)|0;
 $214 = (($pPred) + ($$sum$11)|0);
 $215 = $214;
 $216 = $215;
 HEAP32[$216>>2] = $97;
 $217 = (($215) + 4)|0;
 $218 = $217;
 HEAP32[$218>>2] = $98;
 $219 = (($pPred) + ($71)|0);
 $220 = $219;
 $221 = $220;
 HEAP32[$221>>2] = $97;
 $222 = (($220) + 4)|0;
 $223 = $222;
 HEAP32[$223>>2] = $98;
 $$sum$12 = (($71) + 8)|0;
 $224 = (($pPred) + ($$sum$12)|0);
 $225 = $224;
 $226 = $225;
 HEAP32[$226>>2] = $97;
 $227 = (($225) + 4)|0;
 $228 = $227;
 HEAP32[$228>>2] = $98;
 $229 = (($pPred) + ($77)|0);
 $230 = $229;
 $231 = $230;
 HEAP32[$231>>2] = $97;
 $232 = (($230) + 4)|0;
 $233 = $232;
 HEAP32[$233>>2] = $98;
 $$sum$13 = (($77) + 8)|0;
 $234 = (($pPred) + ($$sum$13)|0);
 $235 = $234;
 $236 = $235;
 HEAP32[$236>>2] = $97;
 $237 = (($235) + 4)|0;
 $238 = $237;
 HEAP32[$238>>2] = $98;
 $239 = (($pPred) + ($83)|0);
 $240 = $239;
 $241 = $240;
 HEAP32[$241>>2] = $97;
 $242 = (($240) + 4)|0;
 $243 = $242;
 HEAP32[$243>>2] = $98;
 $$sum$14 = (($83) + 8)|0;
 $244 = (($pPred) + ($$sum$14)|0);
 $245 = $244;
 $246 = $245;
 HEAP32[$246>>2] = $97;
 $247 = (($245) + 4)|0;
 $248 = $247;
 HEAP32[$248>>2] = $98;
 $249 = (($pPred) + ($89)|0);
 $250 = $249;
 $251 = $250;
 HEAP32[$251>>2] = $97;
 $252 = (($250) + 4)|0;
 $253 = $252;
 HEAP32[$253>>2] = $98;
 $$sum$15 = (($89) + 8)|0;
 $254 = (($pPred) + ($$sum$15)|0);
 $255 = $254;
 $256 = $255;
 HEAP32[$256>>2] = $97;
 $257 = (($255) + 4)|0;
 $258 = $257;
 HEAP32[$258>>2] = $98;
 STACKTOP = sp;return;
}
function __ZN7WelsDec24WelsI16x16LumaPredDcNA_cEPhi($pPred,$kiStride) {
 $pPred = $pPred|0;
 $kiStride = $kiStride|0;
 var $$sum = 0, $$sum$1 = 0, $$sum$10 = 0, $$sum$11 = 0, $$sum$12 = 0, $$sum$13 = 0, $$sum$14 = 0, $$sum$15 = 0, $$sum$2 = 0, $$sum$3 = 0, $$sum$4 = 0, $$sum$5 = 0, $$sum$6 = 0, $$sum$7 = 0, $$sum$8 = 0, $$sum$9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kiStride*15)|0;
 $1 = (($pPred) + ($0)|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = -2139062144;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = -2139062144;
 $$sum = (($0) + 8)|0;
 $6 = (($pPred) + ($$sum)|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -2139062144;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -2139062144;
 $11 = (($0) - ($kiStride))|0;
 $12 = (($pPred) + ($11)|0);
 $13 = $12;
 $14 = $13;
 HEAP32[$14>>2] = -2139062144;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = -2139062144;
 $$sum$1 = (($11) + 8)|0;
 $17 = (($pPred) + ($$sum$1)|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = -2139062144;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = -2139062144;
 $22 = (($11) - ($kiStride))|0;
 $23 = (($pPred) + ($22)|0);
 $24 = $23;
 $25 = $24;
 HEAP32[$25>>2] = -2139062144;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = -2139062144;
 $$sum$2 = (($22) + 8)|0;
 $28 = (($pPred) + ($$sum$2)|0);
 $29 = $28;
 $30 = $29;
 HEAP32[$30>>2] = -2139062144;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = -2139062144;
 $33 = (($22) - ($kiStride))|0;
 $34 = (($pPred) + ($33)|0);
 $35 = $34;
 $36 = $35;
 HEAP32[$36>>2] = -2139062144;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = -2139062144;
 $$sum$3 = (($33) + 8)|0;
 $39 = (($pPred) + ($$sum$3)|0);
 $40 = $39;
 $41 = $40;
 HEAP32[$41>>2] = -2139062144;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = -2139062144;
 $44 = (($33) - ($kiStride))|0;
 $45 = (($pPred) + ($44)|0);
 $46 = $45;
 $47 = $46;
 HEAP32[$47>>2] = -2139062144;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = -2139062144;
 $$sum$4 = (($44) + 8)|0;
 $50 = (($pPred) + ($$sum$4)|0);
 $51 = $50;
 $52 = $51;
 HEAP32[$52>>2] = -2139062144;
 $53 = (($51) + 4)|0;
 $54 = $53;
 HEAP32[$54>>2] = -2139062144;
 $55 = (($44) - ($kiStride))|0;
 $56 = (($pPred) + ($55)|0);
 $57 = $56;
 $58 = $57;
 HEAP32[$58>>2] = -2139062144;
 $59 = (($57) + 4)|0;
 $60 = $59;
 HEAP32[$60>>2] = -2139062144;
 $$sum$5 = (($55) + 8)|0;
 $61 = (($pPred) + ($$sum$5)|0);
 $62 = $61;
 $63 = $62;
 HEAP32[$63>>2] = -2139062144;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = -2139062144;
 $66 = (($55) - ($kiStride))|0;
 $67 = (($pPred) + ($66)|0);
 $68 = $67;
 $69 = $68;
 HEAP32[$69>>2] = -2139062144;
 $70 = (($68) + 4)|0;
 $71 = $70;
 HEAP32[$71>>2] = -2139062144;
 $$sum$6 = (($66) + 8)|0;
 $72 = (($pPred) + ($$sum$6)|0);
 $73 = $72;
 $74 = $73;
 HEAP32[$74>>2] = -2139062144;
 $75 = (($73) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = -2139062144;
 $77 = (($66) - ($kiStride))|0;
 $78 = (($pPred) + ($77)|0);
 $79 = $78;
 $80 = $79;
 HEAP32[$80>>2] = -2139062144;
 $81 = (($79) + 4)|0;
 $82 = $81;
 HEAP32[$82>>2] = -2139062144;
 $$sum$7 = (($77) + 8)|0;
 $83 = (($pPred) + ($$sum$7)|0);
 $84 = $83;
 $85 = $84;
 HEAP32[$85>>2] = -2139062144;
 $86 = (($84) + 4)|0;
 $87 = $86;
 HEAP32[$87>>2] = -2139062144;
 $88 = (($77) - ($kiStride))|0;
 $89 = (($pPred) + ($88)|0);
 $90 = $89;
 $91 = $90;
 HEAP32[$91>>2] = -2139062144;
 $92 = (($90) + 4)|0;
 $93 = $92;
 HEAP32[$93>>2] = -2139062144;
 $$sum$8 = (($88) + 8)|0;
 $94 = (($pPred) + ($$sum$8)|0);
 $95 = $94;
 $96 = $95;
 HEAP32[$96>>2] = -2139062144;
 $97 = (($95) + 4)|0;
 $98 = $97;
 HEAP32[$98>>2] = -2139062144;
 $99 = (($88) - ($kiStride))|0;
 $100 = (($pPred) + ($99)|0);
 $101 = $100;
 $102 = $101;
 HEAP32[$102>>2] = -2139062144;
 $103 = (($101) + 4)|0;
 $104 = $103;
 HEAP32[$104>>2] = -2139062144;
 $$sum$9 = (($99) + 8)|0;
 $105 = (($pPred) + ($$sum$9)|0);
 $106 = $105;
 $107 = $106;
 HEAP32[$107>>2] = -2139062144;
 $108 = (($106) + 4)|0;
 $109 = $108;
 HEAP32[$109>>2] = -2139062144;
 $110 = (($99) - ($kiStride))|0;
 $111 = (($pPred) + ($110)|0);
 $112 = $111;
 $113 = $112;
 HEAP32[$113>>2] = -2139062144;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = -2139062144;
 $$sum$10 = (($110) + 8)|0;
 $116 = (($pPred) + ($$sum$10)|0);
 $117 = $116;
 $118 = $117;
 HEAP32[$118>>2] = -2139062144;
 $119 = (($117) + 4)|0;
 $120 = $119;
 HEAP32[$120>>2] = -2139062144;
 $121 = (($110) - ($kiStride))|0;
 $122 = (($pPred) + ($121)|0);
 $123 = $122;
 $124 = $123;
 HEAP32[$124>>2] = -2139062144;
 $125 = (($123) + 4)|0;
 $126 = $125;
 HEAP32[$126>>2] = -2139062144;
 $$sum$11 = (($121) + 8)|0;
 $127 = (($pPred) + ($$sum$11)|0);
 $128 = $127;
 $129 = $128;
 HEAP32[$129>>2] = -2139062144;
 $130 = (($128) + 4)|0;
 $131 = $130;
 HEAP32[$131>>2] = -2139062144;
 $132 = (($121) - ($kiStride))|0;
 $133 = (($pPred) + ($132)|0);
 $134 = $133;
 $135 = $134;
 HEAP32[$135>>2] = -2139062144;
 $136 = (($134) + 4)|0;
 $137 = $136;
 HEAP32[$137>>2] = -2139062144;
 $$sum$12 = (($132) + 8)|0;
 $138 = (($pPred) + ($$sum$12)|0);
 $139 = $138;
 $140 = $139;
 HEAP32[$140>>2] = -2139062144;
 $141 = (($139) + 4)|0;
 $142 = $141;
 HEAP32[$142>>2] = -2139062144;
 $143 = (($132) - ($kiStride))|0;
 $144 = (($pPred) + ($143)|0);
 $145 = $144;
 $146 = $145;
 HEAP32[$146>>2] = -2139062144;
 $147 = (($145) + 4)|0;
 $148 = $147;
 HEAP32[$148>>2] = -2139062144;
 $$sum$13 = (($143) + 8)|0;
 $149 = (($pPred) + ($$sum$13)|0);
 $150 = $149;
 $151 = $150;
 HEAP32[$151>>2] = -2139062144;
 $152 = (($150) + 4)|0;
 $153 = $152;
 HEAP32[$153>>2] = -2139062144;
 $154 = (($143) - ($kiStride))|0;
 $155 = (($pPred) + ($154)|0);
 $156 = $155;
 $157 = $156;
 HEAP32[$157>>2] = -2139062144;
 $158 = (($156) + 4)|0;
 $159 = $158;
 HEAP32[$159>>2] = -2139062144;
 $$sum$14 = (($154) + 8)|0;
 $160 = (($pPred) + ($$sum$14)|0);
 $161 = $160;
 $162 = $161;
 HEAP32[$162>>2] = -2139062144;
 $163 = (($161) + 4)|0;
 $164 = $163;
 HEAP32[$164>>2] = -2139062144;
 $165 = (($154) - ($kiStride))|0;
 $166 = (($pPred) + ($165)|0);
 $167 = $166;
 $168 = $167;
 HEAP32[$168>>2] = -2139062144;
 $169 = (($167) + 4)|0;
 $170 = $169;
 HEAP32[$170>>2] = -2139062144;
 $$sum$15 = (($165) + 8)|0;
 $171 = (($pPred) + ($$sum$15)|0);
 $172 = $171;
 $173 = $172;
 HEAP32[$173>>2] = -2139062144;
 $174 = (($172) + 4)|0;
 $175 = $174;
 HEAP32[$175>>2] = -2139062144;
 STACKTOP = sp;return;
}
function __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $exitcond4 = 0, $i$03 = 0, $i$12 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 5854|0);
 HEAP8[$0>>0] = 0;
 $1 = (($pCtx) + 5856|0);
 HEAP8[$1>>0] = 0;
 $2 = (($pCtx) + 5852|0);
 HEAP8[$2>>0] = 0;
 $i$03 = 0;
 while(1) {
  $3 = ((($pCtx) + ($i$03<<2)|0) + 5596|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = (($4) + 68|0);
   HEAP8[$6>>0] = 0;
   $7 = (($4) + 69|0);
   HEAP8[$7>>0] = 0;
   $8 = (($4) + 73|0);
   $9 = (($4) + 72|0);
   dest=$8+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   HEAP8[$9>>0] = 0;
   HEAP32[$3>>2] = 0;
  }
  $10 = (($i$03) + 1)|0;
  $exitcond4 = ($10|0)==(16);
  if ($exitcond4) {
   break;
  } else {
   $i$03 = $10;
  }
 }
 HEAP8[$0>>0] = 0;
 $i$12 = 0;
 while(1) {
  $11 = ((($pCtx) + ($i$12<<2)|0) + 5724|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = (($12) + 68|0);
   HEAP8[$14>>0] = 0;
   $15 = (($12) + 69|0);
   HEAP8[$15>>0] = 0;
   $16 = (($12) + 73|0);
   $17 = (($12) + 72|0);
   dest=$16+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   HEAP8[$17>>0] = 0;
   HEAP32[$11>>2] = 0;
  }
  $18 = (($i$12) + 1)|0;
  $exitcond = ($18|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i$12 = $18;
  }
 }
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec15WelsInitRefListEPNS_21TagWelsDecoderContextEi($pCtx,$iPoc) {
 $pCtx = $pCtx|0;
 $iPoc = $iPoc|0;
 var $$0 = 0, $$off = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$pre1$i = 0, $$pre9$pre = 0, $$pre9$pre$phiZZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$04 = 0, $i$12 = 0, $iCount$0$lcssa = 0, $iCount$1$lcssa = 0, $iCount$11 = 0, $phitmp$i = 0, $switch = 0, $vararg_buffer = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pCtx) + 5468|0);
 $1 = (($pCtx) + 5854|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (($pCtx) + 5856|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($6) + ($3))|0;
 $8 = ($7|0)<(1);
 if ($8) {
  $9 = (($pCtx) + 100|0);
  $10 = HEAP32[$9>>2]|0;
  if ((($10|0) == 4) | (($10|0) == 2)) {
   $119 = $2;
  } else {
   $11 = (($pCtx) + 242340|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $119 = $2;
   } else {
    $14 = (($pCtx) + 209440|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (__ZN7WelsDec11PrefetchPicEPNS_10TagPicBuffE($15)|0);
    $17 = ($16|0)==(0|0);
    if ($17) {
     __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,14392,$vararg_buffer);
     $116 = (($pCtx) + 116|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $117 | 16384;
     HEAP32[$116>>2] = $118;
     $$0 = 1010;
     STACKTOP = sp;return ($$0|0);
    }
    $18 = (($16) + 72|0);
    HEAP8[$18>>0] = 0;
    $19 = (($pCtx) + 241924|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$20>>2]|0;
    $22 = (($16) + 84|0);
    HEAP32[$22>>2] = $21;
    $23 = (($pCtx) + 241928|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($16) + 88|0);
    HEAP32[$27>>2] = $26;
    $28 = (($pCtx) + 116|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 | 32;
    HEAP32[$28>>2] = $30;
    $31 = HEAP32[$11>>2]|0;
    $$off = (($31) + -3)|0;
    $switch = ($$off>>>0)<(5);
    if ($switch) {
     $32 = (($pCtx) + 316852|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      label = 8;
     } else {
      $35 = (($16) + 56|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (($33) + 56|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36|0)==($38|0);
      if ($39) {
       $42 = (($16) + 60|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = (($33) + 60|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($43|0)==($45|0);
       $47 = (($16) + 16|0);
       $48 = HEAP32[$47>>2]|0;
       if ($46) {
        $49 = (($33) + 16|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($16) + 32|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = Math_imul($43, $52)|0;
        _memcpy(($48|0),($50|0),($53|0))|0;
        $54 = (($16) + 20|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = HEAP32[$32>>2]|0;
        $57 = (($56) + 20|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = (($16) + 36|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = HEAP32[$42>>2]|0;
        $62 = Math_imul($61, $60)|0;
        $63 = (($62|0) / 2)&-1;
        _memcpy(($55|0),($58|0),($63|0))|0;
        $64 = (($16) + 24|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = HEAP32[$32>>2]|0;
        $67 = (($66) + 24|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = (($16) + 40|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = HEAP32[$42>>2]|0;
        $72 = Math_imul($71, $70)|0;
        $73 = (($72|0) / 2)&-1;
        _memcpy(($65|0),($68|0),($73|0))|0;
        $$pre$phiZ2D = $35;$105 = $47;
       } else {
        $$pre9$pre$phiZZ2D = $35;$140 = $47;$78 = $43;$79 = $48;
        label = 11;
       }
      } else {
       label = 8;
      }
     }
    } else {
     label = 8;
    }
    if ((label|0) == 8) {
     $40 = (($16) + 16|0);
     $41 = HEAP32[$40>>2]|0;
     $$phi$trans$insert = (($16) + 60|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $$pre9$pre = (($16) + 56|0);
     $$pre9$pre$phiZZ2D = $$pre9$pre;$140 = $40;$78 = $$pre;$79 = $41;
     label = 11;
    }
    if ((label|0) == 11) {
     $74 = (($16) + 32|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (($16) + 60|0);
     $77 = Math_imul($78, $75)|0;
     _memset(($79|0),-128,($77|0))|0;
     $80 = (($16) + 20|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($16) + 36|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = HEAP32[$76>>2]|0;
     $85 = Math_imul($84, $83)|0;
     $86 = (($85|0) / 2)&-1;
     _memset(($81|0),-128,($86|0))|0;
     $87 = (($16) + 24|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (($16) + 40|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = HEAP32[$76>>2]|0;
     $92 = Math_imul($91, $90)|0;
     $93 = (($92|0) / 2)&-1;
     _memset(($88|0),-128,($93|0))|0;
     $$pre$phiZ2D = $$pre9$pre$phiZZ2D;$105 = $140;
    }
    $94 = (($16) + 76|0);
    HEAP32[$94>>2] = 0;
    $95 = (($16) + 64|0);
    HEAP32[$95>>2] = 0;
    $96 = (($16) + 75|0);
    HEAP8[$96>>0] = 0;
    $97 = (($16) + 73|0);
    HEAP8[$97>>0] = 0;
    $98 = HEAP32[$$pre$phiZ2D>>2]|0;
    $99 = (($16) + 60|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($16) + 32|0);
    $102 = (($pCtx) + 317112|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (($pCtx) + 317116|0);
    _ExpandReferencingPicture($105,$98,$100,$101,$103,$104);
    $106 = (($16) + 68|0);
    HEAP8[$106>>0] = 1;
    $107 = (($16) + 69|0);
    HEAP8[$107>>0] = 0;
    $108 = (($16) + 80|0);
    HEAP32[$108>>2] = -1;
    $109 = HEAP8[$1>>0]|0;
    $110 = ($109<<24>>24)==(0);
    if ($110) {
     $$pre1$i = (($pCtx) + 5596|0);
     $$pre$phi$iZ2D = $$pre1$i;$115 = 1;
    } else {
     $111 = $109&255;
     $112 = (($pCtx) + 5600|0);
     $113 = (($pCtx) + 5596|0);
     $114 = $111 << 2;
     _memmove(($112|0),($113|0),($114|0))|0;
     $$pre$i = HEAP8[$1>>0]|0;
     $phitmp$i = (($$pre$i) + 1)<<24>>24;
     $$pre$phi$iZ2D = $113;$115 = $phitmp$i;
    }
    HEAP32[$$pre$phi$iZ2D>>2] = $16;
    HEAP8[$1>>0] = $115;
    $119 = $115;
   }
  }
 } else {
  $119 = $2;
 }
 dest=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $120 = ($119<<24>>24)==(0);
 if ($120) {
  $iCount$0$lcssa = 0;
 } else {
  $i$04 = 0;
  while(1) {
   $123 = ((($pCtx) + ($i$04<<2)|0) + 5596|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($i$04) + 1)|0;
   $126 = ((($pCtx) + ($i$04<<2)|0) + 5468|0);
   HEAP32[$126>>2] = $124;
   $127 = HEAP8[$1>>0]|0;
   $128 = $127&255;
   $129 = ($125|0)<($128|0);
   if ($129) {
    $i$04 = $125;
   } else {
    $iCount$0$lcssa = $125;
    break;
   }
  }
 }
 $121 = HEAP8[$4>>0]|0;
 $122 = ($121<<24>>24)==(0);
 if ($122) {
  $iCount$1$lcssa = $iCount$0$lcssa;
 } else {
  $i$12 = 0;$iCount$11 = $iCount$0$lcssa;
  while(1) {
   $130 = ((($pCtx) + ($i$12<<2)|0) + 5724|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($iCount$11) + 1)|0;
   $133 = ((($pCtx) + ($iCount$11<<2)|0) + 5468|0);
   HEAP32[$133>>2] = $131;
   $134 = (($i$12) + 1)|0;
   $135 = HEAP8[$4>>0]|0;
   $136 = $135&255;
   $137 = ($134|0)<($136|0);
   if ($137) {
    $i$12 = $134;$iCount$11 = $132;
   } else {
    $iCount$1$lcssa = $132;
    break;
   }
  }
 }
 $138 = $iCount$1$lcssa&255;
 $139 = (($pCtx) + 5852|0);
 HEAP8[$139>>0] = $138;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec18WelsReorderRefListEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $i$023 = 0, $i$1 = 0, $i$18 = 0, $i$19 = 0, $i$2 = 0, $i$23 = 0, $i$3 = 0, $iPredFrameNum$018 = 0, $iPredFrameNum$1 = 0, $iPredFrameNum$1$p = 0, $iPredFrameNum$2 = 0;
 var $iReorderingIndex$019 = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4080|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCtx) + 5852|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($1) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($1) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = 1 << $12;
 $14 = (($pCtx) + 100|0);
 $15 = HEAP32[$14>>2]|0;
 if ((($15|0) == 4) | (($15|0) == 2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ($5<<24>>24)==(0);
 if ($16) {
  $17 = (($pCtx) + 116|0);
  HEAP32[$17>>2] = 16;
  $$0 = 1072;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($3) + 256|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($3) + 6|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ($22<<16>>16)==(3);
 if ($23) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = (($13) + -1)|0;
 $i$18 = (($6) + -1)|0;
 $25 = (($1) + 16|0);
 $26 = (($1) + 96|0);
 $27 = $22;$i$023 = 0;$iPredFrameNum$018 = $8;$iReorderingIndex$019 = 0;
 L14: while(1) {
  $28 = ($27&65535)<(2);
  L16: do {
   if ($28) {
    $29 = (($3) + ($iReorderingIndex$019<<3)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1)|0;
    $32 = ($27<<16>>16)==(0);
    $33 = $30 ^ -1;
    $iPredFrameNum$1$p = $32 ? $33 : $31;
    $iPredFrameNum$1 = (($iPredFrameNum$1$p) + ($iPredFrameNum$018))|0;
    $34 = $iPredFrameNum$1 & $24;
    $35 = ($6|0)>($iReorderingIndex$019|0);
    if ($35) {
     $i$19 = $i$18;
     while(1) {
      $36 = ((($pCtx) + ($i$19<<2)|0) + 5468|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($37) + 76|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==($34|0);
      if ($40) {
       $41 = (($37) + 69|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = ($42<<24>>24)==(0);
       if ($43) {
        break;
       }
      }
      $i$1 = (($i$19) + -1)|0;
      $44 = ($i$19|0)>($iReorderingIndex$019|0);
      if ($44) {
       $i$19 = $i$1;
      } else {
       $i$3 = $i$1;$iPredFrameNum$2 = $34;
       break L16;
      }
     }
     $45 = HEAP8[$25>>0]|0;
     $46 = (($37) + 75|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ($45<<24>>24)==($47<<24>>24);
     if ($48) {
      $49 = HEAP32[$26>>2]|0;
      $50 = (($37) + 84|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($49|0)==($51|0);
      if ($52) {
       $i$3 = $i$19;$iPredFrameNum$2 = $34;
      } else {
       label = 14;
       break L14;
      }
     } else {
      $i$3 = $i$19;$iPredFrameNum$2 = $34;
     }
    } else {
     $i$3 = $i$18;$iPredFrameNum$2 = $34;
    }
   } else {
    $54 = ($27<<16>>16)==(2);
    if ($54) {
     $55 = ($6|0)>($iReorderingIndex$019|0);
     if ($55) {
      $56 = ((($3) + ($iReorderingIndex$019<<3)|0) + 4|0);
      $i$23 = $i$18;
      while(1) {
       $57 = ((($pCtx) + ($i$23<<2)|0) + 5468|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = (($58) + 69|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = ($60<<24>>24)==(0);
       if (!($61)) {
        $63 = (($58) + 80|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = HEAP16[$56>>1]|0;
        $66 = $65&65535;
        $67 = ($64|0)==($66|0);
        if ($67) {
         break;
        }
       }
       $i$2 = (($i$23) + -1)|0;
       $62 = ($i$23|0)>($iReorderingIndex$019|0);
       if ($62) {
        $i$23 = $i$2;
       } else {
        $i$3 = $i$2;$iPredFrameNum$2 = $iPredFrameNum$018;
        break L16;
       }
      }
      $68 = HEAP8[$25>>0]|0;
      $69 = (($58) + 75|0);
      $70 = HEAP8[$69>>0]|0;
      $71 = ($68<<24>>24)==($70<<24>>24);
      if ($71) {
       $72 = HEAP32[$26>>2]|0;
       $73 = (($58) + 84|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($72|0)==($74|0);
       if ($75) {
        $i$3 = $i$23;$iPredFrameNum$2 = $iPredFrameNum$018;
       } else {
        label = 23;
        break L14;
       }
      } else {
       $i$3 = $i$23;$iPredFrameNum$2 = $iPredFrameNum$018;
      }
     } else {
      $i$3 = $i$18;$iPredFrameNum$2 = $iPredFrameNum$018;
     }
    } else {
     $i$3 = $i$023;$iPredFrameNum$2 = $iPredFrameNum$018;
    }
   }
  } while(0);
  $77 = ($i$3|0)<($iReorderingIndex$019|0);
  if ($77) {
   $$0 = 1072;
   label = 26;
   break;
  }
  $78 = ((($pCtx) + ($i$3<<2)|0) + 5468|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($iReorderingIndex$019) + 1)|0;
  $81 = ((($pCtx) + ($80<<2)|0) + 5468|0);
  $82 = ((($pCtx) + ($iReorderingIndex$019<<2)|0) + 5468|0);
  $83 = (($i$3) - ($iReorderingIndex$019))|0;
  $84 = $83 << 2;
  _memmove(($81|0),($82|0),($84|0))|0;
  HEAP32[$82>>2] = $79;
  $85 = ((($3) + ($80<<3)|0) + 6|0);
  $86 = HEAP16[$85>>1]|0;
  $87 = ($86<<16>>16)==(3);
  if ($87) {
   $$0 = 0;
   label = 26;
   break;
  } else {
   $27 = $86;$i$023 = $i$3;$iPredFrameNum$018 = $iPredFrameNum$2;$iReorderingIndex$019 = $80;
  }
 }
 if ((label|0) == 14) {
  HEAP32[$vararg_buffer2>>2] = $49;
  $vararg_ptr1 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $51;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14440,$vararg_buffer2);
  $53 = (($pCtx) + 116|0);
  HEAP32[$53>>2] = 16;
  $$0 = 1072;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 23) {
  HEAP32[$vararg_buffer2>>2] = $72;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $74;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14440,$vararg_buffer2);
  $76 = (($pCtx) + 116|0);
  HEAP32[$76>>2] = 16;
  $$0 = 1072;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec13WelsMarkAsRefEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$ = 0, $$$i$i = 0, $$0 = 0, $$0$i$ph = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i1 = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$pre1$i = 0, $$pre111 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond4$i$i$i = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i$i$i = 0, $i$0$lcssa$i$i$i$i = 0, $i$01$i = 0, $i$01$i$i$i = 0, $i$01$i$i$i$i = 0, $i$02$i$i$i = 0, $i$03$i$i$i = 0;
 var $i$05$i$i$i = 0, $i$05$i$i$i$i = 0, $i$05$i$i$i$i$i = 0, $i$05$i$i14$i$i = 0, $i$05$i$i2$i$i = 0, $i$05$i$i21$i$i = 0, $i$05$i$i6$i$i = 0, $i$055$i = 0, $i$072$i$i = 0, $i$12$i$i$i = 0, $iRet$0 = 0, $iRet$1 = 0, $iRet$2 = 0, $j$059 = 0, $or$cond$i$i = 0, $phitmp$i = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$i = 0, $phitmp$i2 = 0, $vararg_buffer7 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer7 = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4088|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCtx) + 241888|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + 16|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($pCtx) + 5464|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 75|0);
 HEAP8[$10>>0] = $7;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 17|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = HEAP32[$8>>2]|0;
 $15 = (($14) + 73|0);
 HEAP8[$15>>0] = $13;
 $16 = (($pCtx) + 241924|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$8>>2]|0;
 $20 = (($19) + 84|0);
 HEAP32[$20>>2] = $18;
 $21 = (($pCtx) + 241928|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$8>>2]|0;
 $26 = (($25) + 88|0);
 HEAP32[$26>>2] = $24;
 $27 = (($5) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($5) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($28>>>0)>($30>>>0);
 L1: do {
  if ($31) {
   label = 15;
  } else {
   $32 = HEAP32[$5>>2]|0;
   $j$059 = $28;
   while(1) {
    $35 = (($32) + ($j$059<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)==(5);
    if ($39) {
     break;
    }
    $40 = (($36) + 12|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = ($41<<24>>24)==(0);
    $33 = (($j$059) + 1)|0;
    if (!($42)) {
     break;
    }
    $34 = ($33>>>0)>($30>>>0);
    if ($34) {
     label = 15;
     break L1;
    } else {
     $j$059 = $33;
    }
   }
   $43 = (($3) + 1585|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(0);
   $46 = (($pCtx) + 5860|0);
   if ($45) {
    HEAP32[$46>>2] = -1;
    $iRet$1 = 0;
    break;
   }
   HEAP32[$46>>2] = 0;
   $47 = HEAP32[$8>>2]|0;
   $48 = (($47) + 68|0);
   HEAP8[$48>>0] = 1;
   $49 = (($47) + 69|0);
   HEAP8[$49>>0] = 1;
   $50 = (($47) + 80|0);
   HEAP32[$50>>2] = 0;
   $51 = (($pCtx) + 5856|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = ($52<<24>>24)==(0);
   if ($53) {
    $55 = (($pCtx) + 5724|0);
    HEAP32[$55>>2] = $47;
    $68 = 1;
   } else {
    $54 = $52&255;
    $i$01$i = 0;
    while(1) {
     $58 = ((($pCtx) + ($i$01$i<<2)|0) + 5724|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($59) + 80|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)>(0);
     $56 = (($i$01$i) + 1)|0;
     if ($62) {
      $i$0$lcssa$i = $i$01$i;
      break;
     }
     $57 = ($56|0)<($54|0);
     if ($57) {
      $i$01$i = $56;
     } else {
      $i$0$lcssa$i = $56;
      break;
     }
    }
    $63 = (($i$0$lcssa$i) + 1)|0;
    $64 = ((($pCtx) + ($63<<2)|0) + 5724|0);
    $65 = ((($pCtx) + ($i$0$lcssa$i<<2)|0) + 5724|0);
    $66 = (($54) - ($i$0$lcssa$i))|0;
    $67 = $66 << 2;
    _memmove(($64|0),($65|0),($67|0))|0;
    HEAP32[$65>>2] = $47;
    $$pre$i = HEAP8[$51>>0]|0;
    $phitmp$i = (($$pre$i) + 1)<<24>>24;
    $68 = $phitmp$i;
   }
   HEAP8[$51>>0] = $68;
   $iRet$1 = 0;
  }
 } while(0);
 do {
  if ((label|0) == 15) {
   $69 = (($3) + 1586|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if ($71) {
    $379 = (__ZN7WelsDecL13SlidingWindowEPNS_21TagWelsDecoderContextE($pCtx)|0);
    $380 = ($379|0)==(0);
    if ($380) {
     $iRet$1 = 0;
     break;
    }
    $381 = (($pCtx) + 242340|0);
    $382 = HEAP32[$381>>2]|0;
    $383 = ($382|0)==(0);
    if ($383) {
     $$0 = $379;
     STACKTOP = sp;return ($$0|0);
    } else {
     $384 = (__ZN7WelsDecL25RemainOneBufferInDpbForECEPNS_21TagWelsDecoderContextE($pCtx)|0);
     $iRet$1 = $384;
     break;
    }
   }
   $72 = (($pCtx) + 5860|0);
   $73 = HEAP32[$3>>2]|0;
   $74 = ($73|0)==(0);
   L28: do {
    if ($74) {
     $$pre111 = (($pCtx) + 112|0);
     $$pre$phiZ2D = $$pre111;$iRet$0 = 0;
    } else {
     $75 = HEAP32[$0>>2]|0;
     $76 = (($75) + 3892|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + 16|0);
     $79 = (($pCtx) + 104|0);
     $80 = (($pCtx) + 5854|0);
     $81 = (($pCtx) + 5856|0);
     $82 = (($pCtx) + 242325|0);
     $83 = (($pCtx) + 242328|0);
     $84 = (($pCtx) + 5852|0);
     $85 = (($pCtx) + 5724|0);
     $86 = (($pCtx) + 112|0);
     $87 = $73;$i$055$i = 0;
     L31: while(1) {
      $88 = ($87>>>0)>(6);
      if ($88) {
       $$0$i$ph = 10005;
       break;
      }
      $89 = HEAP32[$78>>2]|0;
      $90 = ((($3) + (($i$055$i*24)|0)|0) + 8|0);
      $91 = 1 << $89;
      $92 = HEAP32[$90>>2]|0;
      $93 = HEAP32[$79>>2]|0;
      $94 = ((($3) + (($i$055$i*24)|0)|0) + 20|0);
      $95 = ((($3) + (($i$055$i*24)|0)|0) + 16|0);
      $96 = ((($3) + (($i$055$i*24)|0)|0) + 12|0);
      $97 = (($91) + -1)|0;
      $98 = (($93) - ($92))|0;
      $99 = HEAP32[$94>>2]|0;
      $100 = HEAP32[$95>>2]|0;
      $101 = HEAP32[$96>>2]|0;
      $102 = $98 & $97;
      L34: do {
       switch ($87|0) {
       case 5:  {
        HEAP8[$80>>0] = 0;
        HEAP8[$81>>0] = 0;
        HEAP8[$84>>0] = 0;
        $i$03$i$i$i = 0;
        while(1) {
         $292 = ((($pCtx) + ($i$03$i$i$i<<2)|0) + 5596|0);
         $293 = HEAP32[$292>>2]|0;
         $294 = ($293|0)==(0|0);
         if (!($294)) {
          $295 = (($293) + 68|0);
          HEAP8[$295>>0] = 0;
          $296 = (($293) + 69|0);
          HEAP8[$296>>0] = 0;
          $297 = (($293) + 73|0);
          $298 = (($293) + 72|0);
          dest=$297+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
          HEAP8[$298>>0] = 0;
          HEAP32[$292>>2] = 0;
         }
         $299 = (($i$03$i$i$i) + 1)|0;
         $exitcond4$i$i$i = ($299|0)==(16);
         if ($exitcond4$i$i$i) {
          break;
         } else {
          $i$03$i$i$i = $299;
         }
        }
        HEAP8[$80>>0] = 0;
        $i$12$i$i$i = 0;
        while(1) {
         $300 = ((($pCtx) + ($i$12$i$i$i<<2)|0) + 5724|0);
         $301 = HEAP32[$300>>2]|0;
         $302 = ($301|0)==(0|0);
         if (!($302)) {
          $303 = (($301) + 68|0);
          HEAP8[$303>>0] = 0;
          $304 = (($301) + 69|0);
          HEAP8[$304>>0] = 0;
          $305 = (($301) + 73|0);
          $306 = (($301) + 72|0);
          dest=$305+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
          HEAP8[$306>>0] = 0;
          HEAP32[$300>>2] = 0;
         }
         $307 = (($i$12$i$i$i) + 1)|0;
         $exitcond$i$i$i = ($307|0)==(16);
         if ($exitcond$i$i$i) {
          break;
         } else {
          $i$12$i$i$i = $307;
         }
        }
        HEAP8[$81>>0] = 0;
        HEAP8[$86>>0] = 1;
        break;
       }
       case 2:  {
        $129 = HEAP8[$81>>0]|0;
        $130 = ($129<<24>>24)==(0);
        L49: do {
         if (!($130)) {
          $131 = $129&255;
          $i$05$i$i21$i$i = 0;
          while(1) {
           $134 = ((($pCtx) + ($i$05$i$i21$i$i<<2)|0) + 5724|0);
           $135 = HEAP32[$134>>2]|0;
           $136 = (($135) + 80|0);
           $137 = HEAP32[$136>>2]|0;
           $138 = ($137|0)==($101|0);
           $133 = (($i$05$i$i21$i$i) + 1)|0;
           if ($138) {
            break;
           }
           $132 = ($131|0)>($133|0);
           if ($132) {
            $i$05$i$i21$i$i = $133;
           } else {
            break L49;
           }
          }
          $139 = (($131) - ($i$05$i$i21$i$i))|0;
          $140 = (($139) + -1)|0;
          $141 = (($135) + 68|0);
          HEAP8[$141>>0] = 0;
          $142 = (($135) + 69|0);
          HEAP8[$142>>0] = 0;
          $143 = ($140|0)>(0);
          if ($143) {
           $144 = ((($pCtx) + ($133<<2)|0) + 5724|0);
           $145 = $140 << 2;
           _memmove(($134|0),($144|0),($145|0))|0;
          }
          $146 = HEAP8[$81>>0]|0;
          $147 = (($146) + -1)<<24>>24;
          HEAP8[$81>>0] = $147;
          $148 = $147&255;
          $149 = ((($pCtx) + ($148<<2)|0) + 5724|0);
          HEAP32[$149>>2] = 0;
          $150 = ($135|0)==(0|0);
          if (!($150)) {
           HEAP8[$141>>0] = 0;
           HEAP8[$142>>0] = 0;
           $151 = (($135) + 73|0);
           $152 = (($135) + 72|0);
           dest=$151+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           HEAP8[$152>>0] = 0;
           break L34;
          }
         }
        } while(0);
        __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14696,$vararg_buffer7);
        break;
       }
       case 6:  {
        $308 = HEAP32[$72>>2]|0;
        $309 = ($308|0)<($100|0);
        if ($309) {
         $$0$i$ph = 10011;
         break L31;
        }
        $310 = HEAP8[$81>>0]|0;
        $311 = ($310<<24>>24)==(0);
        L62: do {
         if (!($311)) {
          $312 = $310&255;
          $i$05$i$i2$i$i = 0;
          while(1) {
           $315 = ((($pCtx) + ($i$05$i$i2$i$i<<2)|0) + 5724|0);
           $316 = HEAP32[$315>>2]|0;
           $317 = (($316) + 80|0);
           $318 = HEAP32[$317>>2]|0;
           $319 = ($318|0)==($100|0);
           $314 = (($i$05$i$i2$i$i) + 1)|0;
           if ($319) {
            break;
           }
           $313 = ($312|0)>($314|0);
           if ($313) {
            $i$05$i$i2$i$i = $314;
           } else {
            break L62;
           }
          }
          $320 = (($312) - ($i$05$i$i2$i$i))|0;
          $321 = (($320) + -1)|0;
          $322 = (($316) + 68|0);
          HEAP8[$322>>0] = 0;
          $323 = (($316) + 69|0);
          HEAP8[$323>>0] = 0;
          $324 = ($321|0)>(0);
          if ($324) {
           $325 = ((($pCtx) + ($314<<2)|0) + 5724|0);
           $326 = $321 << 2;
           _memmove(($315|0),($325|0),($326|0))|0;
          }
          $327 = HEAP8[$81>>0]|0;
          $328 = (($327) + -1)<<24>>24;
          HEAP8[$81>>0] = $328;
          $329 = $328&255;
          $330 = ((($pCtx) + ($329<<2)|0) + 5724|0);
          HEAP32[$330>>2] = 0;
          $331 = ($316|0)==(0|0);
          if (!($331)) {
           HEAP8[$322>>0] = 0;
           HEAP8[$323>>0] = 0;
           $332 = (($316) + 73|0);
           $333 = (($316) + 72|0);
           dest=$332+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           HEAP8[$333>>0] = 0;
          }
         }
        } while(0);
        $334 = HEAP8[$81>>0]|0;
        $335 = $334&255;
        $336 = HEAP8[$80>>0]|0;
        $337 = $336&255;
        $338 = (($337) + ($335))|0;
        $339 = HEAP32[$16>>2]|0;
        $340 = (($339) + 296|0);
        $341 = HEAP32[$340>>2]|0;
        $342 = ($341|0)<(1);
        $$$i$i = $342 ? 1 : $341;
        $343 = ($338|0)<($$$i$i|0);
        if (!($343)) {
         $$0$i$ph = 10009;
         break L31;
        }
        HEAP8[$82>>0] = 1;
        $344 = HEAP32[$79>>2]|0;
        HEAP32[$83>>2] = $344;
        HEAP32[$vararg_buffer7>>2] = $344;
        __Z7WelsLogP13TagLogContextiPKcz($pCtx,4,14888,$vararg_buffer7);
        $345 = HEAP32[$8>>2]|0;
        $346 = (($345) + 68|0);
        HEAP8[$346>>0] = 1;
        $347 = (($345) + 69|0);
        HEAP8[$347>>0] = 1;
        $348 = (($345) + 80|0);
        HEAP32[$348>>2] = $100;
        $349 = HEAP8[$81>>0]|0;
        $350 = ($349<<24>>24)==(0);
        if ($350) {
         HEAP32[$85>>2] = $345;
         $364 = 1;
        } else {
         $351 = $349&255;
         $i$01$i$i$i = 0;
         while(1) {
          $354 = ((($pCtx) + ($i$01$i$i$i<<2)|0) + 5724|0);
          $355 = HEAP32[$354>>2]|0;
          $356 = (($355) + 80|0);
          $357 = HEAP32[$356>>2]|0;
          $358 = ($357|0)>($100|0);
          $352 = (($i$01$i$i$i) + 1)|0;
          if ($358) {
           $i$0$lcssa$i$i$i = $i$01$i$i$i;
           break;
          }
          $353 = ($352|0)<($351|0);
          if ($353) {
           $i$01$i$i$i = $352;
          } else {
           $i$0$lcssa$i$i$i = $352;
           break;
          }
         }
         $359 = (($i$0$lcssa$i$i$i) + 1)|0;
         $360 = ((($pCtx) + ($359<<2)|0) + 5724|0);
         $361 = ((($pCtx) + ($i$0$lcssa$i$i$i<<2)|0) + 5724|0);
         $362 = (($351) - ($i$0$lcssa$i$i$i))|0;
         $363 = $362 << 2;
         _memmove(($360|0),($361|0),($363|0))|0;
         HEAP32[$361>>2] = $345;
         $$pre$i$i$i = HEAP8[$81>>0]|0;
         $phitmp$i$i$i = (($$pre$i$i$i) + 1)<<24>>24;
         $364 = $phitmp$i$i$i;
        }
        HEAP8[$81>>0] = $364;
        break;
       }
       case 3:  {
        $153 = HEAP32[$72>>2]|0;
        $154 = ($153|0)<($100|0);
        if ($154) {
         $$0$i$ph = 10011;
         break L31;
        }
        $155 = HEAP8[$80>>0]|0;
        $156 = ($155<<24>>24)==(0);
        L84: do {
         if (!($156)) {
          $157 = $155&255;
          $i$05$i$i$i = 0;
          while(1) {
           $160 = ((($pCtx) + ($i$05$i$i$i<<2)|0) + 5596|0);
           $161 = HEAP32[$160>>2]|0;
           $162 = (($161) + 76|0);
           $163 = HEAP32[$162>>2]|0;
           $164 = ($163|0)==($102|0);
           $159 = (($i$05$i$i$i) + 1)|0;
           if ($164) {
            break;
           }
           $158 = ($157|0)>($159|0);
           if ($158) {
            $i$05$i$i$i = $159;
           } else {
            break L84;
           }
          }
          $165 = (($157) - ($i$05$i$i$i))|0;
          $166 = (($165) + -1)|0;
          $167 = (($161) + 68|0);
          HEAP8[$167>>0] = 0;
          $168 = HEAP32[$160>>2]|0;
          HEAP32[$160>>2] = 0;
          $169 = ($166|0)>(0);
          if ($169) {
           $170 = ((($pCtx) + ($159<<2)|0) + 5596|0);
           $171 = $166 << 2;
           _memmove(($160|0),($170|0),($171|0))|0;
          }
          $172 = HEAP8[$80>>0]|0;
          $173 = (($172) + -1)<<24>>24;
          HEAP8[$80>>0] = $173;
          $174 = $173&255;
          $175 = ((($pCtx) + ($174<<2)|0) + 5596|0);
          HEAP32[$175>>2] = 0;
          $176 = ($168|0)==(0|0);
          if (!($176)) {
           $177 = HEAP8[$81>>0]|0;
           $178 = ($177<<24>>24)==(0);
           L94: do {
            if (!($178)) {
             $179 = $177&255;
             $i$05$i$i14$i$i = 0;
             while(1) {
              $182 = ((($pCtx) + ($i$05$i$i14$i$i<<2)|0) + 5724|0);
              $183 = HEAP32[$182>>2]|0;
              $184 = (($183) + 80|0);
              $185 = HEAP32[$184>>2]|0;
              $186 = ($185|0)==($100|0);
              $181 = (($i$05$i$i14$i$i) + 1)|0;
              if ($186) {
               break;
              }
              $180 = ($179|0)>($181|0);
              if ($180) {
               $i$05$i$i14$i$i = $181;
              } else {
               break L94;
              }
             }
             $187 = (($179) - ($i$05$i$i14$i$i))|0;
             $188 = (($187) + -1)|0;
             $189 = (($183) + 68|0);
             HEAP8[$189>>0] = 0;
             $190 = (($183) + 69|0);
             HEAP8[$190>>0] = 0;
             $191 = ($188|0)>(0);
             if ($191) {
              $192 = ((($pCtx) + ($181<<2)|0) + 5724|0);
              $193 = $188 << 2;
              _memmove(($182|0),($192|0),($193|0))|0;
             }
             $194 = HEAP8[$81>>0]|0;
             $195 = (($194) + -1)<<24>>24;
             HEAP8[$81>>0] = $195;
             $196 = $195&255;
             $197 = ((($pCtx) + ($196<<2)|0) + 5724|0);
             HEAP32[$197>>2] = 0;
             $198 = ($183|0)==(0|0);
             if (!($198)) {
              HEAP8[$189>>0] = 0;
              HEAP8[$190>>0] = 0;
              $199 = (($183) + 73|0);
              $200 = (($183) + 72|0);
              dest=$199+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
              HEAP8[$200>>0] = 0;
             }
            }
           } while(0);
           HEAP8[$82>>0] = 1;
           HEAP32[$83>>2] = $102;
           HEAP32[$vararg_buffer7>>2] = $102;
           __Z7WelsLogP13TagLogContextiPKcz($pCtx,4,14824,$vararg_buffer7);
           $201 = HEAP8[$81>>0]|0;
           $202 = ($201<<24>>24)==(0);
           L105: do {
            if (!($202)) {
             $203 = $201&255;
             $i$05$i$i$i$i$i = 0;
             while(1) {
              $206 = ((($pCtx) + ($i$05$i$i$i$i$i<<2)|0) + 5724|0);
              $207 = HEAP32[$206>>2]|0;
              $208 = (($207) + 80|0);
              $209 = HEAP32[$208>>2]|0;
              $210 = ($209|0)==($100|0);
              $205 = (($i$05$i$i$i$i$i) + 1)|0;
              if ($210) {
               break;
              }
              $204 = ($203|0)>($205|0);
              if ($204) {
               $i$05$i$i$i$i$i = $205;
              } else {
               break L105;
              }
             }
             $211 = (($203) - ($i$05$i$i$i$i$i))|0;
             $212 = (($211) + -1)|0;
             $213 = (($207) + 68|0);
             HEAP8[$213>>0] = 0;
             $214 = (($207) + 69|0);
             HEAP8[$214>>0] = 0;
             $215 = ($212|0)>(0);
             if ($215) {
              $216 = ((($pCtx) + ($205<<2)|0) + 5724|0);
              $217 = $212 << 2;
              _memmove(($206|0),($216|0),($217|0))|0;
             }
             $218 = HEAP8[$81>>0]|0;
             $219 = (($218) + -1)<<24>>24;
             HEAP8[$81>>0] = $219;
             $220 = $219&255;
             $221 = ((($pCtx) + ($220<<2)|0) + 5724|0);
             HEAP32[$221>>2] = 0;
             $222 = ($207|0)==(0|0);
             if (!($222)) {
              HEAP8[$213>>0] = 0;
              HEAP8[$214>>0] = 0;
              $223 = (($207) + 73|0);
              $224 = (($207) + 72|0);
              dest=$223+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
              HEAP8[$224>>0] = 0;
             }
            }
           } while(0);
           $225 = HEAP8[$84>>0]|0;
           $226 = ($225<<24>>24)==(0);
           if ($226) {
            break L34;
           }
           $227 = $225&255;
           $i$02$i$i$i = 0;
           while(1) {
            $228 = ((($pCtx) + ($i$02$i$i$i<<2)|0) + 5468|0);
            $229 = HEAP32[$228>>2]|0;
            $230 = (($229) + 76|0);
            $231 = HEAP32[$230>>2]|0;
            $232 = ($231|0)==($102|0);
            if ($232) {
             $233 = (($229) + 69|0);
             $234 = HEAP8[$233>>0]|0;
             $235 = ($234<<24>>24)==(0);
             if ($235) {
              break;
             }
            }
            $254 = (($i$02$i$i$i) + 1)|0;
            $255 = ($254|0)<($227|0);
            if ($255) {
             $i$02$i$i$i = $254;
            } else {
             break L34;
            }
           }
           $236 = (($229) + 68|0);
           HEAP8[$236>>0] = 1;
           HEAP8[$233>>0] = 1;
           $237 = (($229) + 80|0);
           HEAP32[$237>>2] = $100;
           $238 = HEAP8[$81>>0]|0;
           $239 = ($238<<24>>24)==(0);
           if ($239) {
            HEAP32[$85>>2] = $229;
            $253 = 1;
           } else {
            $240 = $238&255;
            $i$01$i$i$i$i = 0;
            while(1) {
             $243 = ((($pCtx) + ($i$01$i$i$i$i<<2)|0) + 5724|0);
             $244 = HEAP32[$243>>2]|0;
             $245 = (($244) + 80|0);
             $246 = HEAP32[$245>>2]|0;
             $247 = ($246|0)>($100|0);
             $241 = (($i$01$i$i$i$i) + 1)|0;
             if ($247) {
              $i$0$lcssa$i$i$i$i = $i$01$i$i$i$i;
              break;
             }
             $242 = ($241|0)<($240|0);
             if ($242) {
              $i$01$i$i$i$i = $241;
             } else {
              $i$0$lcssa$i$i$i$i = $241;
              break;
             }
            }
            $248 = (($i$0$lcssa$i$i$i$i) + 1)|0;
            $249 = ((($pCtx) + ($248<<2)|0) + 5724|0);
            $250 = ((($pCtx) + ($i$0$lcssa$i$i$i$i<<2)|0) + 5724|0);
            $251 = (($240) - ($i$0$lcssa$i$i$i$i))|0;
            $252 = $251 << 2;
            _memmove(($249|0),($250|0),($252|0))|0;
            HEAP32[$250>>2] = $229;
            $$pre$i$i$i$i = HEAP8[$81>>0]|0;
            $phitmp$i$i$i$i = (($$pre$i$i$i$i) + 1)<<24>>24;
            $253 = $phitmp$i$i$i$i;
           }
           HEAP8[$81>>0] = $253;
           break L34;
          }
         }
        } while(0);
        __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14760,$vararg_buffer7);
        break;
       }
       case 4:  {
        HEAP32[$72>>2] = $99;
        $256 = HEAP8[$81>>0]|0;
        $257 = ($256<<24>>24)==(0);
        if (!($257)) {
         $263 = $99;$264 = $256;$i$072$i$i = 0;
         while(1) {
          $258 = ((($pCtx) + ($i$072$i$i<<2)|0) + 5724|0);
          $259 = HEAP32[$258>>2]|0;
          $260 = (($259) + 80|0);
          $261 = HEAP32[$260>>2]|0;
          $262 = ($261|0)<=($263|0);
          $265 = ($264<<24>>24)==(0);
          $or$cond$i$i = $262 | $265;
          L135: do {
           if (!($or$cond$i$i)) {
            $266 = $264&255;
            $i$05$i$i6$i$i = 0;
            while(1) {
             $269 = ((($pCtx) + ($i$05$i$i6$i$i<<2)|0) + 5724|0);
             $270 = HEAP32[$269>>2]|0;
             $271 = (($270) + 80|0);
             $272 = HEAP32[$271>>2]|0;
             $273 = ($272|0)==($261|0);
             $268 = (($i$05$i$i6$i$i) + 1)|0;
             if ($273) {
              break;
             }
             $267 = ($266|0)>($268|0);
             if ($267) {
              $i$05$i$i6$i$i = $268;
             } else {
              break L135;
             }
            }
            $274 = (($266) - ($i$05$i$i6$i$i))|0;
            $275 = (($274) + -1)|0;
            $276 = (($270) + 68|0);
            HEAP8[$276>>0] = 0;
            $277 = (($270) + 69|0);
            HEAP8[$277>>0] = 0;
            $278 = ($275|0)>(0);
            if ($278) {
             $279 = ((($pCtx) + ($268<<2)|0) + 5724|0);
             $280 = $275 << 2;
             _memmove(($269|0),($279|0),($280|0))|0;
            }
            $281 = HEAP8[$81>>0]|0;
            $282 = (($281) + -1)<<24>>24;
            HEAP8[$81>>0] = $282;
            $283 = $282&255;
            $284 = ((($pCtx) + ($283<<2)|0) + 5724|0);
            HEAP32[$284>>2] = 0;
            $285 = ($270|0)==(0|0);
            if (!($285)) {
             HEAP8[$276>>0] = 0;
             HEAP8[$277>>0] = 0;
             $286 = (($270) + 73|0);
             $287 = (($270) + 72|0);
             dest=$286+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
             HEAP8[$287>>0] = 0;
            }
           }
          } while(0);
          $288 = (($i$072$i$i) + 1)|0;
          $289 = HEAP8[$81>>0]|0;
          $290 = $289&255;
          $291 = ($288|0)<($290|0);
          if (!($291)) {
           break L34;
          }
          $$pre$i$i = HEAP32[$72>>2]|0;
          $263 = $$pre$i$i;$264 = $289;$i$072$i$i = $288;
         }
        }
        break;
       }
       case 1:  {
        $103 = HEAP8[$80>>0]|0;
        $104 = ($103<<24>>24)==(0);
        L148: do {
         if (!($104)) {
          $105 = $103&255;
          $i$05$i$i$i$i = 0;
          while(1) {
           $108 = ((($pCtx) + ($i$05$i$i$i$i<<2)|0) + 5596|0);
           $109 = HEAP32[$108>>2]|0;
           $110 = (($109) + 76|0);
           $111 = HEAP32[$110>>2]|0;
           $112 = ($111|0)==($102|0);
           $107 = (($i$05$i$i$i$i) + 1)|0;
           if ($112) {
            break;
           }
           $106 = ($105|0)>($107|0);
           if ($106) {
            $i$05$i$i$i$i = $107;
           } else {
            break L148;
           }
          }
          $113 = (($105) - ($i$05$i$i$i$i))|0;
          $114 = (($113) + -1)|0;
          $115 = (($109) + 68|0);
          HEAP8[$115>>0] = 0;
          $116 = HEAP32[$108>>2]|0;
          HEAP32[$108>>2] = 0;
          $117 = ($114|0)>(0);
          if ($117) {
           $118 = ((($pCtx) + ($107<<2)|0) + 5596|0);
           $119 = $114 << 2;
           _memmove(($108|0),($118|0),($119|0))|0;
          }
          $120 = HEAP8[$80>>0]|0;
          $121 = (($120) + -1)<<24>>24;
          HEAP8[$80>>0] = $121;
          $122 = $121&255;
          $123 = ((($pCtx) + ($122<<2)|0) + 5596|0);
          HEAP32[$123>>2] = 0;
          $124 = ($116|0)==(0|0);
          if (!($124)) {
           $125 = (($116) + 68|0);
           HEAP8[$125>>0] = 0;
           $126 = (($116) + 69|0);
           HEAP8[$126>>0] = 0;
           $127 = (($116) + 73|0);
           $128 = (($116) + 72|0);
           dest=$127+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           HEAP8[$128>>0] = 0;
           break L34;
          }
         }
        } while(0);
        __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14632,$vararg_buffer7);
        break;
       }
       default: {
       }
       }
      } while(0);
      $365 = (($i$055$i) + 1)|0;
      $366 = (($3) + (($365*24)|0)|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = ($367|0)==(0);
      if ($368) {
       $$pre$phiZ2D = $86;$iRet$0 = 0;
       break L28;
      } else {
       $87 = $367;$i$055$i = $365;
      }
     }
     $369 = (($pCtx) + 242340|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = ($370|0)==(0);
     if ($371) {
      $$0 = $$0$i$ph;
      STACKTOP = sp;return ($$0|0);
     } else {
      $372 = (__ZN7WelsDecL25RemainOneBufferInDpbForECEPNS_21TagWelsDecoderContextE($pCtx)|0);
      $$pre$phiZ2D = $86;$iRet$0 = $372;
      break;
     }
    }
   } while(0);
   $373 = HEAP8[$$pre$phiZ2D>>0]|0;
   $374 = ($373<<24>>24)==(0);
   if ($374) {
    $iRet$1 = $iRet$0;
   } else {
    $375 = HEAP32[$8>>2]|0;
    $376 = (($375) + 76|0);
    HEAP32[$376>>2] = 0;
    $377 = HEAP32[$8>>2]|0;
    $378 = (($377) + 64|0);
    HEAP32[$378>>2] = 0;
    $iRet$1 = $iRet$0;
   }
  }
 } while(0);
 $385 = HEAP32[$8>>2]|0;
 $386 = (($385) + 69|0);
 $387 = HEAP8[$386>>0]|0;
 $388 = ($387<<24>>24)==(0);
 if (!($388)) {
  $$0 = $iRet$1;
  STACKTOP = sp;return ($$0|0);
 }
 $389 = (($pCtx) + 5856|0);
 $390 = HEAP8[$389>>0]|0;
 $391 = $390&255;
 $392 = (($pCtx) + 5854|0);
 $393 = HEAP8[$392>>0]|0;
 $394 = $393&255;
 $395 = (($394) + ($391))|0;
 $396 = HEAP32[$16>>2]|0;
 $397 = (($396) + 296|0);
 $398 = HEAP32[$397>>2]|0;
 $399 = ($398|0)<(1);
 $$ = $399 ? 1 : $398;
 $400 = ($395|0)<($$|0);
 do {
  if ($400) {
   $406 = $385;$iRet$2 = $iRet$1;
  } else {
   $401 = (($pCtx) + 242340|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = ($402|0)==(0);
   if ($403) {
    $$0 = 10009;
    STACKTOP = sp;return ($$0|0);
   } else {
    $404 = (__ZN7WelsDecL25RemainOneBufferInDpbForECEPNS_21TagWelsDecoderContextE($pCtx)|0);
    $$pre = HEAP32[$8>>2]|0;
    $406 = $$pre;$iRet$2 = $404;
    break;
   }
  }
 } while(0);
 $405 = (($406) + 68|0);
 HEAP8[$405>>0] = 1;
 $407 = (($406) + 69|0);
 HEAP8[$407>>0] = 0;
 $408 = (($406) + 80|0);
 HEAP32[$408>>2] = -1;
 $409 = HEAP8[$392>>0]|0;
 $410 = ($409<<24>>24)==(0);
 if ($410) {
  $$pre1$i = (($pCtx) + 5596|0);
  $$pre$phi$iZ2D = $$pre1$i;$415 = 1;
 } else {
  $411 = $409&255;
  $412 = (($pCtx) + 5600|0);
  $413 = (($pCtx) + 5596|0);
  $414 = $411 << 2;
  _memmove(($412|0),($413|0),($414|0))|0;
  $$pre$i1 = HEAP8[$392>>0]|0;
  $phitmp$i2 = (($$pre$i1) + 1)<<24>>24;
  $$pre$phi$iZ2D = $413;$415 = $phitmp$i2;
 }
 HEAP32[$$pre$phi$iZ2D>>2] = $406;
 HEAP8[$392>>0] = $415;
 $$0 = $iRet$2;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec14MemInitNalListEPPNS_14TagAccessUnitsEjPN10WelsCommon12CMemoryAlignE($ppAu,$kuiSize,$pMa) {
 $ppAu = $ppAu|0;
 $kuiSize = $kuiSize|0;
 $pMa = $pMa|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pPtr$0 = 0, $uiIdx$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $kuiSize << 2;
 $1 = (($0) + 28)|0;
 $2 = ($kuiSize*3920)|0;
 $3 = (($1) + ($2))|0;
 $4 = ($kuiSize|0)==(0);
 if ($4) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$ppAu>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = ($ppAu|0)==(0|0);
 $or$cond = $6 | $7;
 if (!($or$cond)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($pMa,$5,14952);
  HEAP32[$ppAu>>2] = 0;
 }
 $8 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($pMa,$3,14952)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$ppAu>>2] = $8;
 $10 = (($8) + 28|0);
 HEAP32[$8>>2] = $10;
 $11 = (($8) + ($1)|0);
 $pPtr$0 = $11;$uiIdx$0 = 0;
 while(1) {
  $12 = HEAP32[$ppAu>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($uiIdx$0<<2)|0);
  HEAP32[$14>>2] = $pPtr$0;
  $15 = (($pPtr$0) + 3920|0);
  $16 = (($uiIdx$0) + 1)|0;
  $17 = ($16>>>0)<($kuiSize>>>0);
  if ($17) {
   $pPtr$0 = $15;$uiIdx$0 = $16;
  } else {
   break;
  }
 }
 $18 = HEAP32[$ppAu>>2]|0;
 $19 = (($18) + 12|0);
 HEAP32[$19>>2] = $kuiSize;
 $20 = HEAP32[$ppAu>>2]|0;
 $21 = (($20) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = HEAP32[$ppAu>>2]|0;
 $23 = (($22) + 8|0);
 HEAP32[$23>>2] = 0;
 $24 = HEAP32[$ppAu>>2]|0;
 $25 = (($24) + 16|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$ppAu>>2]|0;
 $27 = (($26) + 20|0);
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[$ppAu>>2]|0;
 $29 = (($28) + 24|0);
 HEAP8[$29>>0] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec14MemFreeNalListEPPNS_14TagAccessUnitsEPN10WelsCommon12CMemoryAlignE($ppAu,$pMa) {
 $ppAu = $ppAu|0;
 $pMa = $pMa|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ppAu|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$ppAu>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($pMa,$1,14952);
   HEAP32[$ppAu>>2] = 0;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec17ExpandNalUnitListEPPNS_14TagAccessUnitsEiiPN10WelsCommon12CMemoryAlignE($ppAu,$kiOrgSize,$kiExpSize,$pMa) {
 $ppAu = $ppAu|0;
 $kiOrgSize = $kiOrgSize|0;
 $kiExpSize = $kiExpSize|0;
 $pMa = $pMa|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $iIdx$0 = 0, $pPtr$0$i = 0, $uiIdx$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($kiExpSize|0)>($kiOrgSize|0);
 if (!($0)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = $kiExpSize << 2;
 $2 = (($1) + 28)|0;
 $3 = ($kiExpSize|0)==(0);
 if ($3) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($kiExpSize*3920)|0;
 $5 = (($2) + ($4))|0;
 $6 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($pMa,$5,14952)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($6) + 28|0);
 HEAP32[$6>>2] = $8;
 $9 = (($6) + ($2)|0);
 $11 = $8;$pPtr$0$i = $9;$uiIdx$0$i = 0;
 while(1) {
  $10 = (($11) + ($uiIdx$0$i<<2)|0);
  HEAP32[$10>>2] = $pPtr$0$i;
  $12 = (($uiIdx$0$i) + 1)|0;
  $exitcond = ($12|0)==($kiExpSize|0);
  if ($exitcond) {
   break;
  }
  $13 = (($pPtr$0$i) + 3920|0);
  $$pre = HEAP32[$6>>2]|0;
  $11 = $$pre;$pPtr$0$i = $13;$uiIdx$0$i = $12;
 }
 $14 = (($6) + 12|0);
 HEAP32[$14>>2] = $kiExpSize;
 $15 = (($6) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = (($6) + 8|0);
 HEAP32[$16>>2] = 0;
 $17 = (($6) + 16|0);
 HEAP32[$17>>2] = 0;
 $18 = (($6) + 20|0);
 HEAP32[$18>>2] = 0;
 $19 = (($6) + 24|0);
 HEAP8[$19>>0] = 0;
 $iIdx$0 = 0;
 while(1) {
  $20 = HEAP32[$6>>2]|0;
  $21 = (($20) + ($iIdx$0<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$ppAu>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($iIdx$0<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  _memcpy(($22|0),($26|0),3920)|0;
  $27 = (($iIdx$0) + 1)|0;
  $28 = ($27|0)<($kiOrgSize|0);
  if ($28) {
   $iIdx$0 = $27;
  } else {
   break;
  }
 }
 HEAP32[$14>>2] = $kiExpSize;
 $29 = HEAP32[$ppAu>>2]|0;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$15>>2] = $31;
 $32 = HEAP32[$ppAu>>2]|0;
 $33 = (($32) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$16>>2] = $34;
 $35 = HEAP32[$ppAu>>2]|0;
 $36 = (($35) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$18>>2] = $37;
 $38 = HEAP32[$ppAu>>2]|0;
 $39 = (($38) + 24|0);
 $40 = HEAP8[$39>>0]|0;
 HEAP8[$19>>0] = $40;
 $41 = ($ppAu|0)==(0|0);
 if (!($41)) {
  $42 = HEAP32[$ppAu>>2]|0;
  $43 = ($42|0)==(0|0);
  if (!($43)) {
   __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($pMa,$42,14952);
   HEAP32[$ppAu>>2] = 0;
  }
 }
 HEAP32[$ppAu>>2] = $6;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec13MemGetNextNalEPPNS_14TagAccessUnitsEPN10WelsCommon12CMemoryAlignE($ppAu,$pMa) {
 $ppAu = $ppAu|0;
 $pMa = $pMa|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pAu$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ppAu>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 do {
  if ($5) {
   $12 = $2;$pAu$0 = $0;
  } else {
   $6 = (($4) + 16)|0;
   $7 = (__ZN7WelsDec17ExpandNalUnitListEPPNS_14TagAccessUnitsEiiPN10WelsCommon12CMemoryAlignE($ppAu,$4,$6,$pMa)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = HEAP32[$ppAu>>2]|0;
    $$phi$trans$insert = (($9) + 4|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $12 = $$pre;$pAu$0 = $9;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $10 = (($pAu$0) + 4|0);
 $11 = (($12) + 1)|0;
 HEAP32[$10>>2] = $11;
 $13 = HEAP32[$pAu$0>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 _memset(($15|0),0,3920)|0;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec23PredPSkipMvFromNeighborEPNS_10TagDqLayerEPs($pCurLayer,$iMvp) {
 $pCurLayer = $pCurLayer|0;
 $iMvp = $iMvp|0;
 var $$21 = 0, $$24 = 0, $$neg$i = 0, $$neg$i32 = 0, $$not = 0, $$not10 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bLeftAvail$0$off0 = 0, $bLeftAvail$0$off0$not = 0, $bLeftTopAvail$0 = 0, $bLeftTopAvail$1$off0 = 0, $bLeftTopAvail$1$off0$not = 0, $bRightTopAvail$0$off0 = 0, $bRightTopAvail$0$off0$not = 0, $bTopAvail$0$off0 = 0, $bTopAvail$0$off0$not = 0, $brmerge = 0, $brmerge11 = 0, $brmerge12 = 0, $brmerge13 = 0, $extract$t = 0;
 var $extract$t4 = 0, $iDiagonalRef$054 = 0, $iLeftTopRef$0 = 0, $iLeftTopXy$0 = 0, $iLeftTopXy$1 = 0, $iLeftXy$0 = 0, $iMax$1$i = 0, $iMax$1$i31 = 0, $iMin$1$i = 0, $iMin$1$i30 = 0, $iMvA$sroa$0$03739 = 0, $iMvA$sroa$6$03640 = 0, $iMvB$sroa$0$04749 = 0, $iMvB$sroa$5$04650 = 0, $iMvC$sroa$0$0 = 0, $iMvC$sroa$0$156 = 0, $iMvC$sroa$5$0 = 0, $iMvC$sroa$5$155 = 0, $iMvD$sroa$0$0 = 0, $iRightTopRef$0 = 0;
 var $iRightTopXy$0 = 0, $iTopXy$0 = 0, $iX$iY$i = 0, $iX$iY$i28 = 0, $iY$iX$i = 0, $iY$iX$i27 = 0, $iZ$iX$iY$i = 0, $iZ$iX$iY$i29 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond23 = 0, $or$cond3 = 0, $or$cond3$not = 0, $phitmp = 0, $phitmp7 = 0, $phitmp8 = 0, $phitmp9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCurLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCurLayer) + 4032|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCurLayer) + 4036|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCurLayer) + 3912|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3|0)!=(0);
 if ($10) {
  $11 = (($1) + -1)|0;
  $12 = (($7) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==($9|0);
  $bLeftAvail$0$off0 = $14;$iLeftXy$0 = $11;
 } else {
  $bLeftAvail$0$off0 = 0;$iLeftXy$0 = 0;
 }
 $15 = ($5|0)!=(0);
 do {
  if ($15) {
   $16 = (($pCurLayer) + 4044|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($1) - ($17))|0;
   $19 = (($7) + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==($9|0);
   if ($10) {
    $22 = (($18) + -1)|0;
    $23 = (($7) + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($9|0);
    $26 = $25&1;
    $bLeftTopAvail$0 = $26;$iLeftTopXy$0 = $22;
   } else {
    $bLeftTopAvail$0 = 0;$iLeftTopXy$0 = 0;
   }
   $27 = (($17) + -1)|0;
   $28 = ($3|0)==($27|0);
   if ($28) {
    $extract$t4 = ($bLeftTopAvail$0<<24>>24)!=(0);
    $bLeftTopAvail$1$off0 = $extract$t4;$bRightTopAvail$0$off0 = 0;$bTopAvail$0$off0 = $21;$iLeftTopXy$1 = $iLeftTopXy$0;$iRightTopXy$0 = 0;$iTopXy$0 = $18;
    break;
   } else {
    $29 = (($18) + 1)|0;
    $30 = (($7) + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==($9|0);
    $extract$t = ($bLeftTopAvail$0<<24>>24)!=(0);
    $bLeftTopAvail$1$off0 = $extract$t;$bRightTopAvail$0$off0 = $32;$bTopAvail$0$off0 = $21;$iLeftTopXy$1 = $iLeftTopXy$0;$iRightTopXy$0 = $29;$iTopXy$0 = $18;
    break;
   }
  } else {
   $bLeftTopAvail$1$off0 = 0;$bRightTopAvail$0$off0 = 0;$bTopAvail$0$off0 = 0;$iLeftTopXy$1 = 0;$iRightTopXy$0 = 0;$iTopXy$0 = 0;
  }
 } while(0);
 $$not = $10 ^ 1;
 $bLeftAvail$0$off0$not = $bLeftAvail$0$off0 ^ 1;
 $brmerge = $$not | $bLeftAvail$0$off0$not;
 if ($brmerge) {
  $57 = 0;
 } else {
  $33 = (($pCurLayer) + 3908|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($iLeftXy$0<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $phitmp9 = $37 & 504;
  $57 = $phitmp9;
 }
 $$not10 = $15 ^ 1;
 $bTopAvail$0$off0$not = $bTopAvail$0$off0 ^ 1;
 $brmerge11 = $$not10 | $bTopAvail$0$off0$not;
 if ($brmerge11) {
  $74 = 0;
 } else {
  $38 = (($pCurLayer) + 3908|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($iTopXy$0<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $phitmp8 = $42 & 504;
  $74 = $phitmp8;
 }
 $or$cond = $10 & $15;
 $or$cond$not = $or$cond ^ 1;
 $bLeftTopAvail$1$off0$not = $bLeftTopAvail$1$off0 ^ 1;
 $brmerge12 = $or$cond$not | $bLeftTopAvail$1$off0$not;
 if ($brmerge12) {
  $104 = 0;
 } else {
  $43 = (($pCurLayer) + 3908|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($iLeftTopXy$1<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $phitmp = $47 & 504;
  $104 = $phitmp;
 }
 $48 = (($pCurLayer) + 4044|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + -1)|0;
 $51 = ($3|0)!=($50|0);
 $or$cond3 = $51 & $15;
 $or$cond3$not = $or$cond3 ^ 1;
 $bRightTopAvail$0$off0$not = $bRightTopAvail$0$off0 ^ 1;
 $brmerge13 = $or$cond3$not | $bRightTopAvail$0$off0$not;
 if ($brmerge13) {
  $91 = 0;
 } else {
  $52 = (($pCurLayer) + 3908|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($iRightTopXy$0<<1)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $phitmp7 = $56 & 504;
  $91 = $phitmp7;
 }
 $58 = ($57|0)==(0);
 $or$cond15 = $58 | $bLeftAvail$0$off0$not;
 do {
  if ($or$cond15) {
   if ($bLeftAvail$0$off0) {
    $119 = 0;$iMvA$sroa$0$03739 = 0;$iMvA$sroa$6$03640 = 0;
   } else {
    label = 21;
   }
  } else {
   $59 = (($pCurLayer) + 3916|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60) + ($iLeftXy$0<<6)|0) + 12|0);
   $62 = HEAPU8[$61>>0]|(HEAPU8[$61+1>>0]<<8)|(HEAPU8[$61+2>>0]<<16)|(HEAPU8[$61+3>>0]<<24);
   $63 = $62&65535;
   $64 = $62 >>> 16;
   $65 = $64&65535;
   $66 = (($pCurLayer) + 3932|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($67) + ($iLeftXy$0<<4)|0) + 3|0);
   $69 = HEAP8[$68>>0]|0;
   if ((($69<<24>>24) == -2)) {
    label = 21;
    break;
   } else if (!((($69<<24>>24) == 0))) {
    $119 = 0;$iMvA$sroa$0$03739 = $63;$iMvA$sroa$6$03640 = $65;
    break;
   }
   $70 = $64 << 16;
   $71 = $62 & 65535;
   $72 = $70 | $71;
   $73 = ($72|0)==(0);
   if ($73) {
    label = 21;
   } else {
    $119 = 1;$iMvA$sroa$0$03739 = $63;$iMvA$sroa$6$03640 = $65;
   }
  }
 } while(0);
 if ((label|0) == 21) {
  HEAP8[$iMvp>>0]=0&255;HEAP8[$iMvp+1>>0]=(0>>8)&255;HEAP8[$iMvp+2>>0]=(0>>16)&255;HEAP8[$iMvp+3>>0]=0>>24;
  STACKTOP = sp;return;
 }
 $75 = ($74|0)==(0);
 $or$cond17 = $75 | $bTopAvail$0$off0$not;
 do {
  if ($or$cond17) {
   if ($bTopAvail$0$off0) {
    $121 = 0;$iMvB$sroa$0$04749 = 0;$iMvB$sroa$5$04650 = 0;
   } else {
    label = 26;
   }
  } else {
   $76 = (($pCurLayer) + 3916|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($77) + ($iTopXy$0<<6)|0) + 48|0);
   $79 = HEAPU8[$78>>0]|(HEAPU8[$78+1>>0]<<8)|(HEAPU8[$78+2>>0]<<16)|(HEAPU8[$78+3>>0]<<24);
   $80 = $79&65535;
   $81 = $79 >>> 16;
   $82 = $81&65535;
   $83 = (($pCurLayer) + 3932|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($84) + ($iTopXy$0<<4)|0) + 12|0);
   $86 = HEAP8[$85>>0]|0;
   if ((($86<<24>>24) == -2)) {
    label = 26;
    break;
   } else if (!((($86<<24>>24) == 0))) {
    $121 = 0;$iMvB$sroa$0$04749 = $80;$iMvB$sroa$5$04650 = $82;
    break;
   }
   $87 = $81 << 16;
   $88 = $79 & 65535;
   $89 = $87 | $88;
   $90 = ($89|0)==(0);
   if ($90) {
    label = 26;
   } else {
    $121 = 1;$iMvB$sroa$0$04749 = $80;$iMvB$sroa$5$04650 = $82;
   }
  }
 } while(0);
 if ((label|0) == 26) {
  HEAP8[$iMvp>>0]=0&255;HEAP8[$iMvp+1>>0]=(0>>8)&255;HEAP8[$iMvp+2>>0]=(0>>16)&255;HEAP8[$iMvp+3>>0]=0>>24;
  STACKTOP = sp;return;
 }
 $92 = ($91|0)==(0);
 $or$cond20 = $92 | $bRightTopAvail$0$off0$not;
 if ($or$cond20) {
  $$21 = $bRightTopAvail$0$off0 ? -1 : -2;
  $iMvC$sroa$0$0 = 0;$iMvC$sroa$5$0 = 0;$iRightTopRef$0 = $$21;
 } else {
  $93 = (($pCurLayer) + 3916|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94) + ($iRightTopXy$0<<6)|0) + 48|0);
  $96 = HEAPU8[$95>>0]|(HEAPU8[$95+1>>0]<<8)|(HEAPU8[$95+2>>0]<<16)|(HEAPU8[$95+3>>0]<<24);
  $97 = $96&65535;
  $98 = $96 >>> 16;
  $99 = $98&65535;
  $100 = (($pCurLayer) + 3932|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ((($101) + ($iRightTopXy$0<<4)|0) + 12|0);
  $103 = HEAP8[$102>>0]|0;
  $iMvC$sroa$0$0 = $97;$iMvC$sroa$5$0 = $99;$iRightTopRef$0 = $103;
 }
 $105 = ($104|0)==(0);
 $or$cond23 = $105 | $bLeftTopAvail$1$off0$not;
 if ($or$cond23) {
  $$24 = $bLeftTopAvail$1$off0 ? -1 : -2;
  $iLeftTopRef$0 = $$24;$iMvD$sroa$0$0 = 0;
 } else {
  $106 = (($pCurLayer) + 3916|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($107) + ($iLeftTopXy$1<<6)|0) + 60|0);
  $109 = HEAPU8[$108>>0]|(HEAPU8[$108+1>>0]<<8)|(HEAPU8[$108+2>>0]<<16)|(HEAPU8[$108+3>>0]<<24);
  $110 = (($pCurLayer) + 3932|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ((($111) + ($iLeftTopXy$1<<4)|0) + 15|0);
  $113 = HEAP8[$112>>0]|0;
  $iLeftTopRef$0 = $113;$iMvD$sroa$0$0 = $109;
 }
 $114 = ($iRightTopRef$0<<24>>24)==(-2);
 if ($114) {
  $115 = $iMvD$sroa$0$0&65535;
  $116 = $iMvD$sroa$0$0 >>> 16;
  $117 = $116&65535;
  $iDiagonalRef$054 = $iLeftTopRef$0;$iMvC$sroa$0$156 = $115;$iMvC$sroa$5$155 = $117;
 } else {
  $iDiagonalRef$054 = $iRightTopRef$0;$iMvC$sroa$0$156 = $iMvC$sroa$0$0;$iMvC$sroa$5$155 = $iMvC$sroa$5$0;
 }
 $118 = $119&1;
 $120 = $121&1;
 $122 = (($120) + ($118))|0;
 $123 = ($iDiagonalRef$054<<24>>24)==(0);
 $124 = $123&1;
 $125 = (($122) + ($124))|0;
 $126 = ($125|0)==(1);
 if (!($126)) {
  $139 = $iMvA$sroa$0$03739 << 16 >> 16;
  $140 = $iMvB$sroa$0$04749 << 16 >> 16;
  $141 = $iMvC$sroa$0$156 << 16 >> 16;
  $142 = ($iMvB$sroa$0$04749<<16>>16)<($iMvA$sroa$0$03739<<16>>16);
  $iY$iX$i = $142 ? $140 : $139;
  $iX$iY$i = $142 ? $139 : $140;
  $143 = ($iY$iX$i|0)>($141|0);
  if ($143) {
   $iMax$1$i = $iX$iY$i;$iMin$1$i = $141;
  } else {
   $144 = ($iX$iY$i|0)<($141|0);
   $iZ$iX$iY$i = $144 ? $141 : $iX$iY$i;
   $iMax$1$i = $iZ$iX$iY$i;$iMin$1$i = $iY$iX$i;
  }
  $$neg$i = (($140) + ($139))|0;
  $145 = (($$neg$i) + ($141))|0;
  $146 = (($145) - ($iMin$1$i))|0;
  $147 = (($146) - ($iMax$1$i))|0;
  $148 = $147&65535;
  HEAP16[$iMvp>>1] = $148;
  $149 = $iMvA$sroa$6$03640 << 16 >> 16;
  $150 = $iMvB$sroa$5$04650 << 16 >> 16;
  $151 = $iMvC$sroa$5$155 << 16 >> 16;
  $152 = ($iMvB$sroa$5$04650<<16>>16)<($iMvA$sroa$6$03640<<16>>16);
  $iY$iX$i27 = $152 ? $150 : $149;
  $iX$iY$i28 = $152 ? $149 : $150;
  $153 = ($iY$iX$i27|0)>($151|0);
  if ($153) {
   $iMax$1$i31 = $iX$iY$i28;$iMin$1$i30 = $151;
  } else {
   $154 = ($iX$iY$i28|0)<($151|0);
   $iZ$iX$iY$i29 = $154 ? $151 : $iX$iY$i28;
   $iMax$1$i31 = $iZ$iX$iY$i29;$iMin$1$i30 = $iY$iX$i27;
  }
  $$neg$i32 = (($150) + ($149))|0;
  $155 = (($$neg$i32) + ($151))|0;
  $156 = (($155) - ($iMin$1$i30))|0;
  $157 = (($156) - ($iMax$1$i31))|0;
  $158 = $157&65535;
  $159 = (($iMvp) + 2|0);
  HEAP16[$159>>1] = $158;
  STACKTOP = sp;return;
 }
 if ($119) {
  $127 = $iMvA$sroa$6$03640&65535;
  $128 = $127 << 16;
  $129 = $iMvA$sroa$0$03739&65535;
  $130 = $128 | $129;
  HEAP8[$iMvp>>0]=$130&255;HEAP8[$iMvp+1>>0]=($130>>8)&255;HEAP8[$iMvp+2>>0]=($130>>16)&255;HEAP8[$iMvp+3>>0]=$130>>24;
  STACKTOP = sp;return;
 }
 if ($121) {
  $131 = $iMvB$sroa$5$04650&65535;
  $132 = $131 << 16;
  $133 = $iMvB$sroa$0$04749&65535;
  $134 = $132 | $133;
  HEAP8[$iMvp>>0]=$134&255;HEAP8[$iMvp+1>>0]=($134>>8)&255;HEAP8[$iMvp+2>>0]=($134>>16)&255;HEAP8[$iMvp+3>>0]=$134>>24;
  STACKTOP = sp;return;
 } else {
  $135 = $iMvC$sroa$5$155&65535;
  $136 = $135 << 16;
  $137 = $iMvC$sroa$0$156&65535;
  $138 = $136 | $137;
  HEAP8[$iMvp>>0]=$138&255;HEAP8[$iMvp+1>>0]=($138>>8)&255;HEAP8[$iMvp+2>>0]=($138>>16)&255;HEAP8[$iMvp+3>>0]=$138>>24;
  STACKTOP = sp;return;
 }
}
function __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($iMotionVector,$iRefIndex,$iPartIdx,$iPartWidth,$iRef,$iMVP) {
 $iMotionVector = $iMotionVector|0;
 $iRefIndex = $iRefIndex|0;
 $iPartIdx = $iPartIdx|0;
 $iPartWidth = $iPartWidth|0;
 $iRef = $iRef|0;
 $iMVP = $iMVP|0;
 var $$neg$i = 0, $$neg$i12 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $iCMV$sroa$4$0$in = 0, $iCMV$sroa$4$0$in$in = 0, $iCMV$sroa$4$0$in$in$in$in = 0, $iDiagonalRef$0 = 0, $iMax$1$i = 0, $iMax$1$i11 = 0, $iMin$1$i = 0, $iMin$1$i10 = 0, $iX$iY$i = 0, $iX$iY$i8 = 0, $iY$iX$i = 0, $iY$iX$i7 = 0, $iZ$iX$iY$i = 0, $iZ$iX$iY$i9 = 0, $or$cond = 0, $or$cond6 = 0, $sext = 0;
 var $sext1 = 0, $sext2 = 0, $sext5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (16968 + ($iPartIdx)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + 255)|0;
 $4 = (($2) + 250)|0;
 $5 = $4 & 255;
 $6 = (($4) + ($iPartWidth))|0;
 $7 = (($2) + 249)|0;
 $8 = $3 & 255;
 $9 = (($iRefIndex) + ($8)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = (($iRefIndex) + ($5)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $6 & 255;
 $14 = (($iRefIndex) + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $7 & 255;
 $17 = (($iMotionVector) + ($8<<2)|0);
 $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8)|(HEAPU8[$17+2>>0]<<16)|(HEAPU8[$17+3>>0]<<24);
 $19 = (($iMotionVector) + ($5<<2)|0);
 $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8)|(HEAPU8[$19+2>>0]<<16)|(HEAPU8[$19+3>>0]<<24);
 $21 = ($15<<24>>24)==(-2);
 if ($21) {
  $22 = (($iRefIndex) + ($16)|0);
  $23 = HEAP8[$22>>0]|0;
  $$pn = $16;$iDiagonalRef$0 = $23;
 } else {
  $$pn = $13;$iDiagonalRef$0 = $15;
 }
 $iCMV$sroa$4$0$in$in$in$in = (($iMotionVector) + ($$pn<<2)|0);
 $iCMV$sroa$4$0$in$in = HEAPU8[$iCMV$sroa$4$0$in$in$in$in>>0]|(HEAPU8[$iCMV$sroa$4$0$in$in$in$in+1>>0]<<8)|(HEAPU8[$iCMV$sroa$4$0$in$in$in$in+2>>0]<<16)|(HEAPU8[$iCMV$sroa$4$0$in$in$in$in+3>>0]<<24);
 $iCMV$sroa$4$0$in = $iCMV$sroa$4$0$in$in >>> 16;
 $24 = ($10<<24>>24)==($iRef<<24>>24);
 $25 = ($12<<24>>24)==($iRef<<24>>24);
 $26 = ($12<<24>>24)==(-2);
 $27 = ($iDiagonalRef$0<<24>>24)==(-2);
 $or$cond = $26 & $27;
 $28 = ($10<<24>>24)>(-2);
 $or$cond6 = $or$cond & $28;
 if ($or$cond6) {
  HEAP8[$iMVP>>0]=$18&255;HEAP8[$iMVP+1>>0]=($18>>8)&255;HEAP8[$iMVP+2>>0]=($18>>16)&255;HEAP8[$iMVP+3>>0]=$18>>24;
  STACKTOP = sp;return;
 }
 $29 = ($iDiagonalRef$0<<24>>24)==($iRef<<24>>24);
 $30 = $25&1;
 $31 = $24&1;
 $32 = $29&1;
 $33 = (($30) + ($31))|0;
 $34 = (($33) + ($32))|0;
 $35 = ($34|0)==(1);
 if (!($35)) {
  $sext = $18 << 16;
  $39 = $sext >> 16;
  $sext1 = $20 << 16;
  $40 = $sext1 >> 16;
  $sext2 = $iCMV$sroa$4$0$in$in << 16;
  $41 = $sext2 >> 16;
  $42 = ($40|0)<($39|0);
  $iY$iX$i = $42 ? $40 : $39;
  $iX$iY$i = $42 ? $39 : $40;
  $43 = ($iY$iX$i|0)>($41|0);
  if ($43) {
   $iMax$1$i = $iX$iY$i;$iMin$1$i = $41;
  } else {
   $44 = ($iX$iY$i|0)<($41|0);
   $iZ$iX$iY$i = $44 ? $41 : $iX$iY$i;
   $iMax$1$i = $iZ$iX$iY$i;$iMin$1$i = $iY$iX$i;
  }
  $$neg$i = (($40) + ($39))|0;
  $45 = (($$neg$i) + ($41))|0;
  $46 = (($45) - ($iMin$1$i))|0;
  $47 = (($46) - ($iMax$1$i))|0;
  $48 = $47&65535;
  HEAP16[$iMVP>>1] = $48;
  $49 = $18 >> 16;
  $50 = $20 >> 16;
  $sext5 = $iCMV$sroa$4$0$in << 16;
  $51 = $sext5 >> 16;
  $52 = ($50|0)<($49|0);
  $iY$iX$i7 = $52 ? $50 : $49;
  $iX$iY$i8 = $52 ? $49 : $50;
  $53 = ($iY$iX$i7|0)>($51|0);
  if ($53) {
   $iMax$1$i11 = $iX$iY$i8;$iMin$1$i10 = $51;
  } else {
   $54 = ($iX$iY$i8|0)<($51|0);
   $iZ$iX$iY$i9 = $54 ? $51 : $iX$iY$i8;
   $iMax$1$i11 = $iZ$iX$iY$i9;$iMin$1$i10 = $iY$iX$i7;
  }
  $$neg$i12 = (($50) + ($49))|0;
  $55 = (($$neg$i12) + ($51))|0;
  $56 = (($55) - ($iMin$1$i10))|0;
  $57 = (($56) - ($iMax$1$i11))|0;
  $58 = $57&65535;
  $59 = (($iMVP) + 2|0);
  HEAP16[$59>>1] = $58;
  STACKTOP = sp;return;
 }
 if ($24) {
  HEAP8[$iMVP>>0]=$18&255;HEAP8[$iMVP+1>>0]=($18>>8)&255;HEAP8[$iMVP+2>>0]=($18>>16)&255;HEAP8[$iMVP+3>>0]=$18>>24;
  STACKTOP = sp;return;
 }
 if ($25) {
  HEAP8[$iMVP>>0]=$20&255;HEAP8[$iMVP+1>>0]=($20>>8)&255;HEAP8[$iMVP+2>>0]=($20>>16)&255;HEAP8[$iMVP+3>>0]=$20>>24;
  STACKTOP = sp;return;
 } else {
  $36 = $iCMV$sroa$4$0$in << 16;
  $37 = $iCMV$sroa$4$0$in$in & 65535;
  $38 = $36 | $37;
  HEAP8[$iMVP>>0]=$38&255;HEAP8[$iMVP+1>>0]=($38>>8)&255;HEAP8[$iMVP+2>>0]=($38>>16)&255;HEAP8[$iMVP+3>>0]=$38>>24;
  STACKTOP = sp;return;
 }
}
function __ZN7WelsDec15PredInter8x16MvEPA30_A2_sPA30_aiaPs($iMotionVector,$iRefIndex,$iPartIdx,$iRef,$iMVP) {
 $iMotionVector = $iMotionVector|0;
 $iRefIndex = $iRefIndex|0;
 $iPartIdx = $iPartIdx|0;
 $iRef = $iRef|0;
 $iMVP = $iMVP|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iDiagonalRef$0 = 0, $index$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iPartIdx|0)==(0);
 if ($0) {
  $1 = (($iRefIndex) + 6|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)==($iRef<<24>>24);
  if ($3) {
   $4 = (($iMotionVector) + 24|0);
   $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
   HEAP8[$iMVP>>0]=$5&255;HEAP8[$iMVP+1>>0]=($5>>8)&255;HEAP8[$iMVP+2>>0]=($5>>16)&255;HEAP8[$iMVP+3>>0]=$5>>24;
   STACKTOP = sp;return;
  }
 } else {
  $6 = (($iRefIndex) + 5|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(-2);
  if ($8) {
   $9 = (($iRefIndex) + 2|0);
   $10 = HEAP8[$9>>0]|0;
   $iDiagonalRef$0 = $10;$index$0 = 2;
  } else {
   $iDiagonalRef$0 = $7;$index$0 = 5;
  }
  $11 = ($iDiagonalRef$0<<24>>24)==($iRef<<24>>24);
  if ($11) {
   $12 = (($iMotionVector) + ($index$0<<2)|0);
   $13 = HEAPU8[$12>>0]|(HEAPU8[$12+1>>0]<<8)|(HEAPU8[$12+2>>0]<<16)|(HEAPU8[$12+3>>0]<<24);
   HEAP8[$iMVP>>0]=$13&255;HEAP8[$iMVP+1>>0]=($13>>8)&255;HEAP8[$iMVP+2>>0]=($13>>16)&255;HEAP8[$iMVP+3>>0]=$13>>24;
   STACKTOP = sp;return;
  }
 }
 __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($iMotionVector,$iRefIndex,$iPartIdx,2,$iRef,$iMVP);
 STACKTOP = sp;return;
}
function __ZN7WelsDec15PredInter16x8MvEPA30_A2_sPA30_aiaPs($iMotionVector,$iRefIndex,$iPartIdx,$iRef,$iMVP) {
 $iMotionVector = $iMotionVector|0;
 $iRefIndex = $iRefIndex|0;
 $iPartIdx = $iPartIdx|0;
 $iRef = $iRef|0;
 $iMVP = $iMVP|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iPartIdx|0)==(0);
 if ($0) {
  $1 = (($iRefIndex) + 1|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)==($iRef<<24>>24);
  if ($3) {
   $4 = (($iMotionVector) + 4|0);
   $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
   HEAP8[$iMVP>>0]=$5&255;HEAP8[$iMVP+1>>0]=($5>>8)&255;HEAP8[$iMVP+2>>0]=($5>>16)&255;HEAP8[$iMVP+3>>0]=$5>>24;
   STACKTOP = sp;return;
  }
 } else {
  $6 = (($iRefIndex) + 18|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($iRef<<24>>24);
  if ($8) {
   $9 = (($iMotionVector) + 72|0);
   $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8)|(HEAPU8[$9+2>>0]<<16)|(HEAPU8[$9+3>>0]<<24);
   HEAP8[$iMVP>>0]=$10&255;HEAP8[$iMVP+1>>0]=($10>>8)&255;HEAP8[$iMVP+2>>0]=($10>>16)&255;HEAP8[$iMVP+3>>0]=$10>>24;
   STACKTOP = sp;return;
  }
 }
 __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($iMotionVector,$iRefIndex,$iPartIdx,4,$iRef,$iMVP);
 STACKTOP = sp;return;
}
function __ZN7WelsDec22UpdateP16x16MotionInfoEPNS_10TagDqLayerEaPs($pCurDqLayer,$iRef,$iMVs) {
 $pCurDqLayer = $pCurDqLayer|0;
 $iRef = $iRef|0;
 $iMVs = $iMVs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iRef << 24 >> 24;
 $1 = $0 << 8;
 $2 = $1 | $0;
 $3 = $2&65535;
 $4 = HEAPU8[$iMVs>>0]|(HEAPU8[$iMVs+1>>0]<<8)|(HEAPU8[$iMVs+2>>0]<<16)|(HEAPU8[$iMVs+3>>0]<<24);
 $5 = (($pCurDqLayer) + 4040|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pCurDqLayer) + 3932|0);
 $8 = (($pCurDqLayer) + 3916|0);
 $9 = HEAP8[8424>>0]|0;
 $10 = $9&255;
 $11 = (($10) + 4)|0;
 $12 = HEAP32[$7>>2]|0;
 $13 = ((($12) + ($6<<4)|0) + ($10)|0);
 HEAP8[$13>>0]=$3&255;HEAP8[$13+1>>0]=$3>>8;
 $14 = $11 & 255;
 $15 = HEAP32[$7>>2]|0;
 $16 = ((($15) + ($6<<4)|0) + ($14)|0);
 HEAP8[$16>>0]=$3&255;HEAP8[$16+1>>0]=$3>>8;
 $17 = HEAP32[$8>>2]|0;
 $18 = ((($17) + ($6<<6)|0) + ($10<<2)|0);
 HEAP8[$18>>0]=$4&255;HEAP8[$18+1>>0]=($4>>8)&255;HEAP8[$18+2>>0]=($4>>16)&255;HEAP8[$18+3>>0]=$4>>24;
 $19 = (($10) + 1)|0;
 $20 = HEAP32[$8>>2]|0;
 $21 = ((($20) + ($6<<6)|0) + ($19<<2)|0);
 HEAP8[$21>>0]=$4&255;HEAP8[$21+1>>0]=($4>>8)&255;HEAP8[$21+2>>0]=($4>>16)&255;HEAP8[$21+3>>0]=$4>>24;
 $22 = HEAP32[$8>>2]|0;
 $23 = ((($22) + ($6<<6)|0) + ($14<<2)|0);
 HEAP8[$23>>0]=$4&255;HEAP8[$23+1>>0]=($4>>8)&255;HEAP8[$23+2>>0]=($4>>16)&255;HEAP8[$23+3>>0]=$4>>24;
 $24 = (($14) + 1)|0;
 $25 = HEAP32[$8>>2]|0;
 $26 = ((($25) + ($6<<6)|0) + ($24<<2)|0);
 HEAP8[$26>>0]=$4&255;HEAP8[$26+1>>0]=($4>>8)&255;HEAP8[$26+2>>0]=($4>>16)&255;HEAP8[$26+3>>0]=$4>>24;
 $27 = HEAP8[((8424 + 4|0))>>0]|0;
 $28 = $27&255;
 $29 = (($28) + 4)|0;
 $30 = HEAP32[$7>>2]|0;
 $31 = ((($30) + ($6<<4)|0) + ($28)|0);
 HEAP8[$31>>0]=$3&255;HEAP8[$31+1>>0]=$3>>8;
 $32 = $29 & 255;
 $33 = HEAP32[$7>>2]|0;
 $34 = ((($33) + ($6<<4)|0) + ($32)|0);
 HEAP8[$34>>0]=$3&255;HEAP8[$34+1>>0]=$3>>8;
 $35 = HEAP32[$8>>2]|0;
 $36 = ((($35) + ($6<<6)|0) + ($28<<2)|0);
 HEAP8[$36>>0]=$4&255;HEAP8[$36+1>>0]=($4>>8)&255;HEAP8[$36+2>>0]=($4>>16)&255;HEAP8[$36+3>>0]=$4>>24;
 $37 = (($28) + 1)|0;
 $38 = HEAP32[$8>>2]|0;
 $39 = ((($38) + ($6<<6)|0) + ($37<<2)|0);
 HEAP8[$39>>0]=$4&255;HEAP8[$39+1>>0]=($4>>8)&255;HEAP8[$39+2>>0]=($4>>16)&255;HEAP8[$39+3>>0]=$4>>24;
 $40 = HEAP32[$8>>2]|0;
 $41 = ((($40) + ($6<<6)|0) + ($32<<2)|0);
 HEAP8[$41>>0]=$4&255;HEAP8[$41+1>>0]=($4>>8)&255;HEAP8[$41+2>>0]=($4>>16)&255;HEAP8[$41+3>>0]=$4>>24;
 $42 = (($32) + 1)|0;
 $43 = HEAP32[$8>>2]|0;
 $44 = ((($43) + ($6<<6)|0) + ($42<<2)|0);
 HEAP8[$44>>0]=$4&255;HEAP8[$44+1>>0]=($4>>8)&255;HEAP8[$44+2>>0]=($4>>16)&255;HEAP8[$44+3>>0]=$4>>24;
 $45 = HEAP8[((8424 + 8|0))>>0]|0;
 $46 = $45&255;
 $47 = (($46) + 4)|0;
 $48 = HEAP32[$7>>2]|0;
 $49 = ((($48) + ($6<<4)|0) + ($46)|0);
 HEAP8[$49>>0]=$3&255;HEAP8[$49+1>>0]=$3>>8;
 $50 = $47 & 255;
 $51 = HEAP32[$7>>2]|0;
 $52 = ((($51) + ($6<<4)|0) + ($50)|0);
 HEAP8[$52>>0]=$3&255;HEAP8[$52+1>>0]=$3>>8;
 $53 = HEAP32[$8>>2]|0;
 $54 = ((($53) + ($6<<6)|0) + ($46<<2)|0);
 HEAP8[$54>>0]=$4&255;HEAP8[$54+1>>0]=($4>>8)&255;HEAP8[$54+2>>0]=($4>>16)&255;HEAP8[$54+3>>0]=$4>>24;
 $55 = (($46) + 1)|0;
 $56 = HEAP32[$8>>2]|0;
 $57 = ((($56) + ($6<<6)|0) + ($55<<2)|0);
 HEAP8[$57>>0]=$4&255;HEAP8[$57+1>>0]=($4>>8)&255;HEAP8[$57+2>>0]=($4>>16)&255;HEAP8[$57+3>>0]=$4>>24;
 $58 = HEAP32[$8>>2]|0;
 $59 = ((($58) + ($6<<6)|0) + ($50<<2)|0);
 HEAP8[$59>>0]=$4&255;HEAP8[$59+1>>0]=($4>>8)&255;HEAP8[$59+2>>0]=($4>>16)&255;HEAP8[$59+3>>0]=$4>>24;
 $60 = (($50) + 1)|0;
 $61 = HEAP32[$8>>2]|0;
 $62 = ((($61) + ($6<<6)|0) + ($60<<2)|0);
 HEAP8[$62>>0]=$4&255;HEAP8[$62+1>>0]=($4>>8)&255;HEAP8[$62+2>>0]=($4>>16)&255;HEAP8[$62+3>>0]=$4>>24;
 $63 = HEAP8[((8424 + 12|0))>>0]|0;
 $64 = $63&255;
 $65 = (($64) + 4)|0;
 $66 = HEAP32[$7>>2]|0;
 $67 = ((($66) + ($6<<4)|0) + ($64)|0);
 HEAP8[$67>>0]=$3&255;HEAP8[$67+1>>0]=$3>>8;
 $68 = $65 & 255;
 $69 = HEAP32[$7>>2]|0;
 $70 = ((($69) + ($6<<4)|0) + ($68)|0);
 HEAP8[$70>>0]=$3&255;HEAP8[$70+1>>0]=$3>>8;
 $71 = HEAP32[$8>>2]|0;
 $72 = ((($71) + ($6<<6)|0) + ($64<<2)|0);
 HEAP8[$72>>0]=$4&255;HEAP8[$72+1>>0]=($4>>8)&255;HEAP8[$72+2>>0]=($4>>16)&255;HEAP8[$72+3>>0]=$4>>24;
 $73 = (($64) + 1)|0;
 $74 = HEAP32[$8>>2]|0;
 $75 = ((($74) + ($6<<6)|0) + ($73<<2)|0);
 HEAP8[$75>>0]=$4&255;HEAP8[$75+1>>0]=($4>>8)&255;HEAP8[$75+2>>0]=($4>>16)&255;HEAP8[$75+3>>0]=$4>>24;
 $76 = HEAP32[$8>>2]|0;
 $77 = ((($76) + ($6<<6)|0) + ($68<<2)|0);
 HEAP8[$77>>0]=$4&255;HEAP8[$77+1>>0]=($4>>8)&255;HEAP8[$77+2>>0]=($4>>16)&255;HEAP8[$77+3>>0]=$4>>24;
 $78 = (($68) + 1)|0;
 $79 = HEAP32[$8>>2]|0;
 $80 = ((($79) + ($6<<6)|0) + ($78<<2)|0);
 HEAP8[$80>>0]=$4&255;HEAP8[$80+1>>0]=($4>>8)&255;HEAP8[$80+2>>0]=($4>>16)&255;HEAP8[$80+3>>0]=$4>>24;
 STACKTOP = sp;return;
}
function __ZN7WelsDec21UpdateP16x8MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($pCurDqLayer,$iMotionVector,$iRefIndex,$iPartIdx,$iRef,$iMVs) {
 $pCurDqLayer = $pCurDqLayer|0;
 $iMotionVector = $iMotionVector|0;
 $iRefIndex = $iRefIndex|0;
 $iPartIdx = $iPartIdx|0;
 $iRef = $iRef|0;
 $iMVs = $iMVs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iRef << 24 >> 24;
 $1 = $0 << 8;
 $2 = $1 | $0;
 $3 = $2&65535;
 $4 = HEAPU8[$iMVs>>0]|(HEAPU8[$iMVs+1>>0]<<8)|(HEAPU8[$iMVs+2>>0]<<16)|(HEAPU8[$iMVs+3>>0]<<24);
 $5 = (($pCurDqLayer) + 4040|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pCurDqLayer) + 3932|0);
 $8 = (($pCurDqLayer) + 3916|0);
 $9 = (8424 + ($iPartIdx)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($11) + 4)|0;
 $13 = (16968 + ($iPartIdx)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($15) + 6)|0;
 $17 = HEAP32[$7>>2]|0;
 $18 = ((($17) + ($6<<4)|0) + ($11)|0);
 HEAP8[$18>>0]=$3&255;HEAP8[$18+1>>0]=$3>>8;
 $19 = $12 & 255;
 $20 = HEAP32[$7>>2]|0;
 $21 = ((($20) + ($6<<4)|0) + ($19)|0);
 HEAP8[$21>>0]=$3&255;HEAP8[$21+1>>0]=$3>>8;
 $22 = HEAP32[$8>>2]|0;
 $23 = ((($22) + ($6<<6)|0) + ($11<<2)|0);
 HEAP8[$23>>0]=$4&255;HEAP8[$23+1>>0]=($4>>8)&255;HEAP8[$23+2>>0]=($4>>16)&255;HEAP8[$23+3>>0]=$4>>24;
 $24 = (($11) + 1)|0;
 $25 = HEAP32[$8>>2]|0;
 $26 = ((($25) + ($6<<6)|0) + ($24<<2)|0);
 HEAP8[$26>>0]=$4&255;HEAP8[$26+1>>0]=($4>>8)&255;HEAP8[$26+2>>0]=($4>>16)&255;HEAP8[$26+3>>0]=$4>>24;
 $27 = HEAP32[$8>>2]|0;
 $28 = ((($27) + ($6<<6)|0) + ($19<<2)|0);
 HEAP8[$28>>0]=$4&255;HEAP8[$28+1>>0]=($4>>8)&255;HEAP8[$28+2>>0]=($4>>16)&255;HEAP8[$28+3>>0]=$4>>24;
 $29 = (($19) + 1)|0;
 $30 = HEAP32[$8>>2]|0;
 $31 = ((($30) + ($6<<6)|0) + ($29<<2)|0);
 HEAP8[$31>>0]=$4&255;HEAP8[$31+1>>0]=($4>>8)&255;HEAP8[$31+2>>0]=($4>>16)&255;HEAP8[$31+3>>0]=$4>>24;
 $32 = (($iRefIndex) + ($15)|0);
 HEAP8[$32>>0]=$3&255;HEAP8[$32+1>>0]=$3>>8;
 $33 = $16 & 255;
 $34 = (($iRefIndex) + ($33)|0);
 HEAP8[$34>>0]=$3&255;HEAP8[$34+1>>0]=$3>>8;
 $35 = (($iMotionVector) + ($15<<2)|0);
 HEAP8[$35>>0]=$4&255;HEAP8[$35+1>>0]=($4>>8)&255;HEAP8[$35+2>>0]=($4>>16)&255;HEAP8[$35+3>>0]=$4>>24;
 $36 = (($15) + 1)|0;
 $37 = (($iMotionVector) + ($36<<2)|0);
 HEAP8[$37>>0]=$4&255;HEAP8[$37+1>>0]=($4>>8)&255;HEAP8[$37+2>>0]=($4>>16)&255;HEAP8[$37+3>>0]=$4>>24;
 $38 = (($iMotionVector) + ($33<<2)|0);
 HEAP8[$38>>0]=$4&255;HEAP8[$38+1>>0]=($4>>8)&255;HEAP8[$38+2>>0]=($4>>16)&255;HEAP8[$38+3>>0]=$4>>24;
 $39 = (($33) + 1)|0;
 $40 = (($iMotionVector) + ($39<<2)|0);
 HEAP8[$40>>0]=$4&255;HEAP8[$40+1>>0]=($4>>8)&255;HEAP8[$40+2>>0]=($4>>16)&255;HEAP8[$40+3>>0]=$4>>24;
 $41 = (($iPartIdx) + 4)|0;
 $42 = (8424 + ($41)|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = (($44) + 4)|0;
 $46 = (16968 + ($41)|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = (($48) + 6)|0;
 $50 = HEAP32[$7>>2]|0;
 $51 = ((($50) + ($6<<4)|0) + ($44)|0);
 HEAP8[$51>>0]=$3&255;HEAP8[$51+1>>0]=$3>>8;
 $52 = $45 & 255;
 $53 = HEAP32[$7>>2]|0;
 $54 = ((($53) + ($6<<4)|0) + ($52)|0);
 HEAP8[$54>>0]=$3&255;HEAP8[$54+1>>0]=$3>>8;
 $55 = HEAP32[$8>>2]|0;
 $56 = ((($55) + ($6<<6)|0) + ($44<<2)|0);
 HEAP8[$56>>0]=$4&255;HEAP8[$56+1>>0]=($4>>8)&255;HEAP8[$56+2>>0]=($4>>16)&255;HEAP8[$56+3>>0]=$4>>24;
 $57 = (($44) + 1)|0;
 $58 = HEAP32[$8>>2]|0;
 $59 = ((($58) + ($6<<6)|0) + ($57<<2)|0);
 HEAP8[$59>>0]=$4&255;HEAP8[$59+1>>0]=($4>>8)&255;HEAP8[$59+2>>0]=($4>>16)&255;HEAP8[$59+3>>0]=$4>>24;
 $60 = HEAP32[$8>>2]|0;
 $61 = ((($60) + ($6<<6)|0) + ($52<<2)|0);
 HEAP8[$61>>0]=$4&255;HEAP8[$61+1>>0]=($4>>8)&255;HEAP8[$61+2>>0]=($4>>16)&255;HEAP8[$61+3>>0]=$4>>24;
 $62 = (($52) + 1)|0;
 $63 = HEAP32[$8>>2]|0;
 $64 = ((($63) + ($6<<6)|0) + ($62<<2)|0);
 HEAP8[$64>>0]=$4&255;HEAP8[$64+1>>0]=($4>>8)&255;HEAP8[$64+2>>0]=($4>>16)&255;HEAP8[$64+3>>0]=$4>>24;
 $65 = (($iRefIndex) + ($48)|0);
 HEAP8[$65>>0]=$3&255;HEAP8[$65+1>>0]=$3>>8;
 $66 = $49 & 255;
 $67 = (($iRefIndex) + ($66)|0);
 HEAP8[$67>>0]=$3&255;HEAP8[$67+1>>0]=$3>>8;
 $68 = (($iMotionVector) + ($48<<2)|0);
 HEAP8[$68>>0]=$4&255;HEAP8[$68+1>>0]=($4>>8)&255;HEAP8[$68+2>>0]=($4>>16)&255;HEAP8[$68+3>>0]=$4>>24;
 $69 = (($48) + 1)|0;
 $70 = (($iMotionVector) + ($69<<2)|0);
 HEAP8[$70>>0]=$4&255;HEAP8[$70+1>>0]=($4>>8)&255;HEAP8[$70+2>>0]=($4>>16)&255;HEAP8[$70+3>>0]=$4>>24;
 $71 = (($iMotionVector) + ($66<<2)|0);
 HEAP8[$71>>0]=$4&255;HEAP8[$71+1>>0]=($4>>8)&255;HEAP8[$71+2>>0]=($4>>16)&255;HEAP8[$71+3>>0]=$4>>24;
 $72 = (($66) + 1)|0;
 $73 = (($iMotionVector) + ($72<<2)|0);
 HEAP8[$73>>0]=$4&255;HEAP8[$73+1>>0]=($4>>8)&255;HEAP8[$73+2>>0]=($4>>16)&255;HEAP8[$73+3>>0]=$4>>24;
 STACKTOP = sp;return;
}
function __ZN7WelsDec21UpdateP8x16MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($pCurDqLayer,$iMotionVector,$iRefIndex,$iPartIdx,$iRef,$iMVs) {
 $pCurDqLayer = $pCurDqLayer|0;
 $iMotionVector = $iMotionVector|0;
 $iRefIndex = $iRefIndex|0;
 $iPartIdx = $iPartIdx|0;
 $iRef = $iRef|0;
 $iMVs = $iMVs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iRef << 24 >> 24;
 $1 = $0 << 8;
 $2 = $1 | $0;
 $3 = $2&65535;
 $4 = HEAPU8[$iMVs>>0]|(HEAPU8[$iMVs+1>>0]<<8)|(HEAPU8[$iMVs+2>>0]<<16)|(HEAPU8[$iMVs+3>>0]<<24);
 $5 = (($pCurDqLayer) + 4040|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pCurDqLayer) + 3932|0);
 $8 = (($pCurDqLayer) + 3916|0);
 $9 = (8424 + ($iPartIdx)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = (16968 + ($iPartIdx)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $10&255;
 $14 = (($13) + 4)|0;
 $15 = $12&255;
 $16 = (($15) + 6)|0;
 $17 = HEAP32[$7>>2]|0;
 $18 = ((($17) + ($6<<4)|0) + ($13)|0);
 HEAP8[$18>>0]=$3&255;HEAP8[$18+1>>0]=$3>>8;
 $19 = $14 & 255;
 $20 = HEAP32[$7>>2]|0;
 $21 = ((($20) + ($6<<4)|0) + ($19)|0);
 HEAP8[$21>>0]=$3&255;HEAP8[$21+1>>0]=$3>>8;
 $22 = HEAP32[$8>>2]|0;
 $23 = ((($22) + ($6<<6)|0) + ($13<<2)|0);
 HEAP8[$23>>0]=$4&255;HEAP8[$23+1>>0]=($4>>8)&255;HEAP8[$23+2>>0]=($4>>16)&255;HEAP8[$23+3>>0]=$4>>24;
 $24 = (($13) + 1)|0;
 $25 = HEAP32[$8>>2]|0;
 $26 = ((($25) + ($6<<6)|0) + ($24<<2)|0);
 HEAP8[$26>>0]=$4&255;HEAP8[$26+1>>0]=($4>>8)&255;HEAP8[$26+2>>0]=($4>>16)&255;HEAP8[$26+3>>0]=$4>>24;
 $27 = HEAP32[$8>>2]|0;
 $28 = ((($27) + ($6<<6)|0) + ($19<<2)|0);
 HEAP8[$28>>0]=$4&255;HEAP8[$28+1>>0]=($4>>8)&255;HEAP8[$28+2>>0]=($4>>16)&255;HEAP8[$28+3>>0]=$4>>24;
 $29 = (($19) + 1)|0;
 $30 = HEAP32[$8>>2]|0;
 $31 = ((($30) + ($6<<6)|0) + ($29<<2)|0);
 HEAP8[$31>>0]=$4&255;HEAP8[$31+1>>0]=($4>>8)&255;HEAP8[$31+2>>0]=($4>>16)&255;HEAP8[$31+3>>0]=$4>>24;
 $32 = (($iRefIndex) + ($15)|0);
 HEAP8[$32>>0]=$3&255;HEAP8[$32+1>>0]=$3>>8;
 $33 = $16 & 255;
 $34 = (($iRefIndex) + ($33)|0);
 HEAP8[$34>>0]=$3&255;HEAP8[$34+1>>0]=$3>>8;
 $35 = (($iMotionVector) + ($15<<2)|0);
 HEAP8[$35>>0]=$4&255;HEAP8[$35+1>>0]=($4>>8)&255;HEAP8[$35+2>>0]=($4>>16)&255;HEAP8[$35+3>>0]=$4>>24;
 $36 = (($15) + 1)|0;
 $37 = (($iMotionVector) + ($36<<2)|0);
 HEAP8[$37>>0]=$4&255;HEAP8[$37+1>>0]=($4>>8)&255;HEAP8[$37+2>>0]=($4>>16)&255;HEAP8[$37+3>>0]=$4>>24;
 $38 = (($iMotionVector) + ($33<<2)|0);
 HEAP8[$38>>0]=$4&255;HEAP8[$38+1>>0]=($4>>8)&255;HEAP8[$38+2>>0]=($4>>16)&255;HEAP8[$38+3>>0]=$4>>24;
 $39 = (($33) + 1)|0;
 $40 = (($iMotionVector) + ($39<<2)|0);
 HEAP8[$40>>0]=$4&255;HEAP8[$40+1>>0]=($4>>8)&255;HEAP8[$40+2>>0]=($4>>16)&255;HEAP8[$40+3>>0]=$4>>24;
 $41 = (($iPartIdx) + 8)|0;
 $42 = (8424 + ($41)|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = (16968 + ($41)|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $43&255;
 $47 = (($46) + 4)|0;
 $48 = $45&255;
 $49 = (($48) + 6)|0;
 $50 = HEAP32[$7>>2]|0;
 $51 = ((($50) + ($6<<4)|0) + ($46)|0);
 HEAP8[$51>>0]=$3&255;HEAP8[$51+1>>0]=$3>>8;
 $52 = $47 & 255;
 $53 = HEAP32[$7>>2]|0;
 $54 = ((($53) + ($6<<4)|0) + ($52)|0);
 HEAP8[$54>>0]=$3&255;HEAP8[$54+1>>0]=$3>>8;
 $55 = HEAP32[$8>>2]|0;
 $56 = ((($55) + ($6<<6)|0) + ($46<<2)|0);
 HEAP8[$56>>0]=$4&255;HEAP8[$56+1>>0]=($4>>8)&255;HEAP8[$56+2>>0]=($4>>16)&255;HEAP8[$56+3>>0]=$4>>24;
 $57 = (($46) + 1)|0;
 $58 = HEAP32[$8>>2]|0;
 $59 = ((($58) + ($6<<6)|0) + ($57<<2)|0);
 HEAP8[$59>>0]=$4&255;HEAP8[$59+1>>0]=($4>>8)&255;HEAP8[$59+2>>0]=($4>>16)&255;HEAP8[$59+3>>0]=$4>>24;
 $60 = HEAP32[$8>>2]|0;
 $61 = ((($60) + ($6<<6)|0) + ($52<<2)|0);
 HEAP8[$61>>0]=$4&255;HEAP8[$61+1>>0]=($4>>8)&255;HEAP8[$61+2>>0]=($4>>16)&255;HEAP8[$61+3>>0]=$4>>24;
 $62 = (($52) + 1)|0;
 $63 = HEAP32[$8>>2]|0;
 $64 = ((($63) + ($6<<6)|0) + ($62<<2)|0);
 HEAP8[$64>>0]=$4&255;HEAP8[$64+1>>0]=($4>>8)&255;HEAP8[$64+2>>0]=($4>>16)&255;HEAP8[$64+3>>0]=$4>>24;
 $65 = (($iRefIndex) + ($48)|0);
 HEAP8[$65>>0]=$3&255;HEAP8[$65+1>>0]=$3>>8;
 $66 = $49 & 255;
 $67 = (($iRefIndex) + ($66)|0);
 HEAP8[$67>>0]=$3&255;HEAP8[$67+1>>0]=$3>>8;
 $68 = (($iMotionVector) + ($48<<2)|0);
 HEAP8[$68>>0]=$4&255;HEAP8[$68+1>>0]=($4>>8)&255;HEAP8[$68+2>>0]=($4>>16)&255;HEAP8[$68+3>>0]=$4>>24;
 $69 = (($48) + 1)|0;
 $70 = (($iMotionVector) + ($69<<2)|0);
 HEAP8[$70>>0]=$4&255;HEAP8[$70+1>>0]=($4>>8)&255;HEAP8[$70+2>>0]=($4>>16)&255;HEAP8[$70+3>>0]=$4>>24;
 $71 = (($iMotionVector) + ($66<<2)|0);
 HEAP8[$71>>0]=$4&255;HEAP8[$71+1>>0]=($4>>8)&255;HEAP8[$71+2>>0]=($4>>16)&255;HEAP8[$71+3>>0]=$4>>24;
 $72 = (($66) + 1)|0;
 $73 = (($iMotionVector) + ($72<<2)|0);
 HEAP8[$73>>0]=$4&255;HEAP8[$73+1>>0]=($4>>8)&255;HEAP8[$73+2>>0]=($4>>16)&255;HEAP8[$73+3>>0]=$4>>24;
 STACKTOP = sp;return;
}
function __ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($pCtx,$uiBinVal) {
 $pCtx = $pCtx|0;
 $uiBinVal = $uiBinVal|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$uiBinVal>>2] = 0;
 $0 = (($pCtx) + 512232|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN7WelsDec20DecodeTerminateCabacEPNS_19SWelsCabacDecEngineERj($1,$uiBinVal)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7WelsDec18ParseSkipFlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$pNeighAvail,$uiSkip) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $uiSkip = $uiSkip|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$uiSkip>>2] = 0;
 $0 = (($pNeighAvail) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $13 = 11;
 } else {
  $3 = (($pNeighAvail) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(256);
  $phitmp = $5 ? 12 : 11;
  $13 = $phitmp;
 }
 $6 = HEAP32[$pNeighAvail>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $12 = 0;
 } else {
  $8 = (($pNeighAvail) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(256);
  $12 = $10;
 }
 $11 = $12&1;
 $$sum = (($13) + ($11))|0;
 $14 = ((($pCtx) + ($$sum<<1)|0) + 511309|0);
 $15 = (($pCtx) + 512232|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($16,$14,$uiSkip)|0);
 STACKTOP = sp;return ($17|0);
}
function __ZN7WelsDec22ParseMBTypeISliceCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$pNeighAvail,$uiBinVal) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $uiBinVal = $uiBinVal|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $not$ = 0, $not$2 = 0, $phitmp = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 HEAP32[$uiBinVal>>2] = 0;
 $0 = (($pCtx) + 512232|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pNeighAvail) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $15 = 3;
 } else {
  $5 = (($pNeighAvail) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(4);
  $not$ = ($6|0)!=(1);
  $$ = $7 & $not$;
  $phitmp = $$ ? 4 : 3;
  $15 = $phitmp;
 }
 $8 = HEAP32[$pNeighAvail>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $14 = 0;
 } else {
  $10 = (($pNeighAvail) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(4);
  $not$2 = ($11|0)!=(1);
  $$1 = $12 & $not$2;
  $14 = $$1;
 }
 $13 = $14&1;
 $$sum = (($15) + ($13))|0;
 $16 = ((($pCtx) + ($$sum<<1)|0) + 511309|0);
 $17 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$16,$uiCode)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$uiCode>>2]|0;
 HEAP32[$uiBinVal>>2] = $19;
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (__ZN7WelsDec20DecodeTerminateCabacEPNS_19SWelsCabacDecEngineERj($1,$uiCode)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = HEAP32[$uiCode>>2]|0;
 $24 = ($23|0)==(1);
 if ($24) {
  HEAP32[$uiBinVal>>2] = 25;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (($pCtx) + 511321|0);
 $26 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$25,$uiCode)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = HEAP32[$uiCode>>2]|0;
 $29 = ($28*12)|0;
 $30 = $29 | 1;
 HEAP32[$uiBinVal>>2] = $30;
 $31 = (($pCtx) + 511323|0);
 $32 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$31,$uiCode)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = HEAP32[$uiCode>>2]|0;
 $35 = ($34|0)==(0);
 if (!($35)) {
  $36 = (($pCtx) + 511325|0);
  $37 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$36,$uiCode)|0);
  $38 = ($37|0)==(0);
  if (!($38)) {
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
  $39 = HEAP32[$uiBinVal>>2]|0;
  $40 = (($39) + 4)|0;
  HEAP32[$uiBinVal>>2] = $40;
  $41 = HEAP32[$uiCode>>2]|0;
  $42 = ($41|0)==(0);
  if (!($42)) {
   $43 = (($39) + 8)|0;
   HEAP32[$uiBinVal>>2] = $43;
  }
 }
 $44 = (($pCtx) + 511327|0);
 $45 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$44,$uiCode)|0);
 $46 = ($45|0)==(0);
 if (!($46)) {
  $$0 = $45;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = HEAP32[$uiCode>>2]|0;
 $48 = $47 << 1;
 $49 = HEAP32[$uiBinVal>>2]|0;
 $50 = (($49) + ($48))|0;
 HEAP32[$uiBinVal>>2] = $50;
 $51 = (($pCtx) + 511329|0);
 $52 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$51,$uiCode)|0);
 $53 = ($52|0)==(0);
 if (!($53)) {
  $$0 = $52;
  STACKTOP = sp;return ($$0|0);
 }
 $54 = HEAP32[$uiCode>>2]|0;
 $55 = HEAP32[$uiBinVal>>2]|0;
 $56 = (($55) + ($54))|0;
 HEAP32[$uiBinVal>>2] = $56;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec22ParseMBTypePSliceCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$pNeighAvail,$uiMbType) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $uiMbType = $uiMbType|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 HEAP32[$uiMbType>>2] = 0;
 $0 = (($pCtx) + 512232|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 511337|0);
 $3 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$2,$uiCode)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$uiCode>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $47 = (($pCtx) + 511339|0);
  $48 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$47,$uiCode)|0);
  $49 = ($48|0)==(0);
  if (!($49)) {
   $$0 = $48;
   STACKTOP = sp;return ($$0|0);
  }
  $50 = HEAP32[$uiCode>>2]|0;
  $51 = ($50|0)==(0);
  if ($51) {
   $57 = (($pCtx) + 511341|0);
   $58 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$57,$uiCode)|0);
   $59 = ($58|0)==(0);
   if (!($59)) {
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   $60 = HEAP32[$uiCode>>2]|0;
   $61 = ($60|0)==(0);
   if ($61) {
    HEAP32[$uiMbType>>2] = 0;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$uiMbType>>2] = 3;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $52 = (($pCtx) + 511343|0);
   $53 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$52,$uiCode)|0);
   $54 = ($53|0)==(0);
   if (!($54)) {
    $$0 = $53;
    STACKTOP = sp;return ($$0|0);
   }
   $55 = HEAP32[$uiCode>>2]|0;
   $56 = ($55|0)==(0);
   if ($56) {
    HEAP32[$uiMbType>>2] = 2;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$uiMbType>>2] = 1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $7 = (($pCtx) + 511343|0);
 $8 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$7,$uiCode)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$uiCode>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  HEAP32[$uiMbType>>2] = 5;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (__ZN7WelsDec20DecodeTerminateCabacEPNS_19SWelsCabacDecEngineERj($1,$uiCode)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$uiCode>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  HEAP32[$uiMbType>>2] = 30;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($pCtx) + 511345|0);
 $17 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$16,$uiCode)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$uiCode>>2]|0;
 $20 = ($19*12)|0;
 $21 = (($20) + 6)|0;
 HEAP32[$uiMbType>>2] = $21;
 $22 = (($pCtx) + 511347|0);
 $23 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$22,$uiCode)|0);
 $24 = ($23|0)==(0);
 if (!($24)) {
  $$0 = $23;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = HEAP32[$uiCode>>2]|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = HEAP32[$uiMbType>>2]|0;
  $28 = (($27) + 4)|0;
  HEAP32[$uiMbType>>2] = $28;
  $29 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$22,$uiCode)|0);
  $30 = ($29|0)==(0);
  if (!($30)) {
   $$0 = $29;
   STACKTOP = sp;return ($$0|0);
  }
  $31 = HEAP32[$uiCode>>2]|0;
  $32 = ($31|0)==(0);
  if (!($32)) {
   $33 = HEAP32[$uiMbType>>2]|0;
   $34 = (($33) + 4)|0;
   HEAP32[$uiMbType>>2] = $34;
  }
 }
 $35 = (($pCtx) + 511349|0);
 $36 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$35,$uiCode)|0);
 $37 = ($36|0)==(0);
 if (!($37)) {
  $$0 = $36;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = HEAP32[$uiCode>>2]|0;
 $39 = $38 << 1;
 $40 = HEAP32[$uiMbType>>2]|0;
 $41 = (($40) + ($39))|0;
 HEAP32[$uiMbType>>2] = $41;
 $42 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$35,$uiCode)|0);
 $43 = ($42|0)==(0);
 if (!($43)) {
  $$0 = $42;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = HEAP32[$uiCode>>2]|0;
 $45 = HEAP32[$uiMbType>>2]|0;
 $46 = (($45) + ($44))|0;
 HEAP32[$uiMbType>>2] = $46;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec30ParseTransformSize8x8FlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERb($pCtx,$pNeighAvail,$bTransformSize8x8Flag) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $bTransformSize8x8Flag = $bTransformSize8x8Flag|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0;
 var $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 $0 = (($pCtx) + 512232|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pNeighAvail) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $30 = 399;
 } else {
  $5 = (($pCtx) + 241932|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 4040|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + -1)|0;
  $10 = (($6) + 3944|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($9)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $phitmp = (($14) + 399)|0;
  $30 = $phitmp;
 }
 $15 = HEAP32[$pNeighAvail>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $29 = 0;
 } else {
  $17 = (($pCtx) + 241932|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 4040|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4044|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) - ($22))|0;
  $24 = (($18) + 3944|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($23)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $28;
 }
 $$sum = (($30) + ($29))|0;
 $31 = ((($pCtx) + ($$sum<<1)|0) + 511309|0);
 $32 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$31,$uiCode)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = HEAP32[$uiCode>>2]|0;
 $35 = ($34|0)!=(0);
 $36 = $35&1;
 HEAP8[$bTransformSize8x8Flag>>0] = $36;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec27ParseIntraPredModeLumaCabacEPNS_21TagWelsDecoderContextERi($pCtx,$iBinVal) {
 $pCtx = $pCtx|0;
 $iBinVal = $iBinVal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 HEAP32[$iBinVal>>2] = 0;
 $0 = (($pCtx) + 512232|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 511445|0);
 $3 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1,$2,$uiCode)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$uiCode>>2]|0;
 $6 = ($5|0)==(1);
 do {
  if ($6) {
   $storemerge = -1;
  } else {
   $7 = HEAP32[$0>>2]|0;
   $8 = (($pCtx) + 511447|0);
   $9 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($7,$8,$uiCode)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $11 = HEAP32[$uiCode>>2]|0;
   $12 = HEAP32[$iBinVal>>2]|0;
   $13 = $12 | $11;
   HEAP32[$iBinVal>>2] = $13;
   $14 = HEAP32[$0>>2]|0;
   $15 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($14,$8,$uiCode)|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    $$0 = $15;
    STACKTOP = sp;return ($$0|0);
   }
   $17 = HEAP32[$uiCode>>2]|0;
   $18 = $17 << 1;
   $19 = HEAP32[$iBinVal>>2]|0;
   $20 = $19 | $18;
   HEAP32[$iBinVal>>2] = $20;
   $21 = HEAP32[$0>>2]|0;
   $22 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($21,$8,$uiCode)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = HEAP32[$uiCode>>2]|0;
    $25 = $24 << 2;
    $26 = HEAP32[$iBinVal>>2]|0;
    $27 = $26 | $25;
    $storemerge = $27;
    break;
   } else {
    $$0 = $22;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$iBinVal>>2] = $storemerge;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec29ParseIntraPredModeChromaCabacEPNS_21TagWelsDecoderContextEhRi($pCtx,$uiNeighAvail,$iBinVal) {
 $pCtx = $pCtx|0;
 $uiNeighAvail = $uiNeighAvail|0;
 $iBinVal = $iBinVal|0;
 var $$0 = 0, $$off = 0, $$off6 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $iSym = 0, $or$cond = 0, $or$cond3 = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp + 4|0;
 $iSym = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4004|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 3908|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $uiNeighAvail&255;
 $7 = $6 & 4;
 $8 = $6 & 1;
 $9 = (($1) + 4040|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($1) + 4044|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $14 = (($10) + -1)|0;
 HEAP32[$iBinVal>>2] = 0;
 $15 = ($8|0)==(0);
 if ($15) {
  $23 = 0;
 } else {
  $16 = (($3) + ($13)|0);
  $17 = HEAP8[$16>>0]|0;
  $$off = (($17) + -1)<<24>>24;
  $18 = ($$off&255)<(3);
  if ($18) {
   $19 = (($5) + ($13<<1)|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = ($20<<16>>16)!=(512);
   $23 = $21;
  } else {
   $23 = 0;
  }
 }
 $22 = $23&1;
 $24 = ($7|0)==(0);
 if ($24) {
  $32 = 0;
 } else {
  $25 = (($3) + ($14)|0);
  $26 = HEAP8[$25>>0]|0;
  $$off6 = (($26) + -1)<<24>>24;
  $27 = ($$off6&255)<(3);
  if ($27) {
   $28 = (($5) + ($14<<1)|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = ($29<<16>>16)!=(512);
   $32 = $30;
  } else {
   $32 = 0;
  }
 }
 $31 = $32&1;
 $33 = (($pCtx) + 512232|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $22 | 64;
 $$sum = (($35) + ($31))|0;
 $36 = ((($pCtx) + ($$sum<<1)|0) + 511309|0);
 $37 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($34,$36,$uiCode)|0);
 $38 = ($37|0)==(0);
 if (!($38)) {
  $$0 = $37;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = HEAP32[$uiCode>>2]|0;
 HEAP32[$iBinVal>>2] = $39;
 $40 = ($39|0)==(0);
 if ($40) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = HEAP32[$33>>2]|0;
 $42 = (($pCtx) + 511443|0);
 $43 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($41,$42,$iSym)|0);
 $44 = ($43|0)==(0);
 if (!($44)) {
  $$0 = $43;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = HEAP32[$iSym>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  HEAP32[$iBinVal>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$iSym>>2] = 0;
 while(1) {
  $47 = HEAP32[$33>>2]|0;
  $48 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($47,$42,$uiCode)|0);
  $49 = ($48|0)==(0);
  if (!($49)) {
   $$0 = $48;
   label = 18;
   break;
  }
  $50 = HEAP32[$iSym>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$iSym>>2] = $51;
  $52 = HEAP32[$uiCode>>2]|0;
  $53 = ($52|0)!=(0);
  $54 = ($51|0)==(0);
  $or$cond3 = $53 & $54;
  if (!($or$cond3)) {
   break;
  }
 }
 if ((label|0) == 18) {
  STACKTOP = sp;return ($$0|0);
 }
 $55 = ($50|0)==(0);
 $or$cond = $53 & $55;
 if ($or$cond) {
  HEAP32[$iSym>>2] = 2;
  $57 = 2;
 } else {
  $57 = $51;
 }
 $56 = (($57) + 1)|0;
 HEAP32[$iBinVal>>2] = $56;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec25ParseInterMotionInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_A2_sS7_PA30_a($pCtx,$pNeighAvail,$pNonZeroCount,$pMotionVector,$pMvdCache,$pRefIndex) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $pNonZeroCount = $pNonZeroCount|0;
 $pMotionVector = $pMotionVector|0;
 $pMvdCache = $pMvdCache|0;
 $pRefIndex = $pRefIndex|0;
 var $$0 = 0, $$ph25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $i$035 = 0;
 var $i$131 = 0, $i$243 = 0, $i$339 = 0, $i$456 = 0, $i$553 = 0, $i$649 = 0, $iRef = 0, $j$046 = 0, $j$046$us = 0, $or$cond = 0, $or$cond13 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond20 = 0, $or$cond22 = 0, $or$cond22$us = 0, $pMv = 0, $pMvd = 0;
 var $pPartW = 0, $pRefIdx = 0, $pSubPartCount = 0, $sext = 0, $sext$us = 0, $sext11 = 0, $sext4 = 0, $sext4$us = 0, $sext6 = 0, $sext8 = 0, $uiCode$i = 0, $vararg_buffer10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 16|0;
 $uiCode$i = sp + 24|0;
 $pMv = sp + 8|0;
 $pMvd = sp;
 $iRef = sp + 28|0;
 $pRefIdx = sp + 20|0;
 $pSubPartCount = sp + 36|0;
 $pPartW = sp + 32|0;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4040|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $pMv;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $pMvd;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 HEAP16[$iRef>>1] = 0;
 $12 = (($1) + 88|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 828|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 24|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = (($15) + 26|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = (($1) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($1) + 3908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($3<<1)|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 switch ($26|0) {
 case 8:  {
  $37 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($pCtx,$pNeighAvail,0,$pRefIndex,0,0,$21,0,$iRef)|0);
  $38 = ($37|0)==(0);
  if (!($38)) {
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
  $39 = HEAP8[$iRef>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = ($39<<24>>24)>(-1);
  $42 = ($40|0)<($21|0);
  $or$cond = $41 & $42;
  if ($or$cond) {
   $43 = ((($pCtx) + ($40<<2)|0) + 5468|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    label = 7;
   } else {
    $60 = $39;
   }
  } else {
   label = 7;
  }
  do {
   if ((label|0) == 7) {
    $46 = (($pCtx) + 512344|0);
    HEAP8[$46>>0] = 1;
    $47 = (($pCtx) + 242340|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(0);
    if ($49) {
     $$0 = 1041;
     STACKTOP = sp;return ($$0|0);
    } else {
     HEAP8[$iRef>>0] = 0;
     $50 = (($pCtx) + 116|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $51 | 4;
     HEAP32[$50>>2] = $52;
     $60 = 0;
     break;
    }
   }
  } while(0);
  $53 = (($pCtx) + 512345|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54<<24>>24)==(0);
  $56 = (($pCtx) + 512344|0);
  if ($55) {
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $59 = $60 << 24 >> 24;
    $61 = ((($pCtx) + ($59<<2)|0) + 5468|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(0|0);
    if ($63) {
     $67 = 1;
    } else {
     $64 = (($62) + 72|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65 ^ 1;
     $67 = $66;
    }
   } else {
    $67 = 1;
   }
  } else {
   $67 = 1;
  }
  HEAP8[$56>>0] = $67;
  __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($pMotionVector,$pRefIndex,0,4,$60,$pMv);
  $68 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,0,$pRefIndex,$pMvdCache,0,0,0,$pMvd)|0);
  $69 = ($68|0)==(0);
  if (!($69)) {
   $$0 = $68;
   STACKTOP = sp;return ($$0|0);
  }
  $70 = (($pMvd) + 2|0);
  $71 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,0,$pRefIndex,$pMvdCache,0,0,1,$70)|0);
  $72 = ($71|0)==(0);
  if (!($72)) {
   $$0 = $71;
   STACKTOP = sp;return ($$0|0);
  }
  $73 = HEAP32[$pMvd>>2]|0;
  $74 = HEAP32[$pMv>>2]|0;
  $75 = (($74) + ($73))|0;
  $76 = $75&65535;
  HEAP16[$pMv>>1] = $76;
  $77 = $73 >>> 16;
  $78 = (($pMv) + 2|0);
  $79 = $74 >>> 16;
  $80 = (($79) + ($77))|0;
  $81 = $80&65535;
  HEAP16[$78>>1] = $81;
  $sext11 = $80 << 16;
  $82 = $sext11 >> 16;
  $83 = $17 << 16 >> 16;
  $84 = ($82|0)<($83|0);
  $85 = $19 << 16 >> 16;
  $86 = ($82|0)>($85|0);
  $or$cond13 = $84 | $86;
  if ($or$cond13) {
   HEAP32[$vararg_buffer10>>2] = $82;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14968,$vararg_buffer10);
  }
  __ZN7WelsDec22UpdateP16x16MotionInfoEPNS_10TagDqLayerEaPs($1,$60,$pMv);
  $87 = HEAP32[$2>>2]|0;
  $88 = (($1) + 3924|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + ($87<<6)|0);
  $91 = $90;
  $92 = $91;
  HEAP8[$92>>0]=$73&255;HEAP8[$92+1>>0]=($73>>8)&255;HEAP8[$92+2>>0]=($73>>16)&255;HEAP8[$92+3>>0]=$73>>24;
  $93 = (($91) + 4)|0;
  $94 = $93;
  HEAP8[$94>>0]=$73&255;HEAP8[$94+1>>0]=($73>>8)&255;HEAP8[$94+2>>0]=($73>>16)&255;HEAP8[$94+3>>0]=$73>>24;
  $95 = HEAP32[$88>>2]|0;
  $96 = ((($95) + ($87<<6)|0) + 8|0);
  $97 = $96;
  $98 = $97;
  HEAP8[$98>>0]=$73&255;HEAP8[$98+1>>0]=($73>>8)&255;HEAP8[$98+2>>0]=($73>>16)&255;HEAP8[$98+3>>0]=$73>>24;
  $99 = (($97) + 4)|0;
  $100 = $99;
  HEAP8[$100>>0]=$73&255;HEAP8[$100+1>>0]=($73>>8)&255;HEAP8[$100+2>>0]=($73>>16)&255;HEAP8[$100+3>>0]=$73>>24;
  $101 = HEAP32[$88>>2]|0;
  $102 = ((($101) + ($87<<6)|0) + 16|0);
  $103 = $102;
  $104 = $103;
  HEAP8[$104>>0]=$73&255;HEAP8[$104+1>>0]=($73>>8)&255;HEAP8[$104+2>>0]=($73>>16)&255;HEAP8[$104+3>>0]=$73>>24;
  $105 = (($103) + 4)|0;
  $106 = $105;
  HEAP8[$106>>0]=$73&255;HEAP8[$106+1>>0]=($73>>8)&255;HEAP8[$106+2>>0]=($73>>16)&255;HEAP8[$106+3>>0]=$73>>24;
  $107 = HEAP32[$88>>2]|0;
  $108 = ((($107) + ($87<<6)|0) + 24|0);
  $109 = $108;
  $110 = $109;
  HEAP8[$110>>0]=$73&255;HEAP8[$110+1>>0]=($73>>8)&255;HEAP8[$110+2>>0]=($73>>16)&255;HEAP8[$110+3>>0]=$73>>24;
  $111 = (($109) + 4)|0;
  $112 = $111;
  HEAP8[$112>>0]=$73&255;HEAP8[$112+1>>0]=($73>>8)&255;HEAP8[$112+2>>0]=($73>>16)&255;HEAP8[$112+3>>0]=$73>>24;
  $113 = HEAP32[$88>>2]|0;
  $114 = ((($113) + ($87<<6)|0) + 32|0);
  $115 = $114;
  $116 = $115;
  HEAP8[$116>>0]=$73&255;HEAP8[$116+1>>0]=($73>>8)&255;HEAP8[$116+2>>0]=($73>>16)&255;HEAP8[$116+3>>0]=$73>>24;
  $117 = (($115) + 4)|0;
  $118 = $117;
  HEAP8[$118>>0]=$73&255;HEAP8[$118+1>>0]=($73>>8)&255;HEAP8[$118+2>>0]=($73>>16)&255;HEAP8[$118+3>>0]=$73>>24;
  $119 = HEAP32[$88>>2]|0;
  $120 = ((($119) + ($87<<6)|0) + 40|0);
  $121 = $120;
  $122 = $121;
  HEAP8[$122>>0]=$73&255;HEAP8[$122+1>>0]=($73>>8)&255;HEAP8[$122+2>>0]=($73>>16)&255;HEAP8[$122+3>>0]=$73>>24;
  $123 = (($121) + 4)|0;
  $124 = $123;
  HEAP8[$124>>0]=$73&255;HEAP8[$124+1>>0]=($73>>8)&255;HEAP8[$124+2>>0]=($73>>16)&255;HEAP8[$124+3>>0]=$73>>24;
  $125 = HEAP32[$88>>2]|0;
  $126 = ((($125) + ($87<<6)|0) + 48|0);
  $127 = $126;
  $128 = $127;
  HEAP8[$128>>0]=$73&255;HEAP8[$128+1>>0]=($73>>8)&255;HEAP8[$128+2>>0]=($73>>16)&255;HEAP8[$128+3>>0]=$73>>24;
  $129 = (($127) + 4)|0;
  $130 = $129;
  HEAP8[$130>>0]=$73&255;HEAP8[$130+1>>0]=($73>>8)&255;HEAP8[$130+2>>0]=($73>>16)&255;HEAP8[$130+3>>0]=$73>>24;
  $131 = HEAP32[$88>>2]|0;
  $132 = ((($131) + ($87<<6)|0) + 56|0);
  $133 = $132;
  $134 = $133;
  HEAP8[$134>>0]=$73&255;HEAP8[$134+1>>0]=($73>>8)&255;HEAP8[$134+2>>0]=($73>>16)&255;HEAP8[$134+3>>0]=$73>>24;
  $135 = (($133) + 4)|0;
  $136 = $135;
  HEAP8[$136>>0]=$73&255;HEAP8[$136+1>>0]=($73>>8)&255;HEAP8[$136+2>>0]=($73>>16)&255;HEAP8[$136+3>>0]=$73>>24;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 128: case 64:  {
  HEAP32[$pRefIdx>>2] = 0;
  $441 = (($pCtx) + 512232|0);
  $442 = (($pCtx) + 511351|0);
  $443 = (($pCtx) + 511353|0);
  $444 = (($pCtx) + 511355|0);
  $445 = (($1) + 4008|0);
  $446 = (($1) + 3940|0);
  $i$456 = 0;
  while(1) {
   $452 = HEAP32[$441>>2]|0;
   $453 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($452,$442,$uiCode$i)|0);
   $454 = ($453|0)==(0);
   if (!($454)) {
    $$0 = $453;
    label = 88;
    break;
   }
   $455 = HEAP32[$uiCode$i>>2]|0;
   $456 = ($455|0)==(0);
   if ($456) {
    $457 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($452,$443,$uiCode$i)|0);
    $458 = ($457|0)==(0);
    if (!($458)) {
     $$0 = $457;
     label = 88;
     break;
    }
    $459 = HEAP32[$uiCode$i>>2]|0;
    $460 = ($459|0)==(0);
    if ($460) {
     $$ph25 = 1;
    } else {
     $461 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($452,$444,$uiCode$i)|0);
     $462 = ($461|0)==(0);
     if (!($462)) {
      $$0 = $461;
      label = 88;
      break;
     }
     $463 = HEAP32[$uiCode$i>>2]|0;
     $464 = (3 - ($463))|0;
     $465 = ($464>>>0)>(3);
     if ($465) {
      $$0 = 1038;
      label = 88;
      break;
     } else {
      $$ph25 = $464;
     }
    }
   } else {
    $$ph25 = 0;
   }
   $466 = (15248 + ($$ph25<<3)|0);
   $467 = HEAP32[$466>>2]|0;
   $468 = $467&255;
   $469 = HEAP32[$445>>2]|0;
   $470 = ((($469) + ($3<<2)|0) + ($i$456)|0);
   HEAP8[$470>>0] = $468;
   $471 = ((15248 + ($$ph25<<3)|0) + 4|0);
   $472 = HEAP8[$471>>0]|0;
   $473 = (($pSubPartCount) + ($i$456)|0);
   HEAP8[$473>>0] = $472;
   $474 = ((15248 + ($$ph25<<3)|0) + 5|0);
   $475 = HEAP8[$474>>0]|0;
   $476 = (($pPartW) + ($i$456)|0);
   HEAP8[$476>>0] = $475;
   $477 = ($$ph25|0)==(0);
   $478 = $477&1;
   $479 = HEAP32[$446>>2]|0;
   $480 = (($479) + ($3)|0);
   $481 = HEAP8[$480>>0]|0;
   $482 = $481&255;
   $483 = $482 & $478;
   $484 = $483&255;
   HEAP8[$480>>0] = $484;
   $485 = (($i$456) + 1)|0;
   $486 = ($485|0)<(4);
   if ($486) {
    $i$456 = $485;
   } else {
    label = 51;
    break;
   }
  }
  if ((label|0) == 51) {
   $447 = (($pCtx) + 512344|0);
   $448 = (($pCtx) + 242340|0);
   $449 = (($pCtx) + 116|0);
   $450 = (($pCtx) + 512345|0);
   $451 = (($1) + 3932|0);
   $i$553 = 0;
   while(1) {
    $495 = $i$553 << 18;
    $496 = $495 >> 16;
    $497 = (($pRefIdx) + ($i$553)|0);
    $498 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($pCtx,$pNeighAvail,0,$pRefIndex,0,$496,$21,0,$497)|0);
    $499 = ($498|0)==(0);
    if (!($499)) {
     $$0 = $498;
     label = 88;
     break;
    }
    $500 = HEAP8[$497>>0]|0;
    $501 = $500 << 24 >> 24;
    $502 = ($500<<24>>24)>(-1);
    $503 = ($501|0)<($21|0);
    $or$cond20 = $502 & $503;
    if ($or$cond20) {
     $504 = ((($pCtx) + ($501<<2)|0) + 5468|0);
     $505 = HEAP32[$504>>2]|0;
     $506 = ($505|0)==(0|0);
     if ($506) {
      label = 63;
     } else {
      $516 = $500;
     }
    } else {
     label = 63;
    }
    if ((label|0) == 63) {
     label = 0;
     HEAP8[$447>>0] = 1;
     $507 = HEAP32[$448>>2]|0;
     $508 = ($507|0)==(0);
     if ($508) {
      $$0 = 1041;
      label = 88;
      break;
     }
     HEAP8[$497>>0] = 0;
     $509 = HEAP32[$449>>2]|0;
     $510 = $509 | 4;
     HEAP32[$449>>2] = $510;
     $516 = 0;
    }
    $511 = HEAP8[$450>>0]|0;
    $512 = ($511<<24>>24)==(0);
    if ($512) {
     $513 = HEAP8[$447>>0]|0;
     $514 = ($513<<24>>24)==(0);
     if ($514) {
      $515 = $516 << 24 >> 24;
      $517 = ((($pCtx) + ($515<<2)|0) + 5468|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       $523 = 1;
      } else {
       $520 = (($518) + 72|0);
       $521 = HEAP8[$520>>0]|0;
       $522 = $521 ^ 1;
       $523 = $522;
      }
     } else {
      $523 = 1;
     }
    } else {
     $523 = 1;
    }
    HEAP8[$447>>0] = $523;
    $524 = HEAP32[$2>>2]|0;
    $525 = (8424 + ($496)|0);
    $526 = HEAP8[$525>>0]|0;
    $527 = $526&255;
    $528 = (($527) + 5)|0;
    $529 = HEAP32[$451>>2]|0;
    $530 = ((($529) + ($524<<4)|0) + ($528)|0);
    HEAP8[$530>>0] = $516;
    $531 = (($527) + 4)|0;
    $532 = HEAP32[$451>>2]|0;
    $533 = ((($532) + ($524<<4)|0) + ($531)|0);
    HEAP8[$533>>0] = $516;
    $534 = (($527) + 1)|0;
    $535 = HEAP32[$451>>2]|0;
    $536 = ((($535) + ($524<<4)|0) + ($534)|0);
    HEAP8[$536>>0] = $516;
    $537 = HEAP32[$451>>2]|0;
    $538 = ((($537) + ($524<<4)|0) + ($527)|0);
    HEAP8[$538>>0] = $516;
    $539 = (($i$553) + 1)|0;
    $540 = ($539|0)<(4);
    if ($540) {
     $i$553 = $539;
    } else {
     label = 59;
     break;
    }
   }
   if ((label|0) == 59) {
    $487 = (($pMvd) + 2|0);
    $488 = (($pMv) + 2|0);
    $489 = $17 << 16 >> 16;
    $490 = $19 << 16 >> 16;
    $491 = (($1) + 3916|0);
    $492 = (($1) + 3924|0);
    $493 = (($pMv) + 4|0);
    $494 = (($pMvd) + 4|0);
    $i$649 = 0;
    L58: while(1) {
     $541 = (($pSubPartCount) + ($i$649)|0);
     $542 = HEAP8[$541>>0]|0;
     $543 = HEAP32[$445>>2]|0;
     $544 = ((($543) + ($3<<2)|0) + ($i$649)|0);
     $545 = HEAP8[$544>>0]|0;
     $546 = (($pPartW) + ($i$649)|0);
     $547 = HEAP8[$546>>0]|0;
     $548 = $i$649 << 2;
     $549 = (16968 + ($548)|0);
     $550 = HEAP8[$549>>0]|0;
     $551 = (($pRefIdx) + ($i$649)|0);
     $552 = HEAP8[$551>>0]|0;
     $553 = $550&255;
     $554 = (($553) + 7)|0;
     $555 = (($pRefIndex) + ($554)|0);
     HEAP8[$555>>0] = $552;
     $556 = (($553) + 6)|0;
     $557 = (($pRefIndex) + ($556)|0);
     HEAP8[$557>>0] = $552;
     $558 = (($553) + 1)|0;
     $559 = (($pRefIndex) + ($558)|0);
     HEAP8[$559>>0] = $552;
     $560 = (($pRefIndex) + ($553)|0);
     HEAP8[$560>>0] = $552;
     $561 = $542 << 24 >> 24;
     $562 = ($542<<24>>24)>(0);
     L60: do {
      if ($562) {
       $563 = $547 << 24 >> 24;
       $564 = ($545<<24>>24)==(4);
       $565 = ($545<<24>>24)==(1);
       if ($565) {
        $j$046$us = 0;
        while(1) {
         $566 = Math_imul($j$046$us, $563)|0;
         $567 = (($566) + ($548))|0;
         $sext$us = $567 << 16;
         $568 = $sext$us >> 16;
         $569 = (8424 + ($568)|0);
         $570 = HEAP8[$569>>0]|0;
         $571 = (16968 + ($568)|0);
         $572 = HEAP8[$571>>0]|0;
         __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($pMotionVector,$pRefIndex,$568,$563,$552,$pMv);
         $573 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,0,$pRefIndex,$pMvdCache,$568,0,0,$pMvd)|0);
         $574 = ($573|0)==(0);
         if (!($574)) {
          $$0 = $573;
          label = 88;
          break L58;
         }
         $575 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,0,$pRefIndex,$pMvdCache,$568,0,1,$487)|0);
         $576 = ($575|0)==(0);
         if (!($576)) {
          $$0 = $575;
          label = 88;
          break L58;
         }
         $577 = HEAP32[$pMvd>>2]|0;
         $578 = HEAP32[$pMv>>2]|0;
         $579 = (($578) + ($577))|0;
         $580 = $579&65535;
         HEAP16[$pMv>>1] = $580;
         $581 = $577 >>> 16;
         $582 = $578 >>> 16;
         $583 = (($582) + ($581))|0;
         $584 = $583&65535;
         HEAP16[$488>>1] = $584;
         $sext4$us = $583 << 16;
         $585 = $sext4$us >> 16;
         $586 = ($585|0)<($489|0);
         $587 = ($585|0)>($490|0);
         $or$cond22$us = $586 | $587;
         if ($or$cond22$us) {
          HEAP32[$vararg_buffer10>>2] = $585;
          __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14968,$vararg_buffer10);
         }
         $588 = HEAP32[$pMv>>2]|0;
         HEAP32[$493>>2] = $588;
         HEAP32[$494>>2] = $577;
         $589 = $pMv;
         $590 = $589;
         $591 = HEAP32[$590>>2]|0;
         $592 = (($589) + 4)|0;
         $593 = $592;
         $594 = HEAP32[$593>>2]|0;
         $595 = $570&255;
         $596 = HEAP32[$491>>2]|0;
         $597 = ((($596) + ($3<<6)|0) + ($595<<2)|0);
         $598 = $597;
         $599 = $598;
         HEAP8[$599>>0]=$591&255;HEAP8[$599+1>>0]=($591>>8)&255;HEAP8[$599+2>>0]=($591>>16)&255;HEAP8[$599+3>>0]=$591>>24;
         $600 = (($598) + 4)|0;
         $601 = $600;
         HEAP8[$601>>0]=$594&255;HEAP8[$601+1>>0]=($594>>8)&255;HEAP8[$601+2>>0]=($594>>16)&255;HEAP8[$601+3>>0]=$594>>24;
         $602 = $pMv;
         $603 = $602;
         $604 = HEAP32[$603>>2]|0;
         $605 = (($602) + 4)|0;
         $606 = $605;
         $607 = HEAP32[$606>>2]|0;
         $608 = (($595) + 4)|0;
         $609 = HEAP32[$491>>2]|0;
         $610 = ((($609) + ($3<<6)|0) + ($608<<2)|0);
         $611 = $610;
         $612 = $611;
         HEAP8[$612>>0]=$604&255;HEAP8[$612+1>>0]=($604>>8)&255;HEAP8[$612+2>>0]=($604>>16)&255;HEAP8[$612+3>>0]=$604>>24;
         $613 = (($611) + 4)|0;
         $614 = $613;
         HEAP8[$614>>0]=$607&255;HEAP8[$614+1>>0]=($607>>8)&255;HEAP8[$614+2>>0]=($607>>16)&255;HEAP8[$614+3>>0]=$607>>24;
         $615 = $pMvd;
         $616 = $615;
         $617 = HEAP32[$616>>2]|0;
         $618 = (($615) + 4)|0;
         $619 = $618;
         $620 = HEAP32[$619>>2]|0;
         $621 = HEAP32[$492>>2]|0;
         $622 = ((($621) + ($3<<6)|0) + ($595<<2)|0);
         $623 = $622;
         $624 = $623;
         HEAP8[$624>>0]=$617&255;HEAP8[$624+1>>0]=($617>>8)&255;HEAP8[$624+2>>0]=($617>>16)&255;HEAP8[$624+3>>0]=$617>>24;
         $625 = (($623) + 4)|0;
         $626 = $625;
         HEAP8[$626>>0]=$620&255;HEAP8[$626+1>>0]=($620>>8)&255;HEAP8[$626+2>>0]=($620>>16)&255;HEAP8[$626+3>>0]=$620>>24;
         $627 = HEAP32[$492>>2]|0;
         $628 = ((($627) + ($3<<6)|0) + ($608<<2)|0);
         $629 = $628;
         $630 = $629;
         HEAP8[$630>>0]=$617&255;HEAP8[$630+1>>0]=($617>>8)&255;HEAP8[$630+2>>0]=($617>>16)&255;HEAP8[$630+3>>0]=$617>>24;
         $631 = (($629) + 4)|0;
         $632 = $631;
         HEAP8[$632>>0]=$620&255;HEAP8[$632+1>>0]=($620>>8)&255;HEAP8[$632+2>>0]=($620>>16)&255;HEAP8[$632+3>>0]=$620>>24;
         $633 = $pMv;
         $634 = $633;
         $635 = HEAP32[$634>>2]|0;
         $636 = (($633) + 4)|0;
         $637 = $636;
         $638 = HEAP32[$637>>2]|0;
         $639 = $572&255;
         $640 = (($pMotionVector) + ($639<<2)|0);
         $641 = $640;
         $642 = $641;
         HEAP8[$642>>0]=$635&255;HEAP8[$642+1>>0]=($635>>8)&255;HEAP8[$642+2>>0]=($635>>16)&255;HEAP8[$642+3>>0]=$635>>24;
         $643 = (($641) + 4)|0;
         $644 = $643;
         HEAP8[$644>>0]=$638&255;HEAP8[$644+1>>0]=($638>>8)&255;HEAP8[$644+2>>0]=($638>>16)&255;HEAP8[$644+3>>0]=$638>>24;
         $645 = (($639) + 6)|0;
         $646 = (($pMotionVector) + ($645<<2)|0);
         $647 = $646;
         $648 = $647;
         HEAP8[$648>>0]=$635&255;HEAP8[$648+1>>0]=($635>>8)&255;HEAP8[$648+2>>0]=($635>>16)&255;HEAP8[$648+3>>0]=$635>>24;
         $649 = (($647) + 4)|0;
         $650 = $649;
         HEAP8[$650>>0]=$638&255;HEAP8[$650+1>>0]=($638>>8)&255;HEAP8[$650+2>>0]=($638>>16)&255;HEAP8[$650+3>>0]=$638>>24;
         $651 = (($pMvdCache) + ($639<<2)|0);
         $652 = $651;
         $653 = $652;
         HEAP8[$653>>0]=$617&255;HEAP8[$653+1>>0]=($617>>8)&255;HEAP8[$653+2>>0]=($617>>16)&255;HEAP8[$653+3>>0]=$617>>24;
         $654 = (($652) + 4)|0;
         $655 = $654;
         HEAP8[$655>>0]=$620&255;HEAP8[$655+1>>0]=($620>>8)&255;HEAP8[$655+2>>0]=($620>>16)&255;HEAP8[$655+3>>0]=$620>>24;
         $656 = (($pMvdCache) + ($645<<2)|0);
         $657 = $656;
         $658 = $657;
         HEAP8[$658>>0]=$617&255;HEAP8[$658+1>>0]=($617>>8)&255;HEAP8[$658+2>>0]=($617>>16)&255;HEAP8[$658+3>>0]=$617>>24;
         $659 = (($657) + 4)|0;
         $660 = $659;
         HEAP8[$660>>0]=$620&255;HEAP8[$660+1>>0]=($620>>8)&255;HEAP8[$660+2>>0]=($620>>16)&255;HEAP8[$660+3>>0]=$620>>24;
         $661 = (($j$046$us) + 1)|0;
         $662 = ($661|0)<($561|0);
         if ($662) {
          $j$046$us = $661;
         } else {
          break L60;
         }
        }
       } else {
        $j$046 = 0;
       }
       while(1) {
        $663 = Math_imul($j$046, $563)|0;
        $664 = (($663) + ($548))|0;
        $sext = $664 << 16;
        $665 = $sext >> 16;
        $666 = (8424 + ($665)|0);
        $667 = HEAP8[$666>>0]|0;
        $668 = (16968 + ($665)|0);
        $669 = HEAP8[$668>>0]|0;
        __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($pMotionVector,$pRefIndex,$665,$563,$552,$pMv);
        $670 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,0,$pRefIndex,$pMvdCache,$665,0,0,$pMvd)|0);
        $671 = ($670|0)==(0);
        if (!($671)) {
         $$0 = $670;
         label = 88;
         break L58;
        }
        $672 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,0,$pRefIndex,$pMvdCache,$665,0,1,$487)|0);
        $673 = ($672|0)==(0);
        if (!($673)) {
         $$0 = $672;
         label = 88;
         break L58;
        }
        $674 = HEAP32[$pMvd>>2]|0;
        $675 = HEAP32[$pMv>>2]|0;
        $676 = (($675) + ($674))|0;
        $677 = $676&65535;
        HEAP16[$pMv>>1] = $677;
        $678 = $674 >>> 16;
        $679 = $675 >>> 16;
        $680 = (($679) + ($678))|0;
        $681 = $680&65535;
        HEAP16[$488>>1] = $681;
        $sext4 = $680 << 16;
        $682 = $sext4 >> 16;
        $683 = ($682|0)<($489|0);
        $684 = ($682|0)>($490|0);
        $or$cond22 = $683 | $684;
        if ($or$cond22) {
         HEAP32[$vararg_buffer10>>2] = $682;
         __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14968,$vararg_buffer10);
        }
        $cond = ($545<<24>>24)==(2);
        $685 = HEAP32[$pMv>>2]|0;
        do {
         if ($cond) {
          HEAP32[$493>>2] = $685;
          HEAP32[$494>>2] = $674;
          $686 = $pMv;
          $687 = $686;
          $688 = HEAP32[$687>>2]|0;
          $689 = (($686) + 4)|0;
          $690 = $689;
          $691 = HEAP32[$690>>2]|0;
          $692 = $667&255;
          $693 = HEAP32[$491>>2]|0;
          $694 = ((($693) + ($3<<6)|0) + ($692<<2)|0);
          $695 = $694;
          $696 = $695;
          HEAP8[$696>>0]=$688&255;HEAP8[$696+1>>0]=($688>>8)&255;HEAP8[$696+2>>0]=($688>>16)&255;HEAP8[$696+3>>0]=$688>>24;
          $697 = (($695) + 4)|0;
          $698 = $697;
          HEAP8[$698>>0]=$691&255;HEAP8[$698+1>>0]=($691>>8)&255;HEAP8[$698+2>>0]=($691>>16)&255;HEAP8[$698+3>>0]=$691>>24;
          $699 = $pMvd;
          $700 = $699;
          $701 = HEAP32[$700>>2]|0;
          $702 = (($699) + 4)|0;
          $703 = $702;
          $704 = HEAP32[$703>>2]|0;
          $705 = HEAP32[$492>>2]|0;
          $706 = ((($705) + ($3<<6)|0) + ($692<<2)|0);
          $707 = $706;
          $708 = $707;
          HEAP8[$708>>0]=$701&255;HEAP8[$708+1>>0]=($701>>8)&255;HEAP8[$708+2>>0]=($701>>16)&255;HEAP8[$708+3>>0]=$701>>24;
          $709 = (($707) + 4)|0;
          $710 = $709;
          HEAP8[$710>>0]=$704&255;HEAP8[$710+1>>0]=($704>>8)&255;HEAP8[$710+2>>0]=($704>>16)&255;HEAP8[$710+3>>0]=$704>>24;
          $711 = $pMv;
          $712 = $711;
          $713 = HEAP32[$712>>2]|0;
          $714 = (($711) + 4)|0;
          $715 = $714;
          $716 = HEAP32[$715>>2]|0;
          $717 = $669&255;
          $718 = (($pMotionVector) + ($717<<2)|0);
          $719 = $718;
          $720 = $719;
          HEAP8[$720>>0]=$713&255;HEAP8[$720+1>>0]=($713>>8)&255;HEAP8[$720+2>>0]=($713>>16)&255;HEAP8[$720+3>>0]=$713>>24;
          $721 = (($719) + 4)|0;
          $722 = $721;
          HEAP8[$722>>0]=$716&255;HEAP8[$722+1>>0]=($716>>8)&255;HEAP8[$722+2>>0]=($716>>16)&255;HEAP8[$722+3>>0]=$716>>24;
          $723 = (($pMvdCache) + ($717<<2)|0);
          $724 = $723;
          $725 = $724;
          HEAP8[$725>>0]=$701&255;HEAP8[$725+1>>0]=($701>>8)&255;HEAP8[$725+2>>0]=($701>>16)&255;HEAP8[$725+3>>0]=$701>>24;
          $726 = (($724) + 4)|0;
          $727 = $726;
          HEAP8[$727>>0]=$704&255;HEAP8[$727+1>>0]=($704>>8)&255;HEAP8[$727+2>>0]=($704>>16)&255;HEAP8[$727+3>>0]=$704>>24;
         } else {
          $728 = $667&255;
          $729 = HEAP32[$491>>2]|0;
          $730 = ((($729) + ($3<<6)|0) + ($728<<2)|0);
          HEAP8[$730>>0]=$685&255;HEAP8[$730+1>>0]=($685>>8)&255;HEAP8[$730+2>>0]=($685>>16)&255;HEAP8[$730+3>>0]=$685>>24;
          if ($564) {
           $731 = HEAP32[$pMv>>2]|0;
           $732 = (($728) + 4)|0;
           $733 = HEAP32[$491>>2]|0;
           $734 = ((($733) + ($3<<6)|0) + ($732<<2)|0);
           HEAP8[$734>>0]=$731&255;HEAP8[$734+1>>0]=($731>>8)&255;HEAP8[$734+2>>0]=($731>>16)&255;HEAP8[$734+3>>0]=$731>>24;
           $735 = HEAP32[$492>>2]|0;
           $736 = ((($735) + ($3<<6)|0) + ($728<<2)|0);
           HEAP8[$736>>0]=$674&255;HEAP8[$736+1>>0]=($674>>8)&255;HEAP8[$736+2>>0]=($674>>16)&255;HEAP8[$736+3>>0]=$674>>24;
           $737 = HEAP32[$492>>2]|0;
           $738 = ((($737) + ($3<<6)|0) + ($732<<2)|0);
           HEAP8[$738>>0]=$674&255;HEAP8[$738+1>>0]=($674>>8)&255;HEAP8[$738+2>>0]=($674>>16)&255;HEAP8[$738+3>>0]=$674>>24;
           $739 = HEAP32[$pMv>>2]|0;
           $740 = $669&255;
           $741 = (($pMotionVector) + ($740<<2)|0);
           HEAP8[$741>>0]=$739&255;HEAP8[$741+1>>0]=($739>>8)&255;HEAP8[$741+2>>0]=($739>>16)&255;HEAP8[$741+3>>0]=$739>>24;
           $742 = (($740) + 6)|0;
           $743 = (($pMotionVector) + ($742<<2)|0);
           HEAP8[$743>>0]=$739&255;HEAP8[$743+1>>0]=($739>>8)&255;HEAP8[$743+2>>0]=($739>>16)&255;HEAP8[$743+3>>0]=$739>>24;
           $744 = (($pMvdCache) + ($740<<2)|0);
           HEAP8[$744>>0]=$674&255;HEAP8[$744+1>>0]=($674>>8)&255;HEAP8[$744+2>>0]=($674>>16)&255;HEAP8[$744+3>>0]=$674>>24;
           $745 = (($pMvdCache) + ($742<<2)|0);
           HEAP8[$745>>0]=$674&255;HEAP8[$745+1>>0]=($674>>8)&255;HEAP8[$745+2>>0]=($674>>16)&255;HEAP8[$745+3>>0]=$674>>24;
           break;
          } else {
           $746 = HEAP32[$492>>2]|0;
           $747 = ((($746) + ($3<<6)|0) + ($728<<2)|0);
           HEAP8[$747>>0]=$674&255;HEAP8[$747+1>>0]=($674>>8)&255;HEAP8[$747+2>>0]=($674>>16)&255;HEAP8[$747+3>>0]=$674>>24;
           $748 = HEAP32[$pMv>>2]|0;
           $749 = $669&255;
           $750 = (($pMotionVector) + ($749<<2)|0);
           HEAP8[$750>>0]=$748&255;HEAP8[$750+1>>0]=($748>>8)&255;HEAP8[$750+2>>0]=($748>>16)&255;HEAP8[$750+3>>0]=$748>>24;
           $751 = (($pMvdCache) + ($749<<2)|0);
           HEAP8[$751>>0]=$674&255;HEAP8[$751+1>>0]=($674>>8)&255;HEAP8[$751+2>>0]=($674>>16)&255;HEAP8[$751+3>>0]=$674>>24;
           break;
          }
         }
        } while(0);
        $752 = (($j$046) + 1)|0;
        $753 = ($752|0)<($561|0);
        if ($753) {
         $j$046 = $752;
        } else {
         break;
        }
       }
      }
     } while(0);
     $754 = (($i$649) + 1)|0;
     $755 = ($754|0)<(4);
     if ($755) {
      $i$649 = $754;
     } else {
      $$0 = 0;
      label = 88;
      break;
     }
    }
    if ((label|0) == 88) {
     STACKTOP = sp;return ($$0|0);
    }
   }
   else if ((label|0) == 88) {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 88) {
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 32:  {
  $27 = (($pCtx) + 512344|0);
  $28 = (($pCtx) + 242340|0);
  $29 = (($pCtx) + 116|0);
  $30 = (($pCtx) + 512345|0);
  $31 = (($1) + 3932|0);
  $i$243 = 0;
  while(1) {
   $287 = $i$243 << 2;
   $288 = (($iRef) + ($i$243)|0);
   $289 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($pCtx,$pNeighAvail,0,$pRefIndex,0,$287,$21,0,$288)|0);
   $290 = ($289|0)==(0);
   if (!($290)) {
    $$0 = $289;
    label = 88;
    break;
   }
   $291 = HEAP8[$288>>0]|0;
   $292 = $291 << 24 >> 24;
   $293 = ($291<<24>>24)>(-1);
   $294 = ($292|0)<($21|0);
   $or$cond17 = $293 & $294;
   if ($or$cond17) {
    $295 = ((($pCtx) + ($292<<2)|0) + 5468|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = ($296|0)==(0|0);
    if ($297) {
     label = 38;
    } else {
     $307 = $291;
    }
   } else {
    label = 38;
   }
   if ((label|0) == 38) {
    label = 0;
    HEAP8[$27>>0] = 1;
    $298 = HEAP32[$28>>2]|0;
    $299 = ($298|0)==(0);
    if ($299) {
     $$0 = 1041;
     label = 88;
     break;
    }
    HEAP8[$288>>0] = 0;
    $300 = HEAP32[$29>>2]|0;
    $301 = $300 | 4;
    HEAP32[$29>>2] = $301;
    $307 = 0;
   }
   $302 = HEAP8[$30>>0]|0;
   $303 = ($302<<24>>24)==(0);
   if ($303) {
    $304 = HEAP8[$27>>0]|0;
    $305 = ($304<<24>>24)==(0);
    if ($305) {
     $306 = $307 << 24 >> 24;
     $308 = ((($pCtx) + ($306<<2)|0) + 5468|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = ($309|0)==(0|0);
     if ($310) {
      $314 = 1;
     } else {
      $311 = (($309) + 72|0);
      $312 = HEAP8[$311>>0]|0;
      $313 = $312 ^ 1;
      $314 = $313;
     }
    } else {
     $314 = 1;
    }
   } else {
    $314 = 1;
   }
   HEAP8[$27>>0] = $314;
   $315 = $307 << 24 >> 24;
   $316 = $315 << 8;
   $317 = $316 | $315;
   $318 = $317&65535;
   $319 = HEAP32[$2>>2]|0;
   $320 = (8424 + ($287)|0);
   $321 = HEAP8[$320>>0]|0;
   $322 = (16968 + ($287)|0);
   $323 = HEAP8[$322>>0]|0;
   $324 = $321&255;
   $325 = (($324) + 4)|0;
   $326 = $323&255;
   $327 = (($326) + 6)|0;
   $328 = HEAP32[$31>>2]|0;
   $329 = ((($328) + ($319<<4)|0) + ($324)|0);
   HEAP8[$329>>0]=$318&255;HEAP8[$329+1>>0]=$318>>8;
   $330 = $325 & 255;
   $331 = HEAP32[$31>>2]|0;
   $332 = ((($331) + ($319<<4)|0) + ($330)|0);
   HEAP8[$332>>0]=$318&255;HEAP8[$332+1>>0]=$318>>8;
   $333 = (($pRefIndex) + ($326)|0);
   HEAP8[$333>>0]=$318&255;HEAP8[$333+1>>0]=$318>>8;
   $334 = $327 & 255;
   $335 = (($pRefIndex) + ($334)|0);
   HEAP8[$335>>0]=$318&255;HEAP8[$335+1>>0]=$318>>8;
   $336 = (($287) + 8)|0;
   $337 = (8424 + ($336)|0);
   $338 = HEAP8[$337>>0]|0;
   $339 = (16968 + ($336)|0);
   $340 = HEAP8[$339>>0]|0;
   $341 = $338&255;
   $342 = (($341) + 4)|0;
   $343 = $340&255;
   $344 = (($343) + 6)|0;
   $345 = HEAP32[$31>>2]|0;
   $346 = ((($345) + ($319<<4)|0) + ($341)|0);
   HEAP8[$346>>0]=$318&255;HEAP8[$346+1>>0]=$318>>8;
   $347 = $342 & 255;
   $348 = HEAP32[$31>>2]|0;
   $349 = ((($348) + ($319<<4)|0) + ($347)|0);
   HEAP8[$349>>0]=$318&255;HEAP8[$349+1>>0]=$318>>8;
   $350 = (($pRefIndex) + ($343)|0);
   HEAP8[$350>>0]=$318&255;HEAP8[$350+1>>0]=$318>>8;
   $351 = $344 & 255;
   $352 = (($pRefIndex) + ($351)|0);
   HEAP8[$352>>0]=$318&255;HEAP8[$352+1>>0]=$318>>8;
   $353 = (($i$243) + 1)|0;
   $354 = ($353|0)<(2);
   if ($354) {
    $i$243 = $353;
   } else {
    label = 34;
    break;
   }
  }
  if ((label|0) == 34) {
   $282 = (($pMvd) + 2|0);
   $283 = (($pMv) + 2|0);
   $284 = $17 << 16 >> 16;
   $285 = $19 << 16 >> 16;
   $286 = (($1) + 3924|0);
   $i$339 = 0;
   while(1) {
    $355 = $i$339 << 2;
    $356 = (($iRef) + ($i$339)|0);
    $357 = HEAP8[$356>>0]|0;
    __ZN7WelsDec15PredInter8x16MvEPA30_A2_sPA30_aiaPs($pMotionVector,$pRefIndex,$355,$357,$pMv);
    $358 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,0,$pRefIndex,$pMvdCache,$355,0,0,$pMvd)|0);
    $359 = ($358|0)==(0);
    if (!($359)) {
     $$0 = $358;
     label = 88;
     break;
    }
    $360 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,0,$pRefIndex,$pMvdCache,$355,0,1,$282)|0);
    $361 = ($360|0)==(0);
    if (!($361)) {
     $$0 = $360;
     label = 88;
     break;
    }
    $362 = HEAP32[$pMvd>>2]|0;
    $363 = HEAP32[$pMv>>2]|0;
    $364 = (($363) + ($362))|0;
    $365 = $364&65535;
    HEAP16[$pMv>>1] = $365;
    $366 = $362 >>> 16;
    $367 = $363 >>> 16;
    $368 = (($367) + ($366))|0;
    $369 = $368&65535;
    HEAP16[$283>>1] = $369;
    $sext6 = $368 << 16;
    $370 = $sext6 >> 16;
    $371 = ($370|0)<($284|0);
    $372 = ($370|0)>($285|0);
    $or$cond19 = $371 | $372;
    if ($or$cond19) {
     HEAP32[$vararg_buffer10>>2] = $370;
     __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14968,$vararg_buffer10);
    }
    __ZN7WelsDec21UpdateP8x16MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($1,$pMotionVector,$pRefIndex,$355,$357,$pMv);
    $373 = HEAP32[$2>>2]|0;
    $374 = (8424 + ($355)|0);
    $375 = HEAP8[$374>>0]|0;
    $376 = (16968 + ($355)|0);
    $377 = HEAP8[$376>>0]|0;
    $378 = $375&255;
    $379 = (($378) + 4)|0;
    $380 = $377&255;
    $381 = (($380) + 6)|0;
    $382 = HEAP32[$286>>2]|0;
    $383 = ((($382) + ($373<<6)|0) + ($378<<2)|0);
    $384 = $383;
    $385 = $384;
    HEAP8[$385>>0]=$362&255;HEAP8[$385+1>>0]=($362>>8)&255;HEAP8[$385+2>>0]=($362>>16)&255;HEAP8[$385+3>>0]=$362>>24;
    $386 = (($384) + 4)|0;
    $387 = $386;
    HEAP8[$387>>0]=$362&255;HEAP8[$387+1>>0]=($362>>8)&255;HEAP8[$387+2>>0]=($362>>16)&255;HEAP8[$387+3>>0]=$362>>24;
    $388 = $379 & 255;
    $389 = HEAP32[$286>>2]|0;
    $390 = ((($389) + ($373<<6)|0) + ($388<<2)|0);
    $391 = $390;
    $392 = $391;
    HEAP8[$392>>0]=$362&255;HEAP8[$392+1>>0]=($362>>8)&255;HEAP8[$392+2>>0]=($362>>16)&255;HEAP8[$392+3>>0]=$362>>24;
    $393 = (($391) + 4)|0;
    $394 = $393;
    HEAP8[$394>>0]=$362&255;HEAP8[$394+1>>0]=($362>>8)&255;HEAP8[$394+2>>0]=($362>>16)&255;HEAP8[$394+3>>0]=$362>>24;
    $395 = (($pMvdCache) + ($380<<2)|0);
    $396 = $395;
    $397 = $396;
    HEAP8[$397>>0]=$362&255;HEAP8[$397+1>>0]=($362>>8)&255;HEAP8[$397+2>>0]=($362>>16)&255;HEAP8[$397+3>>0]=$362>>24;
    $398 = (($396) + 4)|0;
    $399 = $398;
    HEAP8[$399>>0]=$362&255;HEAP8[$399+1>>0]=($362>>8)&255;HEAP8[$399+2>>0]=($362>>16)&255;HEAP8[$399+3>>0]=$362>>24;
    $400 = $381 & 255;
    $401 = (($pMvdCache) + ($400<<2)|0);
    $402 = $401;
    $403 = $402;
    HEAP8[$403>>0]=$362&255;HEAP8[$403+1>>0]=($362>>8)&255;HEAP8[$403+2>>0]=($362>>16)&255;HEAP8[$403+3>>0]=$362>>24;
    $404 = (($402) + 4)|0;
    $405 = $404;
    HEAP8[$405>>0]=$362&255;HEAP8[$405+1>>0]=($362>>8)&255;HEAP8[$405+2>>0]=($362>>16)&255;HEAP8[$405+3>>0]=$362>>24;
    $406 = (($355) + 8)|0;
    $407 = (8424 + ($406)|0);
    $408 = HEAP8[$407>>0]|0;
    $409 = (16968 + ($406)|0);
    $410 = HEAP8[$409>>0]|0;
    $411 = $408&255;
    $412 = (($411) + 4)|0;
    $413 = $410&255;
    $414 = (($413) + 6)|0;
    $415 = HEAP32[$286>>2]|0;
    $416 = ((($415) + ($373<<6)|0) + ($411<<2)|0);
    $417 = $416;
    $418 = $417;
    HEAP8[$418>>0]=$362&255;HEAP8[$418+1>>0]=($362>>8)&255;HEAP8[$418+2>>0]=($362>>16)&255;HEAP8[$418+3>>0]=$362>>24;
    $419 = (($417) + 4)|0;
    $420 = $419;
    HEAP8[$420>>0]=$362&255;HEAP8[$420+1>>0]=($362>>8)&255;HEAP8[$420+2>>0]=($362>>16)&255;HEAP8[$420+3>>0]=$362>>24;
    $421 = $412 & 255;
    $422 = HEAP32[$286>>2]|0;
    $423 = ((($422) + ($373<<6)|0) + ($421<<2)|0);
    $424 = $423;
    $425 = $424;
    HEAP8[$425>>0]=$362&255;HEAP8[$425+1>>0]=($362>>8)&255;HEAP8[$425+2>>0]=($362>>16)&255;HEAP8[$425+3>>0]=$362>>24;
    $426 = (($424) + 4)|0;
    $427 = $426;
    HEAP8[$427>>0]=$362&255;HEAP8[$427+1>>0]=($362>>8)&255;HEAP8[$427+2>>0]=($362>>16)&255;HEAP8[$427+3>>0]=$362>>24;
    $428 = (($pMvdCache) + ($413<<2)|0);
    $429 = $428;
    $430 = $429;
    HEAP8[$430>>0]=$362&255;HEAP8[$430+1>>0]=($362>>8)&255;HEAP8[$430+2>>0]=($362>>16)&255;HEAP8[$430+3>>0]=$362>>24;
    $431 = (($429) + 4)|0;
    $432 = $431;
    HEAP8[$432>>0]=$362&255;HEAP8[$432+1>>0]=($362>>8)&255;HEAP8[$432+2>>0]=($362>>16)&255;HEAP8[$432+3>>0]=$362>>24;
    $433 = $414 & 255;
    $434 = (($pMvdCache) + ($433<<2)|0);
    $435 = $434;
    $436 = $435;
    HEAP8[$436>>0]=$362&255;HEAP8[$436+1>>0]=($362>>8)&255;HEAP8[$436+2>>0]=($362>>16)&255;HEAP8[$436+3>>0]=$362>>24;
    $437 = (($435) + 4)|0;
    $438 = $437;
    HEAP8[$438>>0]=$362&255;HEAP8[$438+1>>0]=($362>>8)&255;HEAP8[$438+2>>0]=($362>>16)&255;HEAP8[$438+3>>0]=$362>>24;
    $439 = (($i$339) + 1)|0;
    $440 = ($439|0)<(2);
    if ($440) {
     $i$339 = $439;
    } else {
     $$0 = 0;
     label = 88;
     break;
    }
   }
   if ((label|0) == 88) {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 88) {
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 16:  {
  $32 = (($pCtx) + 512344|0);
  $33 = (($pCtx) + 242340|0);
  $34 = (($pCtx) + 116|0);
  $35 = (($pCtx) + 512345|0);
  $36 = (($1) + 3932|0);
  $i$035 = 0;
  while(1) {
   $142 = $i$035 << 3;
   $143 = (($iRef) + ($i$035)|0);
   $144 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($pCtx,$pNeighAvail,0,$pRefIndex,0,$142,$21,0,$143)|0);
   $145 = ($144|0)==(0);
   if (!($145)) {
    $$0 = $144;
    label = 88;
    break;
   }
   $146 = HEAP8[$143>>0]|0;
   $147 = $146 << 24 >> 24;
   $148 = ($146<<24>>24)>(-1);
   $149 = ($147|0)<($21|0);
   $or$cond14 = $148 & $149;
   if ($or$cond14) {
    $150 = ((($pCtx) + ($147<<2)|0) + 5468|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151|0)==(0|0);
    if ($152) {
     label = 22;
    } else {
     $162 = $146;
    }
   } else {
    label = 22;
   }
   if ((label|0) == 22) {
    label = 0;
    HEAP8[$32>>0] = 1;
    $153 = HEAP32[$33>>2]|0;
    $154 = ($153|0)==(0);
    if ($154) {
     $$0 = 1041;
     label = 88;
     break;
    }
    HEAP8[$143>>0] = 0;
    $155 = HEAP32[$34>>2]|0;
    $156 = $155 | 4;
    HEAP32[$34>>2] = $156;
    $162 = 0;
   }
   $157 = HEAP8[$35>>0]|0;
   $158 = ($157<<24>>24)==(0);
   if ($158) {
    $159 = HEAP8[$32>>0]|0;
    $160 = ($159<<24>>24)==(0);
    if ($160) {
     $161 = $162 << 24 >> 24;
     $163 = ((($pCtx) + ($161<<2)|0) + 5468|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ($164|0)==(0|0);
     if ($165) {
      $169 = 1;
     } else {
      $166 = (($164) + 72|0);
      $167 = HEAP8[$166>>0]|0;
      $168 = $167 ^ 1;
      $169 = $168;
     }
    } else {
     $169 = 1;
    }
   } else {
    $169 = 1;
   }
   HEAP8[$32>>0] = $169;
   $170 = $162 << 24 >> 24;
   $171 = $170 << 24;
   $172 = $170 << 16;
   $173 = $170 << 8;
   $174 = $172 | $170;
   $175 = $174 | $171;
   $176 = $175 | $173;
   $177 = HEAP32[$2>>2]|0;
   $178 = (8424 + ($142)|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = (($180) + 4)|0;
   $182 = (16968 + ($142)|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = (($184) + 6)|0;
   $186 = HEAP32[$36>>2]|0;
   $187 = ((($186) + ($177<<4)|0) + ($180)|0);
   HEAP8[$187>>0]=$176&255;HEAP8[$187+1>>0]=($176>>8)&255;HEAP8[$187+2>>0]=($176>>16)&255;HEAP8[$187+3>>0]=$176>>24;
   $188 = $181 & 255;
   $189 = HEAP32[$36>>2]|0;
   $190 = ((($189) + ($177<<4)|0) + ($188)|0);
   HEAP8[$190>>0]=$176&255;HEAP8[$190+1>>0]=($176>>8)&255;HEAP8[$190+2>>0]=($176>>16)&255;HEAP8[$190+3>>0]=$176>>24;
   $191 = (($pRefIndex) + ($184)|0);
   HEAP8[$191>>0]=$176&255;HEAP8[$191+1>>0]=($176>>8)&255;HEAP8[$191+2>>0]=($176>>16)&255;HEAP8[$191+3>>0]=$176>>24;
   $192 = $185 & 255;
   $193 = (($pRefIndex) + ($192)|0);
   HEAP8[$193>>0]=$176&255;HEAP8[$193+1>>0]=($176>>8)&255;HEAP8[$193+2>>0]=($176>>16)&255;HEAP8[$193+3>>0]=$176>>24;
   $194 = (($i$035) + 1)|0;
   $195 = ($194|0)<(2);
   if ($195) {
    $i$035 = $194;
   } else {
    label = 18;
    break;
   }
  }
  if ((label|0) == 18) {
   $137 = (($pMvd) + 2|0);
   $138 = (($pMv) + 2|0);
   $139 = $17 << 16 >> 16;
   $140 = $19 << 16 >> 16;
   $141 = (($1) + 3924|0);
   $i$131 = 0;
   while(1) {
    $196 = $i$131 << 3;
    $197 = (($iRef) + ($i$131)|0);
    $198 = HEAP8[$197>>0]|0;
    __ZN7WelsDec15PredInter16x8MvEPA30_A2_sPA30_aiaPs($pMotionVector,$pRefIndex,$196,$198,$pMv);
    $199 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,0,$pRefIndex,$pMvdCache,$196,0,0,$pMvd)|0);
    $200 = ($199|0)==(0);
    if (!($200)) {
     $$0 = $199;
     label = 88;
     break;
    }
    $201 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,0,$pRefIndex,$pMvdCache,$196,0,1,$137)|0);
    $202 = ($201|0)==(0);
    if (!($202)) {
     $$0 = $201;
     label = 88;
     break;
    }
    $203 = HEAP32[$pMvd>>2]|0;
    $204 = HEAP32[$pMv>>2]|0;
    $205 = (($204) + ($203))|0;
    $206 = $205&65535;
    HEAP16[$pMv>>1] = $206;
    $207 = $203 >>> 16;
    $208 = $204 >>> 16;
    $209 = (($208) + ($207))|0;
    $210 = $209&65535;
    HEAP16[$138>>1] = $210;
    $sext8 = $209 << 16;
    $211 = $sext8 >> 16;
    $212 = ($211|0)<($139|0);
    $213 = ($211|0)>($140|0);
    $or$cond16 = $212 | $213;
    if ($or$cond16) {
     HEAP32[$vararg_buffer10>>2] = $211;
     __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14968,$vararg_buffer10);
    }
    __ZN7WelsDec21UpdateP16x8MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($1,$pMotionVector,$pRefIndex,$196,$198,$pMv);
    $214 = HEAP32[$2>>2]|0;
    $215 = (8424 + ($196)|0);
    $216 = HEAP8[$215>>0]|0;
    $217 = $216&255;
    $218 = (($217) + 4)|0;
    $219 = (16968 + ($196)|0);
    $220 = HEAP8[$219>>0]|0;
    $221 = $220&255;
    $222 = (($221) + 6)|0;
    $223 = HEAP32[$141>>2]|0;
    $224 = ((($223) + ($214<<6)|0) + ($217<<2)|0);
    $225 = $224;
    $226 = $225;
    HEAP8[$226>>0]=$203&255;HEAP8[$226+1>>0]=($203>>8)&255;HEAP8[$226+2>>0]=($203>>16)&255;HEAP8[$226+3>>0]=$203>>24;
    $227 = (($225) + 4)|0;
    $228 = $227;
    HEAP8[$228>>0]=$203&255;HEAP8[$228+1>>0]=($203>>8)&255;HEAP8[$228+2>>0]=($203>>16)&255;HEAP8[$228+3>>0]=$203>>24;
    $229 = $218 & 255;
    $230 = HEAP32[$141>>2]|0;
    $231 = ((($230) + ($214<<6)|0) + ($229<<2)|0);
    $232 = $231;
    $233 = $232;
    HEAP8[$233>>0]=$203&255;HEAP8[$233+1>>0]=($203>>8)&255;HEAP8[$233+2>>0]=($203>>16)&255;HEAP8[$233+3>>0]=$203>>24;
    $234 = (($232) + 4)|0;
    $235 = $234;
    HEAP8[$235>>0]=$203&255;HEAP8[$235+1>>0]=($203>>8)&255;HEAP8[$235+2>>0]=($203>>16)&255;HEAP8[$235+3>>0]=$203>>24;
    $236 = (($pMvdCache) + ($221<<2)|0);
    $237 = $236;
    $238 = $237;
    HEAP8[$238>>0]=$203&255;HEAP8[$238+1>>0]=($203>>8)&255;HEAP8[$238+2>>0]=($203>>16)&255;HEAP8[$238+3>>0]=$203>>24;
    $239 = (($237) + 4)|0;
    $240 = $239;
    HEAP8[$240>>0]=$203&255;HEAP8[$240+1>>0]=($203>>8)&255;HEAP8[$240+2>>0]=($203>>16)&255;HEAP8[$240+3>>0]=$203>>24;
    $241 = $222 & 255;
    $242 = (($pMvdCache) + ($241<<2)|0);
    $243 = $242;
    $244 = $243;
    HEAP8[$244>>0]=$203&255;HEAP8[$244+1>>0]=($203>>8)&255;HEAP8[$244+2>>0]=($203>>16)&255;HEAP8[$244+3>>0]=$203>>24;
    $245 = (($243) + 4)|0;
    $246 = $245;
    HEAP8[$246>>0]=$203&255;HEAP8[$246+1>>0]=($203>>8)&255;HEAP8[$246+2>>0]=($203>>16)&255;HEAP8[$246+3>>0]=$203>>24;
    $247 = $196 | 4;
    $248 = (8424 + ($247)|0);
    $249 = HEAP8[$248>>0]|0;
    $250 = $249&255;
    $251 = (($250) + 4)|0;
    $252 = (16968 + ($247)|0);
    $253 = HEAP8[$252>>0]|0;
    $254 = $253&255;
    $255 = (($254) + 6)|0;
    $256 = HEAP32[$141>>2]|0;
    $257 = ((($256) + ($214<<6)|0) + ($250<<2)|0);
    $258 = $257;
    $259 = $258;
    HEAP8[$259>>0]=$203&255;HEAP8[$259+1>>0]=($203>>8)&255;HEAP8[$259+2>>0]=($203>>16)&255;HEAP8[$259+3>>0]=$203>>24;
    $260 = (($258) + 4)|0;
    $261 = $260;
    HEAP8[$261>>0]=$203&255;HEAP8[$261+1>>0]=($203>>8)&255;HEAP8[$261+2>>0]=($203>>16)&255;HEAP8[$261+3>>0]=$203>>24;
    $262 = $251 & 255;
    $263 = HEAP32[$141>>2]|0;
    $264 = ((($263) + ($214<<6)|0) + ($262<<2)|0);
    $265 = $264;
    $266 = $265;
    HEAP8[$266>>0]=$203&255;HEAP8[$266+1>>0]=($203>>8)&255;HEAP8[$266+2>>0]=($203>>16)&255;HEAP8[$266+3>>0]=$203>>24;
    $267 = (($265) + 4)|0;
    $268 = $267;
    HEAP8[$268>>0]=$203&255;HEAP8[$268+1>>0]=($203>>8)&255;HEAP8[$268+2>>0]=($203>>16)&255;HEAP8[$268+3>>0]=$203>>24;
    $269 = (($pMvdCache) + ($254<<2)|0);
    $270 = $269;
    $271 = $270;
    HEAP8[$271>>0]=$203&255;HEAP8[$271+1>>0]=($203>>8)&255;HEAP8[$271+2>>0]=($203>>16)&255;HEAP8[$271+3>>0]=$203>>24;
    $272 = (($270) + 4)|0;
    $273 = $272;
    HEAP8[$273>>0]=$203&255;HEAP8[$273+1>>0]=($203>>8)&255;HEAP8[$273+2>>0]=($203>>16)&255;HEAP8[$273+3>>0]=$203>>24;
    $274 = $255 & 255;
    $275 = (($pMvdCache) + ($274<<2)|0);
    $276 = $275;
    $277 = $276;
    HEAP8[$277>>0]=$203&255;HEAP8[$277+1>>0]=($203>>8)&255;HEAP8[$277+2>>0]=($203>>16)&255;HEAP8[$277+3>>0]=$203>>24;
    $278 = (($276) + 4)|0;
    $279 = $278;
    HEAP8[$279>>0]=$203&255;HEAP8[$279+1>>0]=($203>>8)&255;HEAP8[$279+2>>0]=($203>>16)&255;HEAP8[$279+3>>0]=$203>>24;
    $280 = (($i$131) + 1)|0;
    $281 = ($280|0)<(2);
    if ($281) {
     $i$131 = $280;
    } else {
     $$0 = 0;
     label = 88;
     break;
    }
   }
   if ((label|0) == 88) {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 88) {
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($pCtx,$pNeighAvail,$nzc,$ref_idx,$iListIdx,$iZOrderIdx,$iActiveRefNum,$b8mode,$iRefIdxVal) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $nzc = $nzc|0;
 $ref_idx = $ref_idx|0;
 $iListIdx = $iListIdx|0;
 $iZOrderIdx = $iZOrderIdx|0;
 $iActiveRefNum = $iActiveRefNum|0;
 $b8mode = $b8mode|0;
 $iRefIdxVal = $iRefIdxVal|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $iIdxA$0 = 0, $iIdxB$0 = 0, $phitmp = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 $0 = ($iActiveRefNum|0)==(1);
 if ($0) {
  HEAP8[$iRefIdxVal>>0] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pCtx) + 241932|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4040|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 3932|0);
 $6 = HEAP32[$5>>2]|0;
 do {
  if ((($iZOrderIdx|0) == 0)) {
   $7 = HEAP32[$pNeighAvail>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    $19 = 0;
   } else {
    $9 = (($pNeighAvail) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(512);
    if ($11) {
     $19 = 0;
    } else {
     $12 = HEAP8[16968>>0]|0;
     $13 = $12&255;
     $14 = (($13) + -6)|0;
     $15 = ((($ref_idx) + (($iListIdx*30)|0)|0) + ($14)|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)>(0);
     $19 = $17;
    }
   }
   $18 = $19&1;
   $20 = (($pNeighAvail) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0);
   if ($22) {
    $33 = 0;
   } else {
    $23 = (($pNeighAvail) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(512);
    if ($25) {
     $33 = 0;
    } else {
     $26 = HEAP8[16968>>0]|0;
     $27 = $26&255;
     $28 = (($27) + -1)|0;
     $29 = ((($ref_idx) + (($iListIdx*30)|0)|0) + ($28)|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)>(0);
     $33 = $31;
    }
   }
   $32 = $33&1;
   $iIdxA$0 = $32;$iIdxB$0 = $18;
  } else if ((($iZOrderIdx|0) == 4)) {
   $34 = HEAP32[$pNeighAvail>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $46 = 0;
   } else {
    $36 = (($pNeighAvail) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(512);
    if ($38) {
     $46 = 0;
    } else {
     $39 = HEAP8[((16968 + 4|0))>>0]|0;
     $40 = $39&255;
     $41 = (($40) + -6)|0;
     $42 = ((($ref_idx) + (($iListIdx*30)|0)|0) + ($41)|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)>(0);
     $46 = $44;
    }
   }
   $45 = $46&1;
   $47 = HEAP8[((8424 + 4|0))>>0]|0;
   $48 = $47&255;
   $49 = (($48) + -1)|0;
   $50 = ((($6) + ($4<<4)|0) + ($49)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = ($51<<24>>24)>(0);
   $53 = $52&1;
   $iIdxA$0 = $53;$iIdxB$0 = $45;
  } else {
   $54 = ($iZOrderIdx|0)==(8);
   $55 = (8424 + ($iZOrderIdx)|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = (($57) + -4)|0;
   $59 = ((($6) + ($4<<4)|0) + ($58)|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = ($60<<24>>24)>(0);
   $62 = $61&1;
   if (!($54)) {
    $77 = (($57) + -1)|0;
    $78 = ((($6) + ($4<<4)|0) + ($77)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = ($79<<24>>24)>(0);
    $81 = $80&1;
    $iIdxA$0 = $81;$iIdxB$0 = $62;
    break;
   }
   $63 = (($pNeighAvail) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(0);
   if ($65) {
    $76 = 0;
   } else {
    $66 = (($pNeighAvail) + 16|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)==(512);
    if ($68) {
     $76 = 0;
    } else {
     $69 = HEAP8[((16968 + 8|0))>>0]|0;
     $70 = $69&255;
     $71 = (($70) + -1)|0;
     $72 = ((($ref_idx) + (($iListIdx*30)|0)|0) + ($71)|0);
     $73 = HEAP8[$72>>0]|0;
     $74 = ($73<<24>>24)>(0);
     $76 = $74;
    }
   }
   $75 = $76&1;
   $iIdxA$0 = $75;$iIdxB$0 = $62;
  }
 } while(0);
 $82 = $iIdxB$0 << 1;
 $83 = $iIdxA$0 | $82;
 $84 = (($pCtx) + 512232|0);
 $85 = HEAP32[$84>>2]|0;
 $$sum = (($83) + 54)|0;
 $86 = ((($pCtx) + ($$sum<<1)|0) + 511309|0);
 $87 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($85,$86,$uiCode)|0);
 $88 = ($87|0)==(0);
 if (!($88)) {
  $$0 = $87;
  STACKTOP = sp;return ($$0|0);
 }
 $89 = HEAP32[$uiCode>>2]|0;
 $90 = ($89|0)==(0);
 do {
  if ($90) {
   $97 = 0;
  } else {
   $91 = HEAP32[$84>>2]|0;
   $92 = (($pCtx) + 511425|0);
   $93 = (__ZN7WelsDec19DecodeUnaryBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEiRj($91,$92,1,$uiCode)|0);
   $94 = ($93|0)==(0);
   if ($94) {
    $95 = HEAP32[$uiCode>>2]|0;
    $96 = (($95) + 1)|0;
    HEAP32[$uiCode>>2] = $96;
    $phitmp = $96&255;
    $97 = $phitmp;
    break;
   } else {
    $$0 = $93;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP8[$iRefIdxVal>>0] = $97;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($pCtx,$pNeighAvail,$pRefIndex,$pMvdCache,$index,$iListIdx,$iMvComp,$iMvdVal) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $pRefIndex = $pRefIndex|0;
 $pMvdCache = $pMvdCache|0;
 $index = $index|0;
 $iListIdx = $iListIdx|0;
 $iMvComp = $iMvComp|0;
 $iMvdVal = $iMvdVal|0;
 var $$ = 0, $$0 = 0, $$neg = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iCtxInc$0 = 0, $iIdxA$0 = 0;
 var $iIdxA$1 = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 $0 = $iMvComp << 24 >> 24;
 $1 = ($0*7)|0;
 $$sum = (($1) + 40)|0;
 HEAP16[$iMvdVal>>1] = 0;
 $2 = (16968 + ($index)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + -6)|0;
 $6 = $iListIdx << 24 >> 24;
 $7 = ((($pRefIndex) + (($6*30)|0)|0) + ($5)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)>(-1);
 if ($9) {
  $10 = (((($pMvdCache) + (($6*120)|0)|0) + ($5<<2)|0) + ($0<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = $12 >> 31;
  $14 = $13 ^ $12;
  $15 = (($14) - ($13))|0;
  $iIdxA$0 = $15;
 } else {
  $iIdxA$0 = 0;
 }
 $16 = (($4) + -1)|0;
 $17 = ((($pRefIndex) + (($6*30)|0)|0) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)>(-1);
 if ($19) {
  $20 = (((($pMvdCache) + (($6*120)|0)|0) + ($16<<2)|0) + ($0<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = $22 >> 31;
  $24 = $23 ^ $22;
  $$neg = $22 >>> 31;
  $25 = (($$neg) + ($iIdxA$0))|0;
  $26 = (($25) + ($24))|0;
  $iIdxA$1 = $26;
 } else {
  $iIdxA$1 = $iIdxA$0;
 }
 $27 = ($iIdxA$1|0)<(3);
 if ($27) {
  $iCtxInc$0 = 0;
 } else {
  $28 = ($iIdxA$1|0)>(32);
  $$ = $28 ? 2 : 1;
  $iCtxInc$0 = $$;
 }
 $29 = (($pCtx) + 512232|0);
 $30 = HEAP32[$29>>2]|0;
 $$sum1 = (($$sum) + ($iCtxInc$0))|0;
 $31 = ((($pCtx) + ($$sum1<<1)|0) + 511309|0);
 $32 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($30,$31,$uiCode)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = HEAP32[$uiCode>>2]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  HEAP16[$iMvdVal>>1] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = HEAP32[$29>>2]|0;
 $$sum2 = (($1) + 43)|0;
 $37 = ((($pCtx) + ($$sum2<<1)|0) + 511309|0);
 $38 = (__ZN7WelsDec16DecodeUEGMvCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEjRj($36,$37,3,$uiCode)|0);
 $39 = ($38|0)==(0);
 if (!($39)) {
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = HEAP32[$uiCode>>2]|0;
 $41 = (($40) + 1)|0;
 $42 = $41&65535;
 HEAP16[$iMvdVal>>1] = $42;
 $43 = HEAP32[$29>>2]|0;
 $44 = (__ZN7WelsDec17DecodeBypassCabacEPNS_19SWelsCabacDecEngineERj($43,$uiCode)|0);
 $45 = ($44|0)==(0);
 if (!($45)) {
  $$0 = $44;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = HEAP32[$uiCode>>2]|0;
 $47 = ($46|0)==(0);
 if ($47) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $48 = HEAP16[$iMvdVal>>1]|0;
 $49 = $48&65535;
 $50 = (0 - ($49))|0;
 $51 = $50&65535;
 HEAP16[$iMvdVal>>1] = $51;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec17ParseCbpInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($pCtx,$pNeighAvail,$uiCbp) {
 $pCtx = $pCtx|0;
 $pNeighAvail = $pNeighAvail|0;
 $uiCbp = $uiCbp|0;
 var $$0 = 0, $$lobit = 0, $$lobit14 = 0, $$mask = 0, $$mask6 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $pCbpBit = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $pCbpBit = sp;
 HEAP32[$uiCbp>>2] = 0;
 $0 = HEAP32[$pNeighAvail>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $13 = 0;$30 = 0;
 } else {
  $2 = (($pNeighAvail) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(512);
  if ($4) {
   $13 = 0;$30 = 0;
  } else {
   $5 = (($pNeighAvail) + 32|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6&255) >>> 2;
   $$lobit = $7 & 1;
   $8 = $$lobit ^ 1;
   $9 = $8&255;
   $10 = $6 & 8;
   $11 = ($10<<24>>24)==(0);
   $phitmp = $9 << 1;
   $13 = $11;$30 = $phitmp;
  }
 }
 $12 = $13&1;
 $14 = (($pNeighAvail) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $28 = 0;$31 = 0;
 } else {
  $17 = (($pNeighAvail) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(512);
  if ($19) {
   $28 = 0;$31 = 0;
  } else {
   $20 = (($pNeighAvail) + 33|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21&255) >>> 1;
   $$lobit14 = $22 & 1;
   $23 = $$lobit14 ^ 1;
   $24 = $23&255;
   $25 = $21 & 8;
   $26 = ($25<<24>>24)==(0);
   $28 = $26;$31 = $24;
  }
 }
 $27 = $28&1;
 $29 = $31 | $30;
 $32 = (($pCtx) + 512232|0);
 $33 = HEAP32[$32>>2]|0;
 $$sum = (($29) + 73)|0;
 $34 = ((($pCtx) + ($$sum<<1)|0) + 511309|0);
 $35 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($33,$34,$pCbpBit)|0);
 $36 = ($35|0)==(0);
 if (!($36)) {
  $$0 = $35;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = HEAP32[$pCbpBit>>2]|0;
 $38 = ($37|0)==(0);
 if (!($38)) {
  $39 = HEAP32[$uiCbp>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$uiCbp>>2] = $40;
 }
 $41 = $38&1;
 $42 = $12 << 1;
 $43 = $41 | $42;
 $44 = HEAP32[$32>>2]|0;
 $$sum1 = (($43) + 73)|0;
 $45 = ((($pCtx) + ($$sum1<<1)|0) + 511309|0);
 $46 = (($pCbpBit) + 4|0);
 $47 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($44,$45,$46)|0);
 $48 = ($47|0)==(0);
 if (!($48)) {
  $$0 = $47;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = HEAP32[$46>>2]|0;
 $50 = ($49|0)==(0);
 if (!($50)) {
  $51 = HEAP32[$uiCbp>>2]|0;
  $52 = (($51) + 2)|0;
  HEAP32[$uiCbp>>2] = $52;
 }
 $53 = HEAP32[$pCbpBit>>2]|0;
 $54 = ($53|0)==(0);
 $55 = $54&1;
 $56 = $55 << 1;
 $57 = $56 | $27;
 $58 = HEAP32[$32>>2]|0;
 $$sum2 = (($57) + 73)|0;
 $59 = ((($pCtx) + ($$sum2<<1)|0) + 511309|0);
 $60 = (($pCbpBit) + 8|0);
 $61 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($58,$59,$60)|0);
 $62 = ($61|0)==(0);
 if (!($62)) {
  $$0 = $61;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = HEAP32[$60>>2]|0;
 $64 = ($63|0)==(0);
 if (!($64)) {
  $65 = HEAP32[$uiCbp>>2]|0;
  $66 = (($65) + 4)|0;
  HEAP32[$uiCbp>>2] = $66;
 }
 $67 = HEAP32[$46>>2]|0;
 $68 = ($67|0)==(0);
 $69 = $68&1;
 $70 = $64&1;
 $71 = $69 << 1;
 $72 = $70 | $71;
 $73 = HEAP32[$32>>2]|0;
 $$sum3 = (($72) + 73)|0;
 $74 = ((($pCtx) + ($$sum3<<1)|0) + 511309|0);
 $75 = (($pCbpBit) + 12|0);
 $76 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($73,$74,$75)|0);
 $77 = ($76|0)==(0);
 if (!($77)) {
  $$0 = $76;
  STACKTOP = sp;return ($$0|0);
 }
 $78 = HEAP32[$75>>2]|0;
 $79 = ($78|0)==(0);
 if (!($79)) {
  $80 = HEAP32[$uiCbp>>2]|0;
  $81 = (($80) + 8)|0;
  HEAP32[$uiCbp>>2] = $81;
 }
 $82 = (($pCtx) + 241924|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + 318|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $87 = HEAP32[$pNeighAvail>>2]|0;
 $88 = ($87|0)==(0);
 if ($88) {
  $96 = 0;
 } else {
  $89 = (($pNeighAvail) + 20|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(512);
  if ($91) {
   $96 = 1;
  } else {
   $92 = (($pNeighAvail) + 32|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = ($93&255)>(15);
   $96 = $94;
  }
 }
 $95 = $96&1;
 $97 = HEAP32[$14>>2]|0;
 $98 = ($97|0)==(0);
 if ($98) {
  $106 = 0;
 } else {
  $99 = (($pNeighAvail) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)==(512);
  if ($101) {
   $106 = 1;
  } else {
   $102 = (($pNeighAvail) + 33|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = ($103&255)>(15);
   $106 = $104;
  }
 }
 $105 = $106&1;
 $107 = $95 << 1;
 $108 = $105 | $107;
 $109 = HEAP32[$32>>2]|0;
 $$sum4 = (($108) + 77)|0;
 $110 = ((($pCtx) + ($$sum4<<1)|0) + 511309|0);
 $111 = (($pCbpBit) + 16|0);
 $112 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($109,$110,$111)|0);
 $113 = ($112|0)==(0);
 if (!($113)) {
  $$0 = $112;
  STACKTOP = sp;return ($$0|0);
 }
 $114 = HEAP32[$111>>2]|0;
 $115 = ($114|0)==(0);
 if ($115) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $116 = HEAP32[$pNeighAvail>>2]|0;
 $117 = ($116|0)==(0);
 if ($117) {
  $126 = 0;
 } else {
  $118 = (($pNeighAvail) + 20|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==(512);
  if ($120) {
   $126 = 1;
  } else {
   $121 = (($pNeighAvail) + 32|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122 << 24 >> 24;
   $$mask6 = $123 & -16;
   $124 = ($$mask6|0)==(32);
   $126 = $124;
  }
 }
 $125 = $126&1;
 $127 = HEAP32[$14>>2]|0;
 $128 = ($127|0)==(0);
 if ($128) {
  $137 = 0;
 } else {
  $129 = (($pNeighAvail) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($130|0)==(512);
  if ($131) {
   $137 = 1;
  } else {
   $132 = (($pNeighAvail) + 33|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133 << 24 >> 24;
   $$mask = $134 & -16;
   $135 = ($$mask|0)==(32);
   $137 = $135;
  }
 }
 $136 = $137&1;
 $138 = $125 << 1;
 $139 = $136 | $138;
 $140 = HEAP32[$32>>2]|0;
 $$sum5 = (($139) + 81)|0;
 $141 = ((($pCtx) + ($$sum5<<1)|0) + 511309|0);
 $142 = (($pCbpBit) + 20|0);
 $143 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($140,$141,$142)|0);
 $144 = ($143|0)==(0);
 if (!($144)) {
  $$0 = $143;
  STACKTOP = sp;return ($$0|0);
 }
 $145 = HEAP32[$142>>2]|0;
 $146 = (($145) + 4)|0;
 $147 = 1 << $146;
 $148 = HEAP32[$uiCbp>>2]|0;
 $149 = (($147) + ($148))|0;
 HEAP32[$uiCbp>>2] = $149;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec17ParseDeltaQpCabacEPNS_21TagWelsDecoderContextERi($pCtx,$iQpDelta) {
 $pCtx = $pCtx|0;
 $iQpDelta = $iQpDelta|0;
 var $$0 = 0, $$pre = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iQpDelta>>2] = 0;
 $2 = (($1) + 3884|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 $5 = $4&1;
 $6 = (($pCtx) + 512232|0);
 $7 = HEAP32[$6>>2]|0;
 $$sum1 = $5 | 60;
 $8 = ((($pCtx) + ($$sum1<<1)|0) + 511309|0);
 $9 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($7,$8,$uiCode)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$uiCode>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $$pre = HEAP32[$iQpDelta>>2]|0;
  $24 = $$pre;
 } else {
  $13 = HEAP32[$6>>2]|0;
  $14 = (($pCtx) + 511433|0);
  $15 = (__ZN7WelsDec19DecodeUnaryBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEiRj($13,$14,1,$uiCode)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $$0 = $15;
   STACKTOP = sp;return ($$0|0);
  }
  $17 = HEAP32[$uiCode>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$uiCode>>2] = $18;
  $19 = (($17) + 2)|0;
  $20 = $19 >>> 1;
  HEAP32[$iQpDelta>>2] = $20;
  $21 = $18 & 1;
  $22 = ($21|0)==(0);
  if ($22) {
   $23 = (0 - ($20))|0;
   HEAP32[$iQpDelta>>2] = $23;
   $24 = $23;
  } else {
   $24 = $20;
  }
 }
 HEAP32[$2>>2] = $24;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec17ParseCbfInfoCabacEPNS_16TagNeighborAvailEPhiiPNS_21TagWelsDecoderContextERj($pNeighAvail,$pNzcCache,$iZIndex,$iResProperty,$pCtx,$uiCbfBit) {
 $pNeighAvail = $pNeighAvail|0;
 $pNzcCache = $pNzcCache|0;
 $iZIndex = $iZIndex|0;
 $iResProperty = $iResProperty|0;
 $pCtx = $pCtx|0;
 $uiCbfBit = $uiCbfBit|0;
 var $$ = 0, $$0 = 0, $$10 = 0, $$sum = 0, $$sum4 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $nA$0 = 0, $nA$1 = 0, $nB$0 = 0, $nB$1 = 0, $phitmp = 0, $phitmp5 = 0, $phitmp8 = 0, $phitmp9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4040|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4044|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 $7 = (($3) + -1)|0;
 $8 = (($1) + 3960|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($1) + 3908|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$uiCbfBit>>2] = 0;
 $12 = (($11) + ($3<<1)|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 & 519;
 $15 = ($14<<16>>16)!=(0);
 $16 = $15&1;
 if ((($iResProperty|0) == 1) | (($iResProperty|0) == 7) | (($iResProperty|0) == 8)) {
  $17 = HEAP32[$pNeighAvail>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $nB$0 = $16;
  } else {
   $19 = (($11) + ($6<<1)|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = ($20<<16>>16)==(512);
   if ($21) {
    $nB$0 = 1;
   } else {
    $22 = (($9) + ($6<<1)|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23&65535;
    $25 = 1 << $iResProperty;
    $26 = $24 & $25;
    $27 = ($26|0)!=(0);
    $phitmp9 = $27&1;
    $nB$0 = $phitmp9;
   }
  }
  $28 = (($pNeighAvail) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   $nA$0 = $16;
  } else {
   $31 = (($11) + ($7<<1)|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = ($32<<16>>16)==(512);
   if ($33) {
    $nA$0 = 1;
   } else {
    $34 = (($9) + ($7<<1)|0);
    $35 = HEAP16[$34>>1]|0;
    $36 = $35&65535;
    $37 = 1 << $iResProperty;
    $38 = $36 & $37;
    $39 = ($38|0)!=(0);
    $phitmp8 = $39&1;
    $nA$0 = $phitmp8;
   }
  }
  $40 = $nA$0&255;
  $41 = $nB$0&255;
  $42 = $41 << 1;
  $43 = $40 | $42;
  $44 = (($pCtx) + 512232|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (15000 + ($iResProperty<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $$sum6 = (($43) + 85)|0;
  $$sum7 = (($$sum6) + ($48))|0;
  $49 = ((($pCtx) + ($$sum7<<1)|0) + 511309|0);
  $50 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($45,$49,$uiCbfBit)|0);
  $51 = ($50|0)==(0);
  if (!($51)) {
   $$0 = $50;
   STACKTOP = sp;return ($$0|0);
  }
  $52 = HEAP32[$uiCbfBit>>2]|0;
  $53 = ($52|0)==(0);
  if (!($53)) {
   $54 = 1 << $iResProperty;
   $55 = (($9) + ($3<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56&65535;
   $58 = $57 | $54;
   $59 = $58&65535;
   HEAP16[$55>>1] = $59;
  }
 } else {
  $60 = (8440 + ($iZIndex)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (($62) + -8)|0;
  $64 = (($pNzcCache) + ($63)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = ($65<<24>>24)==(-1);
  if ($66) {
   $nB$1 = $16;
  } else {
   $67 = ($65<<24>>24)==(0);
   if ($67) {
    $68 = 13434828 >>> $iZIndex;
    $69 = $68 & 1;
    $70 = ($69|0)==(0);
    $$ = $70 ? $6 : $3;
    $71 = (($11) + ($$<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = ($72<<16>>16)==(512);
    $phitmp5 = $73&1;
    $nB$1 = $phitmp5;
   } else {
    $nB$1 = 1;
   }
  }
  $74 = (($62) + -1)|0;
  $75 = (($pNzcCache) + ($74)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = ($76<<24>>24)==(-1);
  if ($77) {
   $nA$1 = $16;
  } else {
   $78 = ($76<<24>>24)==(0);
   if ($78) {
    $79 = 11205370 >>> $iZIndex;
    $80 = $79 & 1;
    $81 = ($80|0)==(0);
    $$10 = $81 ? $7 : $3;
    $82 = (($11) + ($$10<<1)|0);
    $83 = HEAP16[$82>>1]|0;
    $84 = ($83<<16>>16)==(512);
    $phitmp = $84&1;
    $nA$1 = $phitmp;
   } else {
    $nA$1 = 1;
   }
  }
  $85 = $nA$1&255;
  $86 = $nB$1&255;
  $87 = $86 << 1;
  $88 = $85 | $87;
  $89 = (($pCtx) + 512232|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (15000 + ($iResProperty<<1)|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92 << 16 >> 16;
  $$sum = (($88) + 85)|0;
  $$sum4 = (($$sum) + ($93))|0;
  $94 = ((($pCtx) + ($$sum4<<1)|0) + 511309|0);
  $95 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($90,$94,$uiCbfBit)|0);
  $96 = ($95|0)==(0);
  if (!($96)) {
   $$0 = $95;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec24ParseSignificantMapCabacEPiiPNS_21TagWelsDecoderContextERj($pSignificantMap,$iResProperty,$pCtx,$uiCoeffNum) {
 $pSignificantMap = $pSignificantMap|0;
 $iResProperty = $iResProperty|0;
 $pCtx = $pCtx|0;
 $uiCoeffNum = $uiCoeffNum|0;
 var $$0 = 0, $$01$lcssa = 0, $$0111 = 0, $$0111$us = 0, $$lcssa = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $$sum3$us = 0, $$sum4 = 0, $$sum4$us = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa6 = 0, $i$09 = 0, $i$09$us = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 $0 = ($iResProperty|0)==(6);
 $1 = $0 ? 402 : 105;
 $2 = (15024 + ($iResProperty<<1)|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $$sum = (($4) + ($1))|0;
 $5 = $0 ? 417 : 166;
 $6 = (15024 + ($iResProperty<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $$sum2 = (($8) + ($5))|0;
 HEAP32[$uiCoeffNum>>2] = 0;
 $9 = (15048 + ($iResProperty<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ($iResProperty|0)==(0);
 L1: do {
  if ($12) {
   $$01$lcssa = $pSignificantMap;
  } else {
   $13 = (($pCtx) + 512232|0);
   L3: do {
    if ($0) {
     $$0111$us = $pSignificantMap;$i$09$us = 0;
     while(1) {
      $14 = (15072 + ($i$09$us)|0);
      $15 = HEAP8[$14>>0]|0;
      $16 = $15&255;
      $17 = HEAP32[$13>>2]|0;
      $$sum3$us = (($$sum) + ($16))|0;
      $18 = ((($pCtx) + ($$sum3$us<<1)|0) + 511309|0);
      $19 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($17,$18,$uiCode)|0);
      $20 = ($19|0)==(0);
      if (!($20)) {
       $$0 = $19;
       label = 17;
       break;
      }
      $21 = HEAP32[$uiCode>>2]|0;
      $22 = ($21|0)==(0);
      $23 = (($$0111$us) + 4|0);
      if ($22) {
       HEAP32[$$0111$us>>2] = 0;
      } else {
       HEAP32[$$0111$us>>2] = 1;
       $24 = HEAP32[$uiCoeffNum>>2]|0;
       $25 = (($24) + 1)|0;
       HEAP32[$uiCoeffNum>>2] = $25;
       $26 = (15136 + ($i$09$us)|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = $27&255;
       $29 = HEAP32[$13>>2]|0;
       $$sum4$us = (($$sum2) + ($28))|0;
       $30 = ((($pCtx) + ($$sum4$us<<1)|0) + 511309|0);
       $31 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($29,$30,$uiCode)|0);
       $32 = ($31|0)==(0);
       if (!($32)) {
        $$0 = $31;
        label = 17;
        break;
       }
       $33 = HEAP32[$uiCode>>2]|0;
       $34 = ($33|0)==(0);
       if (!($34)) {
        $$lcssa = $23;$i$0$lcssa6 = $i$09$us;
        break L3;
       }
      }
      $35 = (($i$09$us) + 1)|0;
      $36 = ($11|0)>($35|0);
      if ($36) {
       $$0111$us = $23;$i$09$us = $35;
      } else {
       $$01$lcssa = $23;
       break L1;
      }
     }
     if ((label|0) == 17) {
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     $$0111 = $pSignificantMap;$i$09 = 0;
     while(1) {
      $37 = HEAP32[$13>>2]|0;
      $$sum3 = (($$sum) + ($i$09))|0;
      $38 = ((($pCtx) + ($$sum3<<1)|0) + 511309|0);
      $39 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($37,$38,$uiCode)|0);
      $40 = ($39|0)==(0);
      if (!($40)) {
       $$0 = $39;
       label = 17;
       break;
      }
      $41 = HEAP32[$uiCode>>2]|0;
      $42 = ($41|0)==(0);
      $43 = (($$0111) + 4|0);
      if ($42) {
       HEAP32[$$0111>>2] = 0;
      } else {
       HEAP32[$$0111>>2] = 1;
       $44 = HEAP32[$uiCoeffNum>>2]|0;
       $45 = (($44) + 1)|0;
       HEAP32[$uiCoeffNum>>2] = $45;
       $46 = HEAP32[$13>>2]|0;
       $$sum4 = (($$sum2) + ($i$09))|0;
       $47 = ((($pCtx) + ($$sum4<<1)|0) + 511309|0);
       $48 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($46,$47,$uiCode)|0);
       $49 = ($48|0)==(0);
       if (!($49)) {
        $$0 = $48;
        label = 17;
        break;
       }
       $50 = HEAP32[$uiCode>>2]|0;
       $51 = ($50|0)==(0);
       if (!($51)) {
        $$lcssa = $43;$i$0$lcssa6 = $i$09;
        break L3;
       }
      }
      $54 = (($i$09) + 1)|0;
      $55 = ($11|0)>($54|0);
      if ($55) {
       $$0111 = $43;$i$09 = $54;
      } else {
       $$01$lcssa = $43;
       break L1;
      }
     }
     if ((label|0) == 17) {
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   $52 = (($11) - ($i$0$lcssa6))|0;
   $53 = $52 << 2;
   _memset(($$lcssa|0),0,($53|0))|0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01$lcssa>>2] = 1;
 $56 = HEAP32[$uiCoeffNum>>2]|0;
 $57 = (($56) + 1)|0;
 HEAP32[$uiCoeffNum>>2] = $57;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec26ParseSignificantCoeffCabacEPiiPNS_21TagWelsDecoderContextE($pSignificant,$iResProperty,$pCtx) {
 $pSignificant = $pSignificant|0;
 $iResProperty = $iResProperty|0;
 $pCtx = $pCtx|0;
 var $$ = 0, $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c1$04 = 0, $c1$1 = 0, $c1$2 = 0;
 var $c2$05 = 0, $c2$1 = 0, $c2$2 = 0, $i$07 = 0, $pCoff$06 = 0, $uiCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $uiCode = sp;
 $0 = ($iResProperty|0)==(6);
 $1 = $0 ? 426 : 227;
 $2 = (15200 + ($iResProperty<<1)|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $$sum = (($4) + ($1))|0;
 $5 = $0 ? 431 : 232;
 $6 = (15200 + ($iResProperty<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $$sum1 = (($8) + ($5))|0;
 $9 = (15048 + ($iResProperty<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($pCtx) + 512232|0);
 $13 = ($iResProperty|0)==(0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (15224 + ($iResProperty<<1)|0);
 $15 = (($pSignificant) + ($11<<2)|0);
 $16 = HEAP16[$14>>1]|0;
 $17 = $16 << 16 >> 16;
 $c1$04 = 1;$c2$05 = 0;$i$07 = $11;$pCoff$06 = $15;
 while(1) {
  $18 = HEAP32[$pCoff$06>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $c1$2 = $c1$04;$c2$2 = $c2$05;
  } else {
   $20 = HEAP32[$12>>2]|0;
   $$sum2 = (($$sum) + ($c1$04))|0;
   $21 = ((($pCtx) + ($$sum2<<1)|0) + 511309|0);
   $22 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($20,$21,$uiCode)|0);
   $23 = ($22|0)==(0);
   if (!($23)) {
    $$0 = $22;
    label = 14;
    break;
   }
   $24 = HEAP32[$uiCode>>2]|0;
   $25 = HEAP32[$pCoff$06>>2]|0;
   $26 = (($25) + ($24))|0;
   HEAP32[$pCoff$06>>2] = $26;
   $27 = ($26|0)==(2);
   if ($27) {
    $28 = HEAP32[$12>>2]|0;
    $$sum3 = (($$sum1) + ($c2$05))|0;
    $29 = ((($pCtx) + ($$sum3<<1)|0) + 511309|0);
    $30 = (__ZN7WelsDec19DecodeUEGLevelCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($28,$29,$uiCode)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     $$0 = $30;
     label = 14;
     break;
    }
    $32 = HEAP32[$uiCode>>2]|0;
    $33 = HEAP32[$pCoff$06>>2]|0;
    $34 = (($33) + ($32))|0;
    HEAP32[$pCoff$06>>2] = $34;
    $35 = (($c2$05) + 1)|0;
    $36 = ($35|0)<($17|0);
    $$ = $36 ? $35 : $17;
    $c1$1 = 0;$c2$1 = $$;
   } else {
    $37 = ($c1$04|0)==(0);
    if ($37) {
     $c1$1 = 0;$c2$1 = $c2$05;
    } else {
     $38 = (($c1$04) + 1)|0;
     $39 = ($38|0)<(4);
     $40 = $39 ? $38 : 4;
     $c1$1 = $40;$c2$1 = $c2$05;
    }
   }
   $41 = HEAP32[$12>>2]|0;
   $42 = (__ZN7WelsDec17DecodeBypassCabacEPNS_19SWelsCabacDecEngineERj($41,$uiCode)|0);
   $43 = ($42|0)==(0);
   if (!($43)) {
    $$0 = $42;
    label = 14;
    break;
   }
   $44 = HEAP32[$uiCode>>2]|0;
   $45 = ($44|0)==(0);
   if ($45) {
    $c1$2 = $c1$1;$c2$2 = $c2$1;
   } else {
    $46 = HEAP32[$pCoff$06>>2]|0;
    $47 = (0 - ($46))|0;
    HEAP32[$pCoff$06>>2] = $47;
    $c1$2 = $c1$1;$c2$2 = $c2$1;
   }
  }
  $48 = (($pCoff$06) + -4|0);
  $49 = (($i$07) + -1)|0;
  $50 = ($i$07|0)>(0);
  if ($50) {
   $c1$04 = $c1$2;$c2$05 = $c2$2;$i$07 = $49;$pCoff$06 = $48;
  } else {
   $$0 = 0;
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($pNeighAvail,$pNonZeroCountCache,$pBsAux,$iIndex,$iMaxNumCoeff,$pScanTable,$iResProperty,$sTCoeff,$uiQp,$pCtx) {
 $pNeighAvail = $pNeighAvail|0;
 $pNonZeroCountCache = $pNonZeroCountCache|0;
 $pBsAux = $pBsAux|0;
 $iIndex = $iIndex|0;
 $iMaxNumCoeff = $iMaxNumCoeff|0;
 $pScanTable = $pScanTable|0;
 $iResProperty = $iResProperty|0;
 $sTCoeff = $sTCoeff|0;
 $uiQp = $uiQp|0;
 $pCtx = $pCtx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $div = 0, $exitcond = 0, $j$0 = 0, $or$cond = 0, $pSignificantMap = 0, $uiTotalCoeffNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $uiTotalCoeffNum = sp + 256|0;
 $pSignificantMap = sp;
 HEAP32[$uiTotalCoeffNum>>2] = 0;
 _memset(($pSignificantMap|0),0,256)|0;
 do {
  switch ($iResProperty|0) {
  case 17:  {
   $5 = 0;$9 = 6;
   break;
  }
  case 12:  {
   $5 = -3;$9 = 3;
   break;
  }
  case 14:  {
   $5 = -1;$9 = 8;
   break;
  }
  case 10:  {
   $5 = -4;$9 = $iResProperty;
   break;
  }
  case 18:  {
   $5 = 1;$9 = 6;
   break;
  }
  case 9:  {
   $5 = -5;$9 = $iResProperty;
   break;
  }
  case 16:  {
   $5 = -1;$9 = 10;
   break;
  }
  case 13:  {
   $5 = -2;$9 = 7;
   break;
  }
  case 11:  {
   $5 = -6;$9 = 3;
   break;
  }
  case 15:  {
   $5 = -2;$9 = 9;
   break;
  }
  case 7:  {
   $5 = -5;$9 = $iResProperty;
   break;
  }
  case 8:  {
   $5 = -4;$9 = $iResProperty;
   break;
  }
  default: {
   $5 = -6;$9 = $iResProperty;
  }
  }
 } while(0);
 $0 = (($pCtx) + 562526|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = $uiQp&255;
 if ($2) {
  $8 = (18288 + ($3<<7)|0);
  $50 = $8;
 } else {
  $4 = ((($pCtx) + ($5<<2)|0) + 562496|0);
  $6 = HEAP32[$4>>2]|0;
  $7 = (($6) + ($3<<7)|0);
  $50 = $7;
 }
 $10 = (__ZN7WelsDec24ParseSignificantMapCabacEPiiPNS_21TagWelsDecoderContextERj($pSignificantMap,$9,$pCtx,$uiTotalCoeffNum)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (__ZN7WelsDec26ParseSignificantCoeffCabacEPiiPNS_21TagWelsDecoderContextE($pSignificantMap,$9,$pCtx)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$uiTotalCoeffNum>>2]|0;
 $15 = $14&255;
 $16 = (($iIndex) + 3)|0;
 $17 = (8440 + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = (($pNonZeroCountCache) + ($19)|0);
 HEAP8[$20>>0] = $15;
 $21 = (($iIndex) + 2)|0;
 $22 = (8440 + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($pNonZeroCountCache) + ($24)|0);
 HEAP8[$25>>0] = $15;
 $26 = (($iIndex) + 1)|0;
 $27 = (8440 + ($26)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (($pNonZeroCountCache) + ($29)|0);
 HEAP8[$30>>0] = $15;
 $31 = (8440 + ($iIndex)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = (($pNonZeroCountCache) + ($33)|0);
 HEAP8[$34>>0] = $15;
 $35 = ($14|0)!=(0);
 $36 = ($9|0)==(6);
 $or$cond = $35 & $36;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = ($uiQp&255)>(35);
 $div = (($uiQp&255) / 6)&-1;
 $38 = $div&255;
 $39 = (($38) + -6)|0;
 $40 = (5 - ($38))|0;
 $41 = 1 << $40;
 $42 = (6 - ($38))|0;
 $j$0 = 0;
 while(1) {
  $43 = (($pSignificantMap) + ($j$0<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0);
  if (!($45)) {
   $46 = (($pScanTable) + ($j$0)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = (($50) + ($48<<1)|0);
   $51 = HEAP16[$49>>1]|0;
   $52 = $51&65535;
   $53 = Math_imul($52, $44)|0;
   if ($37) {
    $54 = $53 << $39;
    $58 = $54;
   } else {
    $55 = (($41) + ($53))|0;
    $56 = $55 >> $42;
    $58 = $56;
   }
   $57 = $58&65535;
   $59 = (($sTCoeff) + ($48<<1)|0);
   HEAP16[$59>>1] = $57;
  }
  $60 = (($j$0) + 1)|0;
  $exitcond = ($60|0)==(64);
  if ($exitcond) {
   $$0 = 0;
   break;
  } else {
   $j$0 = $60;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($pNeighAvail,$pNonZeroCountCache,$pBsAux,$iIndex,$iMaxNumCoeff,$pScanTable,$iResProperty,$sTCoeff,$uiQp,$pCtx) {
 $pNeighAvail = $pNeighAvail|0;
 $pNonZeroCountCache = $pNonZeroCountCache|0;
 $pBsAux = $pBsAux|0;
 $iIndex = $iIndex|0;
 $iMaxNumCoeff = $iMaxNumCoeff|0;
 $pScanTable = $pScanTable|0;
 $iResProperty = $iResProperty|0;
 $sTCoeff = $sTCoeff|0;
 $uiQp = $uiQp|0;
 $pCtx = $pCtx|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0;
 var $exitcond7 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $pSignificantMap = 0, $uiCbpBit = 0, $uiTotalCoeffNum = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $uiTotalCoeffNum = sp + 68|0;
 $uiCbpBit = sp + 64|0;
 $pSignificantMap = sp;
 HEAP32[$uiTotalCoeffNum>>2] = 0;
 dest=$pSignificantMap+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 do {
  switch ($iResProperty|0) {
  case 9:  {
   $5 = 1;$9 = $iResProperty;
   break;
  }
  case 18:  {
   $5 = 7;$9 = 6;
   break;
  }
  case 16:  {
   $5 = 5;$9 = 10;
   break;
  }
  case 15:  {
   $5 = 4;$9 = 9;
   break;
  }
  case 10:  {
   $5 = 2;$9 = $iResProperty;
   break;
  }
  case 11:  {
   $5 = 0;$9 = 3;
   break;
  }
  case 7:  {
   $5 = 1;$9 = $iResProperty;
   break;
  }
  case 8:  {
   $5 = 2;$9 = $iResProperty;
   break;
  }
  case 12:  {
   $5 = 3;$9 = 3;
   break;
  }
  case 14:  {
   $5 = 5;$9 = 8;
   break;
  }
  case 17:  {
   $5 = 6;$9 = 6;
   break;
  }
  case 13:  {
   $5 = 4;$9 = 7;
   break;
  }
  default: {
   $5 = 0;$9 = $iResProperty;
  }
  }
 } while(0);
 $0 = (($pCtx) + 562526|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = $uiQp&255;
 if ($2) {
  $8 = (17456 + ($3<<4)|0);
  $42 = $8;
 } else {
  $4 = ((($pCtx) + ($5<<2)|0) + 562472|0);
  $6 = HEAP32[$4>>2]|0;
  $7 = (($6) + ($3<<5)|0);
  $42 = $7;
 }
 $10 = (__ZN7WelsDec17ParseCbfInfoCabacEPNS_16TagNeighborAvailEPhiiPNS_21TagWelsDecoderContextERj($pNeighAvail,$pNonZeroCountCache,$iIndex,$9,$pCtx,$uiCbpBit)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$uiCbpBit>>2]|0;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $22 = 0;
  } else {
   $14 = (__ZN7WelsDec24ParseSignificantMapCabacEPiiPNS_21TagWelsDecoderContextERj($pSignificantMap,$9,$pCtx,$uiTotalCoeffNum)|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    $$0 = $14;
    STACKTOP = sp;return ($$0|0);
   }
   $16 = (__ZN7WelsDec26ParseSignificantCoeffCabacEPiiPNS_21TagWelsDecoderContextE($pSignificantMap,$9,$pCtx)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $$pre = HEAP32[$uiTotalCoeffNum>>2]|0;
    $22 = $$pre;
    break;
   } else {
    $$0 = $16;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $18 = (8440 + ($iIndex)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $22&255;
 $23 = (($pNonZeroCountCache) + ($20)|0);
 HEAP8[$23>>0] = $21;
 $24 = ($22|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = ($9|0)==(1);
 if ($25) {
  $j$0 = 0;
  while(1) {
   $26 = (($pSignificantMap) + ($j$0<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0);
   if (!($28)) {
    $29 = $27&65535;
    $30 = (($pScanTable) + ($j$0)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = (($sTCoeff) + ($32<<1)|0);
    HEAP16[$33>>1] = $29;
   }
   $34 = (($j$0) + 1)|0;
   $exitcond = ($34|0)==(16);
   if ($exitcond) {
    $$0 = 0;
    break;
   } else {
    $j$0 = $34;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $$off = (($9) + -7)|0;
 $35 = ($$off>>>0)<(2);
 if ($35) {
  $j$1 = 0;
  while(1) {
   $36 = (($pSignificantMap) + ($j$1<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $39 = HEAP8[$0>>0]|0;
    $40 = ($39<<24>>24)!=(0);
    $41 = HEAP16[$42>>1]|0;
    $43 = $41&65535;
    $44 = Math_imul($43, $37)|0;
    $45 = $44 >>> 4;
    $46 = $40 ? $45 : $44;
    $47 = $46&65535;
    $48 = (($pScanTable) + ($j$1)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = (($sTCoeff) + ($50<<1)|0);
    HEAP16[$51>>1] = $47;
   }
   $52 = (($j$1) + 1)|0;
   $exitcond6 = ($52|0)==(16);
   if ($exitcond6) {
    $$0 = 0;
    break;
   } else {
    $j$1 = $52;
   }
  }
  STACKTOP = sp;return ($$0|0);
 } else {
  $j$2 = 0;
 }
 while(1) {
  $53 = (($pSignificantMap) + ($j$2<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0);
  if (!($55)) {
   $56 = HEAP8[$0>>0]|0;
   $57 = ($56<<24>>24)==(0);
   $58 = (($pScanTable) + ($j$2)|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   if ($57) {
    $66 = $60 & 7;
    $67 = (($42) + ($66<<1)|0);
    $68 = HEAP16[$67>>1]|0;
    $69 = $68&65535;
    $70 = Math_imul($69, $54)|0;
    $72 = $70;
   } else {
    $61 = (($42) + ($60<<1)|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = $62&65535;
    $64 = Math_imul($63, $54)|0;
    $65 = $64 >> 4;
    $72 = $65;
   }
   $71 = $72&65535;
   $73 = (($sTCoeff) + ($60<<1)|0);
   HEAP16[$73>>1] = $71;
  }
  $74 = (($j$2) + 1)|0;
  $exitcond7 = ($74|0)==(16);
  if ($exitcond7) {
   $$0 = 0;
   break;
  } else {
   $j$2 = $74;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec18ParseIPCMInfoCabacEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $$sum = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum30 = 0, $$sum31 = 0;
 var $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum38 = 0, $$sum39 = 0, $$sum40 = 0, $$sum41 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, $scevgep12 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 512232|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 241932|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 3900|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4100|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($3) + 4032|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($3) + 4036|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($3) + 4040|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($15, $11)|0;
 $19 = (($18) + ($13))|0;
 $20 = $19 << 3;
 $21 = (($pCtx) + 5464|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($22) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($3) + 3908|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($17<<1)|0);
 HEAP16[$31>>1] = 512;
 __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($1,$5);
 $32 = (($5) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($5) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $33;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = ($38|0)<(384);
 if ($39) {
  $$0 = 10012;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = (($28) + ($20)|0);
 $41 = (($26) + ($20)|0);
 $42 = Math_imul($15, $9)|0;
 $43 = (($42) + ($13))|0;
 $44 = $43 << 4;
 $45 = (($24) + ($44)|0);
 dest=$45+0|0; src=$35+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum = (($44) + ($9))|0;
 $46 = (($24) + ($$sum)|0);
 $47 = (($35) + 16|0);
 dest=$46+0|0; src=$47+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum14 = (($$sum) + ($9))|0;
 $48 = (($24) + ($$sum14)|0);
 $49 = (($35) + 32|0);
 dest=$48+0|0; src=$49+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum15 = (($$sum14) + ($9))|0;
 $50 = (($24) + ($$sum15)|0);
 $51 = (($35) + 48|0);
 dest=$50+0|0; src=$51+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum16 = (($$sum15) + ($9))|0;
 $52 = (($24) + ($$sum16)|0);
 $53 = (($35) + 64|0);
 dest=$52+0|0; src=$53+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum17 = (($$sum16) + ($9))|0;
 $54 = (($24) + ($$sum17)|0);
 $55 = (($35) + 80|0);
 dest=$54+0|0; src=$55+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum18 = (($$sum17) + ($9))|0;
 $56 = (($24) + ($$sum18)|0);
 $57 = (($35) + 96|0);
 dest=$56+0|0; src=$57+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum19 = (($$sum18) + ($9))|0;
 $58 = (($24) + ($$sum19)|0);
 $59 = (($35) + 112|0);
 dest=$58+0|0; src=$59+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum20 = (($$sum19) + ($9))|0;
 $60 = (($24) + ($$sum20)|0);
 $61 = (($35) + 128|0);
 dest=$60+0|0; src=$61+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum21 = (($$sum20) + ($9))|0;
 $62 = (($24) + ($$sum21)|0);
 $63 = (($35) + 144|0);
 dest=$62+0|0; src=$63+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum22 = (($$sum21) + ($9))|0;
 $64 = (($24) + ($$sum22)|0);
 $65 = (($35) + 160|0);
 dest=$64+0|0; src=$65+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum23 = (($$sum22) + ($9))|0;
 $66 = (($24) + ($$sum23)|0);
 $67 = (($35) + 176|0);
 dest=$66+0|0; src=$67+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum24 = (($$sum23) + ($9))|0;
 $68 = (($24) + ($$sum24)|0);
 $69 = (($35) + 192|0);
 dest=$68+0|0; src=$69+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum25 = (($$sum24) + ($9))|0;
 $70 = (($24) + ($$sum25)|0);
 $71 = (($35) + 208|0);
 dest=$70+0|0; src=$71+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum26 = (($$sum25) + ($9))|0;
 $72 = (($24) + ($$sum26)|0);
 $73 = (($35) + 224|0);
 dest=$72+0|0; src=$73+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $$sum27 = (($$sum26) + ($9))|0;
 $74 = (($24) + ($$sum27)|0);
 $75 = (($35) + 240|0);
 dest=$74+0|0; src=$75+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $scevgep12 = (($35) + 256|0);
 $76 = $scevgep12;
 $77 = $76;
 $78 = HEAPU8[$77>>0]|(HEAPU8[$77+1>>0]<<8)|(HEAPU8[$77+2>>0]<<16)|(HEAPU8[$77+3>>0]<<24);
 $79 = (($76) + 4)|0;
 $80 = $79;
 $81 = HEAPU8[$80>>0]|(HEAPU8[$80+1>>0]<<8)|(HEAPU8[$80+2>>0]<<16)|(HEAPU8[$80+3>>0]<<24);
 $82 = $41;
 $83 = $82;
 HEAP8[$83>>0]=$78&255;HEAP8[$83+1>>0]=($78>>8)&255;HEAP8[$83+2>>0]=($78>>16)&255;HEAP8[$83+3>>0]=$78>>24;
 $84 = (($82) + 4)|0;
 $85 = $84;
 HEAP8[$85>>0]=$81&255;HEAP8[$85+1>>0]=($81>>8)&255;HEAP8[$85+2>>0]=($81>>16)&255;HEAP8[$85+3>>0]=$81>>24;
 $$sum28 = (($20) + ($11))|0;
 $86 = (($26) + ($$sum28)|0);
 $87 = (($35) + 264|0);
 $88 = $87;
 $89 = $88;
 $90 = HEAPU8[$89>>0]|(HEAPU8[$89+1>>0]<<8)|(HEAPU8[$89+2>>0]<<16)|(HEAPU8[$89+3>>0]<<24);
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAPU8[$92>>0]|(HEAPU8[$92+1>>0]<<8)|(HEAPU8[$92+2>>0]<<16)|(HEAPU8[$92+3>>0]<<24);
 $94 = $86;
 $95 = $94;
 HEAP8[$95>>0]=$90&255;HEAP8[$95+1>>0]=($90>>8)&255;HEAP8[$95+2>>0]=($90>>16)&255;HEAP8[$95+3>>0]=$90>>24;
 $96 = (($94) + 4)|0;
 $97 = $96;
 HEAP8[$97>>0]=$93&255;HEAP8[$97+1>>0]=($93>>8)&255;HEAP8[$97+2>>0]=($93>>16)&255;HEAP8[$97+3>>0]=$93>>24;
 $$sum29 = (($$sum28) + ($11))|0;
 $98 = (($26) + ($$sum29)|0);
 $99 = (($35) + 272|0);
 $100 = $99;
 $101 = $100;
 $102 = HEAPU8[$101>>0]|(HEAPU8[$101+1>>0]<<8)|(HEAPU8[$101+2>>0]<<16)|(HEAPU8[$101+3>>0]<<24);
 $103 = (($100) + 4)|0;
 $104 = $103;
 $105 = HEAPU8[$104>>0]|(HEAPU8[$104+1>>0]<<8)|(HEAPU8[$104+2>>0]<<16)|(HEAPU8[$104+3>>0]<<24);
 $106 = $98;
 $107 = $106;
 HEAP8[$107>>0]=$102&255;HEAP8[$107+1>>0]=($102>>8)&255;HEAP8[$107+2>>0]=($102>>16)&255;HEAP8[$107+3>>0]=$102>>24;
 $108 = (($106) + 4)|0;
 $109 = $108;
 HEAP8[$109>>0]=$105&255;HEAP8[$109+1>>0]=($105>>8)&255;HEAP8[$109+2>>0]=($105>>16)&255;HEAP8[$109+3>>0]=$105>>24;
 $$sum30 = (($$sum29) + ($11))|0;
 $110 = (($26) + ($$sum30)|0);
 $111 = (($35) + 280|0);
 $112 = $111;
 $113 = $112;
 $114 = HEAPU8[$113>>0]|(HEAPU8[$113+1>>0]<<8)|(HEAPU8[$113+2>>0]<<16)|(HEAPU8[$113+3>>0]<<24);
 $115 = (($112) + 4)|0;
 $116 = $115;
 $117 = HEAPU8[$116>>0]|(HEAPU8[$116+1>>0]<<8)|(HEAPU8[$116+2>>0]<<16)|(HEAPU8[$116+3>>0]<<24);
 $118 = $110;
 $119 = $118;
 HEAP8[$119>>0]=$114&255;HEAP8[$119+1>>0]=($114>>8)&255;HEAP8[$119+2>>0]=($114>>16)&255;HEAP8[$119+3>>0]=$114>>24;
 $120 = (($118) + 4)|0;
 $121 = $120;
 HEAP8[$121>>0]=$117&255;HEAP8[$121+1>>0]=($117>>8)&255;HEAP8[$121+2>>0]=($117>>16)&255;HEAP8[$121+3>>0]=$117>>24;
 $$sum31 = (($$sum30) + ($11))|0;
 $122 = (($26) + ($$sum31)|0);
 $123 = (($35) + 288|0);
 $124 = $123;
 $125 = $124;
 $126 = HEAPU8[$125>>0]|(HEAPU8[$125+1>>0]<<8)|(HEAPU8[$125+2>>0]<<16)|(HEAPU8[$125+3>>0]<<24);
 $127 = (($124) + 4)|0;
 $128 = $127;
 $129 = HEAPU8[$128>>0]|(HEAPU8[$128+1>>0]<<8)|(HEAPU8[$128+2>>0]<<16)|(HEAPU8[$128+3>>0]<<24);
 $130 = $122;
 $131 = $130;
 HEAP8[$131>>0]=$126&255;HEAP8[$131+1>>0]=($126>>8)&255;HEAP8[$131+2>>0]=($126>>16)&255;HEAP8[$131+3>>0]=$126>>24;
 $132 = (($130) + 4)|0;
 $133 = $132;
 HEAP8[$133>>0]=$129&255;HEAP8[$133+1>>0]=($129>>8)&255;HEAP8[$133+2>>0]=($129>>16)&255;HEAP8[$133+3>>0]=$129>>24;
 $$sum32 = (($$sum31) + ($11))|0;
 $134 = (($26) + ($$sum32)|0);
 $135 = (($35) + 296|0);
 $136 = $135;
 $137 = $136;
 $138 = HEAPU8[$137>>0]|(HEAPU8[$137+1>>0]<<8)|(HEAPU8[$137+2>>0]<<16)|(HEAPU8[$137+3>>0]<<24);
 $139 = (($136) + 4)|0;
 $140 = $139;
 $141 = HEAPU8[$140>>0]|(HEAPU8[$140+1>>0]<<8)|(HEAPU8[$140+2>>0]<<16)|(HEAPU8[$140+3>>0]<<24);
 $142 = $134;
 $143 = $142;
 HEAP8[$143>>0]=$138&255;HEAP8[$143+1>>0]=($138>>8)&255;HEAP8[$143+2>>0]=($138>>16)&255;HEAP8[$143+3>>0]=$138>>24;
 $144 = (($142) + 4)|0;
 $145 = $144;
 HEAP8[$145>>0]=$141&255;HEAP8[$145+1>>0]=($141>>8)&255;HEAP8[$145+2>>0]=($141>>16)&255;HEAP8[$145+3>>0]=$141>>24;
 $$sum33 = (($$sum32) + ($11))|0;
 $146 = (($26) + ($$sum33)|0);
 $147 = (($35) + 304|0);
 $148 = $147;
 $149 = $148;
 $150 = HEAPU8[$149>>0]|(HEAPU8[$149+1>>0]<<8)|(HEAPU8[$149+2>>0]<<16)|(HEAPU8[$149+3>>0]<<24);
 $151 = (($148) + 4)|0;
 $152 = $151;
 $153 = HEAPU8[$152>>0]|(HEAPU8[$152+1>>0]<<8)|(HEAPU8[$152+2>>0]<<16)|(HEAPU8[$152+3>>0]<<24);
 $154 = $146;
 $155 = $154;
 HEAP8[$155>>0]=$150&255;HEAP8[$155+1>>0]=($150>>8)&255;HEAP8[$155+2>>0]=($150>>16)&255;HEAP8[$155+3>>0]=$150>>24;
 $156 = (($154) + 4)|0;
 $157 = $156;
 HEAP8[$157>>0]=$153&255;HEAP8[$157+1>>0]=($153>>8)&255;HEAP8[$157+2>>0]=($153>>16)&255;HEAP8[$157+3>>0]=$153>>24;
 $$sum34 = (($$sum33) + ($11))|0;
 $158 = (($26) + ($$sum34)|0);
 $159 = (($35) + 312|0);
 $160 = $159;
 $161 = $160;
 $162 = HEAPU8[$161>>0]|(HEAPU8[$161+1>>0]<<8)|(HEAPU8[$161+2>>0]<<16)|(HEAPU8[$161+3>>0]<<24);
 $163 = (($160) + 4)|0;
 $164 = $163;
 $165 = HEAPU8[$164>>0]|(HEAPU8[$164+1>>0]<<8)|(HEAPU8[$164+2>>0]<<16)|(HEAPU8[$164+3>>0]<<24);
 $166 = $158;
 $167 = $166;
 HEAP8[$167>>0]=$162&255;HEAP8[$167+1>>0]=($162>>8)&255;HEAP8[$167+2>>0]=($162>>16)&255;HEAP8[$167+3>>0]=$162>>24;
 $168 = (($166) + 4)|0;
 $169 = $168;
 HEAP8[$169>>0]=$165&255;HEAP8[$169+1>>0]=($165>>8)&255;HEAP8[$169+2>>0]=($165>>16)&255;HEAP8[$169+3>>0]=$165>>24;
 $scevgep = (($35) + 320|0);
 $170 = $scevgep;
 $171 = $170;
 $172 = HEAPU8[$171>>0]|(HEAPU8[$171+1>>0]<<8)|(HEAPU8[$171+2>>0]<<16)|(HEAPU8[$171+3>>0]<<24);
 $173 = (($170) + 4)|0;
 $174 = $173;
 $175 = HEAPU8[$174>>0]|(HEAPU8[$174+1>>0]<<8)|(HEAPU8[$174+2>>0]<<16)|(HEAPU8[$174+3>>0]<<24);
 $176 = $40;
 $177 = $176;
 HEAP8[$177>>0]=$172&255;HEAP8[$177+1>>0]=($172>>8)&255;HEAP8[$177+2>>0]=($172>>16)&255;HEAP8[$177+3>>0]=$172>>24;
 $178 = (($176) + 4)|0;
 $179 = $178;
 HEAP8[$179>>0]=$175&255;HEAP8[$179+1>>0]=($175>>8)&255;HEAP8[$179+2>>0]=($175>>16)&255;HEAP8[$179+3>>0]=$175>>24;
 $$sum35 = (($20) + ($11))|0;
 $180 = (($28) + ($$sum35)|0);
 $181 = (($35) + 328|0);
 $182 = $181;
 $183 = $182;
 $184 = HEAPU8[$183>>0]|(HEAPU8[$183+1>>0]<<8)|(HEAPU8[$183+2>>0]<<16)|(HEAPU8[$183+3>>0]<<24);
 $185 = (($182) + 4)|0;
 $186 = $185;
 $187 = HEAPU8[$186>>0]|(HEAPU8[$186+1>>0]<<8)|(HEAPU8[$186+2>>0]<<16)|(HEAPU8[$186+3>>0]<<24);
 $188 = $180;
 $189 = $188;
 HEAP8[$189>>0]=$184&255;HEAP8[$189+1>>0]=($184>>8)&255;HEAP8[$189+2>>0]=($184>>16)&255;HEAP8[$189+3>>0]=$184>>24;
 $190 = (($188) + 4)|0;
 $191 = $190;
 HEAP8[$191>>0]=$187&255;HEAP8[$191+1>>0]=($187>>8)&255;HEAP8[$191+2>>0]=($187>>16)&255;HEAP8[$191+3>>0]=$187>>24;
 $$sum36 = (($$sum35) + ($11))|0;
 $192 = (($28) + ($$sum36)|0);
 $193 = (($35) + 336|0);
 $194 = $193;
 $195 = $194;
 $196 = HEAPU8[$195>>0]|(HEAPU8[$195+1>>0]<<8)|(HEAPU8[$195+2>>0]<<16)|(HEAPU8[$195+3>>0]<<24);
 $197 = (($194) + 4)|0;
 $198 = $197;
 $199 = HEAPU8[$198>>0]|(HEAPU8[$198+1>>0]<<8)|(HEAPU8[$198+2>>0]<<16)|(HEAPU8[$198+3>>0]<<24);
 $200 = $192;
 $201 = $200;
 HEAP8[$201>>0]=$196&255;HEAP8[$201+1>>0]=($196>>8)&255;HEAP8[$201+2>>0]=($196>>16)&255;HEAP8[$201+3>>0]=$196>>24;
 $202 = (($200) + 4)|0;
 $203 = $202;
 HEAP8[$203>>0]=$199&255;HEAP8[$203+1>>0]=($199>>8)&255;HEAP8[$203+2>>0]=($199>>16)&255;HEAP8[$203+3>>0]=$199>>24;
 $$sum37 = (($$sum36) + ($11))|0;
 $204 = (($28) + ($$sum37)|0);
 $205 = (($35) + 344|0);
 $206 = $205;
 $207 = $206;
 $208 = HEAPU8[$207>>0]|(HEAPU8[$207+1>>0]<<8)|(HEAPU8[$207+2>>0]<<16)|(HEAPU8[$207+3>>0]<<24);
 $209 = (($206) + 4)|0;
 $210 = $209;
 $211 = HEAPU8[$210>>0]|(HEAPU8[$210+1>>0]<<8)|(HEAPU8[$210+2>>0]<<16)|(HEAPU8[$210+3>>0]<<24);
 $212 = $204;
 $213 = $212;
 HEAP8[$213>>0]=$208&255;HEAP8[$213+1>>0]=($208>>8)&255;HEAP8[$213+2>>0]=($208>>16)&255;HEAP8[$213+3>>0]=$208>>24;
 $214 = (($212) + 4)|0;
 $215 = $214;
 HEAP8[$215>>0]=$211&255;HEAP8[$215+1>>0]=($211>>8)&255;HEAP8[$215+2>>0]=($211>>16)&255;HEAP8[$215+3>>0]=$211>>24;
 $$sum38 = (($$sum37) + ($11))|0;
 $216 = (($28) + ($$sum38)|0);
 $217 = (($35) + 352|0);
 $218 = $217;
 $219 = $218;
 $220 = HEAPU8[$219>>0]|(HEAPU8[$219+1>>0]<<8)|(HEAPU8[$219+2>>0]<<16)|(HEAPU8[$219+3>>0]<<24);
 $221 = (($218) + 4)|0;
 $222 = $221;
 $223 = HEAPU8[$222>>0]|(HEAPU8[$222+1>>0]<<8)|(HEAPU8[$222+2>>0]<<16)|(HEAPU8[$222+3>>0]<<24);
 $224 = $216;
 $225 = $224;
 HEAP8[$225>>0]=$220&255;HEAP8[$225+1>>0]=($220>>8)&255;HEAP8[$225+2>>0]=($220>>16)&255;HEAP8[$225+3>>0]=$220>>24;
 $226 = (($224) + 4)|0;
 $227 = $226;
 HEAP8[$227>>0]=$223&255;HEAP8[$227+1>>0]=($223>>8)&255;HEAP8[$227+2>>0]=($223>>16)&255;HEAP8[$227+3>>0]=$223>>24;
 $$sum39 = (($$sum38) + ($11))|0;
 $228 = (($28) + ($$sum39)|0);
 $229 = (($35) + 360|0);
 $230 = $229;
 $231 = $230;
 $232 = HEAPU8[$231>>0]|(HEAPU8[$231+1>>0]<<8)|(HEAPU8[$231+2>>0]<<16)|(HEAPU8[$231+3>>0]<<24);
 $233 = (($230) + 4)|0;
 $234 = $233;
 $235 = HEAPU8[$234>>0]|(HEAPU8[$234+1>>0]<<8)|(HEAPU8[$234+2>>0]<<16)|(HEAPU8[$234+3>>0]<<24);
 $236 = $228;
 $237 = $236;
 HEAP8[$237>>0]=$232&255;HEAP8[$237+1>>0]=($232>>8)&255;HEAP8[$237+2>>0]=($232>>16)&255;HEAP8[$237+3>>0]=$232>>24;
 $238 = (($236) + 4)|0;
 $239 = $238;
 HEAP8[$239>>0]=$235&255;HEAP8[$239+1>>0]=($235>>8)&255;HEAP8[$239+2>>0]=($235>>16)&255;HEAP8[$239+3>>0]=$235>>24;
 $$sum40 = (($$sum39) + ($11))|0;
 $240 = (($28) + ($$sum40)|0);
 $241 = (($35) + 368|0);
 $242 = $241;
 $243 = $242;
 $244 = HEAPU8[$243>>0]|(HEAPU8[$243+1>>0]<<8)|(HEAPU8[$243+2>>0]<<16)|(HEAPU8[$243+3>>0]<<24);
 $245 = (($242) + 4)|0;
 $246 = $245;
 $247 = HEAPU8[$246>>0]|(HEAPU8[$246+1>>0]<<8)|(HEAPU8[$246+2>>0]<<16)|(HEAPU8[$246+3>>0]<<24);
 $248 = $240;
 $249 = $248;
 HEAP8[$249>>0]=$244&255;HEAP8[$249+1>>0]=($244>>8)&255;HEAP8[$249+2>>0]=($244>>16)&255;HEAP8[$249+3>>0]=$244>>24;
 $250 = (($248) + 4)|0;
 $251 = $250;
 HEAP8[$251>>0]=$247&255;HEAP8[$251+1>>0]=($247>>8)&255;HEAP8[$251+2>>0]=($247>>16)&255;HEAP8[$251+3>>0]=$247>>24;
 $$sum41 = (($$sum40) + ($11))|0;
 $252 = (($28) + ($$sum41)|0);
 $253 = (($35) + 376|0);
 $254 = $253;
 $255 = $254;
 $256 = HEAPU8[$255>>0]|(HEAPU8[$255+1>>0]<<8)|(HEAPU8[$255+2>>0]<<16)|(HEAPU8[$255+3>>0]<<24);
 $257 = (($254) + 4)|0;
 $258 = $257;
 $259 = HEAPU8[$258>>0]|(HEAPU8[$258+1>>0]<<8)|(HEAPU8[$258+2>>0]<<16)|(HEAPU8[$258+3>>0]<<24);
 $260 = $252;
 $261 = $260;
 HEAP8[$261>>0]=$256&255;HEAP8[$261+1>>0]=($256>>8)&255;HEAP8[$261+2>>0]=($256>>16)&255;HEAP8[$261+3>>0]=$256>>24;
 $262 = (($260) + 4)|0;
 $263 = $262;
 HEAP8[$263>>0]=$259&255;HEAP8[$263+1>>0]=($259>>8)&255;HEAP8[$263+2>>0]=($259>>16)&255;HEAP8[$263+3>>0]=$259>>24;
 $264 = HEAP32[$34>>2]|0;
 $265 = (($264) + 384|0);
 HEAP32[$34>>2] = $265;
 $266 = (($3) + 3948|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = (($267) + ($17)|0);
 HEAP8[$268>>0] = 0;
 $269 = (($3) + 3952|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = ((($270) + ($17<<1)|0) + 1|0);
 HEAP8[$271>>0] = 0;
 $272 = HEAP32[$269>>2]|0;
 $273 = (($272) + ($17<<1)|0);
 HEAP8[$273>>0] = 0;
 $274 = (($3) + 3964|0);
 $275 = HEAP32[$274>>2]|0;
 $276 = (($275) + (($17*24)|0)|0);
 dest=$276+0|0; stop=dest+24|0; do { HEAP8[dest>>0]=16|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $277 = (__ZN7WelsDec12InitReadBitsEPN10WelsCommon15TagBitStringAuxEi($5,1)|0);
 $278 = ($277|0)==(0);
 if (!($278)) {
  $$0 = $277;
  STACKTOP = sp;return ($$0|0);
 }
 $279 = (__ZN7WelsDec24InitCabacDecEngineFromBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($1,$5)|0);
 $$0 = $279;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec22GetNeighborAvailMbTypeEPNS_16TagNeighborAvailEPNS_10TagDqLayerE($pNeighAvail,$pCurLayer) {
 $pNeighAvail = $pNeighAvail|0;
 $pCurLayer = $pCurLayer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $iLeftTopXy$0 = 0, $iLeftTopXy$1 = 0, $iLeftXy$0 = 0, $iRightTopXy$0 = 0, $iTopXy$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCurLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCurLayer) + 4032|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pCurLayer) + 4036|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCurLayer) + 3912|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3|0)!=(0);
 if ($10) {
  $11 = (($1) + -1)|0;
  $12 = (($7) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==($9|0);
  $15 = $14&1;
  $16 = (($pNeighAvail) + 4|0);
  HEAP32[$16>>2] = $15;
  if ($14) {
   $17 = (($pCurLayer) + 3956|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($11)|0);
   $20 = HEAP8[$19>>0]|0;
   $22 = $20;
  } else {
   $22 = 0;
  }
  $21 = (($pNeighAvail) + 33|0);
  HEAP8[$21>>0] = $22;
  $63 = $15;$iLeftXy$0 = $11;
 } else {
  $23 = (($pNeighAvail) + 4|0);
  HEAP32[$23>>2] = 0;
  $24 = (($pNeighAvail) + 12|0);
  HEAP32[$24>>2] = 0;
  $25 = (($pNeighAvail) + 33|0);
  HEAP8[$25>>0] = 0;
  $63 = 0;$iLeftXy$0 = 0;
 }
 $26 = ($5|0)==(0);
 do {
  if ($26) {
   HEAP32[$pNeighAvail>>2] = 0;
   $60 = (($pNeighAvail) + 12|0);
   HEAP32[$60>>2] = 0;
   $61 = (($pNeighAvail) + 8|0);
   HEAP32[$61>>2] = 0;
   $62 = (($pNeighAvail) + 32|0);
   HEAP8[$62>>0] = 0;
   $72 = 0;$81 = 0;$90 = 0;$iLeftTopXy$1 = 0;$iRightTopXy$0 = 0;$iTopXy$0 = 0;
  } else {
   $27 = (($pCurLayer) + 4044|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($1) - ($28))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($29<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==($9|0);
   $34 = $33&1;
   HEAP32[$pNeighAvail>>2] = $34;
   if ($33) {
    $35 = (($pCurLayer) + 3956|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) + ($29)|0);
    $38 = HEAP8[$37>>0]|0;
    $40 = $38;
   } else {
    $40 = 0;
   }
   $39 = (($pNeighAvail) + 32|0);
   HEAP8[$39>>0] = $40;
   if ($10) {
    $41 = (($29) + -1)|0;
    $42 = HEAP32[$6>>2]|0;
    $43 = (($42) + ($41<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==($9|0);
    $46 = $45&1;
    $47 = (($pNeighAvail) + 12|0);
    HEAP32[$47>>2] = $46;
    $99 = $46;$iLeftTopXy$0 = $41;
   } else {
    $48 = (($pNeighAvail) + 12|0);
    HEAP32[$48>>2] = 0;
    $99 = 0;$iLeftTopXy$0 = 0;
   }
   $49 = HEAP32[$27>>2]|0;
   $50 = (($49) + -1)|0;
   $51 = ($3|0)==($50|0);
   if ($51) {
    $59 = (($pNeighAvail) + 8|0);
    HEAP32[$59>>2] = 0;
    $72 = $34;$81 = $99;$90 = 0;$iLeftTopXy$1 = $iLeftTopXy$0;$iRightTopXy$0 = 0;$iTopXy$0 = $29;
    break;
   } else {
    $52 = (($29) + 1)|0;
    $53 = HEAP32[$6>>2]|0;
    $54 = (($53) + ($52<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)==($9|0);
    $57 = $56&1;
    $58 = (($pNeighAvail) + 8|0);
    HEAP32[$58>>2] = $57;
    $72 = $34;$81 = $99;$90 = $57;$iLeftTopXy$1 = $iLeftTopXy$0;$iRightTopXy$0 = $52;$iTopXy$0 = $29;
    break;
   }
  }
 } while(0);
 $64 = ($63|0)==(0);
 if ($64) {
  $71 = 0;
 } else {
  $65 = (($pCurLayer) + 3908|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($iLeftXy$0<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $71 = $69;
 }
 $70 = (($pNeighAvail) + 16|0);
 HEAP32[$70>>2] = $71;
 $73 = ($72|0)==(0);
 if ($73) {
  $80 = 0;
 } else {
  $74 = (($pCurLayer) + 3908|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($iTopXy$0<<1)|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77 << 16 >> 16;
  $80 = $78;
 }
 $79 = (($pNeighAvail) + 20|0);
 HEAP32[$79>>2] = $80;
 $82 = ($81|0)==(0);
 if ($82) {
  $89 = 0;
 } else {
  $83 = (($pCurLayer) + 3908|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + ($iLeftTopXy$1<<1)|0);
  $86 = HEAP16[$85>>1]|0;
  $87 = $86 << 16 >> 16;
  $89 = $87;
 }
 $88 = (($pNeighAvail) + 24|0);
 HEAP32[$88>>2] = $89;
 $91 = ($90|0)==(0);
 if ($91) {
  $98 = 0;
  $97 = (($pNeighAvail) + 28|0);
  HEAP32[$97>>2] = $98;
  STACKTOP = sp;return;
 }
 $92 = (($pCurLayer) + 3908|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($iRightTopXy$0<<1)|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = $95 << 16 >> 16;
 $98 = $96;
 $97 = (($pNeighAvail) + 28|0);
 HEAP32[$97>>2] = $98;
 STACKTOP = sp;return;
}
function __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($pNeighAvail,$pNonZeroCount,$pCurLayer) {
 $pNeighAvail = $pNeighAvail|0;
 $pNonZeroCount = $pNonZeroCount|0;
 $pCurLayer = $pCurLayer|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCurLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pNeighAvail>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $26 = (($pNeighAvail) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  $29 = (($1) + -1)|0;
  $$1 = $28 ? 0 : $29;
  $30 = (($pNonZeroCount) + 29|0);
  HEAP8[$30>>0] = -1;
  $31 = (($pNonZeroCount) + 30|0);
  HEAP8[$31>>0]=-1&255;HEAP8[$31+1>>0]=-1>>8;
  $32 = $pNonZeroCount;
  $33 = $32;
  HEAP8[$33>>0]=-1&255;HEAP8[$33+1>>0]=(-1>>8)&255;HEAP8[$33+2>>0]=(-1>>16)&255;HEAP8[$33+3>>0]=-1>>24;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP8[$35>>0]=-1&255;HEAP8[$35+1>>0]=(-1>>8)&255;HEAP8[$35+2>>0]=(-1>>16)&255;HEAP8[$35+3>>0]=-1>>24;
  $$2 = $$1;$37 = $26;
 } else {
  $4 = (($pCurLayer) + 4044|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($1) - ($5))|0;
  $7 = (($pNeighAvail) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($1) + -1)|0;
  $10 = ($8|0)==(0);
  $$ = $10 ? 0 : $9;
  $11 = (($pCurLayer) + 3964|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12) + (($6*24)|0)|0) + 12|0);
  $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8)|(HEAPU8[$13+2>>0]<<16)|(HEAPU8[$13+3>>0]<<24);
  $15 = (($pNonZeroCount) + 1|0);
  HEAP8[$15>>0]=$14&255;HEAP8[$15+1>>0]=($14>>8)&255;HEAP8[$15+2>>0]=($14>>16)&255;HEAP8[$15+3>>0]=$14>>24;
  $16 = (($pNonZeroCount) + 29|0);
  HEAP8[$16>>0] = 0;
  $17 = (($pNonZeroCount) + 5|0);
  HEAP8[$17>>0] = 0;
  HEAP8[$pNonZeroCount>>0] = 0;
  $18 = HEAP32[$11>>2]|0;
  $19 = ((($18) + (($6*24)|0)|0) + 20|0);
  $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8);
  $21 = (($pNonZeroCount) + 6|0);
  HEAP8[$21>>0]=$20&255;HEAP8[$21+1>>0]=$20>>8;
  $22 = HEAP32[$11>>2]|0;
  $23 = ((($22) + (($6*24)|0)|0) + 22|0);
  $24 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
  $25 = (($pNonZeroCount) + 30|0);
  HEAP8[$25>>0]=$24&255;HEAP8[$25+1>>0]=$24>>8;
  $$2 = $$;$37 = $7;
 }
 $36 = HEAP32[$37>>2]|0;
 $38 = ($36|0)==(0);
 if ($38) {
  $72 = (($pNonZeroCount) + 32|0);
  HEAP8[$72>>0] = -1;
  $73 = (($pNonZeroCount) + 24|0);
  HEAP8[$73>>0] = -1;
  $74 = (($pNonZeroCount) + 16|0);
  HEAP8[$74>>0] = -1;
  $75 = (($pNonZeroCount) + 8|0);
  HEAP8[$75>>0] = -1;
  $76 = (($pNonZeroCount) + 21|0);
  HEAP8[$76>>0] = -1;
  $77 = (($pNonZeroCount) + 13|0);
  HEAP8[$77>>0] = -1;
  $78 = (($pNonZeroCount) + 45|0);
  HEAP8[$78>>0] = -1;
  $79 = (($pNonZeroCount) + 37|0);
  HEAP8[$79>>0] = -1;
  STACKTOP = sp;return;
 } else {
  $39 = (($pCurLayer) + 3964|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40) + (($$2*24)|0)|0) + 3|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = (($pNonZeroCount) + 8|0);
  HEAP8[$43>>0] = $42;
  $44 = HEAP32[$39>>2]|0;
  $45 = ((($44) + (($$2*24)|0)|0) + 7|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = (($pNonZeroCount) + 16|0);
  HEAP8[$47>>0] = $46;
  $48 = HEAP32[$39>>2]|0;
  $49 = ((($48) + (($$2*24)|0)|0) + 11|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = (($pNonZeroCount) + 24|0);
  HEAP8[$51>>0] = $50;
  $52 = HEAP32[$39>>2]|0;
  $53 = ((($52) + (($$2*24)|0)|0) + 15|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = (($pNonZeroCount) + 32|0);
  HEAP8[$55>>0] = $54;
  $56 = HEAP32[$39>>2]|0;
  $57 = ((($56) + (($$2*24)|0)|0) + 17|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = (($pNonZeroCount) + 13|0);
  HEAP8[$59>>0] = $58;
  $60 = HEAP32[$39>>2]|0;
  $61 = ((($60) + (($$2*24)|0)|0) + 21|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = (($pNonZeroCount) + 21|0);
  HEAP8[$63>>0] = $62;
  $64 = HEAP32[$39>>2]|0;
  $65 = ((($64) + (($$2*24)|0)|0) + 19|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = (($pNonZeroCount) + 37|0);
  HEAP8[$67>>0] = $66;
  $68 = HEAP32[$39>>2]|0;
  $69 = ((($68) + (($$2*24)|0)|0) + 23|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = (($pNonZeroCount) + 45|0);
  HEAP8[$71>>0] = $70;
  STACKTOP = sp;return;
 }
}
function __ZN7WelsDec31WelsFillCacheConstrain1IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE($pNeighAvail,$pNonZeroCount,$pIntraPredMode,$pCurLayer) {
 $pNeighAvail = $pNeighAvail|0;
 $pNonZeroCount = $pNonZeroCount|0;
 $pIntraPredMode = $pIntraPredMode|0;
 $pCurLayer = $pCurLayer|0;
 var $$1 = 0, $$2 = 0, $$3 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iPred$0 = 0, $iPred1$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCurLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($pNeighAvail,$pNonZeroCount,$pCurLayer);
 $2 = HEAP32[$pNeighAvail>>2]|0;
 $3 = ($2|0)==(0);
 $4 = (($pNeighAvail) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = (($1) + -1)|0;
 $$1 = $6 ? 0 : $7;
 if ($3) {
  $$3 = $$1;$47 = $4;
  label = 4;
 } else {
  $8 = (($pNeighAvail) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = (($pCurLayer) + 4044|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($1) - ($12))|0;
   $14 = (($pCurLayer) + 3992|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + ($13<<3)|0);
   $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
   $18 = (($pIntraPredMode) + 1|0);
   HEAP8[$18>>0]=$17&255;HEAP8[$18+1>>0]=($17>>8)&255;HEAP8[$18+2>>0]=($17>>16)&255;HEAP8[$18+3>>0]=$17>>24;
   $$2 = $$1;$23 = $4;
  } else {
   $$3 = $$1;$47 = $4;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $19 = (($pNeighAvail) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  if ((($20|0) == 512) | (($20|0) == 2)) {
   $iPred$0 = 33686018;
  } else {
   $iPred$0 = -1;
  }
  $21 = (($pIntraPredMode) + 1|0);
  HEAP8[$21>>0]=$iPred$0&255;HEAP8[$21+1>>0]=($iPred$0>>8)&255;HEAP8[$21+2>>0]=($iPred$0>>16)&255;HEAP8[$21+3>>0]=$iPred$0>>24;
  $$2 = $$3;$23 = $47;
 }
 $22 = HEAP32[$23>>2]|0;
 $24 = ($22|0)!=(0);
 $$phi$trans$insert = (($pNeighAvail) + 16|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $25 = ($$pre|0)==(1);
 $or$cond = $24 & $25;
 if ($or$cond) {
  $26 = (($pCurLayer) + 3992|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27) + ($$2<<3)|0) + 4|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = (($pIntraPredMode) + 8|0);
  HEAP8[$30>>0] = $29;
  $31 = HEAP32[$26>>2]|0;
  $32 = ((($31) + ($$2<<3)|0) + 5|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = (($pIntraPredMode) + 16|0);
  HEAP8[$34>>0] = $33;
  $35 = HEAP32[$26>>2]|0;
  $36 = ((($35) + ($$2<<3)|0) + 6|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = (($pIntraPredMode) + 24|0);
  HEAP8[$38>>0] = $37;
  $39 = HEAP32[$26>>2]|0;
  $40 = ((($39) + ($$2<<3)|0) + 3|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = (($pIntraPredMode) + 32|0);
  HEAP8[$42>>0] = $41;
  STACKTOP = sp;return;
 }
 if ((($$pre|0) == 512) | (($$pre|0) == 2)) {
  $iPred1$0 = 2;
 } else {
  $iPred1$0 = -1;
 }
 $43 = (($pIntraPredMode) + 32|0);
 HEAP8[$43>>0] = $iPred1$0;
 $44 = (($pIntraPredMode) + 24|0);
 HEAP8[$44>>0] = $iPred1$0;
 $45 = (($pIntraPredMode) + 16|0);
 HEAP8[$45>>0] = $iPred1$0;
 $46 = (($pIntraPredMode) + 8|0);
 HEAP8[$46>>0] = $iPred1$0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec31WelsFillCacheConstrain0IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE($pNeighAvail,$pNonZeroCount,$pIntraPredMode,$pCurLayer) {
 $pNeighAvail = $pNeighAvail|0;
 $pNonZeroCount = $pNonZeroCount|0;
 $pIntraPredMode = $pIntraPredMode|0;
 $pCurLayer = $pCurLayer|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCurLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($pNeighAvail,$pNonZeroCount,$pCurLayer);
 $2 = HEAP32[$pNeighAvail>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (($pNeighAvail) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  $7 = (($1) + -1)|0;
  $$3 = $6 ? 0 : $7;
  $$5 = $$3;$22 = 0;$51 = $4;
  label = 5;
 } else {
  $8 = (($pCurLayer) + 4044|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($1) - ($9))|0;
  $11 = (($pNeighAvail) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  $14 = (($1) + -1)|0;
  $$ = $13 ? 0 : $14;
  $15 = (($pNeighAvail) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  if ((($16|0) == 4) | (($16|0) == 1)) {
   $17 = (($pCurLayer) + 3992|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($10<<3)|0);
   $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8)|(HEAPU8[$19+2>>0]<<16)|(HEAPU8[$19+3>>0]<<24);
   $21 = (($pIntraPredMode) + 1|0);
   HEAP8[$21>>0]=$20&255;HEAP8[$21+1>>0]=($20>>8)&255;HEAP8[$21+2>>0]=($20>>16)&255;HEAP8[$21+3>>0]=$20>>24;
   $$4 = $$;$26 = $11;
  } else {
   $$5 = $$;$22 = $2;$51 = $11;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $23 = ($22|0)==(0);
  $$1 = $23 ? -1 : 33686018;
  $24 = (($pIntraPredMode) + 1|0);
  HEAP8[$24>>0]=$$1&255;HEAP8[$24+1>>0]=($$1>>8)&255;HEAP8[$24+2>>0]=($$1>>16)&255;HEAP8[$24+3>>0]=$$1>>24;
  $$4 = $$5;$26 = $51;
 }
 $25 = HEAP32[$26>>2]|0;
 $27 = ($25|0)==(0);
 if (!($27)) {
  $28 = (($pNeighAvail) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  if ((($29|0) == 4) | (($29|0) == 1)) {
   $30 = (($pCurLayer) + 3992|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31) + ($$4<<3)|0) + 4|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = (($pIntraPredMode) + 8|0);
   HEAP8[$34>>0] = $33;
   $35 = HEAP32[$30>>2]|0;
   $36 = ((($35) + ($$4<<3)|0) + 5|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = (($pIntraPredMode) + 16|0);
   HEAP8[$38>>0] = $37;
   $39 = HEAP32[$30>>2]|0;
   $40 = ((($39) + ($$4<<3)|0) + 6|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = (($pIntraPredMode) + 24|0);
   HEAP8[$42>>0] = $41;
   $43 = HEAP32[$30>>2]|0;
   $44 = ((($43) + ($$4<<3)|0) + 3|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = (($pIntraPredMode) + 32|0);
   HEAP8[$46>>0] = $45;
   STACKTOP = sp;return;
  }
 }
 $$2 = $27 ? -1 : 2;
 $47 = (($pIntraPredMode) + 32|0);
 HEAP8[$47>>0] = $$2;
 $48 = (($pIntraPredMode) + 24|0);
 HEAP8[$48>>0] = $$2;
 $49 = (($pIntraPredMode) + 16|0);
 HEAP8[$49>>0] = $$2;
 $50 = (($pIntraPredMode) + 8|0);
 HEAP8[$50>>0] = $$2;
 STACKTOP = sp;return;
}
function __ZN7WelsDec23WelsFillCacheInterCabacEPNS_16TagNeighborAvailEPhPA30_A2_sS5_PA30_aPNS_10TagDqLayerE($pNeighAvail,$pNonZeroCount,$iMvArray,$iMvdCache,$iRefIdxArray,$pCurLayer) {
 $pNeighAvail = $pNeighAvail|0;
 $pNonZeroCount = $pNonZeroCount|0;
 $iMvArray = $iMvArray|0;
 $iMvdCache = $iMvdCache|0;
 $iRefIdxArray = $iRefIdxArray|0;
 $pCurLayer = $pCurLayer|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iLeftTopXy$0 = 0, $iRightTopXy$0 = 0, $iTopXy$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pCurLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($pNeighAvail,$pNonZeroCount,$pCurLayer);
 $2 = HEAP32[$pNeighAvail>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $iTopXy$0 = 0;
 } else {
  $4 = (($pCurLayer) + 4044|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($1) - ($5))|0;
  $iTopXy$0 = $6;
 }
 $7 = (($pNeighAvail) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 $10 = (($1) + -1)|0;
 $$ = $9 ? 0 : $10;
 $11 = (($pNeighAvail) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $iLeftTopXy$0 = 0;
 } else {
  $14 = (($pCurLayer) + 4044|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($10) - ($15))|0;
  $iLeftTopXy$0 = $16;
 }
 $17 = (($pNeighAvail) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $iRightTopXy$0 = 0;
 } else {
  $20 = (($1) + 1)|0;
  $21 = (($pCurLayer) + 4044|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) - ($22))|0;
  $iRightTopXy$0 = $23;
 }
 if ($9) {
  label = 10;
 } else {
  $24 = (($pNeighAvail) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 & 504;
  $27 = ($26|0)==(0);
  if ($27) {
   label = 10;
  } else {
   $28 = (($pCurLayer) + 3916|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29) + ($$<<6)|0) + 12|0);
   $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
   $32 = (($iMvArray) + 24|0);
   HEAP8[$32>>0]=$31&255;HEAP8[$32+1>>0]=($31>>8)&255;HEAP8[$32+2>>0]=($31>>16)&255;HEAP8[$32+3>>0]=$31>>24;
   $33 = HEAP32[$28>>2]|0;
   $34 = ((($33) + ($$<<6)|0) + 28|0);
   $35 = HEAPU8[$34>>0]|(HEAPU8[$34+1>>0]<<8)|(HEAPU8[$34+2>>0]<<16)|(HEAPU8[$34+3>>0]<<24);
   $36 = (($iMvArray) + 48|0);
   HEAP8[$36>>0]=$35&255;HEAP8[$36+1>>0]=($35>>8)&255;HEAP8[$36+2>>0]=($35>>16)&255;HEAP8[$36+3>>0]=$35>>24;
   $37 = HEAP32[$28>>2]|0;
   $38 = ((($37) + ($$<<6)|0) + 44|0);
   $39 = HEAPU8[$38>>0]|(HEAPU8[$38+1>>0]<<8)|(HEAPU8[$38+2>>0]<<16)|(HEAPU8[$38+3>>0]<<24);
   $40 = (($iMvArray) + 72|0);
   HEAP8[$40>>0]=$39&255;HEAP8[$40+1>>0]=($39>>8)&255;HEAP8[$40+2>>0]=($39>>16)&255;HEAP8[$40+3>>0]=$39>>24;
   $41 = HEAP32[$28>>2]|0;
   $42 = ((($41) + ($$<<6)|0) + 60|0);
   $43 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8)|(HEAPU8[$42+2>>0]<<16)|(HEAPU8[$42+3>>0]<<24);
   $44 = (($iMvArray) + 96|0);
   HEAP8[$44>>0]=$43&255;HEAP8[$44+1>>0]=($43>>8)&255;HEAP8[$44+2>>0]=($43>>16)&255;HEAP8[$44+3>>0]=$43>>24;
   $45 = (($pCurLayer) + 3924|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46) + ($$<<6)|0) + 12|0);
   $48 = HEAPU8[$47>>0]|(HEAPU8[$47+1>>0]<<8)|(HEAPU8[$47+2>>0]<<16)|(HEAPU8[$47+3>>0]<<24);
   $49 = (($iMvdCache) + 24|0);
   HEAP8[$49>>0]=$48&255;HEAP8[$49+1>>0]=($48>>8)&255;HEAP8[$49+2>>0]=($48>>16)&255;HEAP8[$49+3>>0]=$48>>24;
   $50 = HEAP32[$45>>2]|0;
   $51 = ((($50) + ($$<<6)|0) + 28|0);
   $52 = HEAPU8[$51>>0]|(HEAPU8[$51+1>>0]<<8)|(HEAPU8[$51+2>>0]<<16)|(HEAPU8[$51+3>>0]<<24);
   $53 = (($iMvdCache) + 48|0);
   HEAP8[$53>>0]=$52&255;HEAP8[$53+1>>0]=($52>>8)&255;HEAP8[$53+2>>0]=($52>>16)&255;HEAP8[$53+3>>0]=$52>>24;
   $54 = HEAP32[$45>>2]|0;
   $55 = ((($54) + ($$<<6)|0) + 44|0);
   $56 = HEAPU8[$55>>0]|(HEAPU8[$55+1>>0]<<8)|(HEAPU8[$55+2>>0]<<16)|(HEAPU8[$55+3>>0]<<24);
   $57 = (($iMvdCache) + 72|0);
   HEAP8[$57>>0]=$56&255;HEAP8[$57+1>>0]=($56>>8)&255;HEAP8[$57+2>>0]=($56>>16)&255;HEAP8[$57+3>>0]=$56>>24;
   $58 = HEAP32[$45>>2]|0;
   $59 = ((($58) + ($$<<6)|0) + 60|0);
   $60 = HEAPU8[$59>>0]|(HEAPU8[$59+1>>0]<<8)|(HEAPU8[$59+2>>0]<<16)|(HEAPU8[$59+3>>0]<<24);
   $61 = (($iMvdCache) + 96|0);
   HEAP8[$61>>0]=$60&255;HEAP8[$61+1>>0]=($60>>8)&255;HEAP8[$61+2>>0]=($60>>16)&255;HEAP8[$61+3>>0]=$60>>24;
   $62 = (($pCurLayer) + 3932|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($63) + ($$<<4)|0) + 3|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = (($iRefIdxArray) + 6|0);
   HEAP8[$66>>0] = $65;
   $67 = HEAP32[$62>>2]|0;
   $68 = ((($67) + ($$<<4)|0) + 7|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = (($iRefIdxArray) + 12|0);
   HEAP8[$70>>0] = $69;
   $71 = HEAP32[$62>>2]|0;
   $72 = ((($71) + ($$<<4)|0) + 11|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = (($iRefIdxArray) + 18|0);
   HEAP8[$74>>0] = $73;
   $75 = HEAP32[$62>>2]|0;
   $76 = ((($75) + ($$<<4)|0) + 15|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = (($iRefIdxArray) + 24|0);
   HEAP8[$78>>0] = $77;
  }
 }
 do {
  if ((label|0) == 10) {
   $79 = (($iMvArray) + 24|0);
   HEAP8[$79>>0]=0&255;HEAP8[$79+1>>0]=(0>>8)&255;HEAP8[$79+2>>0]=(0>>16)&255;HEAP8[$79+3>>0]=0>>24;
   $80 = (($iMvArray) + 48|0);
   HEAP8[$80>>0]=0&255;HEAP8[$80+1>>0]=(0>>8)&255;HEAP8[$80+2>>0]=(0>>16)&255;HEAP8[$80+3>>0]=0>>24;
   $81 = (($iMvArray) + 72|0);
   HEAP8[$81>>0]=0&255;HEAP8[$81+1>>0]=(0>>8)&255;HEAP8[$81+2>>0]=(0>>16)&255;HEAP8[$81+3>>0]=0>>24;
   $82 = (($iMvArray) + 96|0);
   HEAP8[$82>>0]=0&255;HEAP8[$82+1>>0]=(0>>8)&255;HEAP8[$82+2>>0]=(0>>16)&255;HEAP8[$82+3>>0]=0>>24;
   $83 = (($iMvdCache) + 24|0);
   HEAP8[$83>>0]=0&255;HEAP8[$83+1>>0]=(0>>8)&255;HEAP8[$83+2>>0]=(0>>16)&255;HEAP8[$83+3>>0]=0>>24;
   $84 = (($iMvdCache) + 48|0);
   HEAP8[$84>>0]=0&255;HEAP8[$84+1>>0]=(0>>8)&255;HEAP8[$84+2>>0]=(0>>16)&255;HEAP8[$84+3>>0]=0>>24;
   $85 = (($iMvdCache) + 72|0);
   HEAP8[$85>>0]=0&255;HEAP8[$85+1>>0]=(0>>8)&255;HEAP8[$85+2>>0]=(0>>16)&255;HEAP8[$85+3>>0]=0>>24;
   $86 = (($iMvdCache) + 96|0);
   HEAP8[$86>>0]=0&255;HEAP8[$86+1>>0]=(0>>8)&255;HEAP8[$86+2>>0]=(0>>16)&255;HEAP8[$86+3>>0]=0>>24;
   $87 = HEAP32[$7>>2]|0;
   $88 = ($87|0)==(0);
   $89 = (($iRefIdxArray) + 24|0);
   if ($88) {
    HEAP8[$89>>0] = -2;
    $90 = (($iRefIdxArray) + 18|0);
    HEAP8[$90>>0] = -2;
    $91 = (($iRefIdxArray) + 12|0);
    HEAP8[$91>>0] = -2;
    $92 = (($iRefIdxArray) + 6|0);
    HEAP8[$92>>0] = -2;
    break;
   } else {
    HEAP8[$89>>0] = -1;
    $93 = (($iRefIdxArray) + 18|0);
    HEAP8[$93>>0] = -1;
    $94 = (($iRefIdxArray) + 12|0);
    HEAP8[$94>>0] = -1;
    $95 = (($iRefIdxArray) + 6|0);
    HEAP8[$95>>0] = -1;
    break;
   }
  }
 } while(0);
 $96 = HEAP32[$11>>2]|0;
 $97 = ($96|0)==(0);
 if ($97) {
  label = 16;
 } else {
  $98 = (($pNeighAvail) + 24|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $99 & 504;
  $101 = ($100|0)==(0);
  if ($101) {
   label = 16;
  } else {
   $102 = (($pCurLayer) + 3916|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ((($103) + ($iLeftTopXy$0<<6)|0) + 60|0);
   $105 = HEAPU8[$104>>0]|(HEAPU8[$104+1>>0]<<8)|(HEAPU8[$104+2>>0]<<16)|(HEAPU8[$104+3>>0]<<24);
   HEAP8[$iMvArray>>0]=$105&255;HEAP8[$iMvArray+1>>0]=($105>>8)&255;HEAP8[$iMvArray+2>>0]=($105>>16)&255;HEAP8[$iMvArray+3>>0]=$105>>24;
   $106 = (($pCurLayer) + 3924|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ((($107) + ($iLeftTopXy$0<<6)|0) + 60|0);
   $109 = HEAPU8[$108>>0]|(HEAPU8[$108+1>>0]<<8)|(HEAPU8[$108+2>>0]<<16)|(HEAPU8[$108+3>>0]<<24);
   HEAP8[$iMvdCache>>0]=$109&255;HEAP8[$iMvdCache+1>>0]=($109>>8)&255;HEAP8[$iMvdCache+2>>0]=($109>>16)&255;HEAP8[$iMvdCache+3>>0]=$109>>24;
   $110 = (($pCurLayer) + 3932|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ((($111) + ($iLeftTopXy$0<<4)|0) + 15|0);
   $113 = HEAP8[$112>>0]|0;
   HEAP8[$iRefIdxArray>>0] = $113;
  }
 }
 do {
  if ((label|0) == 16) {
   HEAP8[$iMvArray>>0]=0&255;HEAP8[$iMvArray+1>>0]=(0>>8)&255;HEAP8[$iMvArray+2>>0]=(0>>16)&255;HEAP8[$iMvArray+3>>0]=0>>24;
   HEAP8[$iMvdCache>>0]=0&255;HEAP8[$iMvdCache+1>>0]=(0>>8)&255;HEAP8[$iMvdCache+2>>0]=(0>>16)&255;HEAP8[$iMvdCache+3>>0]=0>>24;
   $114 = HEAP32[$11>>2]|0;
   $115 = ($114|0)==(0);
   if ($115) {
    HEAP8[$iRefIdxArray>>0] = -2;
    break;
   } else {
    HEAP8[$iRefIdxArray>>0] = -1;
    break;
   }
  }
 } while(0);
 $116 = HEAP32[$pNeighAvail>>2]|0;
 $117 = ($116|0)==(0);
 if ($117) {
  label = 22;
 } else {
  $118 = (($pNeighAvail) + 20|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $119 & 504;
  $121 = ($120|0)==(0);
  if ($121) {
   label = 22;
  } else {
   $122 = (($pCurLayer) + 3916|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ((($123) + ($iTopXy$0<<6)|0) + 48|0);
   $125 = $124;
   $126 = $125;
   $127 = HEAPU8[$126>>0]|(HEAPU8[$126+1>>0]<<8)|(HEAPU8[$126+2>>0]<<16)|(HEAPU8[$126+3>>0]<<24);
   $128 = (($125) + 4)|0;
   $129 = $128;
   $130 = HEAPU8[$129>>0]|(HEAPU8[$129+1>>0]<<8)|(HEAPU8[$129+2>>0]<<16)|(HEAPU8[$129+3>>0]<<24);
   $131 = (($iMvArray) + 4|0);
   $132 = $131;
   $133 = $132;
   HEAP8[$133>>0]=$127&255;HEAP8[$133+1>>0]=($127>>8)&255;HEAP8[$133+2>>0]=($127>>16)&255;HEAP8[$133+3>>0]=$127>>24;
   $134 = (($132) + 4)|0;
   $135 = $134;
   HEAP8[$135>>0]=$130&255;HEAP8[$135+1>>0]=($130>>8)&255;HEAP8[$135+2>>0]=($130>>16)&255;HEAP8[$135+3>>0]=$130>>24;
   $136 = HEAP32[$122>>2]|0;
   $137 = ((($136) + ($iTopXy$0<<6)|0) + 56|0);
   $138 = $137;
   $139 = $138;
   $140 = HEAPU8[$139>>0]|(HEAPU8[$139+1>>0]<<8)|(HEAPU8[$139+2>>0]<<16)|(HEAPU8[$139+3>>0]<<24);
   $141 = (($138) + 4)|0;
   $142 = $141;
   $143 = HEAPU8[$142>>0]|(HEAPU8[$142+1>>0]<<8)|(HEAPU8[$142+2>>0]<<16)|(HEAPU8[$142+3>>0]<<24);
   $144 = (($iMvArray) + 12|0);
   $145 = $144;
   $146 = $145;
   HEAP8[$146>>0]=$140&255;HEAP8[$146+1>>0]=($140>>8)&255;HEAP8[$146+2>>0]=($140>>16)&255;HEAP8[$146+3>>0]=$140>>24;
   $147 = (($145) + 4)|0;
   $148 = $147;
   HEAP8[$148>>0]=$143&255;HEAP8[$148+1>>0]=($143>>8)&255;HEAP8[$148+2>>0]=($143>>16)&255;HEAP8[$148+3>>0]=$143>>24;
   $149 = (($pCurLayer) + 3924|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = ((($150) + ($iTopXy$0<<6)|0) + 48|0);
   $152 = $151;
   $153 = $152;
   $154 = HEAPU8[$153>>0]|(HEAPU8[$153+1>>0]<<8)|(HEAPU8[$153+2>>0]<<16)|(HEAPU8[$153+3>>0]<<24);
   $155 = (($152) + 4)|0;
   $156 = $155;
   $157 = HEAPU8[$156>>0]|(HEAPU8[$156+1>>0]<<8)|(HEAPU8[$156+2>>0]<<16)|(HEAPU8[$156+3>>0]<<24);
   $158 = (($iMvdCache) + 4|0);
   $159 = $158;
   $160 = $159;
   HEAP8[$160>>0]=$154&255;HEAP8[$160+1>>0]=($154>>8)&255;HEAP8[$160+2>>0]=($154>>16)&255;HEAP8[$160+3>>0]=$154>>24;
   $161 = (($159) + 4)|0;
   $162 = $161;
   HEAP8[$162>>0]=$157&255;HEAP8[$162+1>>0]=($157>>8)&255;HEAP8[$162+2>>0]=($157>>16)&255;HEAP8[$162+3>>0]=$157>>24;
   $163 = HEAP32[$149>>2]|0;
   $164 = ((($163) + ($iTopXy$0<<6)|0) + 56|0);
   $165 = $164;
   $166 = $165;
   $167 = HEAPU8[$166>>0]|(HEAPU8[$166+1>>0]<<8)|(HEAPU8[$166+2>>0]<<16)|(HEAPU8[$166+3>>0]<<24);
   $168 = (($165) + 4)|0;
   $169 = $168;
   $170 = HEAPU8[$169>>0]|(HEAPU8[$169+1>>0]<<8)|(HEAPU8[$169+2>>0]<<16)|(HEAPU8[$169+3>>0]<<24);
   $171 = (($iMvdCache) + 12|0);
   $172 = $171;
   $173 = $172;
   HEAP8[$173>>0]=$167&255;HEAP8[$173+1>>0]=($167>>8)&255;HEAP8[$173+2>>0]=($167>>16)&255;HEAP8[$173+3>>0]=$167>>24;
   $174 = (($172) + 4)|0;
   $175 = $174;
   HEAP8[$175>>0]=$170&255;HEAP8[$175+1>>0]=($170>>8)&255;HEAP8[$175+2>>0]=($170>>16)&255;HEAP8[$175+3>>0]=$170>>24;
   $176 = (($pCurLayer) + 3932|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = ((($177) + ($iTopXy$0<<4)|0) + 12|0);
   $179 = HEAPU8[$178>>0]|(HEAPU8[$178+1>>0]<<8)|(HEAPU8[$178+2>>0]<<16)|(HEAPU8[$178+3>>0]<<24);
   $180 = (($iRefIdxArray) + 1|0);
   HEAP8[$180>>0]=$179&255;HEAP8[$180+1>>0]=($179>>8)&255;HEAP8[$180+2>>0]=($179>>16)&255;HEAP8[$180+3>>0]=$179>>24;
  }
 }
 do {
  if ((label|0) == 22) {
   $181 = (($iMvArray) + 4|0);
   $182 = (($iMvdCache) + 4|0);
   dest=$181+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   dest=$182+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $183 = HEAP32[$pNeighAvail>>2]|0;
   $184 = ($183|0)==(0);
   $185 = (($iRefIdxArray) + 1|0);
   if ($184) {
    HEAP8[$185>>0]=-16843010&255;HEAP8[$185+1>>0]=(-16843010>>8)&255;HEAP8[$185+2>>0]=(-16843010>>16)&255;HEAP8[$185+3>>0]=-16843010>>24;
    break;
   } else {
    HEAP8[$185>>0]=-1&255;HEAP8[$185+1>>0]=(-1>>8)&255;HEAP8[$185+2>>0]=(-1>>16)&255;HEAP8[$185+3>>0]=-1>>24;
    break;
   }
  }
 } while(0);
 $186 = HEAP32[$17>>2]|0;
 $187 = ($186|0)==(0);
 if ($187) {
  label = 28;
 } else {
  $188 = (($pNeighAvail) + 28|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $189 & 504;
  $191 = ($190|0)==(0);
  if ($191) {
   label = 28;
  } else {
   $192 = (($pCurLayer) + 3916|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ((($193) + ($iRightTopXy$0<<6)|0) + 48|0);
   $195 = HEAPU8[$194>>0]|(HEAPU8[$194+1>>0]<<8)|(HEAPU8[$194+2>>0]<<16)|(HEAPU8[$194+3>>0]<<24);
   $196 = (($iMvArray) + 20|0);
   HEAP8[$196>>0]=$195&255;HEAP8[$196+1>>0]=($195>>8)&255;HEAP8[$196+2>>0]=($195>>16)&255;HEAP8[$196+3>>0]=$195>>24;
   $197 = (($pCurLayer) + 3924|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = ((($198) + ($iRightTopXy$0<<6)|0) + 48|0);
   $200 = HEAPU8[$199>>0]|(HEAPU8[$199+1>>0]<<8)|(HEAPU8[$199+2>>0]<<16)|(HEAPU8[$199+3>>0]<<24);
   $201 = (($iMvdCache) + 20|0);
   HEAP8[$201>>0]=$200&255;HEAP8[$201+1>>0]=($200>>8)&255;HEAP8[$201+2>>0]=($200>>16)&255;HEAP8[$201+3>>0]=$200>>24;
   $202 = (($pCurLayer) + 3932|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ((($203) + ($iRightTopXy$0<<4)|0) + 12|0);
   $205 = HEAP8[$204>>0]|0;
   $206 = (($iRefIdxArray) + 5|0);
   HEAP8[$206>>0] = $205;
  }
 }
 do {
  if ((label|0) == 28) {
   $207 = (($iMvArray) + 20|0);
   HEAP8[$207>>0]=0&255;HEAP8[$207+1>>0]=(0>>8)&255;HEAP8[$207+2>>0]=(0>>16)&255;HEAP8[$207+3>>0]=0>>24;
   $208 = HEAP32[$17>>2]|0;
   $209 = ($208|0)==(0);
   $210 = (($iRefIdxArray) + 5|0);
   if ($209) {
    HEAP8[$210>>0] = -2;
    break;
   } else {
    HEAP8[$210>>0] = -1;
    break;
   }
  }
 } while(0);
 $211 = (($iMvArray) + 36|0);
 HEAP8[$211>>0]=0&255;HEAP8[$211+1>>0]=(0>>8)&255;HEAP8[$211+2>>0]=(0>>16)&255;HEAP8[$211+3>>0]=0>>24;
 $212 = (($iMvArray) + 84|0);
 HEAP8[$212>>0]=0&255;HEAP8[$212+1>>0]=(0>>8)&255;HEAP8[$212+2>>0]=(0>>16)&255;HEAP8[$212+3>>0]=0>>24;
 $213 = (($iMvArray) + 44|0);
 HEAP8[$213>>0]=0&255;HEAP8[$213+1>>0]=(0>>8)&255;HEAP8[$213+2>>0]=(0>>16)&255;HEAP8[$213+3>>0]=0>>24;
 $214 = (($iMvArray) + 68|0);
 HEAP8[$214>>0]=0&255;HEAP8[$214+1>>0]=(0>>8)&255;HEAP8[$214+2>>0]=(0>>16)&255;HEAP8[$214+3>>0]=0>>24;
 $215 = (($iMvArray) + 92|0);
 HEAP8[$215>>0]=0&255;HEAP8[$215+1>>0]=(0>>8)&255;HEAP8[$215+2>>0]=(0>>16)&255;HEAP8[$215+3>>0]=0>>24;
 $216 = (($iMvdCache) + 36|0);
 HEAP8[$216>>0]=0&255;HEAP8[$216+1>>0]=(0>>8)&255;HEAP8[$216+2>>0]=(0>>16)&255;HEAP8[$216+3>>0]=0>>24;
 $217 = (($iMvdCache) + 84|0);
 HEAP8[$217>>0]=0&255;HEAP8[$217+1>>0]=(0>>8)&255;HEAP8[$217+2>>0]=(0>>16)&255;HEAP8[$217+3>>0]=0>>24;
 $218 = (($iMvdCache) + 44|0);
 HEAP8[$218>>0]=0&255;HEAP8[$218+1>>0]=(0>>8)&255;HEAP8[$218+2>>0]=(0>>16)&255;HEAP8[$218+3>>0]=0>>24;
 $219 = (($iMvdCache) + 68|0);
 HEAP8[$219>>0]=0&255;HEAP8[$219+1>>0]=(0>>8)&255;HEAP8[$219+2>>0]=(0>>16)&255;HEAP8[$219+3>>0]=0>>24;
 $220 = (($iMvdCache) + 92|0);
 HEAP8[$220>>0]=0&255;HEAP8[$220+1>>0]=(0>>8)&255;HEAP8[$220+2>>0]=(0>>16)&255;HEAP8[$220+3>>0]=0>>24;
 $221 = (($iRefIdxArray) + 23|0);
 HEAP8[$221>>0] = -2;
 $222 = (($iRefIdxArray) + 17|0);
 HEAP8[$222>>0] = -2;
 $223 = (($iRefIdxArray) + 11|0);
 HEAP8[$223>>0] = -2;
 $224 = (($iRefIdxArray) + 21|0);
 HEAP8[$224>>0] = -2;
 $225 = (($iRefIdxArray) + 9|0);
 HEAP8[$225>>0] = -2;
 STACKTOP = sp;return;
}
function __ZN7WelsDec18WelsFillCacheInterEPNS_16TagNeighborAvailEPhPA30_A2_sPA30_aPNS_10TagDqLayerE($pNeighAvail,$pNonZeroCount,$iMvArray,$iRefIdxArray,$pCurLayer) {
 $pNeighAvail = $pNeighAvail|0;
 $pNonZeroCount = $pNonZeroCount|0;
 $iMvArray = $iMvArray|0;
 $iRefIdxArray = $iRefIdxArray|0;
 $pCurLayer = $pCurLayer|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iLeftTopXy$0 = 0, $iRightTopXy$0 = 0, $iTopXy$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pCurLayer) + 4040|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($pNeighAvail,$pNonZeroCount,$pCurLayer);
 $2 = HEAP32[$pNeighAvail>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $iTopXy$0 = 0;
 } else {
  $4 = (($pCurLayer) + 4044|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($1) - ($5))|0;
  $iTopXy$0 = $6;
 }
 $7 = (($pNeighAvail) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 $10 = (($1) + -1)|0;
 $$ = $9 ? 0 : $10;
 $11 = (($pNeighAvail) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $iLeftTopXy$0 = 0;
 } else {
  $14 = (($pCurLayer) + 4044|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($10) - ($15))|0;
  $iLeftTopXy$0 = $16;
 }
 $17 = (($pNeighAvail) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $iRightTopXy$0 = 0;
 } else {
  $20 = (($1) + 1)|0;
  $21 = (($pCurLayer) + 4044|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) - ($22))|0;
  $iRightTopXy$0 = $23;
 }
 if ($9) {
  label = 10;
 } else {
  $24 = (($pNeighAvail) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 & 504;
  $27 = ($26|0)==(0);
  if ($27) {
   label = 10;
  } else {
   $28 = (($pCurLayer) + 3916|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29) + ($$<<6)|0) + 12|0);
   $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
   $32 = (($iMvArray) + 24|0);
   HEAP8[$32>>0]=$31&255;HEAP8[$32+1>>0]=($31>>8)&255;HEAP8[$32+2>>0]=($31>>16)&255;HEAP8[$32+3>>0]=$31>>24;
   $33 = HEAP32[$28>>2]|0;
   $34 = ((($33) + ($$<<6)|0) + 28|0);
   $35 = HEAPU8[$34>>0]|(HEAPU8[$34+1>>0]<<8)|(HEAPU8[$34+2>>0]<<16)|(HEAPU8[$34+3>>0]<<24);
   $36 = (($iMvArray) + 48|0);
   HEAP8[$36>>0]=$35&255;HEAP8[$36+1>>0]=($35>>8)&255;HEAP8[$36+2>>0]=($35>>16)&255;HEAP8[$36+3>>0]=$35>>24;
   $37 = HEAP32[$28>>2]|0;
   $38 = ((($37) + ($$<<6)|0) + 44|0);
   $39 = HEAPU8[$38>>0]|(HEAPU8[$38+1>>0]<<8)|(HEAPU8[$38+2>>0]<<16)|(HEAPU8[$38+3>>0]<<24);
   $40 = (($iMvArray) + 72|0);
   HEAP8[$40>>0]=$39&255;HEAP8[$40+1>>0]=($39>>8)&255;HEAP8[$40+2>>0]=($39>>16)&255;HEAP8[$40+3>>0]=$39>>24;
   $41 = HEAP32[$28>>2]|0;
   $42 = ((($41) + ($$<<6)|0) + 60|0);
   $43 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8)|(HEAPU8[$42+2>>0]<<16)|(HEAPU8[$42+3>>0]<<24);
   $44 = (($iMvArray) + 96|0);
   HEAP8[$44>>0]=$43&255;HEAP8[$44+1>>0]=($43>>8)&255;HEAP8[$44+2>>0]=($43>>16)&255;HEAP8[$44+3>>0]=$43>>24;
   $45 = (($pCurLayer) + 3932|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46) + ($$<<4)|0) + 3|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = (($iRefIdxArray) + 6|0);
   HEAP8[$49>>0] = $48;
   $50 = HEAP32[$45>>2]|0;
   $51 = ((($50) + ($$<<4)|0) + 7|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = (($iRefIdxArray) + 12|0);
   HEAP8[$53>>0] = $52;
   $54 = HEAP32[$45>>2]|0;
   $55 = ((($54) + ($$<<4)|0) + 11|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = (($iRefIdxArray) + 18|0);
   HEAP8[$57>>0] = $56;
   $58 = HEAP32[$45>>2]|0;
   $59 = ((($58) + ($$<<4)|0) + 15|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = (($iRefIdxArray) + 24|0);
   HEAP8[$61>>0] = $60;
  }
 }
 do {
  if ((label|0) == 10) {
   $62 = (($iMvArray) + 24|0);
   HEAP8[$62>>0]=0&255;HEAP8[$62+1>>0]=(0>>8)&255;HEAP8[$62+2>>0]=(0>>16)&255;HEAP8[$62+3>>0]=0>>24;
   $63 = (($iMvArray) + 48|0);
   HEAP8[$63>>0]=0&255;HEAP8[$63+1>>0]=(0>>8)&255;HEAP8[$63+2>>0]=(0>>16)&255;HEAP8[$63+3>>0]=0>>24;
   $64 = (($iMvArray) + 72|0);
   HEAP8[$64>>0]=0&255;HEAP8[$64+1>>0]=(0>>8)&255;HEAP8[$64+2>>0]=(0>>16)&255;HEAP8[$64+3>>0]=0>>24;
   $65 = (($iMvArray) + 96|0);
   HEAP8[$65>>0]=0&255;HEAP8[$65+1>>0]=(0>>8)&255;HEAP8[$65+2>>0]=(0>>16)&255;HEAP8[$65+3>>0]=0>>24;
   $66 = HEAP32[$7>>2]|0;
   $67 = ($66|0)==(0);
   $68 = (($iRefIdxArray) + 24|0);
   if ($67) {
    HEAP8[$68>>0] = -2;
    $69 = (($iRefIdxArray) + 18|0);
    HEAP8[$69>>0] = -2;
    $70 = (($iRefIdxArray) + 12|0);
    HEAP8[$70>>0] = -2;
    $71 = (($iRefIdxArray) + 6|0);
    HEAP8[$71>>0] = -2;
    break;
   } else {
    HEAP8[$68>>0] = -1;
    $72 = (($iRefIdxArray) + 18|0);
    HEAP8[$72>>0] = -1;
    $73 = (($iRefIdxArray) + 12|0);
    HEAP8[$73>>0] = -1;
    $74 = (($iRefIdxArray) + 6|0);
    HEAP8[$74>>0] = -1;
    break;
   }
  }
 } while(0);
 $75 = HEAP32[$11>>2]|0;
 $76 = ($75|0)==(0);
 if ($76) {
  label = 16;
 } else {
  $77 = (($pNeighAvail) + 24|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $78 & 504;
  $80 = ($79|0)==(0);
  if ($80) {
   label = 16;
  } else {
   $81 = (($pCurLayer) + 3916|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($82) + ($iLeftTopXy$0<<6)|0) + 60|0);
   $84 = HEAPU8[$83>>0]|(HEAPU8[$83+1>>0]<<8)|(HEAPU8[$83+2>>0]<<16)|(HEAPU8[$83+3>>0]<<24);
   HEAP8[$iMvArray>>0]=$84&255;HEAP8[$iMvArray+1>>0]=($84>>8)&255;HEAP8[$iMvArray+2>>0]=($84>>16)&255;HEAP8[$iMvArray+3>>0]=$84>>24;
   $85 = (($pCurLayer) + 3932|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ((($86) + ($iLeftTopXy$0<<4)|0) + 15|0);
   $88 = HEAP8[$87>>0]|0;
   HEAP8[$iRefIdxArray>>0] = $88;
  }
 }
 do {
  if ((label|0) == 16) {
   HEAP8[$iMvArray>>0]=0&255;HEAP8[$iMvArray+1>>0]=(0>>8)&255;HEAP8[$iMvArray+2>>0]=(0>>16)&255;HEAP8[$iMvArray+3>>0]=0>>24;
   $89 = HEAP32[$11>>2]|0;
   $90 = ($89|0)==(0);
   if ($90) {
    HEAP8[$iRefIdxArray>>0] = -2;
    break;
   } else {
    HEAP8[$iRefIdxArray>>0] = -1;
    break;
   }
  }
 } while(0);
 $91 = HEAP32[$pNeighAvail>>2]|0;
 $92 = ($91|0)==(0);
 if ($92) {
  label = 22;
 } else {
  $93 = (($pNeighAvail) + 20|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $94 & 504;
  $96 = ($95|0)==(0);
  if ($96) {
   label = 22;
  } else {
   $97 = (($pCurLayer) + 3916|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ((($98) + ($iTopXy$0<<6)|0) + 48|0);
   $100 = $99;
   $101 = $100;
   $102 = HEAPU8[$101>>0]|(HEAPU8[$101+1>>0]<<8)|(HEAPU8[$101+2>>0]<<16)|(HEAPU8[$101+3>>0]<<24);
   $103 = (($100) + 4)|0;
   $104 = $103;
   $105 = HEAPU8[$104>>0]|(HEAPU8[$104+1>>0]<<8)|(HEAPU8[$104+2>>0]<<16)|(HEAPU8[$104+3>>0]<<24);
   $106 = (($iMvArray) + 4|0);
   $107 = $106;
   $108 = $107;
   HEAP8[$108>>0]=$102&255;HEAP8[$108+1>>0]=($102>>8)&255;HEAP8[$108+2>>0]=($102>>16)&255;HEAP8[$108+3>>0]=$102>>24;
   $109 = (($107) + 4)|0;
   $110 = $109;
   HEAP8[$110>>0]=$105&255;HEAP8[$110+1>>0]=($105>>8)&255;HEAP8[$110+2>>0]=($105>>16)&255;HEAP8[$110+3>>0]=$105>>24;
   $111 = HEAP32[$97>>2]|0;
   $112 = ((($111) + ($iTopXy$0<<6)|0) + 56|0);
   $113 = $112;
   $114 = $113;
   $115 = HEAPU8[$114>>0]|(HEAPU8[$114+1>>0]<<8)|(HEAPU8[$114+2>>0]<<16)|(HEAPU8[$114+3>>0]<<24);
   $116 = (($113) + 4)|0;
   $117 = $116;
   $118 = HEAPU8[$117>>0]|(HEAPU8[$117+1>>0]<<8)|(HEAPU8[$117+2>>0]<<16)|(HEAPU8[$117+3>>0]<<24);
   $119 = (($iMvArray) + 12|0);
   $120 = $119;
   $121 = $120;
   HEAP8[$121>>0]=$115&255;HEAP8[$121+1>>0]=($115>>8)&255;HEAP8[$121+2>>0]=($115>>16)&255;HEAP8[$121+3>>0]=$115>>24;
   $122 = (($120) + 4)|0;
   $123 = $122;
   HEAP8[$123>>0]=$118&255;HEAP8[$123+1>>0]=($118>>8)&255;HEAP8[$123+2>>0]=($118>>16)&255;HEAP8[$123+3>>0]=$118>>24;
   $124 = (($pCurLayer) + 3932|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ((($125) + ($iTopXy$0<<4)|0) + 12|0);
   $127 = HEAPU8[$126>>0]|(HEAPU8[$126+1>>0]<<8)|(HEAPU8[$126+2>>0]<<16)|(HEAPU8[$126+3>>0]<<24);
   $128 = (($iRefIdxArray) + 1|0);
   HEAP8[$128>>0]=$127&255;HEAP8[$128+1>>0]=($127>>8)&255;HEAP8[$128+2>>0]=($127>>16)&255;HEAP8[$128+3>>0]=$127>>24;
  }
 }
 do {
  if ((label|0) == 22) {
   $129 = (($iMvArray) + 4|0);
   dest=$129+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $130 = HEAP32[$pNeighAvail>>2]|0;
   $131 = ($130|0)==(0);
   $132 = (($iRefIdxArray) + 1|0);
   if ($131) {
    HEAP8[$132>>0]=-16843010&255;HEAP8[$132+1>>0]=(-16843010>>8)&255;HEAP8[$132+2>>0]=(-16843010>>16)&255;HEAP8[$132+3>>0]=-16843010>>24;
    break;
   } else {
    HEAP8[$132>>0]=-1&255;HEAP8[$132+1>>0]=(-1>>8)&255;HEAP8[$132+2>>0]=(-1>>16)&255;HEAP8[$132+3>>0]=-1>>24;
    break;
   }
  }
 } while(0);
 $133 = HEAP32[$17>>2]|0;
 $134 = ($133|0)==(0);
 if ($134) {
  label = 28;
 } else {
  $135 = (($pNeighAvail) + 28|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $136 & 504;
  $138 = ($137|0)==(0);
  if ($138) {
   label = 28;
  } else {
   $139 = (($pCurLayer) + 3916|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($140) + ($iRightTopXy$0<<6)|0) + 48|0);
   $142 = HEAPU8[$141>>0]|(HEAPU8[$141+1>>0]<<8)|(HEAPU8[$141+2>>0]<<16)|(HEAPU8[$141+3>>0]<<24);
   $143 = (($iMvArray) + 20|0);
   HEAP8[$143>>0]=$142&255;HEAP8[$143+1>>0]=($142>>8)&255;HEAP8[$143+2>>0]=($142>>16)&255;HEAP8[$143+3>>0]=$142>>24;
   $144 = (($pCurLayer) + 3932|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ((($145) + ($iRightTopXy$0<<4)|0) + 12|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = (($iRefIdxArray) + 5|0);
   HEAP8[$148>>0] = $147;
  }
 }
 do {
  if ((label|0) == 28) {
   $149 = (($iMvArray) + 20|0);
   HEAP8[$149>>0]=0&255;HEAP8[$149+1>>0]=(0>>8)&255;HEAP8[$149+2>>0]=(0>>16)&255;HEAP8[$149+3>>0]=0>>24;
   $150 = HEAP32[$17>>2]|0;
   $151 = ($150|0)==(0);
   $152 = (($iRefIdxArray) + 5|0);
   if ($151) {
    HEAP8[$152>>0] = -2;
    break;
   } else {
    HEAP8[$152>>0] = -1;
    break;
   }
  }
 } while(0);
 $153 = (($iMvArray) + 36|0);
 HEAP8[$153>>0]=0&255;HEAP8[$153+1>>0]=(0>>8)&255;HEAP8[$153+2>>0]=(0>>16)&255;HEAP8[$153+3>>0]=0>>24;
 $154 = (($iMvArray) + 84|0);
 HEAP8[$154>>0]=0&255;HEAP8[$154+1>>0]=(0>>8)&255;HEAP8[$154+2>>0]=(0>>16)&255;HEAP8[$154+3>>0]=0>>24;
 $155 = (($iMvArray) + 44|0);
 HEAP8[$155>>0]=0&255;HEAP8[$155+1>>0]=(0>>8)&255;HEAP8[$155+2>>0]=(0>>16)&255;HEAP8[$155+3>>0]=0>>24;
 $156 = (($iMvArray) + 68|0);
 HEAP8[$156>>0]=0&255;HEAP8[$156+1>>0]=(0>>8)&255;HEAP8[$156+2>>0]=(0>>16)&255;HEAP8[$156+3>>0]=0>>24;
 $157 = (($iMvArray) + 92|0);
 HEAP8[$157>>0]=0&255;HEAP8[$157+1>>0]=(0>>8)&255;HEAP8[$157+2>>0]=(0>>16)&255;HEAP8[$157+3>>0]=0>>24;
 $158 = (($iRefIdxArray) + 23|0);
 HEAP8[$158>>0] = -2;
 $159 = (($iRefIdxArray) + 17|0);
 HEAP8[$159>>0] = -2;
 $160 = (($iRefIdxArray) + 11|0);
 HEAP8[$160>>0] = -2;
 $161 = (($iRefIdxArray) + 21|0);
 HEAP8[$161>>0] = -2;
 $162 = (($iRefIdxArray) + 9|0);
 HEAP8[$162>>0] = -2;
 STACKTOP = sp;return;
}
function __ZN7WelsDec16PredIntra4x4ModeEPai($pIntraPredMode,$iIdx4) {
 $pIntraPredMode = $pIntraPredMode|0;
 $iIdx4 = $iIdx4|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iBestMode$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (8472 + ($iIdx4)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + -8)|0;
 $4 = (($pIntraPredMode) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = (($2) + -1)|0;
 $7 = (($pIntraPredMode) + ($6)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(-1);
 $10 = ($5<<24>>24)==(-1);
 $or$cond = $9 | $10;
 if ($or$cond) {
  $iBestMode$0 = 2;
  $13 = $iBestMode$0 << 24 >> 24;
  STACKTOP = sp;return ($13|0);
 }
 $11 = ($8<<24>>24)<($5<<24>>24);
 $12 = $11 ? $8 : $5;
 $iBestMode$0 = $12;
 $13 = $iBestMode$0 << 24 >> 24;
 STACKTOP = sp;return ($13|0);
}
function __ZN7WelsDec23CheckIntra16x16PredModeEhPa($uiSampleAvail,$pMode) {
 $uiSampleAvail = $uiSampleAvail|0;
 $pMode = $pMode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $uiSampleAvail&255;
 $1 = $0 & 4;
 $2 = $0 & 2;
 $3 = $0 & 1;
 $4 = HEAP8[$pMode>>0]|0;
 $5 = $4 << 24 >> 24;
 $6 = ($4&255)>(3);
 L1: do {
  if ($6) {
   $$0 = 1051;
  } else {
   $7 = ($4<<24>>24)==(2);
   do {
    if ($7) {
     $8 = ($3|0)==(0);
     $9 = $0 & 5;
     $10 = ($9|0)==(5);
     if ($10) {
      $$0 = 0;
      break L1;
     }
     $11 = ($1|0)==(0);
     if (!($11)) {
      HEAP8[$pMode>>0] = 4;
      break;
     }
     if ($8) {
      HEAP8[$pMode>>0] = 6;
      break;
     } else {
      HEAP8[$pMode>>0] = 5;
      break;
     }
    } else {
     $12 = (15280 + ($5<<2)|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($4<<24>>24)==($13<<24>>24);
     if (!($14)) {
      $$0 = 1051;
      break L1;
     }
     $15 = ((15280 + ($5<<2)|0) + 1|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = $16 << 24 >> 24;
     $18 = ($1|0)<($17|0);
     if ($18) {
      $$0 = 1051;
      break L1;
     }
     $19 = ((15280 + ($5<<2)|0) + 2|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = $20 << 24 >> 24;
     $22 = ($3|0)<($21|0);
     if ($22) {
      $$0 = 1051;
      break L1;
     }
     $23 = ((15280 + ($5<<2)|0) + 3|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24 << 24 >> 24;
     $26 = ($2|0)<($25|0);
     if ($26) {
      $$0 = 1051;
      break L1;
     }
    }
   } while(0);
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec24CheckIntraChromaPredModeEhPa($uiSampleAvail,$pMode) {
 $uiSampleAvail = $uiSampleAvail|0;
 $pMode = $pMode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $uiSampleAvail&255;
 $1 = $0 & 4;
 $2 = $0 & 2;
 $3 = $0 & 1;
 $4 = HEAP8[$pMode>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = ($3|0)==(0);
   $7 = $0 & 5;
   $8 = ($7|0)==(5);
   if ($8) {
    $$0 = 0;
   } else {
    $9 = ($1|0)==(0);
    if (!($9)) {
     HEAP8[$pMode>>0] = 4;
     label = 12;
     break;
    }
    if ($6) {
     HEAP8[$pMode>>0] = 6;
     label = 12;
     break;
    } else {
     HEAP8[$pMode>>0] = 5;
     label = 12;
     break;
    }
   }
  } else {
   $10 = $4 << 24 >> 24;
   $11 = (15296 + ($10<<2)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($4<<24>>24)==($12<<24>>24);
   if ($13) {
    $14 = ((15296 + ($10<<2)|0) + 1|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($1|0)<($16|0);
    if ($17) {
     $$0 = 1052;
    } else {
     $18 = ((15296 + ($10<<2)|0) + 2|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = $19 << 24 >> 24;
     $21 = ($3|0)<($20|0);
     if ($21) {
      $$0 = 1052;
     } else {
      $22 = ((15296 + ($10<<2)|0) + 3|0);
      $23 = HEAP8[$22>>0]|0;
      $24 = $23 << 24 >> 24;
      $25 = ($2|0)<($24|0);
      if ($25) {
       $$0 = 1052;
      } else {
       label = 12;
      }
     }
    }
   } else {
    $$0 = 1052;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec21CheckIntraNxNPredModeEPiPaib($pSampleAvail,$pMode,$iIndex,$b8x8) {
 $pSampleAvail = $pSampleAvail|0;
 $pMode = $pMode|0;
 $iIndex = $iIndex|0;
 $b8x8 = $b8x8|0;
 var $$ = 0, $$0 = 0, $$9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iFinalMode$0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (16968 + ($iIndex)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + -1)|0;
 $4 = (($pSampleAvail) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + -6)|0;
 $7 = (($pSampleAvail) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($2) + -7)|0;
 $10 = (($pSampleAvail) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $b8x8 ? 4 : 5;
 $13 = (($2) - ($12))|0;
 $14 = (($pSampleAvail) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP8[$pMode>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($16&255)>(8);
 if ($18) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($16<<24>>24)==(2);
 if ($19) {
  $20 = ($5|0)!=(0);
  $21 = ($8|0)!=(0);
  $or$cond = $20 & $21;
  if ($or$cond) {
   $$0 = $17;
   STACKTOP = sp;return ($$0|0);
  }
  if ($20) {
   $iFinalMode$0 = 9;
  } else {
   $$ = $21 ? 10 : 11;
   $iFinalMode$0 = $$;
  }
 } else {
  $22 = (15312 + ($17<<2)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = ($16<<24>>24)==($23<<24>>24);
  if (!($24)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = ((15312 + ($17<<2)|0) + 1|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($5|0)<($27|0);
  if ($28) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $29 = ((15312 + ($17<<2)|0) + 2|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = ($8|0)<($31|0);
  if ($32) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $33 = ((15312 + ($17<<2)|0) + 3|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34 << 24 >> 24;
  $36 = ($11|0)<($35|0);
  if ($36) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $37 = ($16<<24>>24)==(3);
  $38 = ($15|0)==(0);
  $or$cond3 = $37 & $38;
  if ($or$cond3) {
   $iFinalMode$0 = 12;
  } else {
   $39 = ($16<<24>>24)==(7);
   $or$cond5 = $39 & $38;
   $$9 = $or$cond5 ? 13 : $16;
   $iFinalMode$0 = $$9;
  }
 }
 $40 = $iFinalMode$0 << 24 >> 24;
 $$0 = $40;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec12BsStartCavlcEPN10WelsCommon15TagBitStringAuxE($pBs) {
 $pBs = $pBs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBs) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pBs>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 << 3;
 $7 = (($pBs) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -16)|0;
 $10 = (($9) + ($6))|0;
 $11 = (($pBs) + 12|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN7WelsDec10BsEndCavlcEPN10WelsCommon15TagBitStringAuxE($pBs) {
 $pBs = $pBs|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pBs>>2]|0;
 $1 = (($pBs) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >> 3;
 $4 = (($0) + ($3)|0);
 $5 = (($pBs) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP8[$4>>0]|0;
 $7 = $6&255;
 $8 = $7 << 8;
 $$sum = (($3) + 1)|0;
 $9 = (($0) + ($$sum)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $8 | $11;
 $13 = $12 << 16;
 $$sum1 = (($3) + 2)|0;
 $14 = (($0) + ($$sum1)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = $13 | $17;
 $$sum2 = (($3) + 3)|0;
 $19 = (($0) + ($$sum2)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $18 | $21;
 $23 = $2 & 7;
 $24 = $22 << $23;
 $25 = (($pBs) + 20|0);
 HEAP32[$25>>2] = $24;
 $$sum3 = (($3) + 4)|0;
 $26 = (($0) + ($$sum3)|0);
 HEAP32[$5>>2] = $26;
 $27 = $23 | -16;
 $28 = (($pBs) + 24|0);
 HEAP32[$28>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($pVlcTable,$pNonZeroCountCache,$pBs,$iIndex,$iMaxNumCoeff,$kpZigzagTable,$iResidualProperty,$pTCoeff,$uiQp,$pCtx) {
 $pVlcTable = $pVlcTable|0;
 $pNonZeroCountCache = $pNonZeroCountCache|0;
 $pBs = $pBs|0;
 $iIndex = $iIndex|0;
 $iMaxNumCoeff = $iMaxNumCoeff|0;
 $kpZigzagTable = $kpZigzagTable|0;
 $iResidualProperty = $iResidualProperty|0;
 $pTCoeff = $pTCoeff|0;
 $uiQp = $uiQp|0;
 $pCtx = $pCtx|0;
 var $$0 = 0, $$pre = 0, $$pre$i = 0, $$pre19 = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$08 = 0, $i$08$in = 0, $i$110 = 0, $i$215 = 0;
 var $iCoeffNum$07 = 0, $iCoeffNum$111 = 0, $iCoeffNum$216 = 0, $iLevel = 0, $iRun = 0, $iUsedBits$0 = 0, $kpBitNumMap$0$i = 0, $or$cond = 0, $phitmp = 0, $phitmp4 = 0, $sReadBitsCache = 0, $sext = 0, $sext5 = 0, $uiTableType$0$i = 0, $uiTotalCoeff = 0, $uiTrailingOnes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $iLevel = sp + 80|0;
 $iRun = sp + 16|0;
 $uiTotalCoeff = sp + 145|0;
 $uiTrailingOnes = sp + 144|0;
 $sReadBitsCache = sp;
 do {
  switch ($iResidualProperty|0) {
  case 9:  {
   $14 = 5;$5 = 1;
   break;
  }
  case 7:  {
   $14 = 4;$5 = 1;
   break;
  }
  case 15:  {
   $14 = 5;$5 = 4;
   break;
  }
  case 12:  {
   $14 = 3;$5 = 3;
   break;
  }
  case 11:  {
   $14 = 3;$5 = 0;
   break;
  }
  case 8:  {
   $14 = 4;$5 = 2;
   break;
  }
  case 10:  {
   $14 = 5;$5 = 2;
   break;
  }
  case 13:  {
   $14 = 4;$5 = 4;
   break;
  }
  case 17:  {
   $14 = 6;$5 = 6;
   break;
  }
  case 18:  {
   $14 = 6;$5 = 7;
   break;
  }
  case 16:  {
   $14 = 5;$5 = 5;
   break;
  }
  case 14:  {
   $14 = 4;$5 = 5;
   break;
  }
  default: {
   $14 = $iResidualProperty;$5 = 0;
  }
  }
 } while(0);
 $0 = (($pCtx) + 562526|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = $uiQp&255;
 if ($2) {
  $8 = (17456 + ($3<<4)|0);
  $140 = $8;
 } else {
  $4 = ((($pCtx) + ($5<<2)|0) + 562472|0);
  $6 = HEAP32[$4>>2]|0;
  $7 = (($6) + ($3<<5)|0);
  $140 = $7;
 }
 $9 = (($pBs) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$pBs>>2]|0;
 $12 = $10 >> 3;
 $13 = (($11) + ($12)|0);
 $15 = ($14|0)==(4);
 $16 = HEAP8[$13>>0]|0;
 $17 = $16&255;
 $18 = $17 << 8;
 $$sum = (($12) + 1)|0;
 $19 = (($11) + ($$sum)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $18 | $21;
 $23 = $22 << 16;
 $$sum2 = (($12) + 2)|0;
 $24 = (($11) + ($$sum2)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 << 8;
 $28 = $23 | $27;
 $$sum3 = (($12) + 3)|0;
 $29 = (($11) + ($$sum3)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $28 | $31;
 $33 = $10 & 7;
 $34 = $32 << $33;
 HEAP32[$sReadBitsCache>>2] = $34;
 $35 = (32 - ($33))|0;
 $36 = $35&255;
 $37 = (($sReadBitsCache) + 4|0);
 HEAP8[$37>>0] = $36;
 $38 = (($sReadBitsCache) + 8|0);
 HEAP32[$38>>2] = $13;
 $39 = (16560 + ($iIndex)|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = (($41) + -1)|0;
 $43 = (($pNonZeroCountCache) + ($42)|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = (($41) + -8)|0;
 $46 = (($pNonZeroCountCache) + ($45)|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $44&255;
 $49 = $47&255;
 $50 = (($49) + ($48))|0;
 $51 = ($44<<24>>24)==(-1);
 if ($51) {
  $56 = $50 << 24;
  $sext5 = (($56) + 16777216)|0;
  $57 = $sext5 >> 24;
  $58 = ($47<<24>>24)==(-1);
  $phitmp4 = $58&1;
  $60 = $57;$61 = $phitmp4;
 } else {
  $52 = ($47<<24>>24)!=(-1);
  $phitmp = $52&1;
  $53 = $50 << 24;
  $sext = (($53) + 16777216)|0;
  $54 = $sext >> 24;
  $55 = $54 >> $phitmp;
  $60 = $55;$61 = 0;
 }
 $59 = (($61) + ($60))|0;
 $62 = $59&255;
 $63 = (__ZN7WelsDecL33CavlcGetTrailingOnesAndTotalCoeffERhS0_PNS_16TagReadBitsCacheEPNS_11TagVlcTableEba($uiTotalCoeff,$uiTrailingOnes,$sReadBitsCache,$pVlcTable,$15,$62)|0);
 if ((($14|0) == 1)) {
  $$pre = HEAP8[$uiTotalCoeff>>0]|0;
  $66 = $$pre;
 } else if ((($14|0) == 4)) {
  $$pre19 = HEAP8[$uiTotalCoeff>>0]|0;
  $66 = $$pre19;
 } else {
  $64 = HEAP8[$uiTotalCoeff>>0]|0;
  $65 = (($pNonZeroCountCache) + ($41)|0);
  HEAP8[$65>>0] = $64;
  $66 = $64;
 }
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  $68 = HEAP32[$9>>2]|0;
  $69 = (($68) + ($63))|0;
  HEAP32[$9>>2] = $69;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $70 = HEAP8[$uiTrailingOnes>>0]|0;
 $71 = ($70&255)>(3);
 $72 = ($66&255)>(16);
 $or$cond = $71 | $72;
 if ($or$cond) {
  $$0 = 1046;
  STACKTOP = sp;return ($$0|0);
 }
 $73 = (__ZN7WelsDecL16CavlcGetLevelValEPiPNS_16TagReadBitsCacheEhh($iLevel,$sReadBitsCache,$66,$70)|0);
 $74 = ($73|0)==(-1);
 if ($74) {
  $$0 = 1045;
  STACKTOP = sp;return ($$0|0);
 }
 $75 = (($73) + ($63))|0;
 $76 = $66&255;
 $77 = ($76|0)<($iMaxNumCoeff|0);
 if ($77) {
  $78 = $15&1;
  $kpBitNumMap$0$i = $15 ? 14152 : 14104;
  $uiTableType$0$i = $15 ? $78 : 0;
  $79 = (($76) + -1)|0;
  $80 = (($kpBitNumMap$0$i) + ($79)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = HEAP8[$37>>0]|0;
  $84 = ($83&255)<($81&255);
  if ($84) {
   $85 = HEAP32[$38>>2]|0;
   $86 = (($85) + 2|0);
   HEAP32[$38>>2] = $86;
   $87 = $83&255;
   $88 = (($87) + 16)|0;
   $89 = $88&255;
   HEAP8[$37>>0] = $89;
   $90 = (($85) + 4|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = $92 << 8;
   $94 = (($85) + 5|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = $95&255;
   $97 = $93 | $96;
   $98 = $88 & 255;
   $99 = (32 - ($98))|0;
   $100 = $97 << $99;
   $101 = HEAP32[$sReadBitsCache>>2]|0;
   $102 = $100 | $101;
   HEAP32[$sReadBitsCache>>2] = $102;
   $105 = $102;$113 = $89;
  } else {
   $$pre$i = HEAP32[$sReadBitsCache>>2]|0;
   $105 = $$pre$i;$113 = $83;
  }
  $103 = (32 - ($82))|0;
  $104 = $105 >>> $103;
  $106 = (((($pVlcTable) + (($uiTableType$0$i*60)|0)|0) + ($79<<2)|0) + 160|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($107) + ($104<<1)|0) + 1|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = $105 << $110;
  HEAP32[$sReadBitsCache>>2] = $111;
  $112 = $113&255;
  $114 = (($112) - ($110))|0;
  $115 = $114&255;
  HEAP8[$37>>0] = $115;
  $116 = (($107) + ($104<<1)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($110) + ($75))|0;
  $121 = $118;$iUsedBits$0 = $119;
 } else {
  $121 = 0;$iUsedBits$0 = $75;
 }
 $120 = (($76) + ($121))|0;
 $122 = ($120|0)>($iMaxNumCoeff|0);
 if ($122) {
  $$0 = 1047;
  STACKTOP = sp;return ($$0|0);
 }
 $123 = (__ZN7WelsDecL17CavlcGetRunBeforeEPiPNS_16TagReadBitsCacheEhPNS_11TagVlcTableEi($iRun,$sReadBitsCache,$66,$pVlcTable,$121)|0);
 $124 = ($123|0)==(-1);
 if ($124) {
  $$0 = 1048;
  STACKTOP = sp;return ($$0|0);
 }
 $125 = (($123) + ($iUsedBits$0))|0;
 $126 = HEAP32[$9>>2]|0;
 $127 = (($125) + ($126))|0;
 HEAP32[$9>>2] = $127;
 if ($15) {
  $i$08$in = $76;$iCoeffNum$07 = -1;
  while(1) {
   $i$08 = (($i$08$in) + -1)|0;
   $128 = (($iRun) + ($i$08<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($iCoeffNum$07) + 1)|0;
   $131 = (($130) + ($129))|0;
   $132 = (($kpZigzagTable) + ($131)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = HEAP8[$0>>0]|0;
   $136 = ($135<<24>>24)!=(0);
   $137 = (($iLevel) + ($i$08<<2)|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = HEAP16[$140>>1]|0;
   $141 = $139&65535;
   $142 = Math_imul($141, $138)|0;
   $143 = $142 >>> 4;
   $144 = $136 ? $143 : $142;
   $145 = $144&65535;
   $146 = (($pTCoeff) + ($134<<1)|0);
   HEAP16[$146>>1] = $145;
   $147 = ($i$08|0)>(0);
   if ($147) {
    $i$08$in = $i$08;$iCoeffNum$07 = $131;
   } else {
    $$0 = 0;
    break;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $148 = ($14|0)==(1);
 $149 = (($76) + -1)|0;
 if ($148) {
  $i$110 = $149;$iCoeffNum$111 = -1;
  while(1) {
   $150 = (($iRun) + ($i$110<<2)|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($iCoeffNum$111) + 1)|0;
   $153 = (($152) + ($151))|0;
   $154 = (($kpZigzagTable) + ($153)|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $157 = (($iLevel) + ($i$110<<2)|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $158&65535;
   $160 = (($pTCoeff) + ($156<<1)|0);
   HEAP16[$160>>1] = $159;
   $161 = (($i$110) + -1)|0;
   $162 = ($i$110|0)>(0);
   if ($162) {
    $i$110 = $161;$iCoeffNum$111 = $153;
   } else {
    $$0 = 0;
    break;
   }
  }
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$215 = $149;$iCoeffNum$216 = -1;
 }
 while(1) {
  $163 = (($iRun) + ($i$215<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($iCoeffNum$216) + 1)|0;
  $166 = (($165) + ($164))|0;
  $167 = (($kpZigzagTable) + ($166)|0);
  $168 = HEAP8[$167>>0]|0;
  $169 = $168&255;
  $170 = HEAP8[$0>>0]|0;
  $171 = ($170<<24>>24)==(0);
  $172 = (($iLevel) + ($i$215<<2)|0);
  $173 = HEAP32[$172>>2]|0;
  if ($171) {
   $179 = $169 & 7;
   $180 = (($140) + ($179<<1)|0);
   $181 = HEAP16[$180>>1]|0;
   $182 = $181&65535;
   $183 = Math_imul($182, $173)|0;
   $185 = $183;
  } else {
   $174 = (($140) + ($169<<1)|0);
   $175 = HEAP16[$174>>1]|0;
   $176 = $175&65535;
   $177 = Math_imul($176, $173)|0;
   $178 = $177 >> 4;
   $185 = $178;
  }
  $184 = $185&65535;
  $186 = (($pTCoeff) + ($169<<1)|0);
  HEAP16[$186>>1] = $184;
  $187 = (($i$215) + -1)|0;
  $188 = ($i$215|0)>(0);
  if ($188) {
   $i$215 = $187;$iCoeffNum$216 = $166;
  } else {
   $$0 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($pVlcTable,$pNonZeroCountCache,$pBs,$iIndex,$iMaxNumCoeff,$kpZigzagTable,$iResidualProperty,$pTCoeff,$iIdx4x4,$uiQp,$pCtx) {
 $pVlcTable = $pVlcTable|0;
 $pNonZeroCountCache = $pNonZeroCountCache|0;
 $pBs = $pBs|0;
 $iIndex = $iIndex|0;
 $iMaxNumCoeff = $iMaxNumCoeff|0;
 $kpZigzagTable = $kpZigzagTable|0;
 $iResidualProperty = $iResidualProperty|0;
 $pTCoeff = $pTCoeff|0;
 $iIdx4x4 = $iIdx4x4|0;
 $uiQp = $uiQp|0;
 $pCtx = $pCtx|0;
 var $$0 = 0, $$pre = 0, $$pre$i = 0, $$pre13 = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div = 0, $i$0 = 0;
 var $i$0$us = 0, $i$07 = 0, $i$09 = 0, $i$09$us = 0, $iCoeffNum$08 = 0, $iCoeffNum$08$us = 0, $iLevel = 0, $iResidualProperty5 = 0, $iRun = 0, $iUsedBits$0 = 0, $kpBitNumMap$0$i = 0, $or$cond = 0, $phitmp = 0, $phitmp10 = 0, $phitmp11 = 0, $phitmp4 = 0, $sReadBitsCache = 0, $sext = 0, $sext6 = 0, $uiTableType$0$i = 0;
 var $uiTotalCoeff = 0, $uiTrailingOnes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $iLevel = sp + 80|0;
 $iRun = sp + 16|0;
 $uiTotalCoeff = sp + 145|0;
 $uiTrailingOnes = sp + 144|0;
 $sReadBitsCache = sp;
 do {
  switch ($iResidualProperty|0) {
  case 11:  {
   $5 = -6;$iResidualProperty5 = 3;
   break;
  }
  case 17:  {
   $5 = 0;$iResidualProperty5 = 6;
   break;
  }
  case 9:  {
   $5 = -5;$iResidualProperty5 = 5;
   break;
  }
  case 14:  {
   $5 = -1;$iResidualProperty5 = 4;
   break;
  }
  case 8:  {
   $5 = -4;$iResidualProperty5 = 4;
   break;
  }
  case 15:  {
   $5 = -2;$iResidualProperty5 = 5;
   break;
  }
  case 18:  {
   $5 = 1;$iResidualProperty5 = 6;
   break;
  }
  case 12:  {
   $5 = -3;$iResidualProperty5 = 3;
   break;
  }
  case 7:  {
   $5 = -5;$iResidualProperty5 = 4;
   break;
  }
  case 10:  {
   $5 = -4;$iResidualProperty5 = 5;
   break;
  }
  case 16:  {
   $5 = -1;$iResidualProperty5 = 5;
   break;
  }
  case 13:  {
   $5 = -2;$iResidualProperty5 = 4;
   break;
  }
  default: {
   $5 = -6;$iResidualProperty5 = $iResidualProperty;
  }
  }
 } while(0);
 $0 = (($pCtx) + 562526|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = $uiQp&255;
 if ($2) {
  $8 = (18288 + ($3<<7)|0);
  $143 = $8;
 } else {
  $4 = ((($pCtx) + ($5<<2)|0) + 562496|0);
  $6 = HEAP32[$4>>2]|0;
  $7 = (($6) + ($3<<7)|0);
  $143 = $7;
 }
 $9 = (($pBs) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$pBs>>2]|0;
 $12 = $10 >> 3;
 $13 = (($11) + ($12)|0);
 $14 = ($iResidualProperty5|0)==(4);
 $15 = HEAP8[$13>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $$sum = (($12) + 1)|0;
 $18 = (($11) + ($$sum)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = $21 << 16;
 $$sum2 = (($12) + 2)|0;
 $23 = (($11) + ($$sum2)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 8;
 $27 = $22 | $26;
 $$sum3 = (($12) + 3)|0;
 $28 = (($11) + ($$sum3)|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $27 | $30;
 $32 = $10 & 7;
 $33 = $31 << $32;
 HEAP32[$sReadBitsCache>>2] = $33;
 $34 = (32 - ($32))|0;
 $35 = $34&255;
 $36 = (($sReadBitsCache) + 4|0);
 HEAP8[$36>>0] = $35;
 $37 = (($sReadBitsCache) + 8|0);
 HEAP32[$37>>2] = $13;
 $38 = (16560 + ($iIndex)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = (($40) + -1)|0;
 $42 = (($pNonZeroCountCache) + ($41)|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = (($40) + -8)|0;
 $45 = (($pNonZeroCountCache) + ($44)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $43&255;
 $48 = $46&255;
 $49 = (($48) + ($47))|0;
 $50 = ($43<<24>>24)==(-1);
 if ($50) {
  $55 = $49 << 24;
  $sext6 = (($55) + 16777216)|0;
  $56 = $sext6 >> 24;
  $57 = ($46<<24>>24)==(-1);
  $phitmp4 = $57&1;
  $59 = $56;$60 = $phitmp4;
 } else {
  $51 = ($46<<24>>24)!=(-1);
  $phitmp = $51&1;
  $52 = $49 << 24;
  $sext = (($52) + 16777216)|0;
  $53 = $sext >> 24;
  $54 = $53 >> $phitmp;
  $59 = $54;$60 = 0;
 }
 $58 = (($60) + ($59))|0;
 $61 = $58&255;
 $62 = (__ZN7WelsDecL33CavlcGetTrailingOnesAndTotalCoeffERhS0_PNS_16TagReadBitsCacheEPNS_11TagVlcTableEba($uiTotalCoeff,$uiTrailingOnes,$sReadBitsCache,$pVlcTable,$14,$61)|0);
 if ((($iResidualProperty5|0) == 4)) {
  $$pre13 = HEAP8[$uiTotalCoeff>>0]|0;
  $65 = $$pre13;
 } else if ((($iResidualProperty5|0) == 1)) {
  $$pre = HEAP8[$uiTotalCoeff>>0]|0;
  $65 = $$pre;
 } else {
  $63 = HEAP8[$uiTotalCoeff>>0]|0;
  $64 = (($pNonZeroCountCache) + ($40)|0);
  HEAP8[$64>>0] = $63;
  $65 = $63;
 }
 $66 = ($65<<24>>24)==(0);
 if ($66) {
  $67 = HEAP32[$9>>2]|0;
  $68 = (($67) + ($62))|0;
  HEAP32[$9>>2] = $68;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = HEAP8[$uiTrailingOnes>>0]|0;
 $70 = ($69&255)>(3);
 $71 = ($65&255)>(16);
 $or$cond = $70 | $71;
 if ($or$cond) {
  $$0 = 1046;
  STACKTOP = sp;return ($$0|0);
 }
 $72 = (__ZN7WelsDecL16CavlcGetLevelValEPiPNS_16TagReadBitsCacheEhh($iLevel,$sReadBitsCache,$65,$69)|0);
 $73 = ($72|0)==(-1);
 if ($73) {
  $$0 = 1045;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = (($72) + ($62))|0;
 $75 = $65&255;
 $76 = ($75|0)<($iMaxNumCoeff|0);
 if ($76) {
  $77 = $14&1;
  $kpBitNumMap$0$i = $14 ? 14152 : 14104;
  $uiTableType$0$i = $14 ? $77 : 0;
  $78 = (($75) + -1)|0;
  $79 = (($kpBitNumMap$0$i) + ($78)|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = HEAP8[$36>>0]|0;
  $83 = ($82&255)<($80&255);
  if ($83) {
   $84 = HEAP32[$37>>2]|0;
   $85 = (($84) + 2|0);
   HEAP32[$37>>2] = $85;
   $86 = $82&255;
   $87 = (($86) + 16)|0;
   $88 = $87&255;
   HEAP8[$36>>0] = $88;
   $89 = (($84) + 4|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = $91 << 8;
   $93 = (($84) + 5|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = $92 | $95;
   $97 = $87 & 255;
   $98 = (32 - ($97))|0;
   $99 = $96 << $98;
   $100 = HEAP32[$sReadBitsCache>>2]|0;
   $101 = $99 | $100;
   HEAP32[$sReadBitsCache>>2] = $101;
   $104 = $101;$112 = $88;
  } else {
   $$pre$i = HEAP32[$sReadBitsCache>>2]|0;
   $104 = $$pre$i;$112 = $82;
  }
  $102 = (32 - ($81))|0;
  $103 = $104 >>> $102;
  $105 = (((($pVlcTable) + (($uiTableType$0$i*60)|0)|0) + ($78<<2)|0) + 160|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($106) + ($103<<1)|0) + 1|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = $104 << $109;
  HEAP32[$sReadBitsCache>>2] = $110;
  $111 = $112&255;
  $113 = (($111) - ($109))|0;
  $114 = $113&255;
  HEAP8[$36>>0] = $114;
  $115 = (($106) + ($103<<1)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&255;
  $118 = (($109) + ($74))|0;
  $120 = $117;$iUsedBits$0 = $118;
 } else {
  $120 = 0;$iUsedBits$0 = $74;
 }
 $119 = (($75) + ($120))|0;
 $121 = ($119|0)>($iMaxNumCoeff|0);
 if ($121) {
  $$0 = 1047;
  STACKTOP = sp;return ($$0|0);
 }
 $122 = (__ZN7WelsDecL17CavlcGetRunBeforeEPiPNS_16TagReadBitsCacheEhPNS_11TagVlcTableEi($iRun,$sReadBitsCache,$65,$pVlcTable,$120)|0);
 $123 = ($122|0)==(-1);
 if ($123) {
  $$0 = 1048;
  STACKTOP = sp;return ($$0|0);
 }
 $124 = (($122) + ($iUsedBits$0))|0;
 $125 = HEAP32[$9>>2]|0;
 $126 = (($124) + ($125))|0;
 HEAP32[$9>>2] = $126;
 $i$07 = (($75) + -1)|0;
 $127 = ($uiQp&255)>(35);
 $div = (($uiQp&255) / 6)&-1;
 $128 = $div&255;
 $129 = (($128) + -6)|0;
 $130 = (5 - ($128))|0;
 $131 = 1 << $130;
 $132 = (6 - ($128))|0;
 if ($127) {
  $i$09$us = $i$07;$iCoeffNum$08$us = -1;
  while(1) {
   $133 = (($iRun) + ($i$09$us<<2)|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($iCoeffNum$08$us) + 1)|0;
   $136 = (($135) + ($134))|0;
   $137 = $136 << 2;
   $138 = (($137) + ($iIdx4x4))|0;
   $139 = (($kpZigzagTable) + ($138)|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = (($143) + ($141<<1)|0);
   $144 = HEAP16[$142>>1]|0;
   $145 = (($iLevel) + ($i$09$us<<2)|0);
   $146 = $144&65535;
   $147 = HEAP32[$145>>2]|0;
   $148 = Math_imul($146, $147)|0;
   $149 = $148 << $129;
   $phitmp11 = $149&65535;
   $150 = (($pTCoeff) + ($141<<1)|0);
   HEAP16[$150>>1] = $phitmp11;
   $i$0$us = (($i$09$us) + -1)|0;
   $151 = ($i$09$us|0)>(0);
   if ($151) {
    $i$09$us = $i$0$us;$iCoeffNum$08$us = $136;
   } else {
    $$0 = 0;
    break;
   }
  }
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$09 = $i$07;$iCoeffNum$08 = -1;
  while(1) {
   $152 = (($iRun) + ($i$09<<2)|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (($iCoeffNum$08) + 1)|0;
   $155 = (($154) + ($153))|0;
   $156 = $155 << 2;
   $157 = (($156) + ($iIdx4x4))|0;
   $158 = (($kpZigzagTable) + ($157)|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = $159&255;
   $161 = (($143) + ($160<<1)|0);
   $162 = HEAP16[$161>>1]|0;
   $163 = (($iLevel) + ($i$09<<2)|0);
   $164 = $162&65535;
   $165 = HEAP32[$163>>2]|0;
   $166 = Math_imul($164, $165)|0;
   $167 = (($131) + ($166))|0;
   $168 = $167 >> $132;
   $phitmp10 = $168&65535;
   $169 = (($pTCoeff) + ($160<<1)|0);
   HEAP16[$169>>1] = $phitmp10;
   $i$0 = (($i$09) + -1)|0;
   $170 = ($i$09|0)>(0);
   if ($170) {
    $i$09 = $i$0;$iCoeffNum$08 = $155;
   } else {
    $$0 = 0;
    break;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec14ParseInterInfoEPNS_21TagWelsDecoderContextEPA30_A2_sPA30_aPN10WelsCommon15TagBitStringAuxE($pCtx,$iMvArray,$iRefIdxArray,$pBs) {
 $pCtx = $pCtx|0;
 $iMvArray = $iMvArray|0;
 $iRefIdxArray = $iRefIdxArray|0;
 $pBs = $pBs|0;
 var $$ = 0, $$0 = 0, $$ph = 0, $$ph65 = 0, $$ph68 = 0, $$ph70 = 0, $$ph73 = 0, $$ph75 = 0, $$ph78 = 0, $$ph80 = 0, $$pre = 0, $$pre129 = 0, $$pre130 = 0, $$pre131 = 0, $$pre132 = 0, $$pre133 = 0, $$pre134 = 0, $$pre135 = 0, $$pre136 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0101 = 0, $i$198 = 0, $i$294 = 0, $i$3112 = 0, $i$4109 = 0, $i$5105 = 0, $i$6128 = 0, $i$7125 = 0, $i$8122 = 0, $i$9118 = 0, $iMotionPredFlag = 0;
 var $iMv = 0, $iMv19 = 0, $iPartWidth = 0, $iRefIdx$0 = 0, $iRefIdx14 = 0, $iRefIdx4 = 0, $iRefIdx9 = 0, $iSubPartCount = 0, $j$0115 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond18 = 0, $or$cond19 = 0, $or$cond21 = 0, $sext = 0, $sext1 = 0, $sext10 = 0;
 var $sext2 = 0, $sext3 = 0, $sext5 = 0, $sext7 = 0, $uiCode = 0, $uiCodeNum$i = 0, $uiCodeNum$i23 = 0, $uiCodeNum$i27 = 0, $uiCodeNum$i33 = 0, $uiCodeNum$i39 = 0, $uiCodeNum$i43 = 0, $uiCodeNum$i53 = 0, $vararg_buffer15 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer15 = sp;
 $uiCodeNum$i53 = sp + 120|0;
 $uiCodeNum$i43 = sp + 116|0;
 $uiCodeNum$i39 = sp + 112|0;
 $uiCodeNum$i33 = sp + 108|0;
 $uiCodeNum$i27 = sp + 104|0;
 $uiCodeNum$i23 = sp + 100|0;
 $uiCodeNum$i = sp + 96|0;
 $iMotionPredFlag = sp + 80|0;
 $iMv = sp + 124|0;
 $uiCode = sp + 72|0;
 $iRefIdx4 = sp + 64|0;
 $iRefIdx9 = sp + 56|0;
 $iRefIdx14 = sp + 40|0;
 $iSubPartCount = sp + 24|0;
 $iPartWidth = sp + 8|0;
 $iMv19 = sp + 4|0;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4040|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 828|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 24|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = (($7) + 26|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = (($1) + 3859|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (($iMotionPredFlag) + 12|0);
 HEAP32[$15>>2] = $14;
 $16 = (($iMotionPredFlag) + 8|0);
 HEAP32[$16>>2] = $14;
 $17 = (($iMotionPredFlag) + 4|0);
 HEAP32[$17>>2] = $14;
 HEAP32[$iMotionPredFlag>>2] = $14;
 $18 = (($1) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($1) + 3908|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($3<<1)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 switch ($24|0) {
 case 16:  {
  $30 = (($1) + 3858|0);
  $31 = (($pBs) + 20|0);
  $32 = (($pBs) + 4|0);
  $33 = (($pBs) + 16|0);
  $34 = (($pBs) + 24|0);
  $i$0101 = 0;
  while(1) {
   $168 = HEAP8[$30>>0]|0;
   $169 = ($168<<24>>24)==(0);
   if (!($169)) {
    $170 = HEAP32[$31>>2]|0;
    $171 = $170 >>> 31;
    $172 = HEAP32[$32>>2]|0;
    $173 = HEAP32[$pBs>>2]|0;
    $174 = $173;
    $175 = HEAP32[$33>>2]|0;
    $176 = $170 << 1;
    HEAP32[$31>>2] = $176;
    $177 = HEAP32[$34>>2]|0;
    $178 = (($177) + 1)|0;
    HEAP32[$34>>2] = $178;
    $179 = ($177|0)>(-1);
    if ($179) {
     $180 = $175;
     $181 = $172;
     $182 = (($180) - ($174))|0;
     $183 = (($181) + 1)|0;
     $184 = (($183) - ($174))|0;
     $185 = ($182|0)>($184|0);
     if ($185) {
      $$0 = 11;
      label = 167;
      break;
     }
     $186 = HEAP8[$175>>0]|0;
     $187 = $186&255;
     $188 = $187 << 8;
     $189 = (($175) + 1|0);
     $190 = HEAP8[$189>>0]|0;
     $191 = $190&255;
     $192 = $188 | $191;
     $193 = $192 << $178;
     $194 = $193 | $176;
     HEAP32[$31>>2] = $194;
     $195 = (($177) + -15)|0;
     HEAP32[$34>>2] = $195;
     $196 = (($175) + 2|0);
     HEAP32[$33>>2] = $196;
    }
    HEAP32[$uiCode>>2] = $171;
    $197 = (($iMotionPredFlag) + ($i$0101<<2)|0);
    HEAP32[$197>>2] = $171;
   }
   $198 = (($i$0101) + 1)|0;
   $199 = ($198|0)<(2);
   if ($199) {
    $i$0101 = $198;
   } else {
    break;
   }
  }
  if ((label|0) == 167) {
   STACKTOP = sp;return ($$0|0);
  }
  $164 = (($pCtx) + 512344|0);
  $165 = (($pCtx) + 242340|0);
  $166 = (($pCtx) + 116|0);
  $167 = (($pCtx) + 512345|0);
  $i$198 = 0;
  while(1) {
   $203 = (($iMotionPredFlag) + ($i$198<<2)|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ($204|0)==(0);
   if (!($205)) {
    label = 47;
    break;
   }
   if ((($19|0) == 1)) {
    HEAP32[$uiCode>>2] = 0;
    $237 = 0;
   } else if ((($19|0) == 2)) {
    $206 = HEAP32[$31>>2]|0;
    $207 = $206 >>> 31;
    $208 = HEAP32[$32>>2]|0;
    $209 = HEAP32[$pBs>>2]|0;
    $210 = $209;
    $211 = HEAP32[$33>>2]|0;
    $212 = $206 << 1;
    HEAP32[$31>>2] = $212;
    $213 = HEAP32[$34>>2]|0;
    $214 = (($213) + 1)|0;
    HEAP32[$34>>2] = $214;
    $215 = ($213|0)>(-1);
    if ($215) {
     $216 = $211;
     $217 = $208;
     $218 = (($216) - ($210))|0;
     $219 = (($217) + 1)|0;
     $220 = (($219) - ($210))|0;
     $221 = ($218|0)>($220|0);
     if ($221) {
      $$0 = 11;
      label = 167;
      break;
     }
     $222 = HEAP8[$211>>0]|0;
     $223 = $222&255;
     $224 = $223 << 8;
     $225 = (($211) + 1|0);
     $226 = HEAP8[$225>>0]|0;
     $227 = $226&255;
     $228 = $224 | $227;
     $229 = $228 << $214;
     $230 = $229 | $212;
     HEAP32[$31>>2] = $230;
     $231 = (($213) + -15)|0;
     HEAP32[$34>>2] = $231;
     $232 = (($211) + 2|0);
     HEAP32[$33>>2] = $232;
    }
    $233 = $207 ^ 1;
    HEAP32[$uiCode>>2] = $233;
    $237 = $233;
   } else {
    $234 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCode)|0);
    $235 = ($234|0)==(0);
    if (!($235)) {
     $$0 = $234;
     label = 167;
     break;
    }
    $$pre135 = HEAP32[$uiCode>>2]|0;
    $237 = $$pre135;
   }
   $236 = (($iRefIdx4) + ($i$198<<2)|0);
   HEAP32[$236>>2] = $237;
   $238 = ($237|0)>(-1);
   $239 = ($237|0)<($19|0);
   $or$cond13 = $238 & $239;
   if ($or$cond13) {
    $240 = ((($pCtx) + ($237<<2)|0) + 5468|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = ($241|0)==(0|0);
    if ($242) {
     label = 58;
    } else {
     $252 = $237;
    }
   } else {
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    HEAP8[$164>>0] = 1;
    $243 = HEAP32[$165>>2]|0;
    $244 = ($243|0)==(0);
    if ($244) {
     $$0 = 1041;
     label = 167;
     break;
    }
    HEAP32[$236>>2] = 0;
    $245 = HEAP32[$166>>2]|0;
    $246 = $245 | 4;
    HEAP32[$166>>2] = $246;
    $252 = 0;
   }
   $247 = HEAP8[$167>>0]|0;
   $248 = ($247<<24>>24)==(0);
   if ($248) {
    $249 = HEAP8[$164>>0]|0;
    $250 = ($249<<24>>24)==(0);
    if ($250) {
     $251 = ((($pCtx) + ($252<<2)|0) + 5468|0);
     $253 = HEAP32[$251>>2]|0;
     $254 = ($253|0)==(0|0);
     if ($254) {
      $258 = 1;
     } else {
      $255 = (($253) + 72|0);
      $256 = HEAP8[$255>>0]|0;
      $257 = $256 ^ 1;
      $258 = $257;
     }
    } else {
     $258 = 1;
    }
   } else {
    $258 = 1;
   }
   HEAP8[$164>>0] = $258;
   $259 = (($i$198) + 1)|0;
   $260 = ($259|0)<(2);
   if ($260) {
    $i$198 = $259;
   } else {
    label = 45;
    break;
   }
  }
  if ((label|0) == 45) {
   $200 = (($iMv) + 2|0);
   $201 = $9 << 16 >> 16;
   $202 = $11 << 16 >> 16;
   $i$294 = 0;
   while(1) {
    $261 = $i$294 << 3;
    $262 = (($iRefIdx4) + ($i$294<<2)|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = $263&255;
    __ZN7WelsDec15PredInter16x8MvEPA30_A2_sPA30_aiaPs($iMvArray,$iRefIdxArray,$261,$264,$iMv);
    $265 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCodeNum$i39)|0);
    $266 = ($265|0)==(0);
    if (!($266)) {
     $$0 = $265;
     label = 167;
     break;
    }
    $267 = HEAP32[$uiCodeNum$i39>>2]|0;
    $268 = $267 & 1;
    $269 = ($268|0)==(0);
    if ($269) {
     $272 = $267 >>> 1;
     $273 = (0 - ($272))|0;
     $$ph68 = $273;
    } else {
     $270 = (($267) + 1)|0;
     $271 = $270 >>> 1;
     $$ph68 = $271;
    }
    $274 = HEAP16[$iMv>>1]|0;
    $275 = $274&65535;
    $276 = (($275) + ($$ph68))|0;
    $277 = $276&65535;
    HEAP16[$iMv>>1] = $277;
    $278 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCodeNum$i43)|0);
    $279 = ($278|0)==(0);
    if (!($279)) {
     $$0 = $278;
     label = 167;
     break;
    }
    $280 = HEAP32[$uiCodeNum$i43>>2]|0;
    $281 = $280 & 1;
    $282 = ($281|0)==(0);
    if ($282) {
     $285 = $280 >>> 1;
     $286 = (0 - ($285))|0;
     $$ph70 = $286;
    } else {
     $283 = (($280) + 1)|0;
     $284 = $283 >>> 1;
     $$ph70 = $284;
    }
    $287 = HEAP16[$200>>1]|0;
    $288 = $287&65535;
    $289 = (($288) + ($$ph70))|0;
    $290 = $289&65535;
    HEAP16[$200>>1] = $290;
    $sext7 = $289 << 16;
    $291 = $sext7 >> 16;
    $292 = ($291|0)<($201|0);
    $293 = ($291|0)>($202|0);
    $or$cond15 = $292 | $293;
    if ($or$cond15) {
     HEAP32[$vararg_buffer15>>2] = $291;
     __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,15408,$vararg_buffer15);
    }
    __ZN7WelsDec21UpdateP16x8MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($1,$iMvArray,$iRefIdxArray,$261,$264,$iMv);
    $294 = (($i$294) + 1)|0;
    $295 = ($294|0)<(2);
    if ($295) {
     $i$294 = $294;
    } else {
     $$0 = 0;
     label = 167;
     break;
    }
   }
   if ((label|0) == 167) {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 47) {
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,15352,$vararg_buffer15);
   $$0 = 459814;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 167) {
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 32:  {
  $25 = (($1) + 3858|0);
  $26 = (($pBs) + 20|0);
  $27 = (($pBs) + 4|0);
  $28 = (($pBs) + 16|0);
  $29 = (($pBs) + 24|0);
  $i$3112 = 0;
  while(1) {
   $300 = HEAP8[$25>>0]|0;
   $301 = ($300<<24>>24)==(0);
   if (!($301)) {
    $302 = HEAP32[$26>>2]|0;
    $303 = $302 >>> 31;
    $304 = HEAP32[$27>>2]|0;
    $305 = HEAP32[$pBs>>2]|0;
    $306 = $305;
    $307 = HEAP32[$28>>2]|0;
    $308 = $302 << 1;
    HEAP32[$26>>2] = $308;
    $309 = HEAP32[$29>>2]|0;
    $310 = (($309) + 1)|0;
    HEAP32[$29>>2] = $310;
    $311 = ($309|0)>(-1);
    if ($311) {
     $312 = $307;
     $313 = $304;
     $314 = (($312) - ($306))|0;
     $315 = (($313) + 1)|0;
     $316 = (($315) - ($306))|0;
     $317 = ($314|0)>($316|0);
     if ($317) {
      $$0 = 11;
      label = 167;
      break;
     }
     $318 = HEAP8[$307>>0]|0;
     $319 = $318&255;
     $320 = $319 << 8;
     $321 = (($307) + 1|0);
     $322 = HEAP8[$321>>0]|0;
     $323 = $322&255;
     $324 = $320 | $323;
     $325 = $324 << $310;
     $326 = $325 | $308;
     HEAP32[$26>>2] = $326;
     $327 = (($309) + -15)|0;
     HEAP32[$29>>2] = $327;
     $328 = (($307) + 2|0);
     HEAP32[$28>>2] = $328;
    }
    HEAP32[$uiCode>>2] = $303;
    $329 = (($iMotionPredFlag) + ($i$3112<<2)|0);
    HEAP32[$329>>2] = $303;
   }
   $330 = (($i$3112) + 1)|0;
   $331 = ($330|0)<(2);
   if ($331) {
    $i$3112 = $330;
   } else {
    break;
   }
  }
  if ((label|0) == 167) {
   STACKTOP = sp;return ($$0|0);
  }
  $296 = (($pCtx) + 512344|0);
  $297 = (($pCtx) + 242340|0);
  $298 = (($pCtx) + 116|0);
  $299 = (($pCtx) + 512345|0);
  $i$4109 = 0;
  while(1) {
   $335 = (($iMotionPredFlag) + ($i$4109<<2)|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = ($336|0)==(0);
   if (!($337)) {
    label = 102;
    break;
   }
   if ((($19|0) == 2)) {
    $338 = HEAP32[$26>>2]|0;
    $339 = $338 >>> 31;
    $340 = HEAP32[$27>>2]|0;
    $341 = HEAP32[$pBs>>2]|0;
    $342 = $341;
    $343 = HEAP32[$28>>2]|0;
    $344 = $338 << 1;
    HEAP32[$26>>2] = $344;
    $345 = HEAP32[$29>>2]|0;
    $346 = (($345) + 1)|0;
    HEAP32[$29>>2] = $346;
    $347 = ($345|0)>(-1);
    if ($347) {
     $348 = $343;
     $349 = $340;
     $350 = (($348) - ($342))|0;
     $351 = (($349) + 1)|0;
     $352 = (($351) - ($342))|0;
     $353 = ($350|0)>($352|0);
     if ($353) {
      $$0 = 11;
      label = 167;
      break;
     }
     $354 = HEAP8[$343>>0]|0;
     $355 = $354&255;
     $356 = $355 << 8;
     $357 = (($343) + 1|0);
     $358 = HEAP8[$357>>0]|0;
     $359 = $358&255;
     $360 = $356 | $359;
     $361 = $360 << $346;
     $362 = $361 | $344;
     HEAP32[$26>>2] = $362;
     $363 = (($345) + -15)|0;
     HEAP32[$29>>2] = $363;
     $364 = (($343) + 2|0);
     HEAP32[$28>>2] = $364;
    }
    $365 = $339 ^ 1;
    HEAP32[$uiCode>>2] = $365;
    $369 = $365;
   } else if ((($19|0) == 1)) {
    HEAP32[$uiCode>>2] = 0;
    $369 = 0;
   } else {
    $366 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCode)|0);
    $367 = ($366|0)==(0);
    if (!($367)) {
     $$0 = $366;
     label = 167;
     break;
    }
    $$pre136 = HEAP32[$uiCode>>2]|0;
    $369 = $$pre136;
   }
   $368 = (($iRefIdx9) + ($i$4109<<2)|0);
   HEAP32[$368>>2] = $369;
   $370 = ($369|0)>(-1);
   $371 = ($369|0)<($19|0);
   $or$cond16 = $370 & $371;
   if ($or$cond16) {
    $372 = ((($pCtx) + ($369<<2)|0) + 5468|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = ($373|0)==(0|0);
    if ($374) {
     label = 95;
    } else {
     $384 = $369;
    }
   } else {
    label = 95;
   }
   if ((label|0) == 95) {
    label = 0;
    HEAP8[$296>>0] = 1;
    $375 = HEAP32[$297>>2]|0;
    $376 = ($375|0)==(0);
    if ($376) {
     $$0 = 1041;
     label = 167;
     break;
    }
    HEAP32[$368>>2] = 0;
    $377 = HEAP32[$298>>2]|0;
    $378 = $377 | 4;
    HEAP32[$298>>2] = $378;
    $384 = 0;
   }
   $379 = HEAP8[$299>>0]|0;
   $380 = ($379<<24>>24)==(0);
   if ($380) {
    $381 = HEAP8[$296>>0]|0;
    $382 = ($381<<24>>24)==(0);
    if ($382) {
     $383 = ((($pCtx) + ($384<<2)|0) + 5468|0);
     $385 = HEAP32[$383>>2]|0;
     $386 = ($385|0)==(0|0);
     if ($386) {
      $390 = 1;
     } else {
      $387 = (($385) + 72|0);
      $388 = HEAP8[$387>>0]|0;
      $389 = $388 ^ 1;
      $390 = $389;
     }
    } else {
     $390 = 1;
    }
   } else {
    $390 = 1;
   }
   HEAP8[$296>>0] = $390;
   $391 = (($i$4109) + 1)|0;
   $392 = ($391|0)<(2);
   if ($392) {
    $i$4109 = $391;
   } else {
    label = 83;
    break;
   }
  }
  if ((label|0) == 83) {
   $332 = (($iMv) + 2|0);
   $333 = $9 << 16 >> 16;
   $334 = $11 << 16 >> 16;
   $i$5105 = 0;
   while(1) {
    $393 = $i$5105 << 2;
    $394 = (($iRefIdx9) + ($i$5105<<2)|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = $395&255;
    __ZN7WelsDec15PredInter8x16MvEPA30_A2_sPA30_aiaPs($iMvArray,$iRefIdxArray,$393,$396,$iMv);
    $397 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCodeNum$i53)|0);
    $398 = ($397|0)==(0);
    if (!($398)) {
     $$0 = $397;
     label = 167;
     break;
    }
    $399 = HEAP32[$uiCodeNum$i53>>2]|0;
    $400 = $399 & 1;
    $401 = ($400|0)==(0);
    if ($401) {
     $404 = $399 >>> 1;
     $405 = (0 - ($404))|0;
     $$ph73 = $405;
    } else {
     $402 = (($399) + 1)|0;
     $403 = $402 >>> 1;
     $$ph73 = $403;
    }
    $406 = HEAP16[$iMv>>1]|0;
    $407 = $406&65535;
    $408 = (($407) + ($$ph73))|0;
    $409 = $408&65535;
    HEAP16[$iMv>>1] = $409;
    $410 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$vararg_buffer15)|0);
    $411 = ($410|0)==(0);
    if (!($411)) {
     $$0 = $410;
     label = 167;
     break;
    }
    $412 = HEAP32[$vararg_buffer15>>2]|0;
    $413 = $412 & 1;
    $414 = ($413|0)==(0);
    if ($414) {
     $417 = $412 >>> 1;
     $418 = (0 - ($417))|0;
     $$ph75 = $418;
    } else {
     $415 = (($412) + 1)|0;
     $416 = $415 >>> 1;
     $$ph75 = $416;
    }
    $419 = HEAP16[$332>>1]|0;
    $420 = $419&65535;
    $421 = (($420) + ($$ph75))|0;
    $422 = $421&65535;
    HEAP16[$332>>1] = $422;
    $sext5 = $421 << 16;
    $423 = $sext5 >> 16;
    $424 = ($423|0)<($333|0);
    $425 = ($423|0)>($334|0);
    $or$cond18 = $424 | $425;
    if ($or$cond18) {
     HEAP32[$vararg_buffer15>>2] = $423;
     __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,15408,$vararg_buffer15);
    }
    __ZN7WelsDec21UpdateP8x16MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($1,$iMvArray,$iRefIdxArray,$393,$396,$iMv);
    $426 = (($i$5105) + 1)|0;
    $427 = ($426|0)<(2);
    if ($427) {
     $i$5105 = $426;
    } else {
     $$0 = 0;
     label = 167;
     break;
    }
   }
   if ((label|0) == 167) {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 102) {
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,15352,$vararg_buffer15);
   $$0 = 459814;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 167) {
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 8:  {
  $35 = (($1) + 3858|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ($36<<24>>24)==(0);
  if ($37) {
   $69 = $14;
  } else {
   $38 = (($pBs) + 20|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 >>> 31;
   $41 = (($pBs) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = HEAP32[$pBs>>2]|0;
   $44 = $43;
   $45 = (($pBs) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $39 << 1;
   HEAP32[$38>>2] = $47;
   $48 = (($pBs) + 24|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + 1)|0;
   HEAP32[$48>>2] = $50;
   $51 = ($49|0)>(-1);
   do {
    if ($51) {
     $52 = $46;
     $53 = $42;
     $54 = (($52) - ($44))|0;
     $55 = (($53) + 1)|0;
     $56 = (($55) - ($44))|0;
     $57 = ($54|0)>($56|0);
     if ($57) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $58 = HEAP8[$46>>0]|0;
      $59 = $58&255;
      $60 = $59 << 8;
      $61 = (($46) + 1|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = $62&255;
      $64 = $60 | $63;
      $65 = $64 << $50;
      $66 = $65 | $47;
      HEAP32[$38>>2] = $66;
      $67 = (($49) + -15)|0;
      HEAP32[$48>>2] = $67;
      $68 = (($46) + 2|0);
      HEAP32[$45>>2] = $68;
      break;
     }
    }
   } while(0);
   HEAP32[$uiCode>>2] = $40;
   HEAP32[$iMotionPredFlag>>2] = $40;
   $69 = $40;
  }
  $70 = ($69|0)==(0);
  if (!($70)) {
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,15352,$vararg_buffer15);
   $$0 = 459814;
   STACKTOP = sp;return ($$0|0);
  }
  do {
   if ((($19|0) == 2)) {
    $71 = (($pBs) + 20|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $72 >>> 31;
    $74 = (($pBs) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[$pBs>>2]|0;
    $77 = $76;
    $78 = (($pBs) + 16|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $72 << 1;
    HEAP32[$71>>2] = $80;
    $81 = (($pBs) + 24|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($82) + 1)|0;
    HEAP32[$81>>2] = $83;
    $84 = ($82|0)>(-1);
    do {
     if ($84) {
      $85 = $79;
      $86 = $75;
      $87 = (($85) - ($77))|0;
      $88 = (($86) + 1)|0;
      $89 = (($88) - ($77))|0;
      $90 = ($87|0)>($89|0);
      if ($90) {
       $$0 = 11;
       STACKTOP = sp;return ($$0|0);
      } else {
       $91 = HEAP8[$79>>0]|0;
       $92 = $91&255;
       $93 = $92 << 8;
       $94 = (($79) + 1|0);
       $95 = HEAP8[$94>>0]|0;
       $96 = $95&255;
       $97 = $93 | $96;
       $98 = $97 << $83;
       $99 = $98 | $80;
       HEAP32[$71>>2] = $99;
       $100 = (($82) + -15)|0;
       HEAP32[$81>>2] = $100;
       $101 = (($79) + 2|0);
       HEAP32[$78>>2] = $101;
       break;
      }
     }
    } while(0);
    $102 = $73 ^ 1;
    HEAP32[$uiCode>>2] = $102;
    $105 = $102;
   } else if ((($19|0) == 1)) {
    HEAP32[$uiCode>>2] = 0;
    $105 = 0;
   } else {
    $103 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCode)|0);
    $104 = ($103|0)==(0);
    if ($104) {
     $$pre = HEAP32[$uiCode>>2]|0;
     $105 = $$pre;
     break;
    } else {
     $$0 = $103;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $106 = ($105|0)>(-1);
  $107 = ($105|0)<($19|0);
  $or$cond = $106 & $107;
  if ($or$cond) {
   $108 = ((($pCtx) + ($105<<2)|0) + 5468|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)==(0|0);
   if ($110) {
    label = 20;
   } else {
    $iRefIdx$0 = $105;
   }
  } else {
   label = 20;
  }
  do {
   if ((label|0) == 20) {
    $111 = (($pCtx) + 512344|0);
    HEAP8[$111>>0] = 1;
    $112 = (($pCtx) + 242340|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ($113|0)==(0);
    if ($114) {
     $$0 = 1041;
     STACKTOP = sp;return ($$0|0);
    } else {
     $115 = (($pCtx) + 116|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $116 | 4;
     HEAP32[$115>>2] = $117;
     $iRefIdx$0 = 0;
     break;
    }
   }
  } while(0);
  $118 = (($pCtx) + 512345|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = ($119<<24>>24)==(0);
  $121 = (($pCtx) + 512344|0);
  if ($120) {
   $122 = HEAP8[$121>>0]|0;
   $123 = ($122<<24>>24)==(0);
   if ($123) {
    $124 = ((($pCtx) + ($iRefIdx$0<<2)|0) + 5468|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($125|0)==(0|0);
    if ($126) {
     $130 = 1;
    } else {
     $127 = (($125) + 72|0);
     $128 = HEAP8[$127>>0]|0;
     $129 = $128 ^ 1;
     $130 = $129;
    }
   } else {
    $130 = 1;
   }
  } else {
   $130 = 1;
  }
  HEAP8[$121>>0] = $130;
  $131 = $iRefIdx$0&255;
  __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($iMvArray,$iRefIdxArray,0,4,$131,$iMv);
  $132 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCodeNum$i23)|0);
  $133 = ($132|0)==(0);
  if (!($133)) {
   $$0 = $132;
   STACKTOP = sp;return ($$0|0);
  }
  $134 = HEAP32[$uiCodeNum$i23>>2]|0;
  $135 = $134 & 1;
  $136 = ($135|0)==(0);
  if ($136) {
   $139 = $134 >>> 1;
   $140 = (0 - ($139))|0;
   $$ph = $140;
  } else {
   $137 = (($134) + 1)|0;
   $138 = $137 >>> 1;
   $$ph = $138;
  }
  $141 = HEAP16[$iMv>>1]|0;
  $142 = $141&65535;
  $143 = (($142) + ($$ph))|0;
  $144 = $143&65535;
  HEAP16[$iMv>>1] = $144;
  $145 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCodeNum$i27)|0);
  $146 = ($145|0)==(0);
  if (!($146)) {
   $$0 = $145;
   STACKTOP = sp;return ($$0|0);
  }
  $147 = HEAP32[$uiCodeNum$i27>>2]|0;
  $148 = $147 & 1;
  $149 = ($148|0)==(0);
  if ($149) {
   $152 = $147 >>> 1;
   $153 = (0 - ($152))|0;
   $$ph65 = $153;
  } else {
   $150 = (($147) + 1)|0;
   $151 = $150 >>> 1;
   $$ph65 = $151;
  }
  $154 = (($iMv) + 2|0);
  $155 = HEAP16[$154>>1]|0;
  $156 = $155&65535;
  $157 = (($156) + ($$ph65))|0;
  $158 = $157&65535;
  HEAP16[$154>>1] = $158;
  $sext10 = $157 << 16;
  $159 = $sext10 >> 16;
  $160 = $9 << 16 >> 16;
  $161 = ($159|0)<($160|0);
  $162 = $11 << 16 >> 16;
  $163 = ($159|0)>($162|0);
  $or$cond12 = $161 | $163;
  if ($or$cond12) {
   HEAP32[$vararg_buffer15>>2] = $159;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,15408,$vararg_buffer15);
  }
  __ZN7WelsDec22UpdateP16x16MotionInfoEPNS_10TagDqLayerEaPs($1,$131,$iMv);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 128: case 64:  {
  ;HEAP32[$iRefIdx14+0>>2]=0|0;HEAP32[$iRefIdx14+4>>2]=0|0;HEAP32[$iRefIdx14+8>>2]=0|0;HEAP32[$iRefIdx14+12>>2]=0|0;
  $428 = ($23<<16>>16)==(128);
  $$ = $428 ? 1 : $19;
  $429 = (($1) + 4008|0);
  $430 = (($1) + 3940|0);
  $i$6128 = 0;
  while(1) {
   $431 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCode)|0);
   $432 = ($431|0)==(0);
   if (!($432)) {
    $$0 = $431;
    label = 167;
    break;
   }
   $433 = HEAP32[$uiCode>>2]|0;
   $434 = ($433>>>0)>(3);
   if ($434) {
    $$0 = 1038;
    label = 167;
    break;
   }
   $435 = (15440 + ($433<<3)|0);
   $436 = HEAP32[$435>>2]|0;
   $437 = $436&255;
   $438 = HEAP32[$429>>2]|0;
   $439 = ((($438) + ($3<<2)|0) + ($i$6128)|0);
   HEAP8[$439>>0] = $437;
   $440 = ((15440 + ($433<<3)|0) + 4|0);
   $441 = HEAP8[$440>>0]|0;
   $442 = $441 << 24 >> 24;
   $443 = (($iSubPartCount) + ($i$6128<<2)|0);
   HEAP32[$443>>2] = $442;
   $444 = ((15440 + ($433<<3)|0) + 5|0);
   $445 = HEAP8[$444>>0]|0;
   $446 = $445 << 24 >> 24;
   $447 = (($iPartWidth) + ($i$6128<<2)|0);
   HEAP32[$447>>2] = $446;
   $448 = ($433|0)==(0);
   $449 = $448&1;
   $450 = HEAP32[$430>>2]|0;
   $451 = (($450) + ($3)|0);
   $452 = HEAP8[$451>>0]|0;
   $453 = $452&255;
   $454 = $453 & $449;
   $455 = $454&255;
   HEAP8[$451>>0] = $455;
   $456 = (($i$6128) + 1)|0;
   $457 = ($456|0)<(4);
   if ($457) {
    $i$6128 = $456;
   } else {
    label = 118;
    break;
   }
  }
  if ((label|0) == 118) {
   $458 = (($1) + 3858|0);
   $459 = HEAP8[$458>>0]|0;
   $460 = ($459<<24>>24)==(0);
   L195: do {
    if (!($460)) {
     $461 = (($pBs) + 20|0);
     $462 = (($pBs) + 4|0);
     $463 = (($pBs) + 16|0);
     $464 = (($pBs) + 24|0);
     $$pre130 = HEAP32[$461>>2]|0;
     $$pre131 = HEAP32[$462>>2]|0;
     $$pre132 = HEAP32[$pBs>>2]|0;
     $$pre133 = HEAP32[$463>>2]|0;
     $$pre134 = HEAP32[$464>>2]|0;
     $466 = $$pre130;$470 = $$pre134;$472 = $$pre133;$i$7125 = 0;
     while(1) {
      $465 = $466 >>> 31;
      $467 = $$pre132;
      $468 = $466 << 1;
      HEAP32[$461>>2] = $468;
      $469 = (($470) + 1)|0;
      HEAP32[$464>>2] = $469;
      $471 = ($470|0)>(-1);
      if ($471) {
       $473 = $472;
       $474 = $$pre131;
       $475 = (($473) - ($467))|0;
       $476 = (($474) + 1)|0;
       $477 = (($476) - ($467))|0;
       $478 = ($475|0)>($477|0);
       if ($478) {
        $$0 = 11;
        break;
       }
       $479 = HEAP8[$472>>0]|0;
       $480 = $479&255;
       $481 = $480 << 8;
       $482 = (($472) + 1|0);
       $483 = HEAP8[$482>>0]|0;
       $484 = $483&255;
       $485 = $481 | $484;
       $486 = $485 << $469;
       $487 = $486 | $468;
       HEAP32[$461>>2] = $487;
       $488 = (($470) + -15)|0;
       HEAP32[$464>>2] = $488;
       $489 = (($472) + 2|0);
       HEAP32[$463>>2] = $489;
       $707 = $488;$708 = $489;$709 = $487;
      } else {
       $707 = $469;$708 = $472;$709 = $468;
      }
      HEAP32[$uiCode>>2] = $465;
      $490 = (($iMotionPredFlag) + ($i$7125<<2)|0);
      HEAP32[$490>>2] = $465;
      $491 = (($i$7125) + 1)|0;
      $492 = ($491|0)<(4);
      if ($492) {
       $466 = $709;$470 = $707;$472 = $708;$i$7125 = $491;
      } else {
       break L195;
      }
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $493 = HEAP32[$20>>2]|0;
   $494 = (($493) + ($3<<1)|0);
   $495 = HEAP16[$494>>1]|0;
   $496 = ($495<<16>>16)==(128);
   L205: do {
    if ($496) {
     $506 = (($1) + 3932|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = (($507) + ($3<<4)|0);
     dest=$508+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    } else {
     $497 = (($pCtx) + 512344|0);
     $498 = (($pCtx) + 242340|0);
     $499 = (($pCtx) + 116|0);
     $500 = (($pCtx) + 512345|0);
     $501 = (($1) + 3932|0);
     $502 = (($pBs) + 20|0);
     $503 = (($pBs) + 4|0);
     $504 = (($pBs) + 16|0);
     $505 = (($pBs) + 24|0);
     $i$8122 = 0;
     while(1) {
      $513 = $i$8122 << 18;
      $514 = $513 >> 16;
      $515 = (8424 + ($514)|0);
      $516 = HEAP8[$515>>0]|0;
      $517 = (($iMotionPredFlag) + ($i$8122<<2)|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0);
      if (!($519)) {
       label = 146;
       break;
      }
      if ((($$|0) == 1)) {
       HEAP32[$uiCode>>2] = 0;
       $551 = 0;
      } else if ((($$|0) == 2)) {
       $520 = HEAP32[$502>>2]|0;
       $521 = $520 >>> 31;
       $522 = HEAP32[$503>>2]|0;
       $523 = HEAP32[$pBs>>2]|0;
       $524 = $523;
       $525 = HEAP32[$504>>2]|0;
       $526 = $520 << 1;
       HEAP32[$502>>2] = $526;
       $527 = HEAP32[$505>>2]|0;
       $528 = (($527) + 1)|0;
       HEAP32[$505>>2] = $528;
       $529 = ($527|0)>(-1);
       if ($529) {
        $530 = $525;
        $531 = $522;
        $532 = (($530) - ($524))|0;
        $533 = (($531) + 1)|0;
        $534 = (($533) - ($524))|0;
        $535 = ($532|0)>($534|0);
        if ($535) {
         $$0 = 11;
         label = 167;
         break;
        }
        $536 = HEAP8[$525>>0]|0;
        $537 = $536&255;
        $538 = $537 << 8;
        $539 = (($525) + 1|0);
        $540 = HEAP8[$539>>0]|0;
        $541 = $540&255;
        $542 = $538 | $541;
        $543 = $542 << $528;
        $544 = $543 | $526;
        HEAP32[$502>>2] = $544;
        $545 = (($527) + -15)|0;
        HEAP32[$505>>2] = $545;
        $546 = (($525) + 2|0);
        HEAP32[$504>>2] = $546;
       }
       $547 = $521 ^ 1;
       HEAP32[$uiCode>>2] = $547;
       $551 = $547;
      } else {
       $548 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCode)|0);
       $549 = ($548|0)==(0);
       if (!($549)) {
        $$0 = $548;
        label = 167;
        break;
       }
       $$pre129 = HEAP32[$uiCode>>2]|0;
       $551 = $$pre129;
      }
      $550 = (($iRefIdx14) + ($i$8122<<2)|0);
      HEAP32[$550>>2] = $551;
      $552 = ($551|0)>(-1);
      $553 = ($551|0)<($$|0);
      $or$cond19 = $552 & $553;
      if ($or$cond19) {
       $554 = ((($pCtx) + ($551<<2)|0) + 5468|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = ($555|0)==(0|0);
       if ($556) {
        label = 139;
       } else {
        $566 = $551;
       }
      } else {
       label = 139;
      }
      if ((label|0) == 139) {
       label = 0;
       HEAP8[$497>>0] = 1;
       $557 = HEAP32[$498>>2]|0;
       $558 = ($557|0)==(0);
       if ($558) {
        $$0 = 1041;
        label = 167;
        break;
       }
       HEAP32[$550>>2] = 0;
       $559 = HEAP32[$499>>2]|0;
       $560 = $559 | 4;
       HEAP32[$499>>2] = $560;
       $566 = 0;
      }
      $561 = HEAP8[$500>>0]|0;
      $562 = ($561<<24>>24)==(0);
      if ($562) {
       $563 = HEAP8[$497>>0]|0;
       $564 = ($563<<24>>24)==(0);
       if ($564) {
        $565 = ((($pCtx) + ($566<<2)|0) + 5468|0);
        $567 = HEAP32[$565>>2]|0;
        $568 = ($567|0)==(0|0);
        if ($568) {
         $572 = 1;
        } else {
         $569 = (($567) + 72|0);
         $570 = HEAP8[$569>>0]|0;
         $571 = $570 ^ 1;
         $572 = $571;
        }
       } else {
        $572 = 1;
       }
      } else {
       $572 = 1;
      }
      HEAP8[$497>>0] = $572;
      $573 = $566&255;
      $574 = $516&255;
      $575 = (($574) + 5)|0;
      $576 = HEAP32[$501>>2]|0;
      $577 = ((($576) + ($3<<4)|0) + ($575)|0);
      HEAP8[$577>>0] = $573;
      $578 = (($574) + 4)|0;
      $579 = HEAP32[$501>>2]|0;
      $580 = ((($579) + ($3<<4)|0) + ($578)|0);
      HEAP8[$580>>0] = $573;
      $581 = (($574) + 1)|0;
      $582 = HEAP32[$501>>2]|0;
      $583 = ((($582) + ($3<<4)|0) + ($581)|0);
      HEAP8[$583>>0] = $573;
      $584 = HEAP32[$501>>2]|0;
      $585 = ((($584) + ($3<<4)|0) + ($574)|0);
      HEAP8[$585>>0] = $573;
      $586 = (($i$8122) + 1)|0;
      $587 = ($586|0)<(4);
      if ($587) {
       $i$8122 = $586;
      } else {
       break L205;
      }
     }
     if ((label|0) == 146) {
      __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,15352,$vararg_buffer15);
      $$0 = 459814;
      STACKTOP = sp;return ($$0|0);
     }
     else if ((label|0) == 167) {
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   $509 = (($iMv19) + 2|0);
   $510 = $9 << 16 >> 16;
   $511 = $11 << 16 >> 16;
   $512 = (($1) + 3916|0);
   $i$9118 = 0;
   L239: while(1) {
    $588 = (($iSubPartCount) + ($i$9118<<2)|0);
    $589 = HEAP32[$588>>2]|0;
    $590 = HEAP32[$429>>2]|0;
    $591 = ((($590) + ($3<<2)|0) + ($i$9118)|0);
    $592 = HEAP8[$591>>0]|0;
    $593 = (($iPartWidth) + ($i$9118<<2)|0);
    $594 = HEAP32[$593>>2]|0;
    $595 = $i$9118 << 18;
    $596 = $595 >> 16;
    $597 = (16968 + ($596)|0);
    $598 = HEAP8[$597>>0]|0;
    $599 = (($iRefIdx14) + ($i$9118<<2)|0);
    $600 = HEAP32[$599>>2]|0;
    $601 = $600&255;
    $602 = $598&255;
    $603 = (($602) + 7)|0;
    $604 = (($iRefIdxArray) + ($603)|0);
    HEAP8[$604>>0] = $601;
    $605 = (($602) + 6)|0;
    $606 = (($iRefIdxArray) + ($605)|0);
    HEAP8[$606>>0] = $601;
    $607 = (($602) + 1)|0;
    $608 = (($iRefIdxArray) + ($607)|0);
    HEAP8[$608>>0] = $601;
    $609 = (($iRefIdxArray) + ($602)|0);
    HEAP8[$609>>0] = $601;
    $sext = $589 << 24;
    $610 = $sext >> 24;
    $611 = ($sext|0)>(0);
    if ($611) {
     $sext1 = $594 << 16;
     $612 = $sext1 >> 16;
     $613 = ($592<<24>>24)==(4);
     $j$0115 = 0;
     while(1) {
      $614 = Math_imul($j$0115, $612)|0;
      $615 = (($614) + ($596))|0;
      $sext2 = $615 << 16;
      $616 = $sext2 >> 16;
      $617 = (8424 + ($616)|0);
      $618 = HEAP8[$617>>0]|0;
      $619 = (16968 + ($616)|0);
      $620 = HEAP8[$619>>0]|0;
      __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($iMvArray,$iRefIdxArray,$616,$612,$601,$iMv19);
      $621 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCodeNum$i33)|0);
      $622 = ($621|0)==(0);
      if (!($622)) {
       $$0 = $621;
       label = 167;
       break L239;
      }
      $623 = HEAP32[$uiCodeNum$i33>>2]|0;
      $624 = $623 & 1;
      $625 = ($624|0)==(0);
      if ($625) {
       $628 = $623 >>> 1;
       $629 = (0 - ($628))|0;
       $$ph78 = $629;
      } else {
       $626 = (($623) + 1)|0;
       $627 = $626 >>> 1;
       $$ph78 = $627;
      }
      $630 = HEAP16[$iMv19>>1]|0;
      $631 = $630&65535;
      $632 = (($631) + ($$ph78))|0;
      $633 = $632&65535;
      HEAP16[$iMv19>>1] = $633;
      $634 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$uiCodeNum$i)|0);
      $635 = ($634|0)==(0);
      if (!($635)) {
       $$0 = $634;
       label = 167;
       break L239;
      }
      $636 = HEAP32[$uiCodeNum$i>>2]|0;
      $637 = $636 & 1;
      $638 = ($637|0)==(0);
      if ($638) {
       $641 = $636 >>> 1;
       $642 = (0 - ($641))|0;
       $$ph80 = $642;
      } else {
       $639 = (($636) + 1)|0;
       $640 = $639 >>> 1;
       $$ph80 = $640;
      }
      $643 = HEAP16[$509>>1]|0;
      $644 = $643&65535;
      $645 = (($644) + ($$ph80))|0;
      $646 = $645&65535;
      HEAP16[$509>>1] = $646;
      $sext3 = $645 << 16;
      $647 = $sext3 >> 16;
      $648 = ($647|0)<($510|0);
      $649 = ($647|0)>($511|0);
      $or$cond21 = $648 | $649;
      if ($or$cond21) {
       HEAP32[$vararg_buffer15>>2] = $647;
       __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,15408,$vararg_buffer15);
      }
      do {
       if ((($592<<24>>24) == 1)) {
        $650 = HEAP32[$iMv19>>2]|0;
        $651 = $618&255;
        $652 = HEAP32[$512>>2]|0;
        $653 = ((($652) + ($3<<6)|0) + ($651<<2)|0);
        HEAP8[$653>>0]=$650&255;HEAP8[$653+1>>0]=($650>>8)&255;HEAP8[$653+2>>0]=($650>>16)&255;HEAP8[$653+3>>0]=$650>>24;
        $654 = HEAP32[$iMv19>>2]|0;
        $655 = (($651) + 1)|0;
        $656 = HEAP32[$512>>2]|0;
        $657 = ((($656) + ($3<<6)|0) + ($655<<2)|0);
        HEAP8[$657>>0]=$654&255;HEAP8[$657+1>>0]=($654>>8)&255;HEAP8[$657+2>>0]=($654>>16)&255;HEAP8[$657+3>>0]=$654>>24;
        $658 = HEAP32[$iMv19>>2]|0;
        $659 = (($651) + 4)|0;
        $660 = HEAP32[$512>>2]|0;
        $661 = ((($660) + ($3<<6)|0) + ($659<<2)|0);
        HEAP8[$661>>0]=$658&255;HEAP8[$661+1>>0]=($658>>8)&255;HEAP8[$661+2>>0]=($658>>16)&255;HEAP8[$661+3>>0]=$658>>24;
        $662 = HEAP32[$iMv19>>2]|0;
        $663 = (($651) + 5)|0;
        $664 = HEAP32[$512>>2]|0;
        $665 = ((($664) + ($3<<6)|0) + ($663<<2)|0);
        HEAP8[$665>>0]=$662&255;HEAP8[$665+1>>0]=($662>>8)&255;HEAP8[$665+2>>0]=($662>>16)&255;HEAP8[$665+3>>0]=$662>>24;
        $666 = HEAP32[$iMv19>>2]|0;
        $667 = $620&255;
        $668 = (($iMvArray) + ($667<<2)|0);
        HEAP8[$668>>0]=$666&255;HEAP8[$668+1>>0]=($666>>8)&255;HEAP8[$668+2>>0]=($666>>16)&255;HEAP8[$668+3>>0]=$666>>24;
        $669 = (($667) + 1)|0;
        $670 = (($iMvArray) + ($669<<2)|0);
        HEAP8[$670>>0]=$666&255;HEAP8[$670+1>>0]=($666>>8)&255;HEAP8[$670+2>>0]=($666>>16)&255;HEAP8[$670+3>>0]=$666>>24;
        $671 = (($667) + 6)|0;
        $672 = (($iMvArray) + ($671<<2)|0);
        HEAP8[$672>>0]=$666&255;HEAP8[$672+1>>0]=($666>>8)&255;HEAP8[$672+2>>0]=($666>>16)&255;HEAP8[$672+3>>0]=$666>>24;
        $673 = (($667) + 7)|0;
        $674 = (($iMvArray) + ($673<<2)|0);
        HEAP8[$674>>0]=$666&255;HEAP8[$674+1>>0]=($666>>8)&255;HEAP8[$674+2>>0]=($666>>16)&255;HEAP8[$674+3>>0]=$666>>24;
       } else if ((($592<<24>>24) == 2)) {
        $675 = HEAP32[$iMv19>>2]|0;
        $676 = $618&255;
        $677 = HEAP32[$512>>2]|0;
        $678 = ((($677) + ($3<<6)|0) + ($676<<2)|0);
        HEAP8[$678>>0]=$675&255;HEAP8[$678+1>>0]=($675>>8)&255;HEAP8[$678+2>>0]=($675>>16)&255;HEAP8[$678+3>>0]=$675>>24;
        $679 = HEAP32[$iMv19>>2]|0;
        $680 = (($676) + 1)|0;
        $681 = HEAP32[$512>>2]|0;
        $682 = ((($681) + ($3<<6)|0) + ($680<<2)|0);
        HEAP8[$682>>0]=$679&255;HEAP8[$682+1>>0]=($679>>8)&255;HEAP8[$682+2>>0]=($679>>16)&255;HEAP8[$682+3>>0]=$679>>24;
        $683 = HEAP32[$iMv19>>2]|0;
        $684 = $620&255;
        $685 = (($iMvArray) + ($684<<2)|0);
        HEAP8[$685>>0]=$683&255;HEAP8[$685+1>>0]=($683>>8)&255;HEAP8[$685+2>>0]=($683>>16)&255;HEAP8[$685+3>>0]=$683>>24;
        $686 = (($684) + 1)|0;
        $687 = (($iMvArray) + ($686<<2)|0);
        HEAP8[$687>>0]=$683&255;HEAP8[$687+1>>0]=($683>>8)&255;HEAP8[$687+2>>0]=($683>>16)&255;HEAP8[$687+3>>0]=$683>>24;
       } else {
        $688 = HEAP32[$iMv19>>2]|0;
        $689 = $618&255;
        $690 = HEAP32[$512>>2]|0;
        $691 = ((($690) + ($3<<6)|0) + ($689<<2)|0);
        HEAP8[$691>>0]=$688&255;HEAP8[$691+1>>0]=($688>>8)&255;HEAP8[$691+2>>0]=($688>>16)&255;HEAP8[$691+3>>0]=$688>>24;
        $692 = HEAP32[$iMv19>>2]|0;
        if ($613) {
         $693 = (($689) + 4)|0;
         $694 = HEAP32[$512>>2]|0;
         $695 = ((($694) + ($3<<6)|0) + ($693<<2)|0);
         HEAP8[$695>>0]=$692&255;HEAP8[$695+1>>0]=($692>>8)&255;HEAP8[$695+2>>0]=($692>>16)&255;HEAP8[$695+3>>0]=$692>>24;
         $696 = HEAP32[$iMv19>>2]|0;
         $697 = $620&255;
         $698 = (($iMvArray) + ($697<<2)|0);
         HEAP8[$698>>0]=$696&255;HEAP8[$698+1>>0]=($696>>8)&255;HEAP8[$698+2>>0]=($696>>16)&255;HEAP8[$698+3>>0]=$696>>24;
         $699 = (($697) + 6)|0;
         $700 = (($iMvArray) + ($699<<2)|0);
         HEAP8[$700>>0]=$696&255;HEAP8[$700+1>>0]=($696>>8)&255;HEAP8[$700+2>>0]=($696>>16)&255;HEAP8[$700+3>>0]=$696>>24;
         break;
        } else {
         $701 = $620&255;
         $702 = (($iMvArray) + ($701<<2)|0);
         HEAP8[$702>>0]=$692&255;HEAP8[$702+1>>0]=($692>>8)&255;HEAP8[$702+2>>0]=($692>>16)&255;HEAP8[$702+3>>0]=$692>>24;
         break;
        }
       }
      } while(0);
      $703 = (($j$0115) + 1)|0;
      $704 = ($703|0)<($610|0);
      if ($704) {
       $j$0115 = $703;
      } else {
       break;
      }
     }
    }
    $705 = (($i$9118) + 1)|0;
    $706 = ($705|0)<(4);
    if ($706) {
     $i$9118 = $705;
    } else {
     $$0 = 0;
     label = 167;
     break;
    }
   }
   if ((label|0) == 167) {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 167) {
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN7WelsDec12AllocPictureEPNS_21TagWelsDecoderContextEii($pCtx,$kiPicWidth,$kiPicHeight) {
 $pCtx = $pCtx|0;
 $kiPicWidth = $kiPicWidth|0;
 $kiPicHeight = $kiPicHeight|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 562528|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($1,120,15552)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$2+0|0; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = (($kiPicWidth) + 95)|0;
 $5 = $4 & -32;
 $6 = (($kiPicHeight) + 95)|0;
 $7 = $6 & -32;
 $8 = $5 >> 1;
 $9 = $7 >> 1;
 $10 = Math_imul($7, $5)|0;
 $11 = Math_imul($9, $8)|0;
 $12 = (($pCtx) + 242344|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 do {
  if ($14) {
   $23 = $11 << 1;
   $24 = (($23) + ($10))|0;
   $25 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($1,$24,15568)|0);
   HEAP32[$2>>2] = $25;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    _memset(($25|0),-128,($24|0))|0;
    $27 = (($2) + 32|0);
    HEAP32[$27>>2] = $5;
    $28 = (($2) + 40|0);
    HEAP32[$28>>2] = $8;
    $29 = (($2) + 36|0);
    HEAP32[$29>>2] = $8;
    $30 = HEAP32[$2>>2]|0;
    $31 = (($30) + ($10)|0);
    $32 = (($2) + 4|0);
    HEAP32[$32>>2] = $31;
    $$sum = (($11) + ($10))|0;
    $33 = (($30) + ($$sum)|0);
    $34 = (($2) + 8|0);
    HEAP32[$34>>2] = $33;
    $35 = $5 << 5;
    $36 = $35 | 32;
    $37 = (($30) + ($36)|0);
    $38 = (($2) + 16|0);
    HEAP32[$38>>2] = $37;
    $39 = $5 << 4;
    $40 = $39 >> 1;
    $41 = $40 | 16;
    $$sum1 = (($10) + ($41))|0;
    $42 = (($30) + ($$sum1)|0);
    $43 = (($2) + 20|0);
    HEAP32[$43>>2] = $42;
    $$sum2 = (($$sum) + ($41))|0;
    $44 = (($30) + ($$sum2)|0);
    $45 = (($2) + 24|0);
    HEAP32[$45>>2] = $44;
    break;
   }
   __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1,$2,15608);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $15 = (($2) + 8|0);
   HEAP32[$15>>2] = 0;
   $16 = (($2) + 4|0);
   HEAP32[$16>>2] = 0;
   HEAP32[$2>>2] = 0;
   $17 = (($2) + 16|0);
   $18 = (($2) + 24|0);
   HEAP32[$18>>2] = 0;
   $19 = (($2) + 20|0);
   HEAP32[$19>>2] = 0;
   HEAP32[$17>>2] = 0;
   $20 = (($2) + 32|0);
   HEAP32[$20>>2] = $5;
   $21 = (($2) + 40|0);
   HEAP32[$21>>2] = $8;
   $22 = (($2) + 36|0);
   HEAP32[$22>>2] = $8;
  }
 } while(0);
 $46 = (($2) + 48|0);
 HEAP32[$46>>2] = 3;
 $47 = (($2) + 56|0);
 HEAP32[$47>>2] = $kiPicWidth;
 $48 = (($2) + 60|0);
 HEAP32[$48>>2] = $kiPicHeight;
 $49 = (($2) + 76|0);
 HEAP32[$49>>2] = -1;
 $50 = (($2) + 71|0);
 HEAP8[$50>>0] = 1;
 $$0 = $2;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($pPic,$pMa) {
 $pPic = $pPic|0;
 $pMa = $pMa|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pPic|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pPic>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($pMa,$1,15584);
 }
 __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($pMa,$pPic,15608);
 STACKTOP = sp;return;
}
function __ZN7WelsDec11PrefetchPicEPNS_10TagPicBuffE($pPicBuf) {
 $pPicBuf = $pPicBuf|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iPicIdx$0 = 0, $iPicIdx$06 = 0, $iPicIdx$07 = 0, $iPicIdx$1$lcssa = 0, $iPicIdx$12 = 0, $pPic$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPicBuf) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pPicBuf) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $iPicIdx$06 = (($4) + 1)|0;
 $5 = ($iPicIdx$06|0)<($1|0);
 L4: do {
  if ($5) {
   $6 = HEAP32[$pPicBuf>>2]|0;
   $iPicIdx$07 = $iPicIdx$06;
   while(1) {
    $9 = (($6) + ($iPicIdx$07<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0|0);
    if (!($11)) {
     $12 = (($10) + 71|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if (!($14)) {
      $15 = (($10) + 68|0);
      $16 = HEAP8[$15>>0]|0;
      $17 = ($16<<24>>24)==(0);
      if ($17) {
       break;
      }
     }
    }
    $iPicIdx$0 = (($iPicIdx$07) + 1)|0;
    $18 = ($iPicIdx$0|0)<($1|0);
    if ($18) {
     $iPicIdx$07 = $iPicIdx$0;
    } else {
     break L4;
    }
   }
   HEAP32[$3>>2] = $iPicIdx$07;
   $$0 = $10;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $7 = ($4|0)<(0);
 L15: do {
  if ($7) {
   $iPicIdx$1$lcssa = 0;$pPic$1 = 0;
  } else {
   $8 = HEAP32[$pPicBuf>>2]|0;
   $iPicIdx$12 = 0;
   while(1) {
    $19 = (($8) + ($iPicIdx$12<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $22 = (($20) + 71|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = ($23<<24>>24)==(0);
     if (!($24)) {
      $25 = (($20) + 68|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = ($26<<24>>24)==(0);
      if ($27) {
       $iPicIdx$1$lcssa = $iPicIdx$12;$pPic$1 = $20;
       break L15;
      }
     }
    }
    $28 = (($iPicIdx$12) + 1)|0;
    $29 = ($iPicIdx$12|0)<($4|0);
    if ($29) {
     $iPicIdx$12 = $28;
    } else {
     $iPicIdx$1$lcssa = $28;$pPic$1 = 0;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = $iPicIdx$1$lcssa;
 $$0 = $pPic$1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec23WelsFillRecNeededMbInfoEPNS_21TagWelsDecoderContextEbPNS_10TagDqLayerE($pCtx,$bOutput,$pCurLayer) {
 $pCtx = $pCtx|0;
 $bOutput = $bOutput|0;
 $pCurLayer = $pCurLayer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 5464|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCurLayer) + 4032|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pCurLayer) + 4036|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pCurLayer) + 4012|0);
 HEAP32[$10>>2] = $3;
 $11 = (($pCurLayer) + 4016|0);
 HEAP32[$11>>2] = $5;
 if (!($bOutput)) {
  STACKTOP = sp;return;
 }
 $12 = (($1) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = Math_imul($9, $3)|0;
 $15 = (($14) + ($7))|0;
 $16 = $15 << 4;
 $17 = (($13) + ($16)|0);
 $18 = (($pCurLayer) + 4020|0);
 HEAP32[$18>>2] = $17;
 $19 = (($1) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = Math_imul($9, $5)|0;
 $22 = (($21) + ($7))|0;
 $23 = $22 << 3;
 $24 = (($20) + ($23)|0);
 $25 = (($pCurLayer) + 4024|0);
 HEAP32[$25>>2] = $24;
 $26 = (($1) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($23)|0);
 $29 = (($pCurLayer) + 4028|0);
 HEAP32[$29>>2] = $28;
 STACKTOP = sp;return;
}
function __ZN7WelsDec9RecI8x8MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($iMbXy,$pCtx,$pScoeffLevel,$pDqLayer) {
 $iMbXy = $iMbXy|0;
 $pCtx = $pCtx|0;
 $pScoeffLevel = $pScoeffLevel|0;
 $pDqLayer = $pDqLayer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZN7WelsDec11RecI8x8LumaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($iMbXy,$pCtx,$pScoeffLevel,$pDqLayer)|0);
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pDqLayer) + 4004|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($iMbXy)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($pDqLayer) + 4024|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9 << 24 >> 24;
 $13 = ((($pCtx) + ($12<<2)|0) + 316940|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vii[$14 & 63]($11,$5);
 $15 = (($pDqLayer) + 4028|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vii[$17 & 63]($16,$5);
 (__ZN7WelsDec9RecChromaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($iMbXy,$pCtx,$pScoeffLevel,$pDqLayer)|0);
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec11RecI8x8LumaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($iMbXy,$pCtx,$pScoeffLevel,$pDqLayer) {
 $iMbXy = $iMbXy|0;
 $pCtx = $pCtx|0;
 $pScoeffLevel = $pScoeffLevel|0;
 $pDqLayer = $pDqLayer|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $$phi$trans$insert = 0, $$phi$trans$insert4 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bTLAvail = 0, $bTRAvail = 0, $exitcond = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bTLAvail = sp + 4|0;
 $bTRAvail = sp;
 $0 = (($pDqLayer) + 4020|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pDqLayer) + 4012|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pDqLayer) + 3996|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCtx) + 317052|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pDqLayer) + 4000|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($iMbXy)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11&255) >>> 1;
 $$lobit = $12 & 1;
 HEAP8[$bTLAvail>>0] = $$lobit;
 $13 = $11 & 1;
 $14 = (($bTLAvail) + 1|0);
 HEAP8[$14>>0] = $13;
 $15 = (($bTLAvail) + 2|0);
 $16 = ($11&255) >>> 2;
 $$lobit1 = $16 & 1;
 HEAP8[$15>>0] = $$lobit1;
 $17 = (($bTLAvail) + 3|0);
 HEAP8[$17>>0] = 1;
 HEAP8[$bTRAvail>>0] = $13;
 $18 = (($bTRAvail) + 1|0);
 $19 = ($11&255) >>> 3;
 $$lobit2 = $19 & 1;
 HEAP8[$18>>0] = $$lobit2;
 $20 = (($bTRAvail) + 2|0);
 HEAP8[$20>>0] = 1;
 $21 = (($bTRAvail) + 3|0);
 HEAP8[$21>>0] = 0;
 $22 = (($pDqLayer) + 3964|0);
 $35 = $$lobit;$37 = $13;$indvars$iv = 0;
 while(1) {
  $23 = $indvars$iv << 2;
  $24 = ((($pCtx) + ($23<<2)|0) + 5248|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($1) + ($25)|0);
  $27 = (8424 + ($23)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ((($5) + ($iMbXy<<4)|0) + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ((($pCtx) + ($32<<2)|0) + 316996|0);
  $34 = HEAP32[$33>>2]|0;
  $36 = ($35<<24>>24)!=(0);
  $38 = ($37<<24>>24)!=(0);
  FUNCTION_TABLE_viiii[$34 & 31]($26,$3,$36,$38);
  $39 = (16536 + ($23)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = HEAP32[$22>>2]|0;
  $43 = ((($42) + (($iMbXy*24)|0)|0) + ($41)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = ($44<<24>>24)==(0);
  if ($45) {
   $46 = (($41) + 1)|0;
   $47 = ((($42) + (($iMbXy*24)|0)|0) + ($46)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48<<24>>24)==(0);
   if ($49) {
    $50 = (($41) + 4)|0;
    $51 = ((($42) + (($iMbXy*24)|0)|0) + ($50)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = ($52<<24>>24)==(0);
    if ($53) {
     $54 = (($41) + 5)|0;
     $55 = ((($42) + (($iMbXy*24)|0)|0) + ($54)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = ($56<<24>>24)==(0);
     if (!($57)) {
      label = 6;
     }
    } else {
     label = 6;
    }
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $58 = $indvars$iv << 6;
   $59 = (($pScoeffLevel) + ($58<<1)|0);
   FUNCTION_TABLE_viii[$7 & 7]($26,$3,$59);
  }
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $exitcond = ($indvars$iv$next|0)==(4);
  if ($exitcond) {
   break;
  }
  $$phi$trans$insert = (($bTLAvail) + ($indvars$iv$next)|0);
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  $$phi$trans$insert4 = (($bTRAvail) + ($indvars$iv$next)|0);
  $$pre5 = HEAP8[$$phi$trans$insert4>>0]|0;
  $35 = $$pre;$37 = $$pre5;$indvars$iv = $indvars$iv$next;
 }
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec9RecI4x4MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($iMBXY,$pCtx,$pScoeffLevel,$pDqLayer) {
 $iMBXY = $iMBXY|0;
 $pCtx = $pCtx|0;
 $pScoeffLevel = $pScoeffLevel|0;
 $pDqLayer = $pDqLayer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $indvars$iv$i = 0, $indvars$iv$next$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pDqLayer) + 4020|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pDqLayer) + 4012|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pDqLayer) + 3996|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCtx) + 316968|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pDqLayer) + 3964|0);
 $indvars$iv$i = 0;
 while(1) {
  $9 = ((($pCtx) + ($indvars$iv$i<<2)|0) + 5248|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($1) + ($10)|0);
  $12 = (8424 + ($indvars$iv$i)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ((($5) + ($iMBXY<<4)|0) + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ((($pCtx) + ($17<<2)|0) + 316884|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 63]($11,$3);
  $20 = (16536 + ($indvars$iv$i)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = HEAP32[$8>>2]|0;
  $24 = ((($23) + (($iMBXY*24)|0)|0) + ($22)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)==(0);
  if (!($26)) {
   $27 = $indvars$iv$i << 4;
   $28 = (($pScoeffLevel) + ($27<<1)|0);
   FUNCTION_TABLE_viii[$7 & 7]($11,$3,$28);
  }
  $indvars$iv$next$i = (($indvars$iv$i) + 1)|0;
  $exitcond$i = ($indvars$iv$next$i|0)==(16);
  if ($exitcond$i) {
   break;
  } else {
   $indvars$iv$i = $indvars$iv$next$i;
  }
 }
 $29 = (($pCtx) + 241932|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 4100|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 36|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($pDqLayer) + 4004|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($iMBXY)|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = (($pDqLayer) + 4024|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $38 << 24 >> 24;
 $42 = ((($pCtx) + ($41<<2)|0) + 316940|0);
 $43 = HEAP32[$42>>2]|0;
 FUNCTION_TABLE_vii[$43 & 63]($40,$34);
 $44 = (($pDqLayer) + 4028|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$42>>2]|0;
 FUNCTION_TABLE_vii[$46 & 63]($45,$34);
 (__ZN7WelsDec9RecChromaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($iMBXY,$pCtx,$pScoeffLevel,$pDqLayer)|0);
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec9RecChromaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($iMBXY,$pCtx,$pScoeffLevel,$pDqLayer) {
 $iMBXY = $iMBXY|0;
 $pCtx = $pCtx|0;
 $pScoeffLevel = $pScoeffLevel|0;
 $pDqLayer = $pDqLayer|0;
 var $$off = 0, $$pre = 0, $$pre4 = 0, $$pre5 = 0, $$sum = 0, $$sum1$1 = 0, $$sum1$2 = 0, $$sum1$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $exitcond = 0, $indvars$iv = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCtx) + 316968|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pDqLayer) + 3956|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($iMBXY)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = $12 >>> 4;
 $14 = $13 & 255;
 $$off = (($14) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if (!($switch)) {
  STACKTOP = sp;return 0;
 }
 $15 = (($pScoeffLevel) + 512|0);
 __ZN7WelsDec16WelsChromaDcIdctEPs($15);
 $16 = (($pScoeffLevel) + 640|0);
 __ZN7WelsDec16WelsChromaDcIdctEPs($16);
 $17 = (($pCtx) + 5312|0);
 $18 = (($pCtx) + 5328|0);
 $19 = (($pDqLayer) + 3964|0);
 $indvars$iv = 0;
 while(1) {
  $20 = $indvars$iv << 6;
  $$sum = (($20) + 256)|0;
  $21 = (($indvars$iv) + 1)|0;
  $22 = ((($pDqLayer) + ($21<<2)|0) + 4020|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $indvars$iv&255;
  $25 = ($24<<24>>24)==(0);
  $26 = $25 ? $17 : $18;
  $27 = $indvars$iv << 2;
  $28 = (($27) + 16)|0;
  $29 = (($pScoeffLevel) + ($$sum<<1)|0);
  $30 = HEAP32[$26>>2]|0;
  $31 = (($23) + ($30)|0);
  $32 = (16536 + ($28)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = HEAP32[$19>>2]|0;
  $36 = ((($35) + (($iMBXY*24)|0)|0) + ($34)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = ($37<<24>>24)==(0);
  if ($38) {
   $39 = HEAP16[$29>>1]|0;
   $40 = ($39<<16>>16)==(0);
   if ($40) {
    $50 = $35;
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   label = 0;
   FUNCTION_TABLE_viii[$7 & 7]($31,$5,$29);
   $$pre = HEAP32[$19>>2]|0;
   $50 = $$pre;
  }
  $$sum1$1 = (($20) + 272)|0;
  $41 = (($pScoeffLevel) + ($$sum1$1<<1)|0);
  $42 = (($26) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($23) + ($43)|0);
  $45 = (($27) + 17)|0;
  $46 = (16536 + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = ((($50) + (($iMBXY*24)|0)|0) + ($48)|0);
  $51 = HEAP8[$49>>0]|0;
  $52 = ($51<<24>>24)==(0);
  if ($52) {
   $53 = HEAP16[$41>>1]|0;
   $54 = ($53<<16>>16)==(0);
   if ($54) {
    $64 = $50;
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
  if ((label|0) == 9) {
   label = 0;
   FUNCTION_TABLE_viii[$7 & 7]($44,$5,$41);
   $$pre4 = HEAP32[$19>>2]|0;
   $64 = $$pre4;
  }
  $$sum1$2 = (($20) + 288)|0;
  $55 = (($pScoeffLevel) + ($$sum1$2<<1)|0);
  $56 = (($26) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($23) + ($57)|0);
  $59 = (($27) + 18)|0;
  $60 = (16536 + ($59)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = ((($64) + (($iMBXY*24)|0)|0) + ($62)|0);
  $65 = HEAP8[$63>>0]|0;
  $66 = ($65<<24>>24)==(0);
  if ($66) {
   $67 = HEAP16[$55>>1]|0;
   $68 = ($67<<16>>16)==(0);
   if ($68) {
    $78 = $64;
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   FUNCTION_TABLE_viii[$7 & 7]($58,$5,$55);
   $$pre5 = HEAP32[$19>>2]|0;
   $78 = $$pre5;
  }
  $$sum1$3 = (($20) + 304)|0;
  $69 = (($pScoeffLevel) + ($$sum1$3<<1)|0);
  $70 = (($26) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($23) + ($71)|0);
  $73 = (($27) + 19)|0;
  $74 = (16536 + ($73)|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = ((($78) + (($iMBXY*24)|0)|0) + ($76)|0);
  $79 = HEAP8[$77>>0]|0;
  $80 = ($79<<24>>24)==(0);
  if ($80) {
   $81 = HEAP16[$69>>1]|0;
   $82 = ($81<<16>>16)==(0);
   if (!($82)) {
    label = 15;
   }
  } else {
   label = 15;
  }
  if ((label|0) == 15) {
   label = 0;
   FUNCTION_TABLE_viii[$7 & 7]($72,$5,$69);
  }
  $exitcond = ($21|0)==(2);
  if ($exitcond) {
   break;
  } else {
   $indvars$iv = $21;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec11RecI16x16MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($iMBXY,$pCtx,$pScoeffLevel,$pDqLayer) {
 $iMBXY = $iMBXY|0;
 $pCtx = $pCtx|0;
 $pScoeffLevel = $pScoeffLevel|0;
 $pDqLayer = $pDqLayer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pDqLayer) + 3992|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1) + ($iMBXY<<3)|0) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($pDqLayer) + 4004|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($iMBXY)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($pCtx) + 241932|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 4100|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($pDqLayer) + 4012|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($pDqLayer) + 4020|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($pCtx) + 316968|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $3 << 24 >> 24;
 $21 = ((($pCtx) + ($20<<2)|0) + 316856|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_vii[$22 & 63]($17,$15);
 $23 = (($pDqLayer) + 3964|0);
 $indvars$iv = 0;
 while(1) {
  $24 = $indvars$iv << 4;
  $25 = (($pScoeffLevel) + ($24<<1)|0);
  $26 = ((($pCtx) + ($indvars$iv<<2)|0) + 5248|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($17) + ($27)|0);
  $29 = (16536 + ($indvars$iv)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = HEAP32[$23>>2]|0;
  $33 = ((($32) + (($iMBXY*24)|0)|0) + ($31)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34<<24>>24)==(0);
  if ($35) {
   $36 = HEAP16[$25>>1]|0;
   $37 = ($36<<16>>16)==(0);
   if (!($37)) {
    label = 4;
   }
  } else {
   label = 4;
  }
  if ((label|0) == 4) {
   label = 0;
   FUNCTION_TABLE_viii[$19 & 7]($28,$15,$25);
  }
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $exitcond = ($indvars$iv$next|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $indvars$iv = $indvars$iv$next;
  }
 }
 $38 = (($pDqLayer) + 4024|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $7 << 24 >> 24;
 $41 = ((($pCtx) + ($40<<2)|0) + 316940|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($39,$13);
 $43 = (($pDqLayer) + 4028|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$45 & 63]($44,$13);
 (__ZN7WelsDec9RecChromaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($iMBXY,$pCtx,$pScoeffLevel,$pDqLayer)|0);
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$iXOffset,$iYOffset,$pMCFunc,$iBlkWidth,$iBlkHeight,$iMVs) {
 $pMCRefMem = $pMCRefMem|0;
 $iXOffset = $iXOffset|0;
 $iYOffset = $iYOffset|0;
 $pMCFunc = $pMCFunc|0;
 $iBlkWidth = $iBlkWidth|0;
 $iBlkHeight = $iBlkHeight|0;
 $iMVs = $iMVs|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iXOffset << 2;
 $1 = HEAP16[$iMVs>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = (($2) + ($0))|0;
 $4 = $iYOffset << 2;
 $5 = (($iMVs) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = (($7) + ($4))|0;
 $9 = ($3|0)<(-120);
 if ($9) {
  $22 = -120;
 } else {
  $10 = (($pMCRefMem) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 << 2;
  $13 = (($12) + 52)|0;
  $14 = ($3|0)>($13|0);
  $$ = $14 ? $13 : $3;
  $22 = $$;
 }
 $15 = ($8|0)<(-120);
 if ($15) {
  $24 = -120;
 } else {
  $16 = (($pMCRefMem) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 << 2;
  $19 = (($18) + 52)|0;
  $20 = ($8|0)>($19|0);
  $$1 = $20 ? $19 : $8;
  $24 = $$1;
 }
 $21 = $22 >> 2;
 $23 = $24 >> 2;
 $25 = (($pMCRefMem) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = Math_imul($23, $26)|0;
 $28 = (($27) + ($21))|0;
 $29 = $22 >> 3;
 $30 = $24 >> 3;
 $31 = (($pMCRefMem) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = Math_imul($32, $30)|0;
 $34 = (($33) + ($29))|0;
 $35 = $iBlkWidth >> 1;
 $36 = $iBlkHeight >> 1;
 $37 = (($pMCRefMem) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($28)|0);
 $40 = (($pMCRefMem) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($34)|0);
 $43 = (($pMCRefMem) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + ($34)|0);
 $46 = HEAP32[$pMCRefMem>>2]|0;
 $47 = (($pMCRefMem) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($pMCRefMem) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($pMCFunc) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($pMCRefMem) + 32|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $22&65535;
 $56 = $24&65535;
 FUNCTION_TABLE_viiiiiiii[$52 & 3]($39,$26,$46,$54,$55,$56,$iBlkWidth,$iBlkHeight);
 $57 = (($pMCFunc) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$31>>2]|0;
 $60 = (($pMCRefMem) + 36|0);
 $61 = HEAP32[$60>>2]|0;
 FUNCTION_TABLE_viiiiiiii[$58 & 3]($42,$59,$48,$61,$55,$56,$35,$36);
 $62 = HEAP32[$57>>2]|0;
 $63 = HEAP32[$31>>2]|0;
 $64 = HEAP32[$60>>2]|0;
 FUNCTION_TABLE_viiiiiiii[$62 & 3]($45,$63,$50,$64,$55,$56,$35,$36);
 STACKTOP = sp;return;
}
function __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($pCurDqLayer,$pMCRefMem,$iRefIdx,$iBlkWidth,$iBlkHeight) {
 $pCurDqLayer = $pCurDqLayer|0;
 $pMCRefMem = $pMCRefMem|0;
 $iRefIdx = $iRefIdx|0;
 $iBlkWidth = $iBlkWidth|0;
 $iBlkHeight = $iBlkHeight|0;
 var $$pre = 0, $$pre26$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $brmerge34$demorgan = 0, $exitcond = 0, $exitcond$1 = 0, $exitcond20 = 0, $exitcond20$1 = 0, $exitcond21 = 0, $exitcond21$1 = 0, $exitcond23 = 0, $exitcond24 = 0, $i$018 = 0, $i2$05$us = 0, $i2$05$us$1 = 0;
 var $j$015 = 0, $j3$04$us$us = 0, $j3$04$us$us$1 = 0, $j3$04$us7 = 0, $j3$04$us7$1 = 0, $phitmp$us8 = 0, $phitmp$us8$1 = 0, $phitmp1$us$us = 0, $phitmp1$us$us$1 = 0, $phitmp2 = 0, $phitmp3 = 0, $storemerge = 0, $storemerge$us$us = 0, $storemerge$us$us$1 = 0, $storemerge$us10 = 0, $storemerge$us10$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCurDqLayer) + 4084|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1) + ($iRefIdx<<2)|0) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1) + ($iRefIdx<<2)|0) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pMCRefMem) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($iBlkHeight|0)>(0);
 if ($9) {
  $10 = ($iBlkWidth|0)>(0);
  $11 = ($2|0)>(0);
  $12 = (($2) + -1)|0;
  $13 = 1 << $12;
  $i$018 = 0;
  while(1) {
   if ($10) {
    $14 = Math_imul($i$018, $8)|0;
    $j$015 = 0;
    while(1) {
     $15 = (($j$015) + ($14))|0;
     $16 = HEAP32[$pMCRefMem>>2]|0;
     $17 = (($16) + ($15)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18&255;
     $20 = Math_imul($19, $4)|0;
     if ($11) {
      $21 = (($20) + ($13))|0;
      $22 = $21 >> $2;
      $23 = (($22) + ($6))|0;
      $24 = ($23|0)<(0);
      if ($24) {
       $storemerge = 0;
      } else {
       $25 = ($23|0)>(255);
       $26 = $23&255;
       $phitmp3 = $25 ? -1 : $26;
       $storemerge = $phitmp3;
      }
     } else {
      $27 = (($20) + ($6))|0;
      $28 = ($27|0)<(0);
      if ($28) {
       $storemerge = 0;
      } else {
       $29 = ($27|0)>(255);
       $30 = $27&255;
       $phitmp2 = $29 ? -1 : $30;
       $storemerge = $phitmp2;
      }
     }
     HEAP8[$17>>0] = $storemerge;
     $31 = (($j$015) + 1)|0;
     $exitcond23 = ($31|0)==($iBlkWidth|0);
     if ($exitcond23) {
      break;
     } else {
      $j$015 = $31;
     }
    }
   }
   $32 = (($i$018) + 1)|0;
   $exitcond24 = ($32|0)==($iBlkHeight|0);
   if ($exitcond24) {
    break;
   } else {
    $i$018 = $32;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $36 = $$pre;
 } else {
  $36 = $1;
 }
 $33 = $iBlkWidth >> 2;
 $34 = $iBlkHeight >> 2;
 $35 = (($36) + 4|0);
 $37 = HEAP32[$35>>2]|0;
 $38 = (($pMCRefMem) + 36|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($pMCRefMem) + 8|0);
 $41 = (($pMCRefMem) + 4|0);
 $42 = ($34|0)>(0);
 $43 = ($33|0)>(0);
 $44 = ($37|0)>(0);
 $45 = (($37) + -1)|0;
 $46 = 1 << $45;
 $47 = ((($36) + ($iRefIdx<<3)|0) + 136|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($36) + ($iRefIdx<<3)|0) + 264|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$41>>2]|0;
 $brmerge34$demorgan = $42 & $43;
 if ($brmerge34$demorgan) {
  $i2$05$us = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $54 = Math_imul($i2$05$us, $39)|0;
  if ($44) {
   $j3$04$us$us = 0;
   while(1) {
    $64 = (($j3$04$us$us) + ($54))|0;
    $65 = (($51) + ($64)|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = Math_imul($67, $48)|0;
    $69 = (($68) + ($46))|0;
    $70 = $69 >> $37;
    $71 = (($70) + ($50))|0;
    $72 = ($71|0)<(0);
    if ($72) {
     $storemerge$us$us = 0;
    } else {
     $73 = ($71|0)>(255);
     $74 = $71&255;
     $phitmp1$us$us = $73 ? -1 : $74;
     $storemerge$us$us = $phitmp1$us$us;
    }
    HEAP8[$65>>0] = $storemerge$us$us;
    $75 = (($j3$04$us$us) + 1)|0;
    $exitcond20 = ($75|0)==($33|0);
    if ($exitcond20) {
     break;
    } else {
     $j3$04$us$us = $75;
    }
   }
  } else {
   $j3$04$us7 = 0;
   while(1) {
    $53 = (($j3$04$us7) + ($54))|0;
    $55 = (($51) + ($53)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = Math_imul($57, $48)|0;
    $59 = (($58) + ($50))|0;
    $60 = ($59|0)<(0);
    if ($60) {
     $storemerge$us10 = 0;
    } else {
     $61 = ($59|0)>(255);
     $62 = $59&255;
     $phitmp$us8 = $61 ? -1 : $62;
     $storemerge$us10 = $phitmp$us8;
    }
    HEAP8[$55>>0] = $storemerge$us10;
    $63 = (($j3$04$us7) + 1)|0;
    $exitcond = ($63|0)==($33|0);
    if ($exitcond) {
     break;
    } else {
     $j3$04$us7 = $63;
    }
   }
  }
  $52 = (($i2$05$us) + 1)|0;
  $exitcond21 = ($52|0)==($34|0);
  if ($exitcond21) {
   break;
  } else {
   $i2$05$us = $52;
  }
 }
 $$pre26$pre = HEAP32[$0>>2]|0;
 $76 = ((($$pre26$pre) + ($iRefIdx<<3)|0) + 140|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($$pre26$pre) + ($iRefIdx<<3)|0) + 268|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP32[$40>>2]|0;
 $brmerge$demorgan = $42 & $43;
 if ($brmerge$demorgan) {
  $i2$05$us$1 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $81 = Math_imul($i2$05$us$1, $39)|0;
  if ($44) {
   $j3$04$us$us$1 = 0;
   while(1) {
    $92 = (($j3$04$us$us$1) + ($81))|0;
    $93 = (($80) + ($92)|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = Math_imul($95, $77)|0;
    $97 = (($96) + ($46))|0;
    $98 = $97 >> $37;
    $99 = (($98) + ($79))|0;
    $100 = ($99|0)<(0);
    if ($100) {
     $storemerge$us$us$1 = 0;
    } else {
     $101 = ($99|0)>(255);
     $102 = $99&255;
     $phitmp1$us$us$1 = $101 ? -1 : $102;
     $storemerge$us$us$1 = $phitmp1$us$us$1;
    }
    HEAP8[$93>>0] = $storemerge$us$us$1;
    $103 = (($j3$04$us$us$1) + 1)|0;
    $exitcond20$1 = ($103|0)==($33|0);
    if ($exitcond20$1) {
     break;
    } else {
     $j3$04$us$us$1 = $103;
    }
   }
  } else {
   $j3$04$us7$1 = 0;
   while(1) {
    $82 = (($j3$04$us7$1) + ($81))|0;
    $83 = (($80) + ($82)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = Math_imul($85, $77)|0;
    $87 = (($86) + ($79))|0;
    $88 = ($87|0)<(0);
    if ($88) {
     $storemerge$us10$1 = 0;
    } else {
     $89 = ($87|0)>(255);
     $90 = $87&255;
     $phitmp$us8$1 = $89 ? -1 : $90;
     $storemerge$us10$1 = $phitmp$us8$1;
    }
    HEAP8[$83>>0] = $storemerge$us10$1;
    $91 = (($j3$04$us7$1) + 1)|0;
    $exitcond$1 = ($91|0)==($33|0);
    if ($exitcond$1) {
     break;
    } else {
     $j3$04$us7$1 = $91;
    }
   }
  }
  $104 = (($i2$05$us$1) + 1)|0;
  $exitcond21$1 = ($104|0)==($34|0);
  if ($exitcond21$1) {
   break;
  } else {
   $i2$05$us$1 = $104;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDec12GetInterPredEPhS0_S0_PNS_21TagWelsDecoderContextE($pPredY,$pPredCb,$pPredCr,$pCtx) {
 $pPredY = $pPredY|0;
 $pPredCb = $pPredCb|0;
 $pPredCr = $pPredCr|0;
 $pCtx = $pCtx|0;
 var $$sum = 0, $$sum1 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond11 = 0, $i$010 = 0, $iMVs = 0, $j$07 = 0, $pMCRefMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $pMCRefMem = sp + 8|0;
 $iMVs = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 316972|0);
 $3 = (($1) + 4040|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$iMVs>>2] = 0;
 $5 = (($1) + 3908|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = (($1) + 4032|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 << 4;
 $13 = (($1) + 4036|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << 4;
 $16 = (($pCtx) + 5464|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($1) + 1156|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 << 4;
 $25 = (($pMCRefMem) + 40|0);
 HEAP32[$25>>2] = $24;
 $26 = (($1) + 1160|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 << 4;
 $29 = (($pMCRefMem) + 44|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$pMCRefMem>>2] = $pPredY;
 $30 = (($pMCRefMem) + 4|0);
 HEAP32[$30>>2] = $pPredCb;
 $31 = (($pMCRefMem) + 8|0);
 HEAP32[$31>>2] = $pPredCr;
 $32 = (($pMCRefMem) + 32|0);
 HEAP32[$32>>2] = $19;
 $33 = (($pMCRefMem) + 36|0);
 HEAP32[$33>>2] = $21;
 switch ($9|0) {
 case 32:  {
  $151 = (($1) + 3916|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($152) + ($4<<6)|0);
  $154 = HEAP16[$153>>1]|0;
  HEAP16[$iMVs>>1] = $154;
  $155 = ((($152) + ($4<<6)|0) + 2|0);
  $156 = HEAP16[$155>>1]|0;
  $157 = (($iMVs) + 2|0);
  HEAP16[$157>>1] = $156;
  $158 = (($1) + 3932|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($159) + ($4<<4)|0);
  $161 = HEAP8[$160>>0]|0;
  $162 = $161 << 24 >> 24;
  $163 = ((($pCtx) + ($162<<2)|0) + 5468|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($164) + 32|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($pMCRefMem) + 24|0);
  HEAP32[$167>>2] = $166;
  $168 = (($164) + 36|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = (($pMCRefMem) + 28|0);
  HEAP32[$170>>2] = $169;
  $171 = (($164) + 16|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($pMCRefMem) + 12|0);
  HEAP32[$173>>2] = $172;
  $174 = (($164) + 20|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = (($pMCRefMem) + 16|0);
  HEAP32[$176>>2] = $175;
  $177 = (($164) + 24|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (($pMCRefMem) + 20|0);
  HEAP32[$179>>2] = $178;
  __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$12,$15,$2,8,16,$iMVs);
  $180 = (($1) + 4104|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = ($181<<24>>24)==(0);
  if (!($182)) {
   $183 = HEAP32[$158>>2]|0;
   $184 = (($183) + ($4<<4)|0);
   $185 = HEAP8[$184>>0]|0;
   $186 = $185 << 24 >> 24;
   __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$186,8,16);
  }
  $187 = HEAP32[$151>>2]|0;
  $188 = ((($187) + ($4<<6)|0) + 8|0);
  $189 = HEAP16[$188>>1]|0;
  HEAP16[$iMVs>>1] = $189;
  $190 = ((($187) + ($4<<6)|0) + 10|0);
  $191 = HEAP16[$190>>1]|0;
  HEAP16[$157>>1] = $191;
  $192 = HEAP32[$158>>2]|0;
  $193 = ((($192) + ($4<<4)|0) + 2|0);
  $194 = HEAP8[$193>>0]|0;
  $195 = $194 << 24 >> 24;
  $196 = ((($pCtx) + ($195<<2)|0) + 5468|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = (($197) + 32|0);
  $199 = HEAP32[$198>>2]|0;
  HEAP32[$167>>2] = $199;
  $200 = (($197) + 36|0);
  $201 = HEAP32[$200>>2]|0;
  HEAP32[$170>>2] = $201;
  $202 = (($197) + 16|0);
  $203 = HEAP32[$202>>2]|0;
  HEAP32[$173>>2] = $203;
  $204 = (($197) + 20|0);
  $205 = HEAP32[$204>>2]|0;
  HEAP32[$176>>2] = $205;
  $206 = (($197) + 24|0);
  $207 = HEAP32[$206>>2]|0;
  HEAP32[$179>>2] = $207;
  $208 = (($pPredY) + 8|0);
  HEAP32[$pMCRefMem>>2] = $208;
  $209 = (($pPredCb) + 4|0);
  HEAP32[$30>>2] = $209;
  $210 = (($pPredCr) + 4|0);
  HEAP32[$31>>2] = $210;
  $211 = $12 | 8;
  __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$211,$15,$2,8,16,$iMVs);
  $212 = HEAP8[$180>>0]|0;
  $213 = ($212<<24>>24)==(0);
  if ($213) {
   STACKTOP = sp;return;
  }
  $214 = HEAP32[$158>>2]|0;
  $215 = ((($214) + ($4<<4)|0) + 2|0);
  $216 = HEAP8[$215>>0]|0;
  $217 = $216 << 24 >> 24;
  __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$217,8,16);
  STACKTOP = sp;return;
  break;
 }
 case 16:  {
  $82 = (($1) + 3916|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + ($4<<6)|0);
  $85 = HEAP16[$84>>1]|0;
  HEAP16[$iMVs>>1] = $85;
  $86 = ((($83) + ($4<<6)|0) + 2|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = (($iMVs) + 2|0);
  HEAP16[$88>>1] = $87;
  $89 = (($1) + 3932|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + ($4<<4)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92 << 24 >> 24;
  $94 = ((($pCtx) + ($93<<2)|0) + 5468|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + 32|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($pMCRefMem) + 24|0);
  HEAP32[$98>>2] = $97;
  $99 = (($95) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($pMCRefMem) + 28|0);
  HEAP32[$101>>2] = $100;
  $102 = (($95) + 16|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($pMCRefMem) + 12|0);
  HEAP32[$104>>2] = $103;
  $105 = (($95) + 20|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($pMCRefMem) + 16|0);
  HEAP32[$107>>2] = $106;
  $108 = (($95) + 24|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($pMCRefMem) + 20|0);
  HEAP32[$110>>2] = $109;
  __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$12,$15,$2,16,8,$iMVs);
  $111 = (($1) + 4104|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = ($112<<24>>24)==(0);
  if (!($113)) {
   $114 = HEAP32[$89>>2]|0;
   $115 = (($114) + ($4<<4)|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = $116 << 24 >> 24;
   __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$117,16,8);
  }
  $118 = HEAP32[$82>>2]|0;
  $119 = ((($118) + ($4<<6)|0) + 32|0);
  $120 = HEAP16[$119>>1]|0;
  HEAP16[$iMVs>>1] = $120;
  $121 = ((($118) + ($4<<6)|0) + 34|0);
  $122 = HEAP16[$121>>1]|0;
  HEAP16[$88>>1] = $122;
  $123 = HEAP32[$89>>2]|0;
  $124 = ((($123) + ($4<<4)|0) + 8|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125 << 24 >> 24;
  $127 = ((($pCtx) + ($126<<2)|0) + 5468|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + 32|0);
  $130 = HEAP32[$129>>2]|0;
  HEAP32[$98>>2] = $130;
  $131 = (($128) + 36|0);
  $132 = HEAP32[$131>>2]|0;
  HEAP32[$101>>2] = $132;
  $133 = (($128) + 16|0);
  $134 = HEAP32[$133>>2]|0;
  HEAP32[$104>>2] = $134;
  $135 = (($128) + 20|0);
  $136 = HEAP32[$135>>2]|0;
  HEAP32[$107>>2] = $136;
  $137 = (($128) + 24|0);
  $138 = HEAP32[$137>>2]|0;
  HEAP32[$110>>2] = $138;
  $139 = $19 << 3;
  $140 = (($pPredY) + ($139)|0);
  HEAP32[$pMCRefMem>>2] = $140;
  $141 = $21 << 2;
  $142 = (($pPredCb) + ($141)|0);
  HEAP32[$30>>2] = $142;
  $143 = (($pPredCr) + ($141)|0);
  HEAP32[$31>>2] = $143;
  $144 = $15 | 8;
  __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$12,$144,$2,16,8,$iMVs);
  $145 = HEAP8[$111>>0]|0;
  $146 = ($145<<24>>24)==(0);
  if ($146) {
   STACKTOP = sp;return;
  }
  $147 = HEAP32[$89>>2]|0;
  $148 = ((($147) + ($4<<4)|0) + 8|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149 << 24 >> 24;
  __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$150,16,8);
  STACKTOP = sp;return;
  break;
 }
 case 128: case 64:  {
  $34 = (($1) + 4008|0);
  $35 = (($1) + 3932|0);
  $36 = (($pMCRefMem) + 24|0);
  $37 = (($pMCRefMem) + 28|0);
  $38 = (($pMCRefMem) + 12|0);
  $39 = (($pMCRefMem) + 16|0);
  $40 = (($pMCRefMem) + 20|0);
  $41 = (($1) + 4104|0);
  $42 = (($1) + 3916|0);
  $43 = (($iMVs) + 2|0);
  $44 = $19 << 2;
  $45 = $21 << 1;
  $i$010 = 0;
  while(1) {
   $218 = HEAP32[$34>>2]|0;
   $219 = ((($218) + ($4<<2)|0) + ($i$010)|0);
   $220 = HEAP8[$219>>0]|0;
   $221 = $220 << 24 >> 24;
   $222 = $i$010 & 1;
   $223 = $222 << 3;
   $224 = $i$010 >>> 1;
   $225 = $224 << 3;
   $226 = $223 | $12;
   $227 = (($225) + ($15))|0;
   $228 = $222 << 1;
   $229 = $225 | $228;
   $230 = HEAP32[$35>>2]|0;
   $231 = ((($230) + ($4<<4)|0) + ($229)|0);
   $232 = HEAP8[$231>>0]|0;
   $233 = $232 << 24 >> 24;
   $234 = ((($pCtx) + ($233<<2)|0) + 5468|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = (($235) + 32|0);
   $237 = HEAP32[$236>>2]|0;
   HEAP32[$36>>2] = $237;
   $238 = (($235) + 36|0);
   $239 = HEAP32[$238>>2]|0;
   HEAP32[$37>>2] = $239;
   $240 = (($235) + 16|0);
   $241 = HEAP32[$240>>2]|0;
   HEAP32[$38>>2] = $241;
   $242 = (($235) + 20|0);
   $243 = HEAP32[$242>>2]|0;
   HEAP32[$39>>2] = $243;
   $244 = (($235) + 24|0);
   $245 = HEAP32[$244>>2]|0;
   HEAP32[$40>>2] = $245;
   $246 = HEAP8[$41>>0]|0;
   $247 = ($246<<24>>24)==(0);
   if ($247) {
    $266 = 0;
   } else {
    $248 = HEAP32[$35>>2]|0;
    $249 = ((($248) + ($4<<4)|0) + ($229)|0);
    $250 = HEAP8[$249>>0]|0;
    $251 = $250 << 24 >> 24;
    $266 = $251;
   }
   $252 = Math_imul($225, $19)|0;
   $$sum = (($252) + ($223))|0;
   $253 = (($pPredY) + ($$sum)|0);
   $254 = $222 << 2;
   $255 = $225 >> 1;
   $256 = Math_imul($255, $21)|0;
   $$sum1 = (($256) + ($254))|0;
   $257 = (($pPredCb) + ($$sum1)|0);
   $258 = (($pPredCr) + ($$sum1)|0);
   HEAP32[$pMCRefMem>>2] = $253;
   HEAP32[$30>>2] = $257;
   HEAP32[$31>>2] = $258;
   if ((($221|0) == 4)) {
    $289 = HEAP32[$42>>2]|0;
    $290 = ((($289) + ($4<<6)|0) + ($229<<2)|0);
    $291 = HEAP16[$290>>1]|0;
    HEAP16[$iMVs>>1] = $291;
    $292 = (((($289) + ($4<<6)|0) + ($229<<2)|0) + 2|0);
    $293 = HEAP16[$292>>1]|0;
    HEAP16[$43>>1] = $293;
    __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$226,$227,$2,4,8,$iMVs);
    $294 = HEAP8[$41>>0]|0;
    $295 = ($294<<24>>24)==(0);
    if (!($295)) {
     __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$266,4,8);
    }
    $296 = $229 | 1;
    $297 = HEAP32[$42>>2]|0;
    $298 = ((($297) + ($4<<6)|0) + ($296<<2)|0);
    $299 = HEAP16[$298>>1]|0;
    HEAP16[$iMVs>>1] = $299;
    $300 = (((($297) + ($4<<6)|0) + ($296<<2)|0) + 2|0);
    $301 = HEAP16[$300>>1]|0;
    HEAP16[$43>>1] = $301;
    $302 = HEAP32[$pMCRefMem>>2]|0;
    $303 = (($302) + 4|0);
    HEAP32[$pMCRefMem>>2] = $303;
    $304 = HEAP32[$30>>2]|0;
    $305 = (($304) + 2|0);
    HEAP32[$30>>2] = $305;
    $306 = HEAP32[$31>>2]|0;
    $307 = (($306) + 2|0);
    HEAP32[$31>>2] = $307;
    $308 = $226 | 4;
    __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$308,$227,$2,4,8,$iMVs);
    $309 = HEAP8[$41>>0]|0;
    $310 = ($309<<24>>24)==(0);
    if (!($310)) {
     __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$266,4,8);
    }
   } else if ((($221|0) == 2)) {
    $267 = HEAP32[$42>>2]|0;
    $268 = ((($267) + ($4<<6)|0) + ($229<<2)|0);
    $269 = HEAP16[$268>>1]|0;
    HEAP16[$iMVs>>1] = $269;
    $270 = (((($267) + ($4<<6)|0) + ($229<<2)|0) + 2|0);
    $271 = HEAP16[$270>>1]|0;
    HEAP16[$43>>1] = $271;
    __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$226,$227,$2,8,4,$iMVs);
    $272 = HEAP8[$41>>0]|0;
    $273 = ($272<<24>>24)==(0);
    if (!($273)) {
     __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$266,8,4);
    }
    $274 = $229 | 4;
    $275 = HEAP32[$42>>2]|0;
    $276 = ((($275) + ($4<<6)|0) + ($274<<2)|0);
    $277 = HEAP16[$276>>1]|0;
    HEAP16[$iMVs>>1] = $277;
    $278 = (((($275) + ($4<<6)|0) + ($274<<2)|0) + 2|0);
    $279 = HEAP16[$278>>1]|0;
    HEAP16[$43>>1] = $279;
    $280 = HEAP32[$pMCRefMem>>2]|0;
    $281 = (($280) + ($44)|0);
    HEAP32[$pMCRefMem>>2] = $281;
    $282 = HEAP32[$30>>2]|0;
    $283 = (($282) + ($45)|0);
    HEAP32[$30>>2] = $283;
    $284 = HEAP32[$31>>2]|0;
    $285 = (($284) + ($45)|0);
    HEAP32[$31>>2] = $285;
    $286 = $227 | 4;
    __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$226,$286,$2,8,4,$iMVs);
    $287 = HEAP8[$41>>0]|0;
    $288 = ($287<<24>>24)==(0);
    if (!($288)) {
     __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$266,8,4);
    }
   } else if ((($221|0) == 8)) {
    $j$07 = 0;
    while(1) {
     $311 = $j$07 >>> 1;
     $312 = $311 << 2;
     $313 = $j$07 & 1;
     $314 = $312 | $313;
     $315 = $313 << 2;
     $316 = $313 << 1;
     $317 = $312 >> 1;
     $318 = Math_imul($317, $21)|0;
     $$sum3 = $315 | $$sum;
     $319 = Math_imul($312, $19)|0;
     $$sum4 = (($$sum3) + ($319))|0;
     $320 = (($pPredY) + ($$sum4)|0);
     HEAP32[$pMCRefMem>>2] = $320;
     $321 = $316 | $$sum1;
     $$sum5 = (($321) + ($318))|0;
     $322 = (($pPredCb) + ($$sum5)|0);
     HEAP32[$30>>2] = $322;
     $323 = (($pPredCr) + ($$sum5)|0);
     HEAP32[$31>>2] = $323;
     $324 = (($314) + ($229))|0;
     $325 = HEAP32[$42>>2]|0;
     $326 = ((($325) + ($4<<6)|0) + ($324<<2)|0);
     $327 = HEAP16[$326>>1]|0;
     HEAP16[$iMVs>>1] = $327;
     $328 = (((($325) + ($4<<6)|0) + ($324<<2)|0) + 2|0);
     $329 = HEAP16[$328>>1]|0;
     HEAP16[$43>>1] = $329;
     $330 = $315 | $226;
     $331 = (($312) + ($227))|0;
     __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$330,$331,$2,4,4,$iMVs);
     $332 = HEAP8[$41>>0]|0;
     $333 = ($332<<24>>24)==(0);
     if (!($333)) {
      __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$266,4,4);
     }
     $334 = (($j$07) + 1)|0;
     $exitcond = ($334|0)==(4);
     if ($exitcond) {
      break;
     } else {
      $j$07 = $334;
     }
    }
   } else if ((($221|0) == 1)) {
    $259 = HEAP32[$42>>2]|0;
    $260 = ((($259) + ($4<<6)|0) + ($229<<2)|0);
    $261 = HEAP16[$260>>1]|0;
    HEAP16[$iMVs>>1] = $261;
    $262 = (((($259) + ($4<<6)|0) + ($229<<2)|0) + 2|0);
    $263 = HEAP16[$262>>1]|0;
    HEAP16[$43>>1] = $263;
    __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$226,$227,$2,8,8,$iMVs);
    $264 = HEAP8[$41>>0]|0;
    $265 = ($264<<24>>24)==(0);
    if (!($265)) {
     __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$266,8,8);
    }
   }
   $335 = (($i$010) + 1)|0;
   $exitcond11 = ($335|0)==(4);
   if ($exitcond11) {
    break;
   } else {
    $i$010 = $335;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 8: case 256:  {
  $46 = (($1) + 3916|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($4<<6)|0);
  $49 = HEAP16[$48>>1]|0;
  HEAP16[$iMVs>>1] = $49;
  $50 = ((($47) + ($4<<6)|0) + 2|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = (($iMVs) + 2|0);
  HEAP16[$52>>1] = $51;
  $53 = (($1) + 3932|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($4<<4)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56 << 24 >> 24;
  $58 = ((($pCtx) + ($57<<2)|0) + 5468|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 32|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($pMCRefMem) + 24|0);
  HEAP32[$62>>2] = $61;
  $63 = (($59) + 36|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($pMCRefMem) + 28|0);
  HEAP32[$65>>2] = $64;
  $66 = (($59) + 16|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($pMCRefMem) + 12|0);
  HEAP32[$68>>2] = $67;
  $69 = (($59) + 20|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($pMCRefMem) + 16|0);
  HEAP32[$71>>2] = $70;
  $72 = (($59) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($pMCRefMem) + 20|0);
  HEAP32[$74>>2] = $73;
  __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($pMCRefMem,$12,$15,$2,16,16,$iMVs);
  $75 = (($1) + 4104|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = ($76<<24>>24)==(0);
  if ($77) {
   STACKTOP = sp;return;
  }
  $78 = HEAP32[$53>>2]|0;
  $79 = (($78) + ($4<<4)|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80 << 24 >> 24;
  __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($1,$pMCRefMem,$81,16,16);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZN7WelsDec12CWelsDecoderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$this>>2] = ((15616 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 12|0);
  __Z7WelsLogP13TagLogContextiPKcz($3,4,15712,$vararg_buffer);
 }
 __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($this);
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 __ZN14welsCodecTraceD2Ev($4);
 __ZdlPv($4);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN7WelsDec12CWelsDecoderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$this>>2] = ((15616 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 12|0);
  __Z7WelsLogP13TagLogContextiPKcz($3,4,15712,$vararg_buffer);
 }
 __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($this);
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 __ZN14welsCodecTraceD2Ev($4);
 __ZdlPv($4);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($this) {
 $this = $this|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 HEAP32[$vararg_buffer1>>2] = 15864;
 __Z7WelsLogP13TagLogContextiPKcz($5,4,15800,$vararg_buffer1);
 $6 = HEAP32[$0>>2]|0;
 _WelsEndDecoder($6);
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 562528|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $23 = $7;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + 12|0);
  $13 = (__ZNK10WelsCommon12CMemoryAlign18WelsGetMemoryUsageEv($9)|0);
  HEAP32[$vararg_buffer1>>2] = $13;
  __Z7WelsLogP13TagLogContextiPKcz($12,4,15872,$vararg_buffer1);
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 562528|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $22 = $14;
  } else {
   $18 = HEAP32[$16>>2]|0;
   $19 = (($18) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_vi[$20 & 15]($16);
   $$pre = HEAP32[$0>>2]|0;
   $22 = $$pre;
  }
  $21 = (($22) + 562528|0);
  HEAP32[$21>>2] = 0;
  $$pr = HEAP32[$0>>2]|0;
  $23 = $$pr;
 }
 $24 = ($23|0)==(0|0);
 if ($24) {
  STACKTOP = sp;return;
 }
 __ZN10WelsCommon8WelsFreeEPvPKc($23,15952);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN7WelsDec12CWelsDecoder10InitializeEPK19TagSVCDecodingParam($this,$pParam) {
 $this = $this|0;
 $pParam = $pParam|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($pParam|0)==(0|0);
 if ($3) {
  $4 = (($1) + 12|0);
  __Z7WelsLogP13TagLogContextiPKcz($4,1,15744,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($pParam) + 20|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 $8 = (__ZN7WelsDec12CWelsDecoder11InitDecoderEb($this,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($this) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_DecoderConfigParam($11,$pParam)|0);
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec12CWelsDecoder11InitDecoderEb($this,$bParseOnly) {
 $this = $this|0;
 $bParseOnly = $bParseOnly|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 HEAP32[$vararg_buffer>>2] = 15864;
 __Z7WelsLogP13TagLogContextiPKcz($2,4,15968,$vararg_buffer);
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($this);
 }
 $6 = (__ZN10WelsCommon11WelsMalloczEjPKc(562536,15952)|0);
 HEAP32[$3>>2] = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (__Znwj(12)|0);
 __ZN10WelsCommon12CMemoryAlignC2Ej($8,16);
 $9 = HEAP32[$3>>2]|0;
 $10 = (($9) + 562528|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$3>>2]|0;
 $12 = (($11) + 562528|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($this);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $15 = HEAP32[$0>>2]|0;
  $16 = (($15) + 12|0);
  $17 = (_WelsInitDecoder($11,$bParseOnly,$16)|0);
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDec12CWelsDecoder12UninitializeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($this);
 STACKTOP = sp;return 0;
}
function __ZN7WelsDec12CWelsDecoder9SetOptionE14DECODER_OPTIONPv($this,$eOptID,$pOption) {
 $this = $this|0;
 $eOptID = $eOptID|0;
 $pOption = $pOption|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer9 = sp;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   if ((($eOptID|0) == 9)) {
    label = 17;
   } else if ((($eOptID|0) == 10)) {
    label = 19;
   } else if ((($eOptID|0) == 11)) {
    label = 21;
   } else {
    $$0 = 8192;
   }
  } else {
   switch ($eOptID|0) {
   case 12:  {
    $51 = (($this) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + 12|0);
    __Z7WelsLogP13TagLogContextiPKcz($53,2,16288,$vararg_buffer9);
    $$0 = 1;
    break L1;
    break;
   }
   case 9:  {
    label = 17;
    break L1;
    break;
   }
   case 0:  {
    $3 = (($1) + 242344|0);
    $4 = HEAP8[$3>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if (!($5)) {
     $6 = (($this) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = (($7) + 12|0);
     __Z7WelsLogP13TagLogContextiPKcz($8,2,16032,$vararg_buffer9);
     $$0 = 0;
     break L1;
    }
    $9 = ($pOption|0)==(0|0);
    if ($9) {
     $$0 = 1;
     break L1;
    }
    $10 = HEAP32[$pOption>>2]|0;
    $11 = (_DecoderSetCsp($1,$10)|0);
    $$0 = $11;
    break L1;
    break;
   }
   case 1:  {
    $12 = ($pOption|0)==(0|0);
    if ($12) {
     $$0 = 1;
     break L1;
    }
    $13 = HEAP32[$pOption>>2]|0;
    $14 = ($13|0)!=(0);
    $15 = (($1) + 241950|0);
    $16 = $14&1;
    HEAP8[$15>>0] = $16;
    $$0 = 0;
    break L1;
    break;
   }
   case 8:  {
    $17 = ($pOption|0)==(0|0);
    if ($17) {
     $$0 = 1;
     break L1;
    }
    $18 = HEAP32[$pOption>>2]|0;
    $19 = ($18|0)<(0);
    if ($19) {
     $23 = 0;
    } else {
     $20 = ($18|0)>(7);
     $21 = $20 ? 7 : $18;
     $23 = $21;
    }
    $22 = (($1) + 242340|0);
    HEAP32[$22>>2] = $23;
    $24 = HEAP32[$0>>2]|0;
    $25 = (($24) + 242344|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)==(0);
    if (!($27)) {
     $28 = (($24) + 242340|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(0);
     if (!($30)) {
      $31 = (($this) + 8|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + 12|0);
      HEAP32[$vararg_buffer9>>2] = $23;
      __Z7WelsLogP13TagLogContextiPKcz($33,4,16104,$vararg_buffer9);
      $$0 = 1;
      break L1;
     }
    }
    __ZN7WelsDec12InitErrorConEPNS_21TagWelsDecoderContextE($24);
    $34 = (($this) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + 12|0);
    HEAP32[$vararg_buffer9>>2] = $23;
    __Z7WelsLogP13TagLogContextiPKcz($36,4,16184,$vararg_buffer9);
    $$0 = 0;
    break L1;
    break;
   }
   case 10:  {
    label = 19;
    break L1;
    break;
   }
   case 11:  {
    label = 21;
    break L1;
    break;
   }
   default: {
    $$0 = 1;
    break L1;
   }
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $37 = (($this) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if ($39) {
   $$0 = 0;
  } else {
   $40 = HEAP32[$pOption>>2]|0;
   __ZN14welsCodecTrace13SetTraceLevelEi($38,$40);
   $$0 = 0;
  }
 }
 else if ((label|0) == 19) {
  $41 = (($this) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0|0);
  if ($43) {
   $$0 = 0;
  } else {
   $44 = HEAP32[$pOption>>2]|0;
   __ZN14welsCodecTrace16SetTraceCallbackEPFvPviPKcE($42,$44);
   $45 = HEAP32[$41>>2]|0;
   $46 = (($45) + 12|0);
   HEAP32[$vararg_buffer9>>2] = 15864;
   __Z7WelsLogP13TagLogContextiPKcz($46,4,16232,$vararg_buffer9);
   $$0 = 0;
  }
 }
 else if ((label|0) == 21) {
  $47 = (($this) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0|0);
  if ($49) {
   $$0 = 0;
  } else {
   $50 = HEAP32[$pOption>>2]|0;
   __ZN14welsCodecTrace23SetTraceCallbackContextEPv($48,$50);
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec12CWelsDecoder9GetOptionE14DECODER_OPTIONPv($this,$eOptID,$pOption) {
 $this = $this|0;
 $eOptID = $eOptID|0;
 $pOption = $pOption|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $$0 = 4;
  } else {
   $3 = ($pOption|0)==(0|0);
   if ($3) {
    $$0 = 1;
   } else {
    do {
     switch ($eOptID|0) {
     case 5:  {
      $9 = (($1) + 242332|0);
      $10 = HEAP16[$9>>1]|0;
      $11 = $10&65535;
      HEAP32[$pOption>>2] = $11;
      $$0 = 0;
      break L1;
      break;
     }
     case 7:  {
      $17 = (($1) + 242328|0);
      $18 = HEAP32[$17>>2]|0;
      HEAP32[$pOption>>2] = $18;
      $$0 = 0;
      break L1;
      break;
     }
     case 3:  {
      $21 = (($1) + 317164|0);
      $22 = HEAP32[$21>>2]|0;
      HEAP32[$pOption>>2] = $22;
      $$0 = 0;
      break L1;
      break;
     }
     case 1:  {
      $6 = (($1) + 241950|0);
      $7 = HEAP8[$6>>0]|0;
      $8 = $7&255;
      HEAP32[$pOption>>2] = $8;
      $$0 = 0;
      break L1;
      break;
     }
     case 6:  {
      $14 = (($1) + 242325|0);
      $15 = HEAP8[$14>>0]|0;
      $16 = $15&255;
      HEAP32[$pOption>>2] = $16;
      $$0 = 0;
      break L1;
      break;
     }
     case 4:  {
      $12 = (($1) + 104|0);
      $13 = HEAP32[$12>>2]|0;
      HEAP32[$pOption>>2] = $13;
      $$0 = 0;
      break L1;
      break;
     }
     case 2:  {
      $19 = (($1) + 317160|0);
      $20 = HEAP32[$19>>2]|0;
      HEAP32[$pOption>>2] = $20;
      $$0 = 0;
      break L1;
      break;
     }
     case 0:  {
      $4 = (($1) + 56|0);
      $5 = HEAP32[$4>>2]|0;
      HEAP32[$pOption>>2] = $5;
      $$0 = 0;
      break L1;
      break;
     }
     case 8:  {
      $23 = (($1) + 242340|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP32[$pOption>>2] = $24;
      $$0 = 0;
      break L1;
      break;
     }
     case 12:  {
      $25 = (($1) + 512248|0);
      dest=$pOption+0|0; src=$25+0|0; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $26 = HEAP32[$0>>2]|0;
      $27 = (($26) + 512240|0);
      $28 = +HEAPF64[$27>>3];
      $29 = $28;
      $30 = (($26) + 512264|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (+($31>>>0));
      $33 = $29 / $32;
      $34 = (($pOption) + 8|0);
      HEAPF32[$34>>2] = $33;
      $35 = HEAP32[$0>>2]|0;
      $36 = (($35) + 512240|0);
      $37 = +HEAPF64[$36>>3];
      $38 = $37;
      $39 = (($35) + 512264|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (($35) + 512296|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($42) + ($40))|0;
      $44 = (($35) + 512300|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (($43) + ($45))|0;
      $47 = (+($46>>>0));
      $48 = $38 / $47;
      $49 = (($pOption) + 12|0);
      HEAPF32[$49>>2] = $48;
      $$0 = 0;
      break L1;
      break;
     }
     default: {
      $$0 = 1;
      break L1;
     }
     }
    } while(0);
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec12CWelsDecoder18DecodeFrameNoDelayEPKhiPPhP13TagBufferInfo($this,$kpSrc,$kiSrcLen,$ppDst,$pDstInfo) {
 $this = $this|0;
 $kpSrc = $kpSrc|0;
 $kiSrcLen = $kiSrcLen|0;
 $ppDst = $ppDst|0;
 $pDstInfo = $pDstInfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiiiii[$2 & 3]($this,$kpSrc,$kiSrcLen,$ppDst,$pDstInfo)|0);
 $4 = HEAP32[$this>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiiiii[$6 & 3]($this,0,0,$ppDst,$pDstInfo)|0);
 $8 = $7 | $3;
 STACKTOP = sp;return ($8|0);
}
function __ZN7WelsDec12CWelsDecoder12DecodeFrame2EPKhiPPhP13TagBufferInfo($this,$kpSrc,$kiSrcLen,$ppDst,$pDstInfo) {
 $this = $this|0;
 $kpSrc = $kpSrc|0;
 $kiSrcLen = $kiSrcLen|0;
 $ppDst = $ppDst|0;
 $pDstInfo = $pDstInfo|0;
 var $$0 = 0, $$pre = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre18 = 0, $$pre19 = 0, $$pre24 = 0, $$pre25 = 0, $$pre27 = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0;
 var $283 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0;
 var $or$cond = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN7WelsDec13CheckBsBufferEPNS_21TagWelsDecoderContextEi($1,$kiSrcLen)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 16384;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($kiSrcLen|0)>(0);
 $5 = ($kpSrc|0)!=(0|0);
 $or$cond = $4 & $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 241950|0);
 if ($or$cond) {
  HEAP8[$7>>0] = 0;
 } else {
  HEAP8[$7>>0] = 1;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 241951|0);
  HEAP8[$9>>0] = 1;
 }
 (_gettimeofday(($vararg_buffer1|0),(0|0))|0);
 $10 = HEAP32[$vararg_buffer1>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $11 << 31 >> 31;
 $13 = (___muldi3(($10|0),($12|0),1000000,0)|0);
 $14 = tempRet0;
 $15 = (($vararg_buffer1) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)<(0);
 $18 = $17 << 31 >> 31;
 $19 = (_i64Add(($13|0),($14|0),($16|0),($18|0))|0);
 $20 = tempRet0;
 $21 = (($ppDst) + 8|0);
 HEAP32[$21>>2] = 0;
 $22 = (($ppDst) + 4|0);
 HEAP32[$22>>2] = 0;
 HEAP32[$ppDst>>2] = 0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 116|0);
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 317160|0);
 HEAP32[$26>>2] = 2;
 $27 = (($pDstInfo) + 8|0);
 $28 = $27;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 dest=$pDstInfo+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $34 = $27;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 $38 = HEAP32[$0>>2]|0;
 $39 = (($38) + 242316|0);
 HEAP8[$39>>0] = 0;
 $40 = HEAP32[$0>>2]|0;
 $41 = (($40) + 242325|0);
 HEAP8[$41>>0] = 0;
 $42 = HEAP32[$0>>2]|0;
 $43 = (($42) + 242328|0);
 HEAP32[$43>>2] = 0;
 $44 = HEAP32[$0>>2]|0;
 $45 = (($44) + 104|0);
 HEAP32[$45>>2] = -1;
 $46 = HEAP32[$0>>2]|0;
 $47 = (($46) + 317164|0);
 HEAP32[$47>>2] = -1;
 $48 = ($pDstInfo|0)==(0|0);
 if ($48) {
  $66 = HEAP32[$0>>2]|0;
  $67 = (($66) + 512544|0);
  $68 = $67;
  $69 = $68;
  HEAP32[$69>>2] = 0;
  $70 = (($68) + 4)|0;
  $71 = $70;
  HEAP32[$71>>2] = 0;
 } else {
  $49 = (($pDstInfo) + 16|0);
  $50 = $49;
  $51 = $50;
  HEAP32[$51>>2] = 0;
  $52 = (($50) + 4)|0;
  $53 = $52;
  HEAP32[$53>>2] = 0;
  $54 = $27;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$0>>2]|0;
  $61 = (($60) + 512544|0);
  $62 = $61;
  $63 = $62;
  HEAP32[$63>>2] = $56;
  $64 = (($62) + 4)|0;
  $65 = $64;
  HEAP32[$65>>2] = $59;
 }
 $72 = HEAP32[$0>>2]|0;
 (_WelsDecodeBs($72,$kpSrc,$kiSrcLen,$ppDst,$pDstInfo,0)|0);
 $73 = HEAP32[$0>>2]|0;
 $74 = (($73) + 241951|0);
 HEAP8[$74>>0] = 0;
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + 116|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0);
 if ($78) {
  $231 = HEAP32[$pDstInfo>>2]|0;
  $232 = ($231|0)==(1);
  do {
   if ($232) {
    $233 = (($75) + 512264|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($234) + 1)|0;
    HEAP32[$233>>2] = $235;
    $236 = HEAP32[$0>>2]|0;
    $237 = (($236) + 512264|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = ($238|0)==(0);
    if ($239) {
     $240 = (($236) + 512248|0);
     _ResetDecStatNums($240);
     $241 = HEAP32[$0>>2]|0;
     $242 = (($241) + 512264|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = (($243) + 1)|0;
     HEAP32[$242>>2] = $244;
     $$pre = HEAP32[$0>>2]|0;
     $246 = $$pre;
    } else {
     $246 = $236;
    }
    $245 = (($246) + 512248|0);
    $247 = HEAP32[$245>>2]|0;
    $248 = (($pDstInfo) + 24|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ($247|0)==($249|0);
    if ($250) {
     $251 = (($246) + 512252|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = (($pDstInfo) + 28|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = ($252|0)==($254|0);
     if ($255) {
      break;
     } else {
      $$pre$phiZ2D = $253;
     }
    } else {
     $$pre24 = (($pDstInfo) + 28|0);
     $$pre$phiZ2D = $$pre24;
    }
    $256 = (($246) + 512268|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = (($257) + 1)|0;
    HEAP32[$256>>2] = $258;
    $259 = HEAP32[$248>>2]|0;
    $260 = HEAP32[$0>>2]|0;
    $261 = (($260) + 512248|0);
    HEAP32[$261>>2] = $259;
    $262 = HEAP32[$$pre$phiZ2D>>2]|0;
    $263 = HEAP32[$0>>2]|0;
    $264 = (($263) + 512252|0);
    HEAP32[$264>>2] = $262;
   }
  } while(0);
  (_gettimeofday(($vararg_buffer1|0),(0|0))|0);
  $265 = HEAP32[$vararg_buffer1>>2]|0;
  $266 = ($265|0)<(0);
  $267 = $266 << 31 >> 31;
  $268 = (___muldi3(($265|0),($267|0),1000000,0)|0);
  $269 = tempRet0;
  $270 = (($vararg_buffer1) + 4|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = ($271|0)<(0);
  $273 = $272 << 31 >> 31;
  $274 = (_i64Subtract(($271|0),($273|0),($19|0),($20|0))|0);
  $275 = tempRet0;
  $276 = (_i64Add(($274|0),($275|0),($268|0),($269|0))|0);
  $277 = tempRet0;
  $278 = (+($276>>>0)) + (4294967296.0*(+($277|0)));
  $279 = $278 / 1000.0;
  $280 = HEAP32[$0>>2]|0;
  $281 = (($280) + 512240|0);
  $282 = +HEAPF64[$281>>3];
  $283 = $279 + $282;
  HEAPF64[$281>>3] = $283;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $79 = (($75) + 92|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $77 & 16384;
 $82 = ($81|0)==(0);
 if (!($82)) {
  __ZN7WelsDec32ForceResetParaSetStatusAndAUListEPNS_21TagWelsDecoderContextE($75);
 }
 if ((($80|0) == 5)) {
  $$pre13 = HEAP32[$0>>2]|0;
  $88 = $$pre13;
  label = 17;
 } else if ((($80|0) == 8)) {
  $$pre16 = HEAP32[$0>>2]|0;
  $88 = $$pre16;
  label = 17;
 } else if ((($80|0) == 7)) {
  $$pre15 = HEAP32[$0>>2]|0;
  $88 = $$pre15;
  label = 17;
 } else if ((($80|0) == 15)) {
  $$pre14 = HEAP32[$0>>2]|0;
  $88 = $$pre14;
  label = 17;
 } else {
  $83 = HEAP32[$0>>2]|0;
  $84 = (($83) + 60|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0);
  if ($86) {
   $88 = $83;
   label = 17;
  } else {
   $93 = $83;
  }
 }
 if ((label|0) == 17) {
  $87 = (($88) + 242340|0);
  $89 = HEAP32[$87>>2]|0;
  $90 = ($89|0)==(0);
  if ($90) {
   $91 = (($88) + 242324|0);
   HEAP8[$91>>0] = 1;
   $$pre17 = HEAP32[$0>>2]|0;
   $93 = $$pre17;
  } else {
   $93 = $88;
  }
 }
 $92 = (($93) + 317169|0);
 $94 = HEAP8[$92>>0]|0;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $103 = (($93) + 317172|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + 1)|0;
  HEAP32[$103>>2] = $105;
  $106 = HEAP32[$0>>2]|0;
  $107 = (($106) + 317172|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)==(2147483647);
  if ($109) {
   $110 = (($this) + 8|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + 12|0);
   __Z7WelsLogP13TagLogContextiPKcz($112,2,16416,$vararg_buffer1);
   $113 = HEAP32[$0>>2]|0;
   $114 = (($113) + 317172|0);
   HEAP32[$114>>2] = 0;
  }
 } else {
  $96 = (($this) + 8|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + 12|0);
  $99 = (($93) + 116|0);
  $100 = HEAP32[$99>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $100;
  __Z7WelsLogP13TagLogContextiPKcz($98,4,16376,$vararg_buffer1);
  $101 = HEAP32[$0>>2]|0;
  $102 = (($101) + 317169|0);
  HEAP8[$102>>0] = 0;
 }
 $115 = HEAP32[$0>>2]|0;
 $116 = (($115) + 242340|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)==(0);
 if (!($118)) {
  $119 = HEAP32[$pDstInfo>>2]|0;
  $120 = ($119|0)==(1);
  if ($120) {
   $121 = (($115) + 116|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $122 | 32;
   HEAP32[$121>>2] = $123;
   $124 = HEAP32[$0>>2]|0;
   $125 = (($124) + 512248|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($pDstInfo) + 24|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($126|0)==($128|0);
   if ($129) {
    $130 = (($124) + 512252|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($pDstInfo) + 28|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($131|0)==($133|0);
    if ($134) {
     $145 = $124;
    } else {
     $$pre$phi30Z2D = $132;
     label = 28;
    }
   } else {
    $$pre29 = (($pDstInfo) + 28|0);
    $$pre$phi30Z2D = $$pre29;
    label = 28;
   }
   if ((label|0) == 28) {
    $135 = (($124) + 512268|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + 1)|0;
    HEAP32[$135>>2] = $137;
    $138 = HEAP32[$127>>2]|0;
    $139 = HEAP32[$0>>2]|0;
    $140 = (($139) + 512248|0);
    HEAP32[$140>>2] = $138;
    $141 = HEAP32[$$pre$phi30Z2D>>2]|0;
    $142 = HEAP32[$0>>2]|0;
    $143 = (($142) + 512252|0);
    HEAP32[$143>>2] = $141;
    $$pre18 = HEAP32[$0>>2]|0;
    $145 = $$pre18;
   }
   $144 = (($145) + 512264|0);
   $146 = HEAP32[$144>>2]|0;
   $147 = (($146) + 1)|0;
   HEAP32[$144>>2] = $147;
   $148 = HEAP32[$0>>2]|0;
   $149 = (($148) + 512264|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = ($150|0)==(0);
   if ($151) {
    $152 = (($148) + 512248|0);
    _ResetDecStatNums($152);
    $153 = HEAP32[$0>>2]|0;
    $154 = (($153) + 512264|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (($155) + 1)|0;
    HEAP32[$154>>2] = $156;
    $$pre19 = HEAP32[$0>>2]|0;
    $158 = $$pre19;
   } else {
    $158 = $148;
   }
   $157 = (($158) + 512332|0);
   $159 = HEAP32[$157>>2]|0;
   $160 = (($158) + 512336|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + ($159))|0;
   $163 = (($158) + 512340|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($164|0)==(0);
   $166 = (($158) + 512276|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($158) + 512288|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = Math_imul($169, $167)|0;
   if ($165) {
    $174 = $170;
   } else {
    $171 = ($162*100)|0;
    $172 = (($171|0) / ($164|0))&-1;
    $173 = (($172) + ($170))|0;
    $174 = $173;
   }
   HEAP32[$166>>2] = $174;
   $175 = HEAP32[$0>>2]|0;
   $176 = (($175) + 512340|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = ($177|0)==(0);
   $179 = (($175) + 512280|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (($175) + 512288|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = Math_imul($182, $180)|0;
   if ($178) {
    $189 = $183;
   } else {
    $184 = (($175) + 512336|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ($185*100)|0;
    $187 = (($186|0) / ($177|0))&-1;
    $188 = (($187) + ($183))|0;
    $189 = $188;
   }
   HEAP32[$179>>2] = $189;
   $not$ = ($162|0)!=(0);
   $190 = $not$&1;
   $191 = HEAP32[$0>>2]|0;
   $192 = (($191) + 512288|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($193) + ($190))|0;
   HEAP32[$192>>2] = $194;
   $195 = HEAP32[$0>>2]|0;
   $196 = (($195) + 512288|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = ($197|0)==(0);
   $$pre25 = (($195) + 512276|0);
   if ($198) {
    $201 = 0;
   } else {
    $199 = HEAP32[$$pre25>>2]|0;
    $200 = (($199>>>0) / ($197>>>0))&-1;
    $201 = $200;
   }
   HEAP32[$$pre25>>2] = $201;
   $202 = HEAP32[$0>>2]|0;
   $203 = (($202) + 512288|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ($204|0)==(0);
   $$pre27 = (($202) + 512280|0);
   if ($205) {
    $208 = 0;
   } else {
    $206 = HEAP32[$$pre27>>2]|0;
    $207 = (($206>>>0) / ($204>>>0))&-1;
    $208 = $207;
   }
   HEAP32[$$pre27>>2] = $208;
  }
 }
 (_gettimeofday(($vararg_buffer1|0),(0|0))|0);
 $209 = HEAP32[$vararg_buffer1>>2]|0;
 $210 = ($209|0)<(0);
 $211 = $210 << 31 >> 31;
 $212 = (___muldi3(($209|0),($211|0),1000000,0)|0);
 $213 = tempRet0;
 $214 = (($vararg_buffer1) + 4|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = ($215|0)<(0);
 $217 = $216 << 31 >> 31;
 $218 = (_i64Subtract(($215|0),($217|0),($19|0),($20|0))|0);
 $219 = tempRet0;
 $220 = (_i64Add(($218|0),($219|0),($212|0),($213|0))|0);
 $221 = tempRet0;
 $222 = (+($220>>>0)) + (4294967296.0*(+($221|0)));
 $223 = $222 / 1000.0;
 $224 = HEAP32[$0>>2]|0;
 $225 = (($224) + 512240|0);
 $226 = +HEAPF64[$225>>3];
 $227 = $223 + $226;
 HEAPF64[$225>>3] = $227;
 $228 = HEAP32[$0>>2]|0;
 $229 = (($228) + 116|0);
 $230 = HEAP32[$229>>2]|0;
 $$0 = $230;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec12CWelsDecoder12DecodeParserEPKhiP15TagParserBsInfo($this,$kpSrc,$kiSrcLen,$pDstInfo) {
 $this = $this|0;
 $kpSrc = $kpSrc|0;
 $kiSrcLen = $kiSrcLen|0;
 $pDstInfo = $pDstInfo|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN7WelsDec13CheckBsBufferEPNS_21TagWelsDecoderContextEi($1,$kiSrcLen)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 16384;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($kiSrcLen|0)>(0);
 $5 = ($kpSrc|0)!=(0|0);
 $or$cond = $4 & $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 241950|0);
 if ($or$cond) {
  HEAP8[$7>>0] = 0;
 } else {
  HEAP8[$7>>0] = 1;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 241951|0);
  HEAP8[$9>>0] = 1;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 116|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 242340|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 242345|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  $18 = (($14) + 316848|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$19>>2] = 0;
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 316848|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 4|0);
  dest=$23+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 }
 HEAP32[$pDstInfo>>2] = 0;
 $24 = (($pDstInfo) + 524|0);
 HEAP32[$24>>2] = 0;
 $25 = (($pDstInfo) + 520|0);
 HEAP32[$25>>2] = 0;
 $26 = ($pDstInfo|0)==(0|0);
 if ($26) {
  $45 = HEAP32[$0>>2]|0;
  $46 = (($45) + 512544|0);
  $47 = $46;
  $48 = $47;
  HEAP32[$48>>2] = 0;
  $49 = (($47) + 4)|0;
  $50 = $49;
  HEAP32[$50>>2] = 0;
 } else {
  $27 = (($pDstInfo) + 528|0);
  $28 = $27;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 512544|0);
  $36 = $35;
  $37 = $36;
  HEAP32[$37>>2] = $30;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $33;
  $40 = (($pDstInfo) + 536|0);
  $41 = $40;
  $42 = $41;
  HEAP32[$42>>2] = 0;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = 0;
 }
 $51 = HEAP32[$0>>2]|0;
 (_WelsDecodeBs($51,$kpSrc,$kiSrcLen,0,0,$pDstInfo)|0);
 $52 = HEAP32[$0>>2]|0;
 $53 = (($52) + 242345|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = ($54<<24>>24)==(0);
 if ($55) {
  $56 = (($52) + 316848|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0);
  if ($59) {
   $61 = $52;
  } else {
   _memcpy(($pDstInfo|0),($57|0),544)|0;
   $$pre = HEAP32[$0>>2]|0;
   $61 = $$pre;
  }
 } else {
  $61 = $52;
 }
 $60 = (($61) + 241951|0);
 HEAP8[$60>>0] = 0;
 $62 = HEAP32[$0>>2]|0;
 $63 = (($62) + 116|0);
 $64 = HEAP32[$63>>2]|0;
 $$0 = $64;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDec12CWelsDecoder11DecodeFrameEPKhiPPhPiRiS6_($this,$kpSrc,$kiSrcLen,$ppDst,$pStride,$iWidth,$iHeight) {
 $this = $this|0;
 $kpSrc = $kpSrc|0;
 $kiSrcLen = $kiSrcLen|0;
 $ppDst = $ppDst|0;
 $pStride = $pStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $DstInfo = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $DstInfo = sp;
 dest=$DstInfo+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = HEAP32[$pStride>>2]|0;
 $1 = (($DstInfo) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = (($pStride) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($DstInfo) + 40|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$iWidth>>2]|0;
 $6 = (($DstInfo) + 24|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$iHeight>>2]|0;
 $8 = (($DstInfo) + 28|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiiiii[$11 & 3]($this,$kpSrc,$kiSrcLen,$ppDst,$DstInfo)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  STACKTOP = sp;return ($12|0);
 }
 $14 = HEAP32[$1>>2]|0;
 HEAP32[$pStride>>2] = $14;
 $15 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $15;
 $16 = HEAP32[$6>>2]|0;
 HEAP32[$iWidth>>2] = $16;
 $17 = HEAP32[$8>>2]|0;
 HEAP32[$iHeight>>2] = $17;
 STACKTOP = sp;return ($12|0);
}
function __ZN7WelsDec12CWelsDecoder13DecodeFrameExEPKhiPhiRiS4_S4_S4_($this,$kpSrc,$kiSrcLen,$pDst,$iDstStride,$iDstLen,$iWidth,$iHeight,$iColorFormat) {
 $this = $this|0;
 $kpSrc = $kpSrc|0;
 $kiSrcLen = $kiSrcLen|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iDstLen = $iDstLen|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 $iColorFormat = $iColorFormat|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _WelsCreateDecoder($ppDecoder) {
 $ppDecoder = $ppDecoder|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($ppDecoder|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (__Znwj(12)|0);
 HEAP32[$1>>2] = ((15616 + 8|0));
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = (__Znwj(24)|0);
 __ZN14welsCodecTraceC2Ev($4);
 HEAP32[$3>>2] = $4;
 __ZN14welsCodecTrace16SetCodecInstanceEPv($4,$1);
 $5 = HEAP32[$3>>2]|0;
 __ZN14welsCodecTrace13SetTraceLevelEi($5,1);
 $6 = HEAP32[$3>>2]|0;
 $7 = (($6) + 12|0);
 __Z7WelsLogP13TagLogContextiPKcz($7,4,15672,$vararg_buffer);
 HEAP32[$ppDecoder>>2] = $1;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _WelsDestroyDecoder($pDecoder) {
 $pDecoder = $pDecoder|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pDecoder|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pDecoder>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 15]($pDecoder);
 STACKTOP = sp;return;
}
function __Z13WelsCopy8x8_cPhiS_i($pDst,$iStrideD,$pSrc,$iStrideS) {
 $pDst = $pDst|0;
 $iStrideD = $iStrideD|0;
 $pSrc = $pSrc|0;
 $iStrideS = $iStrideS|0;
 var $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0;
 var $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sum = (($iStrideS) + 4)|0;
 $$sum2 = (($iStrideD) + 4)|0;
 $0 = $iStrideD << 1;
 $1 = $iStrideS << 1;
 $2 = HEAPU8[$pSrc>>0]|(HEAPU8[$pSrc+1>>0]<<8)|(HEAPU8[$pSrc+2>>0]<<16)|(HEAPU8[$pSrc+3>>0]<<24);
 HEAP8[$pDst>>0]=$2&255;HEAP8[$pDst+1>>0]=($2>>8)&255;HEAP8[$pDst+2>>0]=($2>>16)&255;HEAP8[$pDst+3>>0]=$2>>24;
 $3 = (($pSrc) + 4|0);
 $4 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
 $5 = (($pDst) + 4|0);
 HEAP8[$5>>0]=$4&255;HEAP8[$5+1>>0]=($4>>8)&255;HEAP8[$5+2>>0]=($4>>16)&255;HEAP8[$5+3>>0]=$4>>24;
 $6 = (($pSrc) + ($iStrideS)|0);
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = (($pDst) + ($iStrideD)|0);
 HEAP8[$8>>0]=$7&255;HEAP8[$8+1>>0]=($7>>8)&255;HEAP8[$8+2>>0]=($7>>16)&255;HEAP8[$8+3>>0]=$7>>24;
 $9 = (($pSrc) + ($$sum)|0);
 $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8)|(HEAPU8[$9+2>>0]<<16)|(HEAPU8[$9+3>>0]<<24);
 $11 = (($pDst) + ($$sum2)|0);
 HEAP8[$11>>0]=$10&255;HEAP8[$11+1>>0]=($10>>8)&255;HEAP8[$11+2>>0]=($10>>16)&255;HEAP8[$11+3>>0]=$10>>24;
 $12 = (($pDst) + ($0)|0);
 $13 = (($pSrc) + ($1)|0);
 $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8)|(HEAPU8[$13+2>>0]<<16)|(HEAPU8[$13+3>>0]<<24);
 HEAP8[$12>>0]=$14&255;HEAP8[$12+1>>0]=($14>>8)&255;HEAP8[$12+2>>0]=($14>>16)&255;HEAP8[$12+3>>0]=$14>>24;
 $$sum6 = (($1) + 4)|0;
 $15 = (($pSrc) + ($$sum6)|0);
 $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $$sum7 = (($0) + 4)|0;
 $17 = (($pDst) + ($$sum7)|0);
 HEAP8[$17>>0]=$16&255;HEAP8[$17+1>>0]=($16>>8)&255;HEAP8[$17+2>>0]=($16>>16)&255;HEAP8[$17+3>>0]=$16>>24;
 $$sum8 = (($1) + ($iStrideS))|0;
 $18 = (($pSrc) + ($$sum8)|0);
 $19 = HEAPU8[$18>>0]|(HEAPU8[$18+1>>0]<<8)|(HEAPU8[$18+2>>0]<<16)|(HEAPU8[$18+3>>0]<<24);
 $$sum9 = (($0) + ($iStrideD))|0;
 $20 = (($pDst) + ($$sum9)|0);
 HEAP8[$20>>0]=$19&255;HEAP8[$20+1>>0]=($19>>8)&255;HEAP8[$20+2>>0]=($19>>16)&255;HEAP8[$20+3>>0]=$19>>24;
 $$sum10 = (($1) + ($$sum))|0;
 $21 = (($pSrc) + ($$sum10)|0);
 $22 = HEAPU8[$21>>0]|(HEAPU8[$21+1>>0]<<8)|(HEAPU8[$21+2>>0]<<16)|(HEAPU8[$21+3>>0]<<24);
 $$sum11 = (($0) + ($$sum2))|0;
 $23 = (($pDst) + ($$sum11)|0);
 HEAP8[$23>>0]=$22&255;HEAP8[$23+1>>0]=($22>>8)&255;HEAP8[$23+2>>0]=($22>>16)&255;HEAP8[$23+3>>0]=$22>>24;
 $$sum12 = $iStrideD << 2;
 $24 = (($pDst) + ($$sum12)|0);
 $$sum13 = $iStrideS << 2;
 $25 = (($pSrc) + ($$sum13)|0);
 $26 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8)|(HEAPU8[$25+2>>0]<<16)|(HEAPU8[$25+3>>0]<<24);
 HEAP8[$24>>0]=$26&255;HEAP8[$24+1>>0]=($26>>8)&255;HEAP8[$24+2>>0]=($26>>16)&255;HEAP8[$24+3>>0]=$26>>24;
 $$sum14 = (($$sum13) + 4)|0;
 $27 = (($pSrc) + ($$sum14)|0);
 $28 = HEAPU8[$27>>0]|(HEAPU8[$27+1>>0]<<8)|(HEAPU8[$27+2>>0]<<16)|(HEAPU8[$27+3>>0]<<24);
 $$sum15 = (($$sum12) + 4)|0;
 $29 = (($pDst) + ($$sum15)|0);
 HEAP8[$29>>0]=$28&255;HEAP8[$29+1>>0]=($28>>8)&255;HEAP8[$29+2>>0]=($28>>16)&255;HEAP8[$29+3>>0]=$28>>24;
 $$sum16 = (($$sum13) + ($iStrideS))|0;
 $30 = (($pSrc) + ($$sum16)|0);
 $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
 $$sum17 = (($$sum12) + ($iStrideD))|0;
 $32 = (($pDst) + ($$sum17)|0);
 HEAP8[$32>>0]=$31&255;HEAP8[$32+1>>0]=($31>>8)&255;HEAP8[$32+2>>0]=($31>>16)&255;HEAP8[$32+3>>0]=$31>>24;
 $$sum18 = (($$sum13) + ($$sum))|0;
 $33 = (($pSrc) + ($$sum18)|0);
 $34 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8)|(HEAPU8[$33+2>>0]<<16)|(HEAPU8[$33+3>>0]<<24);
 $$sum19 = (($$sum12) + ($$sum2))|0;
 $35 = (($pDst) + ($$sum19)|0);
 HEAP8[$35>>0]=$34&255;HEAP8[$35+1>>0]=($34>>8)&255;HEAP8[$35+2>>0]=($34>>16)&255;HEAP8[$35+3>>0]=$34>>24;
 $$sum20 = (($$sum12) + ($0))|0;
 $36 = (($pDst) + ($$sum20)|0);
 $$sum21 = (($$sum13) + ($1))|0;
 $37 = (($pSrc) + ($$sum21)|0);
 $38 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8)|(HEAPU8[$37+2>>0]<<16)|(HEAPU8[$37+3>>0]<<24);
 HEAP8[$36>>0]=$38&255;HEAP8[$36+1>>0]=($38>>8)&255;HEAP8[$36+2>>0]=($38>>16)&255;HEAP8[$36+3>>0]=$38>>24;
 $$sum22 = (($$sum21) + 4)|0;
 $39 = (($pSrc) + ($$sum22)|0);
 $40 = HEAPU8[$39>>0]|(HEAPU8[$39+1>>0]<<8)|(HEAPU8[$39+2>>0]<<16)|(HEAPU8[$39+3>>0]<<24);
 $$sum23 = (($$sum20) + 4)|0;
 $41 = (($pDst) + ($$sum23)|0);
 HEAP8[$41>>0]=$40&255;HEAP8[$41+1>>0]=($40>>8)&255;HEAP8[$41+2>>0]=($40>>16)&255;HEAP8[$41+3>>0]=$40>>24;
 $$sum24 = (($$sum21) + ($iStrideS))|0;
 $42 = (($pSrc) + ($$sum24)|0);
 $43 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8)|(HEAPU8[$42+2>>0]<<16)|(HEAPU8[$42+3>>0]<<24);
 $$sum25 = (($$sum20) + ($iStrideD))|0;
 $44 = (($pDst) + ($$sum25)|0);
 HEAP8[$44>>0]=$43&255;HEAP8[$44+1>>0]=($43>>8)&255;HEAP8[$44+2>>0]=($43>>16)&255;HEAP8[$44+3>>0]=$43>>24;
 $$sum26 = (($$sum21) + ($$sum))|0;
 $45 = (($pSrc) + ($$sum26)|0);
 $46 = HEAPU8[$45>>0]|(HEAPU8[$45+1>>0]<<8)|(HEAPU8[$45+2>>0]<<16)|(HEAPU8[$45+3>>0]<<24);
 $$sum27 = (($$sum20) + ($$sum2))|0;
 $47 = (($pDst) + ($$sum27)|0);
 HEAP8[$47>>0]=$46&255;HEAP8[$47+1>>0]=($46>>8)&255;HEAP8[$47+2>>0]=($46>>16)&255;HEAP8[$47+3>>0]=$46>>24;
 STACKTOP = sp;return;
}
function __Z15WelsCopy16x16_cPhiS_i($pDst,$iStrideD,$pSrc,$iStrideS) {
 $pDst = $pDst|0;
 $iStrideD = $iStrideD|0;
 $pSrc = $pSrc|0;
 $iStrideS = $iStrideS|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$012 = $pSrc;$$03 = $pDst;$i$04 = 0;
 while(1) {
  $0 = HEAPU8[$$012>>0]|(HEAPU8[$$012+1>>0]<<8)|(HEAPU8[$$012+2>>0]<<16)|(HEAPU8[$$012+3>>0]<<24);
  HEAP8[$$03>>0]=$0&255;HEAP8[$$03+1>>0]=($0>>8)&255;HEAP8[$$03+2>>0]=($0>>16)&255;HEAP8[$$03+3>>0]=$0>>24;
  $1 = (($$012) + 4|0);
  $2 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
  $3 = (($$03) + 4|0);
  HEAP8[$3>>0]=$2&255;HEAP8[$3+1>>0]=($2>>8)&255;HEAP8[$3+2>>0]=($2>>16)&255;HEAP8[$3+3>>0]=$2>>24;
  $4 = (($$012) + 8|0);
  $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
  $6 = (($$03) + 8|0);
  HEAP8[$6>>0]=$5&255;HEAP8[$6+1>>0]=($5>>8)&255;HEAP8[$6+2>>0]=($5>>16)&255;HEAP8[$6+3>>0]=$5>>24;
  $7 = (($$012) + 12|0);
  $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
  $9 = (($$03) + 12|0);
  HEAP8[$9>>0]=$8&255;HEAP8[$9+1>>0]=($8>>8)&255;HEAP8[$9+2>>0]=($8>>16)&255;HEAP8[$9+3>>0]=$8>>24;
  $10 = (($$03) + ($iStrideD)|0);
  $11 = (($$012) + ($iStrideS)|0);
  $12 = (($i$04) + 1)|0;
  $exitcond = ($12|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$012 = $11;$$03 = $10;$i$04 = $12;
  }
 }
 STACKTOP = sp;return;
}
function _WelsCPUFeatureDetect($pNumberOfLogicProcessors) {
 $pNumberOfLogicProcessors = $pNumberOfLogicProcessors|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _WelsSnprintf($pBuffer,$iSizeOfBuffer,$kpFormat,$varargs) {
 $pBuffer = $pBuffer|0;
 $iSizeOfBuffer = $iSizeOfBuffer|0;
 $kpFormat = $kpFormat|0;
 $varargs = $varargs|0;
 var $0 = 0, $pArgPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pArgPtr = sp;
 HEAP32[$pArgPtr>>2] = $varargs;
 $0 = (_vsnprintf($pBuffer,$iSizeOfBuffer,$kpFormat,$pArgPtr)|0);
 STACKTOP = sp;return ($0|0);
}
function _WelsVsnprintf($pBuffer,$iSizeOfBuffer,$kpFormat,$pArgPtr) {
 $pBuffer = $pBuffer|0;
 $iSizeOfBuffer = $iSizeOfBuffer|0;
 $kpFormat = $kpFormat|0;
 $pArgPtr = $pArgPtr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($pBuffer,$iSizeOfBuffer,$kpFormat,$pArgPtr)|0);
 STACKTOP = sp;return ($0|0);
}
function _WelsStrcat($pDest,$iSizeInBytes,$kpSrc) {
 $pDest = $pDest|0;
 $iSizeInBytes = $iSizeInBytes|0;
 $kpSrc = $kpSrc|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($pDest|0))|0);
 $1 = (($pDest) + ($0)|0);
 $2 = (($iSizeInBytes) - ($0))|0;
 (_strncpy(($1|0),($kpSrc|0),($2|0))|0);
 $$sum = (($iSizeInBytes) + -1)|0;
 $3 = (($pDest) + ($$sum)|0);
 HEAP8[$3>>0] = 0;
 STACKTOP = sp;return ($1|0);
}
function __Z16DeblockLumaLt4_cPhiiiiPa($pPix,$iStrideX,$iStrideY,$iAlpha,$iBeta,$pTc) {
 $pPix = $pPix|0;
 $iStrideX = $iStrideX|0;
 $iStrideY = $iStrideY|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 $pTc = $pTc|0;
 var $$ = 0, $$07 = 0, $$2 = 0, $$not = 0, $$not1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $i$06 = 0, $iTc$0 = 0, $iTc$1 = 0, $iTc$1$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (0 - ($iStrideX))|0;
 $1 = Math_imul($iStrideX, -2)|0;
 $2 = Math_imul($iStrideX, -3)|0;
 $3 = $iStrideX << 1;
 $$07 = $pPix;$i$06 = 0;
 while(1) {
  $4 = $i$06 >> 2;
  $5 = (($pTc) + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($6<<24>>24)>(-1);
  if ($8) {
   $9 = (($$07) + ($0)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = (($$07) + ($1)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = (($$07) + ($2)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = HEAP8[$$07>>0]|0;
   $19 = $18&255;
   $20 = (($$07) + ($iStrideX)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = (($$07) + ($3)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (($11) - ($19))|0;
   $27 = $26 >> 31;
   $28 = $27 ^ $26;
   $29 = (($28) - ($27))|0;
   $30 = ($29|0)<($iAlpha|0);
   $31 = (($14) - ($11))|0;
   $32 = $31 >> 31;
   $33 = (($22) - ($19))|0;
   $34 = $33 >> 31;
   if ($30) {
    $35 = $34 ^ $33;
    $36 = (($35) - ($34))|0;
    $37 = $32 ^ $31;
    $38 = (($37) - ($32))|0;
    $$not = ($38|0)>=($iBeta|0);
    $$not1 = ($36|0)>=($iBeta|0);
    $brmerge = $$not | $$not1;
    if (!($brmerge)) {
     $39 = (($17) - ($11))|0;
     $40 = $39 >> 31;
     $41 = $40 ^ $39;
     $42 = (($41) - ($40))|0;
     $43 = ($42|0)<($iBeta|0);
     $44 = (($25) - ($19))|0;
     $45 = $44 >> 31;
     $46 = $45 ^ $44;
     $47 = (($46) - ($45))|0;
     $48 = ($47|0)<($iBeta|0);
     if ($43) {
      $49 = (($11) + 1)|0;
      $50 = (($49) + ($19))|0;
      $51 = $50 >>> 1;
      $52 = $14 << 1;
      $53 = (($17) - ($52))|0;
      $54 = (($53) + ($51))|0;
      $55 = $54 >> 1;
      $56 = (0 - ($7))|0;
      $57 = ($55|0)<($56|0);
      if ($57) {
       $60 = $56;
      } else {
       $58 = ($55|0)>($7|0);
       $$ = $58 ? $7 : $55;
       $60 = $$;
      }
      $59 = (($60) + ($14))|0;
      $61 = $59&255;
      HEAP8[$12>>0] = $61;
      $62 = (($7) + 1)|0;
      $iTc$0 = $62;
     } else {
      $iTc$0 = $7;
     }
     if ($48) {
      $63 = (($11) + 1)|0;
      $64 = (($63) + ($19))|0;
      $65 = $64 >>> 1;
      $66 = (($25) + ($65))|0;
      $67 = $22 << 1;
      $68 = (($66) - ($67))|0;
      $69 = $68 >> 1;
      $70 = (0 - ($7))|0;
      $71 = ($69|0)<($70|0);
      if ($71) {
       $74 = $70;
      } else {
       $72 = ($69|0)>($7|0);
       $$2 = $72 ? $7 : $69;
       $74 = $$2;
      }
      $73 = (($74) + ($22))|0;
      $75 = $73&255;
      HEAP8[$20>>0] = $75;
      $76 = (($iTc$0) + 1)|0;
      $iTc$1 = $76;
     } else {
      $iTc$1 = $iTc$0;
     }
     $77 = (($19) - ($11))|0;
     $78 = $77 << 2;
     $79 = (($14) + 4)|0;
     $80 = (($79) - ($22))|0;
     $81 = (($80) + ($78))|0;
     $82 = $81 >> 3;
     $83 = (0 - ($iTc$1))|0;
     $84 = ($82|0)<($83|0);
     if ($84) {
      $87 = $83;
     } else {
      $85 = ($82|0)>($iTc$1|0);
      $iTc$1$ = $85 ? $iTc$1 : $82;
      $87 = $iTc$1$;
     }
     $86 = (($87) + ($11))|0;
     $88 = ($86>>>0)>(255);
     if ($88) {
      $89 = (0 - ($86))|0;
      $90 = $89 >> 31;
      $92 = $90;
     } else {
      $92 = $86;
     }
     $91 = $92&255;
     HEAP8[$9>>0] = $91;
     $93 = (($19) - ($87))|0;
     $94 = ($93>>>0)>(255);
     if ($94) {
      $95 = (0 - ($93))|0;
      $96 = $95 >> 31;
      $98 = $96;
     } else {
      $98 = $93;
     }
     $97 = $98&255;
     HEAP8[$$07>>0] = $97;
    }
   }
  }
  $99 = (($$07) + ($iStrideY)|0);
  $100 = (($i$06) + 1)|0;
  $exitcond = ($100|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$07 = $99;$i$06 = $100;
  }
 }
 STACKTOP = sp;return;
}
function __Z16DeblockLumaEq4_cPhiiii($pPix,$iStrideX,$iStrideY,$iAlpha,$iBeta) {
 $pPix = $pPix|0;
 $iStrideX = $iStrideX|0;
 $iStrideY = $iStrideY|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 var $$012 = 0, $$not = 0, $$not1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $brmerge = 0, $exitcond = 0, $i$011 = 0, $tmp = 0, $tmp10 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp6 = 0, $tmp7 = 0, $tmp8 = 0, $tmp9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (0 - ($iStrideX))|0;
 $1 = Math_imul($iStrideX, -2)|0;
 $2 = Math_imul($iStrideX, -3)|0;
 $3 = $iStrideX << 1;
 $4 = $iAlpha >> 2;
 $5 = (($4) + 2)|0;
 $6 = Math_imul($iStrideX, -4)|0;
 $7 = ($iStrideX*3)|0;
 $$012 = $pPix;$i$011 = 0;
 while(1) {
  $8 = (($$012) + ($0)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = (($$012) + ($1)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (($$012) + ($2)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = HEAP8[$$012>>0]|0;
  $18 = $17&255;
  $19 = (($$012) + ($iStrideX)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (($$012) + ($3)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($10) - ($18))|0;
  $26 = $25 >> 31;
  $27 = $26 ^ $25;
  $28 = (($27) - ($26))|0;
  $29 = (($13) - ($10))|0;
  $30 = $29 >> 31;
  $31 = (($21) - ($18))|0;
  $32 = $31 >> 31;
  $33 = ($28|0)<($iAlpha|0);
  do {
   if ($33) {
    $34 = $32 ^ $31;
    $35 = (($34) - ($32))|0;
    $36 = $30 ^ $29;
    $37 = (($36) - ($30))|0;
    $$not = ($37|0)>=($iBeta|0);
    $$not1 = ($35|0)>=($iBeta|0);
    $brmerge = $$not | $$not1;
    if (!($brmerge)) {
     $38 = ($28|0)<($5|0);
     if (!($38)) {
      $103 = $13 << 1;
      $104 = (($10) + 2)|0;
      $105 = (($104) + ($103))|0;
      $106 = (($105) + ($21))|0;
      $107 = $106 >>> 2;
      $108 = $107&255;
      HEAP8[$8>>0] = $108;
      $109 = $21 << 1;
      $110 = (($13) + 2)|0;
      $111 = (($110) + ($18))|0;
      $112 = (($111) + ($109))|0;
      $113 = $112 >>> 2;
      $114 = $113&255;
      HEAP8[$$012>>0] = $114;
      break;
     }
     $39 = (($16) - ($10))|0;
     $40 = $39 >> 31;
     $41 = $40 ^ $39;
     $42 = (($41) - ($40))|0;
     $43 = ($42|0)<($iBeta|0);
     $44 = (($24) - ($18))|0;
     $45 = $44 >> 31;
     $46 = $45 ^ $44;
     $47 = (($46) - ($45))|0;
     $48 = ($47|0)<($iBeta|0);
     if ($43) {
      $49 = (($$012) + ($6)|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = $50&255;
      $tmp = (($13) + ($10))|0;
      $tmp2 = (($tmp) + ($18))|0;
      $tmp3 = $tmp2 << 1;
      $52 = (($16) + 4)|0;
      $53 = (($52) + ($21))|0;
      $54 = (($53) + ($tmp3))|0;
      $55 = $54 >>> 3;
      $56 = $55&255;
      HEAP8[$8>>0] = $56;
      $57 = (($10) + 2)|0;
      $58 = (($57) + ($13))|0;
      $59 = (($58) + ($16))|0;
      $60 = (($59) + ($18))|0;
      $61 = $60 >>> 2;
      $62 = $61&255;
      HEAP8[$11>>0] = $62;
      $tmp4 = (($51) + ($16))|0;
      $tmp5 = $tmp4 << 1;
      $63 = (($10) + 4)|0;
      $64 = (($63) + ($13))|0;
      $65 = (($64) + ($16))|0;
      $66 = (($65) + ($18))|0;
      $67 = (($66) + ($tmp5))|0;
      $68 = $67 >>> 3;
      $69 = $68&255;
      HEAP8[$14>>0] = $69;
     } else {
      $70 = $13 << 1;
      $71 = (($10) + 2)|0;
      $72 = (($71) + ($70))|0;
      $73 = (($72) + ($21))|0;
      $74 = $73 >>> 2;
      $75 = $74&255;
      HEAP8[$8>>0] = $75;
     }
     if ($48) {
      $76 = (($$012) + ($7)|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = $77&255;
      $tmp6 = (($18) + ($10))|0;
      $tmp7 = (($tmp6) + ($21))|0;
      $tmp8 = $tmp7 << 1;
      $79 = (($13) + 4)|0;
      $80 = (($79) + ($24))|0;
      $81 = (($80) + ($tmp8))|0;
      $82 = $81 >>> 3;
      $83 = $82&255;
      HEAP8[$$012>>0] = $83;
      $84 = (($10) + 2)|0;
      $85 = (($84) + ($18))|0;
      $86 = (($85) + ($21))|0;
      $87 = (($86) + ($24))|0;
      $88 = $87 >>> 2;
      $89 = $88&255;
      HEAP8[$19>>0] = $89;
      $tmp9 = (($78) + ($24))|0;
      $tmp10 = $tmp9 << 1;
      $90 = (($10) + 4)|0;
      $91 = (($90) + ($18))|0;
      $92 = (($91) + ($21))|0;
      $93 = (($92) + ($24))|0;
      $94 = (($93) + ($tmp10))|0;
      $95 = $94 >>> 3;
      $96 = $95&255;
      HEAP8[$22>>0] = $96;
      break;
     } else {
      $97 = $21 << 1;
      $98 = (($13) + 2)|0;
      $99 = (($98) + ($18))|0;
      $100 = (($99) + ($97))|0;
      $101 = $100 >>> 2;
      $102 = $101&255;
      HEAP8[$$012>>0] = $102;
      break;
     }
    }
   }
  } while(0);
  $115 = (($$012) + ($iStrideY)|0);
  $116 = (($i$011) + 1)|0;
  $exitcond = ($116|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$012 = $115;$i$011 = $116;
  }
 }
 STACKTOP = sp;return;
}
function __Z17DeblockLumaLt4V_cPhiiiPa($pPix,$iStride,$iAlpha,$iBeta,$tc) {
 $pPix = $pPix|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 $tc = $tc|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z16DeblockLumaLt4_cPhiiiiPa($pPix,$iStride,1,$iAlpha,$iBeta,$tc);
 STACKTOP = sp;return;
}
function __Z17DeblockLumaLt4H_cPhiiiPa($pPix,$iStride,$iAlpha,$iBeta,$tc) {
 $pPix = $pPix|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 $tc = $tc|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z16DeblockLumaLt4_cPhiiiiPa($pPix,1,$iStride,$iAlpha,$iBeta,$tc);
 STACKTOP = sp;return;
}
function __Z17DeblockLumaEq4V_cPhiii($pPix,$iStride,$iAlpha,$iBeta) {
 $pPix = $pPix|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z16DeblockLumaEq4_cPhiiii($pPix,$iStride,1,$iAlpha,$iBeta);
 STACKTOP = sp;return;
}
function __Z17DeblockLumaEq4H_cPhiii($pPix,$iStride,$iAlpha,$iBeta) {
 $pPix = $pPix|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z16DeblockLumaEq4_cPhiiii($pPix,1,$iStride,$iAlpha,$iBeta);
 STACKTOP = sp;return;
}
function __Z18DeblockChromaLt4_cPhS_iiiiPa($pPixCb,$pPixCr,$iStrideX,$iStrideY,$iAlpha,$iBeta,$pTc) {
 $pPixCb = $pPixCb|0;
 $pPixCr = $pPixCr|0;
 $iStrideX = $iStrideX|0;
 $iStrideY = $iStrideY|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 $pTc = $pTc|0;
 var $$ = 0, $$0111 = 0, $$014 = 0, $$6 = 0, $$not = 0, $$not2 = 0, $$not3 = 0, $$not4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge5 = 0, $exitcond = 0, $i$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (0 - ($iStrideX))|0;
 $1 = Math_imul($iStrideX, -2)|0;
 $$0111 = $pPixCr;$$014 = $pPixCb;$i$013 = 0;
 while(1) {
  $2 = $i$013 >> 1;
  $3 = (($pTc) + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($4<<24>>24)>(0);
  if ($6) {
   $7 = (($$014) + ($0)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = (($$014) + ($1)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = HEAP8[$$014>>0]|0;
   $14 = $13&255;
   $15 = (($$014) + ($iStrideX)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = (($9) - ($14))|0;
   $19 = $18 >> 31;
   $20 = $19 ^ $18;
   $21 = (($20) - ($19))|0;
   $22 = ($21|0)<($iAlpha|0);
   $23 = (($12) - ($9))|0;
   $24 = $23 >> 31;
   $25 = (($17) - ($14))|0;
   $26 = $25 >> 31;
   if ($22) {
    $27 = $26 ^ $25;
    $28 = (($27) - ($26))|0;
    $29 = $24 ^ $23;
    $30 = (($29) - ($24))|0;
    $$not = ($30|0)>=($iBeta|0);
    $$not2 = ($28|0)>=($iBeta|0);
    $brmerge = $$not | $$not2;
    if (!($brmerge)) {
     $31 = (($14) - ($9))|0;
     $32 = $31 << 2;
     $33 = (($12) + 4)|0;
     $34 = (($33) - ($17))|0;
     $35 = (($34) + ($32))|0;
     $36 = $35 >> 3;
     $37 = (0 - ($5))|0;
     $38 = ($36|0)<($37|0);
     if ($38) {
      $41 = $37;
     } else {
      $39 = ($36|0)>($5|0);
      $$ = $39 ? $5 : $36;
      $41 = $$;
     }
     $40 = (($41) + ($9))|0;
     $42 = ($40>>>0)>(255);
     if ($42) {
      $43 = (0 - ($40))|0;
      $44 = $43 >> 31;
      $46 = $44;
     } else {
      $46 = $40;
     }
     $45 = $46&255;
     HEAP8[$7>>0] = $45;
     $47 = (($14) - ($41))|0;
     $48 = ($47>>>0)>(255);
     if ($48) {
      $49 = (0 - ($47))|0;
      $50 = $49 >> 31;
      $52 = $50;
     } else {
      $52 = $47;
     }
     $51 = $52&255;
     HEAP8[$$014>>0] = $51;
    }
   }
   $53 = (($$0111) + ($0)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = (($$0111) + ($1)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = HEAP8[$$0111>>0]|0;
   $60 = $59&255;
   $61 = (($$0111) + ($iStrideX)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = (($55) - ($60))|0;
   $65 = $64 >> 31;
   $66 = $65 ^ $64;
   $67 = (($66) - ($65))|0;
   $68 = ($67|0)<($iAlpha|0);
   $69 = (($58) - ($55))|0;
   $70 = $69 >> 31;
   $71 = (($63) - ($60))|0;
   $72 = $71 >> 31;
   if ($68) {
    $73 = $72 ^ $71;
    $74 = (($73) - ($72))|0;
    $75 = $70 ^ $69;
    $76 = (($75) - ($70))|0;
    $$not3 = ($76|0)>=($iBeta|0);
    $$not4 = ($74|0)>=($iBeta|0);
    $brmerge5 = $$not3 | $$not4;
    if (!($brmerge5)) {
     $77 = (($60) - ($55))|0;
     $78 = $77 << 2;
     $79 = (($58) + 4)|0;
     $80 = (($79) - ($63))|0;
     $81 = (($80) + ($78))|0;
     $82 = $81 >> 3;
     $83 = (0 - ($5))|0;
     $84 = ($82|0)<($83|0);
     if ($84) {
      $87 = $83;
     } else {
      $85 = ($82|0)>($5|0);
      $$6 = $85 ? $5 : $82;
      $87 = $$6;
     }
     $86 = (($87) + ($55))|0;
     $88 = ($86>>>0)>(255);
     if ($88) {
      $89 = (0 - ($86))|0;
      $90 = $89 >> 31;
      $92 = $90;
     } else {
      $92 = $86;
     }
     $91 = $92&255;
     HEAP8[$53>>0] = $91;
     $93 = (($60) - ($87))|0;
     $94 = ($93>>>0)>(255);
     if ($94) {
      $95 = (0 - ($93))|0;
      $96 = $95 >> 31;
      $98 = $96;
     } else {
      $98 = $93;
     }
     $97 = $98&255;
     HEAP8[$$0111>>0] = $97;
    }
   }
  }
  $99 = (($$014) + ($iStrideY)|0);
  $100 = (($$0111) + ($iStrideY)|0);
  $101 = (($i$013) + 1)|0;
  $exitcond = ($101|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$0111 = $100;$$014 = $99;$i$013 = $101;
  }
 }
 STACKTOP = sp;return;
}
function __Z18DeblockChromaEq4_cPhS_iiii($pPixCb,$pPixCr,$iStrideX,$iStrideY,$iAlpha,$iBeta) {
 $pPixCb = $pPixCb|0;
 $pPixCr = $pPixCr|0;
 $iStrideX = $iStrideX|0;
 $iStrideY = $iStrideY|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 var $$016 = 0, $$07 = 0, $$not = 0, $$not2 = 0, $$not3 = 0, $$not4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $8 = 0, $9 = 0, $brmerge = 0, $brmerge5 = 0, $exitcond = 0, $i$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (0 - ($iStrideX))|0;
 $1 = Math_imul($iStrideX, -2)|0;
 $$016 = $pPixCr;$$07 = $pPixCb;$i$08 = 0;
 while(1) {
  $2 = (($$07) + ($0)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (($$07) + ($1)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = HEAP8[$$07>>0]|0;
  $9 = $8&255;
  $10 = (($$07) + ($iStrideX)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($4) - ($9))|0;
  $14 = $13 >> 31;
  $15 = $14 ^ $13;
  $16 = (($15) - ($14))|0;
  $17 = ($16|0)<($iAlpha|0);
  $18 = (($7) - ($4))|0;
  $19 = $18 >> 31;
  $20 = (($12) - ($9))|0;
  $21 = $20 >> 31;
  if ($17) {
   $22 = $21 ^ $20;
   $23 = (($22) - ($21))|0;
   $24 = $19 ^ $18;
   $25 = (($24) - ($19))|0;
   $$not = ($25|0)>=($iBeta|0);
   $$not2 = ($23|0)>=($iBeta|0);
   $brmerge = $$not | $$not2;
   if (!($brmerge)) {
    $26 = $7 << 1;
    $27 = (($4) + 2)|0;
    $28 = (($27) + ($26))|0;
    $29 = (($28) + ($12))|0;
    $30 = $29 >>> 2;
    $31 = $30&255;
    HEAP8[$2>>0] = $31;
    $32 = $12 << 1;
    $33 = (($7) + 2)|0;
    $34 = (($33) + ($9))|0;
    $35 = (($34) + ($32))|0;
    $36 = $35 >>> 2;
    $37 = $36&255;
    HEAP8[$$07>>0] = $37;
   }
  }
  $38 = (($$016) + ($0)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = (($$016) + ($1)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = HEAP8[$$016>>0]|0;
  $45 = $44&255;
  $46 = (($$016) + ($iStrideX)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = (($40) - ($45))|0;
  $50 = $49 >> 31;
  $51 = $50 ^ $49;
  $52 = (($51) - ($50))|0;
  $53 = ($52|0)<($iAlpha|0);
  $54 = (($43) - ($40))|0;
  $55 = $54 >> 31;
  $56 = (($48) - ($45))|0;
  $57 = $56 >> 31;
  if ($53) {
   $58 = $57 ^ $56;
   $59 = (($58) - ($57))|0;
   $60 = $55 ^ $54;
   $61 = (($60) - ($55))|0;
   $$not3 = ($61|0)>=($iBeta|0);
   $$not4 = ($59|0)>=($iBeta|0);
   $brmerge5 = $$not3 | $$not4;
   if (!($brmerge5)) {
    $62 = $43 << 1;
    $63 = (($40) + 2)|0;
    $64 = (($63) + ($62))|0;
    $65 = (($64) + ($48))|0;
    $66 = $65 >>> 2;
    $67 = $66&255;
    HEAP8[$38>>0] = $67;
    $68 = $48 << 1;
    $69 = (($43) + 2)|0;
    $70 = (($69) + ($45))|0;
    $71 = (($70) + ($68))|0;
    $72 = $71 >>> 2;
    $73 = $72&255;
    HEAP8[$$016>>0] = $73;
   }
  }
  $74 = (($$016) + ($iStrideY)|0);
  $75 = (($$07) + ($iStrideY)|0);
  $76 = (($i$08) + 1)|0;
  $exitcond = ($76|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$016 = $74;$$07 = $75;$i$08 = $76;
  }
 }
 STACKTOP = sp;return;
}
function __Z19DeblockChromaLt4V_cPhS_iiiPa($pPixCb,$pPixCr,$iStride,$iAlpha,$iBeta,$tc) {
 $pPixCb = $pPixCb|0;
 $pPixCr = $pPixCr|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 $tc = $tc|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z18DeblockChromaLt4_cPhS_iiiiPa($pPixCb,$pPixCr,$iStride,1,$iAlpha,$iBeta,$tc);
 STACKTOP = sp;return;
}
function __Z19DeblockChromaLt4H_cPhS_iiiPa($pPixCb,$pPixCr,$iStride,$iAlpha,$iBeta,$tc) {
 $pPixCb = $pPixCb|0;
 $pPixCr = $pPixCr|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 $tc = $tc|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z18DeblockChromaLt4_cPhS_iiiiPa($pPixCb,$pPixCr,1,$iStride,$iAlpha,$iBeta,$tc);
 STACKTOP = sp;return;
}
function __Z19DeblockChromaEq4V_cPhS_iii($pPixCb,$pPixCr,$iStride,$iAlpha,$iBeta) {
 $pPixCb = $pPixCb|0;
 $pPixCr = $pPixCr|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z18DeblockChromaEq4_cPhS_iiii($pPixCb,$pPixCr,$iStride,1,$iAlpha,$iBeta);
 STACKTOP = sp;return;
}
function __Z19DeblockChromaEq4H_cPhS_iii($pPixCb,$pPixCr,$iStride,$iAlpha,$iBeta) {
 $pPixCb = $pPixCb|0;
 $pPixCr = $pPixCr|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z18DeblockChromaEq4_cPhS_iiii($pPixCb,$pPixCr,1,$iStride,$iAlpha,$iBeta);
 STACKTOP = sp;return;
}
function __Z19DeblockChromaLt42_cPhiiiiPa($pPixCbCr,$iStrideX,$iStrideY,$iAlpha,$iBeta,$pTc) {
 $pPixCbCr = $pPixCbCr|0;
 $iStrideX = $iStrideX|0;
 $iStrideY = $iStrideY|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 $pTc = $pTc|0;
 var $$ = 0, $$04 = 0, $$not = 0, $$not1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0;
 var $exitcond = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (0 - ($iStrideX))|0;
 $1 = Math_imul($iStrideX, -2)|0;
 $$04 = $pPixCbCr;$i$03 = 0;
 while(1) {
  $2 = $i$03 >> 1;
  $3 = (($pTc) + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($4<<24>>24)>(0);
  if ($6) {
   $7 = (($$04) + ($0)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = (($$04) + ($1)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = HEAP8[$$04>>0]|0;
   $14 = $13&255;
   $15 = (($$04) + ($iStrideX)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = (($9) - ($14))|0;
   $19 = $18 >> 31;
   $20 = $19 ^ $18;
   $21 = (($20) - ($19))|0;
   $22 = ($21|0)<($iAlpha|0);
   $23 = (($12) - ($9))|0;
   $24 = $23 >> 31;
   $25 = (($17) - ($14))|0;
   $26 = $25 >> 31;
   if ($22) {
    $27 = $26 ^ $25;
    $28 = (($27) - ($26))|0;
    $29 = $24 ^ $23;
    $30 = (($29) - ($24))|0;
    $$not = ($30|0)>=($iBeta|0);
    $$not1 = ($28|0)>=($iBeta|0);
    $brmerge = $$not | $$not1;
    if (!($brmerge)) {
     $31 = (($14) - ($9))|0;
     $32 = $31 << 2;
     $33 = (($12) + 4)|0;
     $34 = (($33) - ($17))|0;
     $35 = (($34) + ($32))|0;
     $36 = $35 >> 3;
     $37 = (0 - ($5))|0;
     $38 = ($36|0)<($37|0);
     if ($38) {
      $41 = $37;
     } else {
      $39 = ($36|0)>($5|0);
      $$ = $39 ? $5 : $36;
      $41 = $$;
     }
     $40 = (($41) + ($9))|0;
     $42 = ($40>>>0)>(255);
     if ($42) {
      $43 = (0 - ($40))|0;
      $44 = $43 >> 31;
      $46 = $44;
     } else {
      $46 = $40;
     }
     $45 = $46&255;
     HEAP8[$7>>0] = $45;
     $47 = (($14) - ($41))|0;
     $48 = ($47>>>0)>(255);
     if ($48) {
      $49 = (0 - ($47))|0;
      $50 = $49 >> 31;
      $52 = $50;
     } else {
      $52 = $47;
     }
     $51 = $52&255;
     HEAP8[$$04>>0] = $51;
    }
   }
  }
  $53 = (($$04) + ($iStrideY)|0);
  $54 = (($i$03) + 1)|0;
  $exitcond = ($54|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$04 = $53;$i$03 = $54;
  }
 }
 STACKTOP = sp;return;
}
function __Z20DeblockChromaLt4V2_cPhiiiPa($pPixCbCr,$iStride,$iAlpha,$iBeta,$tc) {
 $pPixCbCr = $pPixCbCr|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 $tc = $tc|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z19DeblockChromaLt42_cPhiiiiPa($pPixCbCr,$iStride,1,$iAlpha,$iBeta,$tc);
 STACKTOP = sp;return;
}
function __Z20DeblockChromaLt4H2_cPhiiiPa($pPixCbCr,$iStride,$iAlpha,$iBeta,$tc) {
 $pPixCbCr = $pPixCbCr|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 $tc = $tc|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z19DeblockChromaLt42_cPhiiiiPa($pPixCbCr,1,$iStride,$iAlpha,$iBeta,$tc);
 STACKTOP = sp;return;
}
function __Z20DeblockChromaEq4V2_cPhiii($pPixCbCr,$iStride,$iAlpha,$iBeta) {
 $pPixCbCr = $pPixCbCr|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 var $$02$i = 0, $$not$i = 0, $$not1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $brmerge$i = 0, $exitcond$i = 0, $i$03$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (0 - ($iStride))|0;
 $1 = Math_imul($iStride, -2)|0;
 $$02$i = $pPixCbCr;$i$03$i = 0;
 while(1) {
  $2 = (($$02$i) + ($0)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (($$02$i) + ($1)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = HEAP8[$$02$i>>0]|0;
  $9 = $8&255;
  $10 = (($$02$i) + ($iStride)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($4) - ($9))|0;
  $14 = $13 >> 31;
  $15 = $14 ^ $13;
  $16 = (($15) - ($14))|0;
  $17 = ($16|0)<($iAlpha|0);
  $18 = (($7) - ($4))|0;
  $19 = $18 >> 31;
  $20 = (($12) - ($9))|0;
  $21 = $20 >> 31;
  if ($17) {
   $22 = $21 ^ $20;
   $23 = (($22) - ($21))|0;
   $24 = $19 ^ $18;
   $25 = (($24) - ($19))|0;
   $$not$i = ($25|0)>=($iBeta|0);
   $$not1$i = ($23|0)>=($iBeta|0);
   $brmerge$i = $$not$i | $$not1$i;
   if (!($brmerge$i)) {
    $26 = $7 << 1;
    $27 = (($4) + 2)|0;
    $28 = (($27) + ($26))|0;
    $29 = (($28) + ($12))|0;
    $30 = $29 >>> 2;
    $31 = $30&255;
    HEAP8[$2>>0] = $31;
    $32 = $12 << 1;
    $33 = (($7) + 2)|0;
    $34 = (($33) + ($9))|0;
    $35 = (($34) + ($32))|0;
    $36 = $35 >>> 2;
    $37 = $36&255;
    HEAP8[$$02$i>>0] = $37;
   }
  }
  $38 = (($$02$i) + 1|0);
  $39 = (($i$03$i) + 1)|0;
  $exitcond$i = ($39|0)==(8);
  if ($exitcond$i) {
   break;
  } else {
   $$02$i = $38;$i$03$i = $39;
  }
 }
 STACKTOP = sp;return;
}
function __Z20DeblockChromaEq4H2_cPhiii($pPixCbCr,$iStride,$iAlpha,$iBeta) {
 $pPixCbCr = $pPixCbCr|0;
 $iStride = $iStride|0;
 $iAlpha = $iAlpha|0;
 $iBeta = $iBeta|0;
 var $$02$i = 0, $$not$i = 0, $$not1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $brmerge$i = 0, $exitcond$i = 0, $i$03$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$02$i = $pPixCbCr;$i$03$i = 0;
 while(1) {
  $0 = (($$02$i) + -1|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = $1&255;
  $3 = (($$02$i) + -2|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = HEAP8[$$02$i>>0]|0;
  $7 = $6&255;
  $8 = (($$02$i) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = (($2) - ($7))|0;
  $12 = $11 >> 31;
  $13 = $12 ^ $11;
  $14 = (($13) - ($12))|0;
  $15 = ($14|0)<($iAlpha|0);
  $16 = (($5) - ($2))|0;
  $17 = $16 >> 31;
  $18 = (($10) - ($7))|0;
  $19 = $18 >> 31;
  if ($15) {
   $20 = $19 ^ $18;
   $21 = (($20) - ($19))|0;
   $22 = $17 ^ $16;
   $23 = (($22) - ($17))|0;
   $$not$i = ($23|0)>=($iBeta|0);
   $$not1$i = ($21|0)>=($iBeta|0);
   $brmerge$i = $$not$i | $$not1$i;
   if (!($brmerge$i)) {
    $24 = $5 << 1;
    $25 = (($2) + 2)|0;
    $26 = (($25) + ($24))|0;
    $27 = (($26) + ($10))|0;
    $28 = $27 >>> 2;
    $29 = $28&255;
    HEAP8[$0>>0] = $29;
    $30 = $10 << 1;
    $31 = (($5) + 2)|0;
    $32 = (($31) + ($7))|0;
    $33 = (($32) + ($30))|0;
    $34 = $33 >>> 2;
    $35 = $34&255;
    HEAP8[$$02$i>>0] = $35;
   }
  }
  $36 = (($$02$i) + ($iStride)|0);
  $37 = (($i$03$i) + 1)|0;
  $exitcond$i = ($37|0)==(8);
  if ($exitcond$i) {
   break;
  } else {
   $$02$i = $36;$i$03$i = $37;
  }
 }
 STACKTOP = sp;return;
}
function __Z18WelsNonZeroCount_cPa($pNonZeroCount) {
 $pNonZeroCount = $pNonZeroCount|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = (($pNonZeroCount) + ($i$01)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = ($1<<24>>24)!=(0);
  $3 = $2&1;
  HEAP8[$0>>0] = $3;
  $4 = (($i$01) + 1)|0;
  $exitcond = ($4|0)==(24);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $4;
  }
 }
 STACKTOP = sp;return;
}
function _InitExpandPictureFunc($pExpandPicFunc,$kuiCPUFlag) {
 $pExpandPicFunc = $pExpandPicFunc|0;
 $kuiCPUFlag = $kuiCPUFlag|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pExpandPicFunc>>2] = 25;
 $0 = (($pExpandPicFunc) + 4|0);
 HEAP32[$0>>2] = 26;
 $1 = (($pExpandPicFunc) + 8|0);
 HEAP32[$1>>2] = 26;
 STACKTOP = sp;return;
}
function _ExpandReferencingPicture($pData,$iWidth,$iHeight,$iStride,$pExpLuma,$pExpChrom) {
 $pData = $pData|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 $iStride = $iStride|0;
 $pExpLuma = $pExpLuma|0;
 $pExpChrom = $pExpChrom|0;
 var $$sum$i = 0, $$sum$i1 = 0, $$sum1$i = 0, $$sum1$i3 = 0, $$sum2$i = 0, $$sum2$i4 = 0, $$sum3$i = 0, $$sum3$i5 = 0, $$sum4$i = 0, $$sum4$i6 = 0, $$sum5$i = 0, $$sum5$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i8 = 0, $i$0$i = 0, $i$0$i2 = 0, $i$1$i = 0, $i$1$i9 = 0, $pTmp$0$i = 0, $pTmp$0$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pData>>2]|0;
 $1 = (($pData) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pData) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $iWidth >> 1;
 $6 = $iHeight >> 1;
 $7 = HEAP32[$iStride>>2]|0;
 FUNCTION_TABLE_viiii[$pExpLuma & 31]($0,$7,$iWidth,$iHeight);
 $8 = ($5|0)>(15);
 if ($8) {
  $9 = $5 & 15;
  $10 = ($9|0)==(0);
  $11 = $10&1;
  $12 = (($pExpChrom) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($iStride) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_viiii[$13 & 31]($2,$15,$5,$6);
  $16 = HEAP32[$12>>2]|0;
  $17 = (($iStride) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiii[$16 & 31]($4,$18,$5,$6);
  STACKTOP = sp;return;
 }
 $19 = (($iStride) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($6) + -1)|0;
 $22 = Math_imul($20, $21)|0;
 $23 = (($2) + ($22)|0);
 $24 = HEAP8[$2>>0]|0;
 $25 = (($5) + -1)|0;
 $26 = (($2) + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = HEAP8[$23>>0]|0;
 $$sum$i = (($22) + ($25))|0;
 $29 = (($2) + ($$sum$i)|0);
 $30 = HEAP8[$29>>0]|0;
 $i$0$i = 0;
 while(1) {
  $31 = (($i$0$i) + 1)|0;
  $32 = Math_imul($31, $20)|0;
  $33 = (0 - ($32))|0;
  $34 = (($2) + ($33)|0);
  $35 = (($i$0$i) + ($6))|0;
  $$sum1$i = Math_imul($35, $20)|0;
  $36 = (($2) + ($$sum1$i)|0);
  _memcpy(($34|0),($2|0),($5|0))|0;
  _memcpy(($36|0),($23|0),($5|0))|0;
  $$sum2$i = (-16 - ($32))|0;
  $37 = (($2) + ($$sum2$i)|0);
  _memset(($37|0),($24|0),16)|0;
  $$sum3$i = (($5) - ($32))|0;
  $38 = (($2) + ($$sum3$i)|0);
  _memset(($38|0),($27|0),16)|0;
  $$sum4$i = (($$sum1$i) + -16)|0;
  $39 = (($2) + ($$sum4$i)|0);
  _memset(($39|0),($28|0),16)|0;
  $$sum5$i = (($$sum1$i) + ($5))|0;
  $40 = (($2) + ($$sum5$i)|0);
  _memset(($40|0),($30|0),16)|0;
  $exitcond$i = ($31|0)==(16);
  if ($exitcond$i) {
   $i$1$i = 0;$pTmp$0$i = $2;
   break;
  } else {
   $i$0$i = $31;
  }
 }
 while(1) {
  $41 = (($pTmp$0$i) + -16|0);
  $42 = HEAP8[$pTmp$0$i>>0]|0;
  _memset(($41|0),($42|0),16)|0;
  $43 = (($pTmp$0$i) + ($5)|0);
  $44 = (($pTmp$0$i) + ($25)|0);
  $45 = HEAP8[$44>>0]|0;
  _memset(($43|0),($45|0),16)|0;
  $46 = (($pTmp$0$i) + ($20)|0);
  $47 = (($i$1$i) + 1)|0;
  $48 = ($47|0)<($6|0);
  if ($48) {
   $i$1$i = $47;$pTmp$0$i = $46;
  } else {
   break;
  }
 }
 $49 = (($iStride) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = Math_imul($50, $21)|0;
 $52 = (($4) + ($51)|0);
 $53 = HEAP8[$4>>0]|0;
 $54 = (($4) + ($25)|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = HEAP8[$52>>0]|0;
 $$sum$i1 = (($51) + ($25))|0;
 $57 = (($4) + ($$sum$i1)|0);
 $58 = HEAP8[$57>>0]|0;
 $i$0$i2 = 0;
 while(1) {
  $59 = (($i$0$i2) + 1)|0;
  $60 = Math_imul($59, $50)|0;
  $61 = (0 - ($60))|0;
  $62 = (($4) + ($61)|0);
  $63 = (($i$0$i2) + ($6))|0;
  $$sum1$i3 = Math_imul($63, $50)|0;
  $64 = (($4) + ($$sum1$i3)|0);
  _memcpy(($62|0),($4|0),($5|0))|0;
  _memcpy(($64|0),($52|0),($5|0))|0;
  $$sum2$i4 = (-16 - ($60))|0;
  $65 = (($4) + ($$sum2$i4)|0);
  _memset(($65|0),($53|0),16)|0;
  $$sum3$i5 = (($5) - ($60))|0;
  $66 = (($4) + ($$sum3$i5)|0);
  _memset(($66|0),($55|0),16)|0;
  $$sum4$i6 = (($$sum1$i3) + -16)|0;
  $67 = (($4) + ($$sum4$i6)|0);
  _memset(($67|0),($56|0),16)|0;
  $$sum5$i7 = (($$sum1$i3) + ($5))|0;
  $68 = (($4) + ($$sum5$i7)|0);
  _memset(($68|0),($58|0),16)|0;
  $exitcond$i8 = ($59|0)==(16);
  if ($exitcond$i8) {
   $i$1$i9 = 0;$pTmp$0$i10 = $4;
   break;
  } else {
   $i$0$i2 = $59;
  }
 }
 while(1) {
  $69 = (($pTmp$0$i10) + -16|0);
  $70 = HEAP8[$pTmp$0$i10>>0]|0;
  _memset(($69|0),($70|0),16)|0;
  $71 = (($pTmp$0$i10) + ($5)|0);
  $72 = (($pTmp$0$i10) + ($25)|0);
  $73 = HEAP8[$72>>0]|0;
  _memset(($71|0),($73|0),16)|0;
  $74 = (($pTmp$0$i10) + ($50)|0);
  $75 = (($i$1$i9) + 1)|0;
  $76 = ($75|0)<($6|0);
  if ($76) {
   $i$1$i9 = $75;$pTmp$0$i10 = $74;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommon8McLuma_cEPKhiPhissii($pSrc,$iSrcStride,$pDst,$iDstStride,$iMvX,$iMvY,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iMvX = $iMvX|0;
 $iMvY = $iMvY|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iMvY&65535;
 $1 = $0 & 3;
 $2 = $iMvX&65535;
 $3 = $2 & 3;
 $4 = ((30576 + ($3<<4)|0) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viiiiii[$5 & 31]($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight);
 STACKTOP = sp;return;
}
function __ZN10WelsCommon10McChroma_cEPKhiPhissii($pSrc,$iSrcStride,$pDst,$iDstStride,$iMvX,$iMvY,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iMvX = $iMvX|0;
 $iMvY = $iMvY|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$012$i$i = 0, $$012$i13$i = 0, $$012$i3$i = 0, $$012$i8$i = 0, $$016$i = 0, $$03$i$i = 0, $$03$i12$i = 0, $$03$i2$i = 0, $$03$i7$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i14$i = 0, $exitcond$i4$i = 0, $exitcond$i9$i = 0, $exitcond10$i = 0, $i$04$i$i = 0, $i$04$i1$i = 0, $i$04$i11$i = 0, $i$04$i6$i = 0, $i$05$i = 0, $j$03$i = 0, $pSrc$pn$i = 0, $pSrcNext$0$sum$i = 0;
 var $pSrcNext$0$sum2$i = 0, $pSrcNext$08$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iMvY | $iMvX;
 $1 = $0 & 7;
 $2 = ($1<<16>>16)==(0);
 if (!($2)) {
  $53 = $iMvX&65535;
  $54 = $53 & 7;
  $55 = $iMvY&65535;
  $56 = $55 & 7;
  $57 = ((30640 + ($56<<5)|0) + ($54<<2)|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = (((30640 + ($56<<5)|0) + ($54<<2)|0) + 1|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (((30640 + ($56<<5)|0) + ($54<<2)|0) + 2|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = (((30640 + ($56<<5)|0) + ($54<<2)|0) + 3|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($iHeight|0)>(0);
  if (!($69)) {
   STACKTOP = sp;return;
  }
  $70 = ($iWidth|0)>(0);
  $$016$i = $pDst;$i$05$i = 0;$pSrc$pn$i = $pSrc;
  while(1) {
   $pSrcNext$08$i = (($pSrc$pn$i) + ($iSrcStride)|0);
   if ($70) {
    $j$03$i = 0;
    while(1) {
     $71 = (($pSrc$pn$i) + ($j$03$i)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = Math_imul($73, $59)|0;
     $75 = (($j$03$i) + 1)|0;
     $76 = (($pSrc$pn$i) + ($75)|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77&255;
     $79 = Math_imul($78, $62)|0;
     $pSrcNext$0$sum$i = (($j$03$i) + ($iSrcStride))|0;
     $80 = (($pSrc$pn$i) + ($pSrcNext$0$sum$i)|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81&255;
     $83 = Math_imul($82, $65)|0;
     $pSrcNext$0$sum2$i = (($75) + ($iSrcStride))|0;
     $84 = (($pSrc$pn$i) + ($pSrcNext$0$sum2$i)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = Math_imul($86, $68)|0;
     $88 = (($74) + 32)|0;
     $89 = (($88) + ($79))|0;
     $90 = (($89) + ($83))|0;
     $91 = (($90) + ($87))|0;
     $92 = $91 >>> 6;
     $93 = $92&255;
     $94 = (($$016$i) + ($j$03$i)|0);
     HEAP8[$94>>0] = $93;
     $exitcond$i = ($75|0)==($iWidth|0);
     if ($exitcond$i) {
      break;
     } else {
      $j$03$i = $75;
     }
    }
   }
   $95 = (($$016$i) + ($iDstStride)|0);
   $96 = (($i$05$i) + 1)|0;
   $exitcond10$i = ($96|0)==($iHeight|0);
   if ($exitcond10$i) {
    break;
   } else {
    $$016$i = $95;$i$05$i = $96;$pSrc$pn$i = $pSrcNext$08$i;
   }
  }
  STACKTOP = sp;return;
 }
 if ((($iWidth|0) == 4)) {
  $43 = ($iHeight|0)>(0);
  if ($43) {
   $$012$i8$i = $pDst;$$03$i7$i = $pSrc;$i$04$i6$i = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $44 = HEAPU8[$$03$i7$i>>0]|(HEAPU8[$$03$i7$i+1>>0]<<8)|(HEAPU8[$$03$i7$i+2>>0]<<16)|(HEAPU8[$$03$i7$i+3>>0]<<24);
   HEAP32[$$012$i8$i>>2] = $44;
   $45 = (($$012$i8$i) + ($iDstStride)|0);
   $46 = (($$03$i7$i) + ($iSrcStride)|0);
   $47 = (($i$04$i6$i) + 1)|0;
   $exitcond$i9$i = ($47|0)==($iHeight|0);
   if ($exitcond$i9$i) {
    break;
   } else {
    $$012$i8$i = $45;$$03$i7$i = $46;$i$04$i6$i = $47;
   }
  }
  STACKTOP = sp;return;
 } else if ((($iWidth|0) == 8)) {
  $29 = ($iHeight|0)>(0);
  if ($29) {
   $$012$i13$i = $pDst;$$03$i12$i = $pSrc;$i$04$i11$i = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $30 = $$03$i12$i;
   $31 = $30;
   $32 = HEAPU8[$31>>0]|(HEAPU8[$31+1>>0]<<8)|(HEAPU8[$31+2>>0]<<16)|(HEAPU8[$31+3>>0]<<24);
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAPU8[$34>>0]|(HEAPU8[$34+1>>0]<<8)|(HEAPU8[$34+2>>0]<<16)|(HEAPU8[$34+3>>0]<<24);
   $36 = $$012$i13$i;
   $37 = $36;
   HEAP32[$37>>2] = $32;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $35;
   $40 = (($$012$i13$i) + ($iDstStride)|0);
   $41 = (($$03$i12$i) + ($iSrcStride)|0);
   $42 = (($i$04$i11$i) + 1)|0;
   $exitcond$i14$i = ($42|0)==($iHeight|0);
   if ($exitcond$i14$i) {
    break;
   } else {
    $$012$i13$i = $40;$$03$i12$i = $41;$i$04$i11$i = $42;
   }
  }
  STACKTOP = sp;return;
 } else if ((($iWidth|0) == 16)) {
  $3 = ($iHeight|0)>(0);
  if ($3) {
   $$012$i$i = $pDst;$$03$i$i = $pSrc;$i$04$i$i = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $4 = $$03$i$i;
   $5 = $4;
   $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
   $7 = (($4) + 4)|0;
   $8 = $7;
   $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8)|(HEAPU8[$8+2>>0]<<16)|(HEAPU8[$8+3>>0]<<24);
   $10 = $$012$i$i;
   $11 = $10;
   HEAP32[$11>>2] = $6;
   $12 = (($10) + 4)|0;
   $13 = $12;
   HEAP32[$13>>2] = $9;
   $14 = (($$03$i$i) + 8|0);
   $15 = $14;
   $16 = $15;
   $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
   $18 = (($15) + 4)|0;
   $19 = $18;
   $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8)|(HEAPU8[$19+2>>0]<<16)|(HEAPU8[$19+3>>0]<<24);
   $21 = (($$012$i$i) + 8|0);
   $22 = $21;
   $23 = $22;
   HEAP32[$23>>2] = $17;
   $24 = (($22) + 4)|0;
   $25 = $24;
   HEAP32[$25>>2] = $20;
   $26 = (($$012$i$i) + ($iDstStride)|0);
   $27 = (($$03$i$i) + ($iSrcStride)|0);
   $28 = (($i$04$i$i) + 1)|0;
   $exitcond$i$i = ($28|0)==($iHeight|0);
   if ($exitcond$i$i) {
    break;
   } else {
    $$012$i$i = $26;$$03$i$i = $27;$i$04$i$i = $28;
   }
  }
  STACKTOP = sp;return;
 } else {
  $48 = ($iHeight|0)>(0);
  if ($48) {
   $$012$i3$i = $pDst;$$03$i2$i = $pSrc;$i$04$i1$i = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $49 = HEAPU8[$$03$i2$i>>0]|(HEAPU8[$$03$i2$i+1>>0]<<8);
   HEAP16[$$012$i3$i>>1] = $49;
   $50 = (($$012$i3$i) + ($iDstStride)|0);
   $51 = (($$03$i2$i) + ($iSrcStride)|0);
   $52 = (($i$04$i1$i) + 1)|0;
   $exitcond$i4$i = ($52|0)==($iHeight|0);
   if ($exitcond$i4$i) {
    break;
   } else {
    $$012$i3$i = $50;$$03$i2$i = $51;$i$04$i1$i = $52;
   }
  }
  STACKTOP = sp;return;
 }
}
function __ZN10WelsCommon10InitMcFuncEP9TagMcFuncj($pMcFuncs,$uiCpuFlag) {
 $pMcFuncs = $pMcFuncs|0;
 $uiCpuFlag = $uiCpuFlag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pMcFuncs>>2] = 9;
 $0 = (($pMcFuncs) + 4|0);
 HEAP32[$0>>2] = 3;
 $1 = (($pMcFuncs) + 8|0);
 HEAP32[$1>>2] = 11;
 $2 = (($pMcFuncs) + 20|0);
 HEAP32[$2>>2] = 1;
 $3 = (($pMcFuncs) + 12|0);
 HEAP32[$3>>2] = 2;
 $4 = (($pMcFuncs) + 16|0);
 HEAP32[$4>>2] = 3;
 STACKTOP = sp;return;
}
function __ZN10WelsCommon12CMemoryAlignC2Ej($this,$kuiCacheLineSize) {
 $this = $this|0;
 $kuiCacheLineSize = $kuiCacheLineSize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $kuiCacheLineSize$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((30896 + 8|0));
 $0 = (($this) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ($kuiCacheLineSize|0)!=(0);
 $2 = $kuiCacheLineSize & 15;
 $3 = ($2|0)==(0);
 $or$cond = $1 & $3;
 $4 = (($this) + 4|0);
 $kuiCacheLineSize$ = $or$cond ? $kuiCacheLineSize : 16;
 HEAP32[$4>>2] = $kuiCacheLineSize$;
 STACKTOP = sp;return;
}
function __ZN10WelsCommon12CMemoryAlignD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((30896 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((30912|0),(30944|0),60,(30984|0));
  // unreachable;
 }
}
function __ZN10WelsCommon12CMemoryAlignD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((30896 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((30912|0),(30944|0),60,(30984|0));
  // unreachable;
 }
}
function __ZN10WelsCommon8WelsFreeEPvPKc($pPointer,$kpTag) {
 $pPointer = $pPointer|0;
 $kpTag = $kpTag|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pPointer|0)==(0|0);
 if (!($0)) {
  $1 = (($pPointer) + -4|0);
  $2 = HEAP32[$1>>2]|0;
  _free($2);
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($this,$kuiSize,$kpTag) {
 $this = $this|0;
 $kuiSize = $kuiSize|0;
 $kpTag = $kpTag|0;
 var $$0 = 0, $$sum1$i$i = 0, $$sum2$i$i = 0, $$sum3$i$i = 0, $$sum4$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (($kuiSize) + 8)|0;
 $4 = (($3) + ($2))|0;
 $5 = (_malloc($4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$sum1$i$i = (($1) + 7)|0;
 $7 = (($5) + ($$sum1$i$i)|0);
 $8 = $7;
 $9 = $8 & $2;
 $$sum2$i$i = (($$sum1$i$i) - ($9))|0;
 $10 = (($5) + ($$sum2$i$i)|0);
 $$sum3$i$i = (($$sum2$i$i) + -4)|0;
 $11 = (($5) + ($$sum3$i$i)|0);
 HEAP32[$11>>2] = $5;
 $$sum4$i$i = (($$sum2$i$i) + -8)|0;
 $12 = (($5) + ($$sum4$i$i)|0);
 HEAP32[$12>>2] = $kuiSize;
 $13 = ($10|0)==(0|0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($this) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($kuiSize) + 7)|0;
 $17 = (($16) + ($1))|0;
 $18 = (($17) + ($15))|0;
 HEAP32[$14>>2] = $18;
 _memset(($10|0),0,($kuiSize|0))|0;
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($this,$pPointer,$kpTag) {
 $this = $this|0;
 $pPointer = $pPointer|0;
 $kpTag = $kpTag|0;
 var $$neg2 = 0, $$neg3 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pPointer|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pPointer) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $$neg2 = (-7 - ($2))|0;
 $$neg3 = (($$neg2) - ($4))|0;
 $7 = (($$neg3) + ($6))|0;
 HEAP32[$5>>2] = $7;
 $8 = (($pPointer) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 STACKTOP = sp;return;
}
function __ZN10WelsCommon11WelsMalloczEjPKc($kuiSize,$kpTag) {
 $kuiSize = $kuiSize|0;
 $kpTag = $kpTag|0;
 var $$0 = 0, $$sum2$i = 0, $$sum3$i = 0, $$sum4$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($kuiSize) + 23)|0;
 $1 = (_malloc($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($1) + 23|0);
 $4 = $3;
 $5 = $4 & 15;
 $$sum2$i = (23 - ($5))|0;
 $6 = (($1) + ($$sum2$i)|0);
 $$sum3$i = (($$sum2$i) + -4)|0;
 $7 = (($1) + ($$sum3$i)|0);
 HEAP32[$7>>2] = $1;
 $$sum4$i = (($$sum2$i) + -8)|0;
 $8 = (($1) + ($$sum4$i)|0);
 HEAP32[$8>>2] = $kuiSize;
 $9 = ($6|0)==(0|0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($6|0),0,($kuiSize|0))|0;
 $$0 = $6;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK10WelsCommon12CMemoryAlign18WelsGetMemoryUsageEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __Z7WelsLogP13TagLogContextiPKcz($logCtx,$iLevel,$kpFmt,$varargs) {
 $logCtx = $logCtx|0;
 $iLevel = $iLevel|0;
 $kpFmt = $kpFmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pTraceTag = 0, $vararg_buffer10 = 0, $vl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $vararg_buffer10 = sp;
 $vl = sp + 8|0;
 $pTraceTag = sp + 24|0;
 if ((($iLevel|0) == 4)) {
  $4 = (($logCtx) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $5;
  (_WelsSnprintf($pTraceTag,1024,31112,$vararg_buffer10)|0);
 } else if ((($iLevel|0) == 8)) {
  $6 = (($logCtx) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $7;
  (_WelsSnprintf($pTraceTag,1024,31144,$vararg_buffer10)|0);
 } else if ((($iLevel|0) == 1)) {
  $0 = (($logCtx) + 8|0);
  $1 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $1;
  (_WelsSnprintf($pTraceTag,1024,31040,$vararg_buffer10)|0);
 } else if ((($iLevel|0) == 2)) {
  $2 = (($logCtx) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $3;
  (_WelsSnprintf($pTraceTag,1024,31072,$vararg_buffer10)|0);
 } else {
  $8 = (($logCtx) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $9;
  (_WelsSnprintf($pTraceTag,1024,31176,$vararg_buffer10)|0);
 }
 (_WelsStrcat($pTraceTag,1024,$kpFmt)|0);
 HEAP32[$vl>>2] = $varargs;
 $10 = HEAP32[$logCtx>>2]|0;
 $11 = (($logCtx) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_viiii[$10 & 31]($12,$iLevel,$pTraceTag,$vl);
 STACKTOP = sp;return;
}
function __ZN14welsCodecTraceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 2;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 5;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $this;
 $3 = (($this) + 12|0);
 HEAP32[$3>>2] = 27;
 $4 = (($this) + 20|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN14welsCodecTrace16StaticCodecTraceEPviPKcPi($pCtx,$iLevel,$Str_Format,$vl) {
 $pCtx = $pCtx|0;
 $iLevel = $iLevel|0;
 $Str_Format = $Str_Format|0;
 $vl = $vl|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $pBuf$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $pBuf$i = sp;
 $0 = HEAP32[$pCtx>>2]|0;
 $1 = ($0|0)<($iLevel|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _memset(($pBuf$i|0),0,1024)|0;
 (_WelsVsnprintf($pBuf$i,1024,$Str_Format,$vl)|0);
 $2 = (($pCtx) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($pCtx) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_viii[$3 & 7]($6,$iLevel,$pBuf$i);
 STACKTOP = sp;return;
}
function __ZN14welsCodecTraceD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN14welsCodecTrace16SetCodecInstanceEPv($this,$pCodecInstance) {
 $this = $this|0;
 $pCodecInstance = $pCodecInstance|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 20|0);
 HEAP32[$0>>2] = $pCodecInstance;
 STACKTOP = sp;return;
}
function __ZN14welsCodecTrace13SetTraceLevelEi($this,$iLevel) {
 $this = $this|0;
 $iLevel = $iLevel|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iLevel|0)>(-1);
 if ($0) {
  HEAP32[$this>>2] = $iLevel;
 }
 STACKTOP = sp;return;
}
function __ZN14welsCodecTrace16SetTraceCallbackEPFvPviPKcE($this,$func) {
 $this = $this|0;
 $func = $func|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $func;
 STACKTOP = sp;return;
}
function __ZN14welsCodecTrace23SetTraceCallbackContextEPv($this,$ctx) {
 $this = $this|0;
 $ctx = $ctx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 HEAP32[$0>>2] = $ctx;
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL8McCopy_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$012$i = 0, $$012$i13 = 0, $$012$i3 = 0, $$012$i8 = 0, $$03$i = 0, $$03$i12 = 0, $$03$i2 = 0, $$03$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i14 = 0;
 var $exitcond$i4 = 0, $exitcond$i9 = 0, $i$04$i = 0, $i$04$i1 = 0, $i$04$i11 = 0, $i$04$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($iWidth|0) == 4)) {
  $40 = ($iHeight|0)>(0);
  if ($40) {
   $$012$i8 = $pDst;$$03$i7 = $pSrc;$i$04$i6 = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $41 = HEAPU8[$$03$i7>>0]|(HEAPU8[$$03$i7+1>>0]<<8)|(HEAPU8[$$03$i7+2>>0]<<16)|(HEAPU8[$$03$i7+3>>0]<<24);
   HEAP32[$$012$i8>>2] = $41;
   $42 = (($$012$i8) + ($iDstStride)|0);
   $43 = (($$03$i7) + ($iSrcStride)|0);
   $44 = (($i$04$i6) + 1)|0;
   $exitcond$i9 = ($44|0)==($iHeight|0);
   if ($exitcond$i9) {
    break;
   } else {
    $$012$i8 = $42;$$03$i7 = $43;$i$04$i6 = $44;
   }
  }
  STACKTOP = sp;return;
 } else if ((($iWidth|0) == 8)) {
  $26 = ($iHeight|0)>(0);
  if ($26) {
   $$012$i13 = $pDst;$$03$i12 = $pSrc;$i$04$i11 = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $27 = $$03$i12;
   $28 = $27;
   $29 = HEAPU8[$28>>0]|(HEAPU8[$28+1>>0]<<8)|(HEAPU8[$28+2>>0]<<16)|(HEAPU8[$28+3>>0]<<24);
   $30 = (($27) + 4)|0;
   $31 = $30;
   $32 = HEAPU8[$31>>0]|(HEAPU8[$31+1>>0]<<8)|(HEAPU8[$31+2>>0]<<16)|(HEAPU8[$31+3>>0]<<24);
   $33 = $$012$i13;
   $34 = $33;
   HEAP32[$34>>2] = $29;
   $35 = (($33) + 4)|0;
   $36 = $35;
   HEAP32[$36>>2] = $32;
   $37 = (($$012$i13) + ($iDstStride)|0);
   $38 = (($$03$i12) + ($iSrcStride)|0);
   $39 = (($i$04$i11) + 1)|0;
   $exitcond$i14 = ($39|0)==($iHeight|0);
   if ($exitcond$i14) {
    break;
   } else {
    $$012$i13 = $37;$$03$i12 = $38;$i$04$i11 = $39;
   }
  }
  STACKTOP = sp;return;
 } else if ((($iWidth|0) == 16)) {
  $0 = ($iHeight|0)>(0);
  if ($0) {
   $$012$i = $pDst;$$03$i = $pSrc;$i$04$i = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $1 = $$03$i;
   $2 = $1;
   $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
   $4 = (($1) + 4)|0;
   $5 = $4;
   $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
   $7 = $$012$i;
   $8 = $7;
   HEAP32[$8>>2] = $3;
   $9 = (($7) + 4)|0;
   $10 = $9;
   HEAP32[$10>>2] = $6;
   $11 = (($$03$i) + 8|0);
   $12 = $11;
   $13 = $12;
   $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8)|(HEAPU8[$13+2>>0]<<16)|(HEAPU8[$13+3>>0]<<24);
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
   $18 = (($$012$i) + 8|0);
   $19 = $18;
   $20 = $19;
   HEAP32[$20>>2] = $14;
   $21 = (($19) + 4)|0;
   $22 = $21;
   HEAP32[$22>>2] = $17;
   $23 = (($$012$i) + ($iDstStride)|0);
   $24 = (($$03$i) + ($iSrcStride)|0);
   $25 = (($i$04$i) + 1)|0;
   $exitcond$i = ($25|0)==($iHeight|0);
   if ($exitcond$i) {
    break;
   } else {
    $$012$i = $23;$$03$i = $24;$i$04$i = $25;
   }
  }
  STACKTOP = sp;return;
 } else {
  $45 = ($iHeight|0)>(0);
  if ($45) {
   $$012$i3 = $pDst;$$03$i2 = $pSrc;$i$04$i1 = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $46 = HEAPU8[$$03$i2>>0]|(HEAPU8[$$03$i2+1>>0]<<8);
   HEAP16[$$012$i3>>1] = $46;
   $47 = (($$012$i3) + ($iDstStride)|0);
   $48 = (($$03$i2) + ($iSrcStride)|0);
   $49 = (($i$04$i1) + 1)|0;
   $exitcond$i4 = ($49|0)==($iHeight|0);
   if ($exitcond$i4) {
    break;
   } else {
    $$012$i3 = $47;$$03$i2 = $48;$i$04$i1 = $49;
   }
  }
  STACKTOP = sp;return;
 }
}
function __ZN10WelsCommonL12McHorVer01_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$sum$us$i = 0, $$sum2$us$i = 0, $$sum3$us$i = 0, $$sum4$us$i = 0, $$sum5$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i1 = 0, $exitcond12$i = 0, $exitcond9$i = 0, $i$010$us$i = 0, $i$07$us$i = 0, $j$03$us$i = 0, $j$06$us$i = 0, $tmp1$i$us$i = 0, $uiTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $uiTmp = sp;
 $0 = ($iHeight|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = ($iWidth|0)>(0);
 $2 = $iSrcStride << 1;
 $3 = (($2) + ($iSrcStride))|0;
 if ($1) {
  $$017$us$i = $uiTmp;$$08$us$i = $pSrc;$i$010$us$i = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $j$06$us$i = 0;
  while(1) {
   $7 = (($$08$us$i) + ($j$06$us$i)|0);
   $$sum$us$i = (($j$06$us$i) - ($2))|0;
   $8 = (($$08$us$i) + ($$sum$us$i)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $$sum2$us$i = (($3) + ($j$06$us$i))|0;
   $11 = (($$08$us$i) + ($$sum2$us$i)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $$sum3$us$i = (($j$06$us$i) - ($iSrcStride))|0;
   $14 = (($$08$us$i) + ($$sum3$us$i)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $$sum4$us$i = (($j$06$us$i) + ($2))|0;
   $17 = (($$08$us$i) + ($$sum4$us$i)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = (($19) + ($16))|0;
   $21 = HEAP8[$7>>0]|0;
   $22 = $21&255;
   $$sum5$us$i = (($j$06$us$i) + ($iSrcStride))|0;
   $23 = (($$08$us$i) + ($$sum5$us$i)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (($25) + ($22))|0;
   $27 = Math_imul($20, -5)|0;
   $tmp1$i$us$i = ($26*20)|0;
   $28 = (($10) + 16)|0;
   $29 = (($28) + ($13))|0;
   $30 = (($29) + ($27))|0;
   $31 = (($30) + ($tmp1$i$us$i))|0;
   $32 = $31 >> 5;
   $33 = ($32>>>0)>(255);
   if ($33) {
    $34 = (0 - ($32))|0;
    $35 = $34 >> 31;
    $37 = $35;
   } else {
    $37 = $32;
   }
   $36 = $37&255;
   $38 = (($$017$us$i) + ($j$06$us$i)|0);
   HEAP8[$38>>0] = $36;
   $39 = (($j$06$us$i) + 1)|0;
   $exitcond$i = ($39|0)==($iWidth|0);
   if ($exitcond$i) {
    break;
   } else {
    $j$06$us$i = $39;
   }
  }
  $4 = (($$017$us$i) + 16|0);
  $5 = (($$08$us$i) + ($iSrcStride)|0);
  $6 = (($i$010$us$i) + 1)|0;
  $exitcond12$i = ($6|0)==($iHeight|0);
  if ($exitcond12$i) {
   $$015$us$i = $pSrc;$$024$us$i = $uiTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
   break;
  } else {
   $$017$us$i = $4;$$08$us$i = $5;$i$010$us$i = $6;
  }
 }
 while(1) {
  $j$03$us$i = 0;
  while(1) {
   $44 = (($$015$us$i) + ($j$03$us$i)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = (($$024$us$i) + ($j$03$us$i)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = (($46) + 1)|0;
   $51 = (($50) + ($49))|0;
   $52 = $51 >>> 1;
   $53 = $52&255;
   $54 = (($$06$us$i) + ($j$03$us$i)|0);
   HEAP8[$54>>0] = $53;
   $55 = (($j$03$us$i) + 1)|0;
   $exitcond$i1 = ($55|0)==($iWidth|0);
   if ($exitcond$i1) {
    break;
   } else {
    $j$03$us$i = $55;
   }
  }
  $40 = (($$06$us$i) + ($iDstStride)|0);
  $41 = (($$015$us$i) + ($iSrcStride)|0);
  $42 = (($$024$us$i) + 16|0);
  $43 = (($i$07$us$i) + 1)|0;
  $exitcond9$i = ($43|0)==($iHeight|0);
  if ($exitcond9$i) {
   break;
  } else {
   $$015$us$i = $41;$$024$us$i = $42;$$06$us$i = $40;$i$07$us$i = $43;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer02_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$017$us = 0, $$08$us = 0, $$sum$us = 0, $$sum2$us = 0, $$sum3$us = 0, $$sum4$us = 0, $$sum5$us = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond12 = 0, $i$010$us = 0, $j$06$us = 0, $tmp1$i$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iHeight|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = ($iWidth|0)>(0);
 $2 = $iSrcStride << 1;
 $3 = (($2) + ($iSrcStride))|0;
 if ($1) {
  $$017$us = $pDst;$$08$us = $pSrc;$i$010$us = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $j$06$us = 0;
  while(1) {
   $7 = (($$08$us) + ($j$06$us)|0);
   $$sum$us = (($j$06$us) - ($2))|0;
   $8 = (($$08$us) + ($$sum$us)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $$sum2$us = (($3) + ($j$06$us))|0;
   $11 = (($$08$us) + ($$sum2$us)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $$sum3$us = (($j$06$us) - ($iSrcStride))|0;
   $14 = (($$08$us) + ($$sum3$us)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $$sum4$us = (($j$06$us) + ($2))|0;
   $17 = (($$08$us) + ($$sum4$us)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = (($19) + ($16))|0;
   $21 = HEAP8[$7>>0]|0;
   $22 = $21&255;
   $$sum5$us = (($j$06$us) + ($iSrcStride))|0;
   $23 = (($$08$us) + ($$sum5$us)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (($25) + ($22))|0;
   $27 = Math_imul($20, -5)|0;
   $tmp1$i$us = ($26*20)|0;
   $28 = (($10) + 16)|0;
   $29 = (($28) + ($13))|0;
   $30 = (($29) + ($27))|0;
   $31 = (($30) + ($tmp1$i$us))|0;
   $32 = $31 >> 5;
   $33 = ($32>>>0)>(255);
   if ($33) {
    $34 = (0 - ($32))|0;
    $35 = $34 >> 31;
    $37 = $35;
   } else {
    $37 = $32;
   }
   $36 = $37&255;
   $38 = (($$017$us) + ($j$06$us)|0);
   HEAP8[$38>>0] = $36;
   $39 = (($j$06$us) + 1)|0;
   $exitcond = ($39|0)==($iWidth|0);
   if ($exitcond) {
    break;
   } else {
    $j$06$us = $39;
   }
  }
  $4 = (($$017$us) + ($iDstStride)|0);
  $5 = (($$08$us) + ($iSrcStride)|0);
  $6 = (($i$010$us) + 1)|0;
  $exitcond12 = ($6|0)==($iHeight|0);
  if ($exitcond12) {
   break;
  } else {
   $$017$us = $4;$$08$us = $5;$i$010$us = $6;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer03_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$015$us$i$pn = 0, $$015$us$i$sum = 0, $$017$us$i = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$sum$us$i = 0, $$sum2$us$i = 0, $$sum3$us$i = 0, $$sum4$us$i = 0, $$sum5$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i1 = 0, $exitcond12$i = 0, $exitcond9$i = 0, $i$010$us$i = 0, $i$07$us$i = 0, $j$03$us$i = 0, $j$06$us$i = 0, $tmp1$i$us$i = 0, $uiTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $uiTmp = sp;
 $0 = ($iHeight|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = ($iWidth|0)>(0);
 $2 = $iSrcStride << 1;
 $3 = (($2) + ($iSrcStride))|0;
 if ($1) {
  $$017$us$i = $uiTmp;$$08$us$i = $pSrc;$i$010$us$i = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $j$06$us$i = 0;
  while(1) {
   $7 = (($$08$us$i) + ($j$06$us$i)|0);
   $$sum$us$i = (($j$06$us$i) - ($2))|0;
   $8 = (($$08$us$i) + ($$sum$us$i)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $$sum2$us$i = (($3) + ($j$06$us$i))|0;
   $11 = (($$08$us$i) + ($$sum2$us$i)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $$sum3$us$i = (($j$06$us$i) - ($iSrcStride))|0;
   $14 = (($$08$us$i) + ($$sum3$us$i)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $$sum4$us$i = (($j$06$us$i) + ($2))|0;
   $17 = (($$08$us$i) + ($$sum4$us$i)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = (($19) + ($16))|0;
   $21 = HEAP8[$7>>0]|0;
   $22 = $21&255;
   $$sum5$us$i = (($j$06$us$i) + ($iSrcStride))|0;
   $23 = (($$08$us$i) + ($$sum5$us$i)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (($25) + ($22))|0;
   $27 = Math_imul($20, -5)|0;
   $tmp1$i$us$i = ($26*20)|0;
   $28 = (($10) + 16)|0;
   $29 = (($28) + ($13))|0;
   $30 = (($29) + ($27))|0;
   $31 = (($30) + ($tmp1$i$us$i))|0;
   $32 = $31 >> 5;
   $33 = ($32>>>0)>(255);
   if ($33) {
    $34 = (0 - ($32))|0;
    $35 = $34 >> 31;
    $37 = $35;
   } else {
    $37 = $32;
   }
   $36 = $37&255;
   $38 = (($$017$us$i) + ($j$06$us$i)|0);
   HEAP8[$38>>0] = $36;
   $39 = (($j$06$us$i) + 1)|0;
   $exitcond$i = ($39|0)==($iWidth|0);
   if ($exitcond$i) {
    break;
   } else {
    $j$06$us$i = $39;
   }
  }
  $4 = (($$017$us$i) + 16|0);
  $5 = (($$08$us$i) + ($iSrcStride)|0);
  $6 = (($i$010$us$i) + 1)|0;
  $exitcond12$i = ($6|0)==($iHeight|0);
  if ($exitcond12$i) {
   $$015$us$i$pn = $pSrc;$$024$us$i = $uiTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
   break;
  } else {
   $$017$us$i = $4;$$08$us$i = $5;$i$010$us$i = $6;
  }
 }
 while(1) {
  $j$03$us$i = 0;
  while(1) {
   $$015$us$i$sum = (($j$03$us$i) + ($iSrcStride))|0;
   $43 = (($$015$us$i$pn) + ($$015$us$i$sum)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = (($$024$us$i) + ($j$03$us$i)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = (($45) + 1)|0;
   $50 = (($49) + ($48))|0;
   $51 = $50 >>> 1;
   $52 = $51&255;
   $53 = (($$06$us$i) + ($j$03$us$i)|0);
   HEAP8[$53>>0] = $52;
   $54 = (($j$03$us$i) + 1)|0;
   $exitcond$i1 = ($54|0)==($iWidth|0);
   if ($exitcond$i1) {
    break;
   } else {
    $j$03$us$i = $54;
   }
  }
  $$015$us$i = (($$015$us$i$pn) + ($iSrcStride)|0);
  $40 = (($$06$us$i) + ($iDstStride)|0);
  $41 = (($$024$us$i) + 16|0);
  $42 = (($i$07$us$i) + 1)|0;
  $exitcond9$i = ($42|0)==($iHeight|0);
  if ($exitcond9$i) {
   break;
  } else {
   $$015$us$i$pn = $$015$us$i;$$024$us$i = $41;$$06$us$i = $40;$i$07$us$i = $42;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer10_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert4 = 0, $$phi$trans$insert6 = 0, $$pre = 0, $$pre5 = 0, $$pre7 = 0, $$pre8 = 0, $$sum2$us$i = 0, $$sum5$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $11$phi = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0;
 var $6 = 0, $6$phi = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i2 = 0, $exitcond12$i = 0, $exitcond9$i = 0, $i$010$us$i = 0, $i$07$us$i = 0, $j$03$us$i = 0, $j$06$us$i = 0, $or$cond$i = 0, $tmp1$i$us$i = 0, $uiTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $uiTmp = sp;
 $0 = ($iHeight|0)>(0);
 $1 = ($iWidth|0)>(0);
 $or$cond$i = $0 & $1;
 if ($or$cond$i) {
  $$017$us$i = $uiTmp;$$08$us$i = $pSrc;$i$010$us$i = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $$phi$trans$insert = (($$08$us$i) + -2|0);
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  $$phi$trans$insert4 = (($$08$us$i) + -1|0);
  $$pre5 = HEAP8[$$phi$trans$insert4>>0]|0;
  $$phi$trans$insert6 = (($$08$us$i) + 2|0);
  $$pre7 = HEAP8[$$phi$trans$insert6>>0]|0;
  $$pre8 = HEAP8[$$08$us$i>>0]|0;
  $11 = $$pre5;$13 = $$pre7;$16 = $$pre8;$6 = $$pre;$j$06$us$i = 0;
  while(1) {
   $5 = $6&255;
   $$sum2$us$i = (($j$06$us$i) + 3)|0;
   $7 = (($$08$us$i) + ($$sum2$us$i)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = $11&255;
   $12 = $13&255;
   $14 = (($12) + ($10))|0;
   $15 = $16&255;
   $$sum5$us$i = (($j$06$us$i) + 1)|0;
   $17 = (($$08$us$i) + ($$sum5$us$i)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = (($19) + ($15))|0;
   $21 = Math_imul($14, -5)|0;
   $tmp1$i$us$i = ($20*20)|0;
   $22 = (($5) + 16)|0;
   $23 = (($22) + ($9))|0;
   $24 = (($23) + ($21))|0;
   $25 = (($24) + ($tmp1$i$us$i))|0;
   $26 = $25 >> 5;
   $27 = ($26>>>0)>(255);
   if ($27) {
    $28 = (0 - ($26))|0;
    $29 = $28 >> 31;
    $31 = $29;
   } else {
    $31 = $26;
   }
   $30 = $31&255;
   $32 = (($$017$us$i) + ($j$06$us$i)|0);
   HEAP8[$32>>0] = $30;
   $exitcond$i = ($$sum5$us$i|0)==($iWidth|0);
   if ($exitcond$i) {
    break;
   } else {
    $6$phi = $11;$11$phi = $16;$13 = $8;$16 = $18;$j$06$us$i = $$sum5$us$i;$6 = $6$phi;$11 = $11$phi;
   }
  }
  $2 = (($$017$us$i) + 16|0);
  $3 = (($$08$us$i) + ($iSrcStride)|0);
  $4 = (($i$010$us$i) + 1)|0;
  $exitcond12$i = ($4|0)==($iHeight|0);
  if ($exitcond12$i) {
   $$015$us$i = $pSrc;$$024$us$i = $uiTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
   break;
  } else {
   $$017$us$i = $2;$$08$us$i = $3;$i$010$us$i = $4;
  }
 }
 while(1) {
  $j$03$us$i = 0;
  while(1) {
   $37 = (($$015$us$i) + ($j$03$us$i)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = (($$024$us$i) + ($j$03$us$i)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (($39) + 1)|0;
   $44 = (($43) + ($42))|0;
   $45 = $44 >>> 1;
   $46 = $45&255;
   $47 = (($$06$us$i) + ($j$03$us$i)|0);
   HEAP8[$47>>0] = $46;
   $48 = (($j$03$us$i) + 1)|0;
   $exitcond$i2 = ($48|0)==($iWidth|0);
   if ($exitcond$i2) {
    break;
   } else {
    $j$03$us$i = $48;
   }
  }
  $33 = (($$06$us$i) + ($iDstStride)|0);
  $34 = (($$015$us$i) + ($iSrcStride)|0);
  $35 = (($$024$us$i) + 16|0);
  $36 = (($i$07$us$i) + 1)|0;
  $exitcond9$i = ($36|0)==($iHeight|0);
  if ($exitcond9$i) {
   break;
  } else {
   $$015$us$i = $34;$$024$us$i = $35;$$06$us$i = $33;$i$07$us$i = $36;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer11_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$017$us$i16 = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$08$us$i15 = 0, $$phi$trans$insert = 0, $$phi$trans$insert18 = 0, $$phi$trans$insert20 = 0, $$pre = 0, $$pre19 = 0, $$pre21 = 0, $$pre22 = 0, $$sum$us$i6 = 0, $$sum2$us$i = 0, $$sum2$us$i7 = 0, $$sum3$us$i8 = 0, $$sum4$us$i9 = 0, $$sum5$us$i = 0;
 var $$sum5$us$i10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $11$phi = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $6$phi = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i12 = 0, $exitcond$i2 = 0, $exitcond12$i = 0, $exitcond12$i4 = 0, $exitcond9$i = 0, $i$010$us$i = 0, $i$010$us$i14 = 0, $i$07$us$i = 0, $j$03$us$i = 0;
 var $j$06$us$i = 0, $j$06$us$i5 = 0, $or$cond$i = 0, $tmp1$i$us$i = 0, $tmp1$i$us$i11 = 0, $uiHorTmp = 0, $uiVerTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $uiHorTmp = sp + 256|0;
 $uiVerTmp = sp;
 $0 = ($iHeight|0)>(0);
 $1 = ($iWidth|0)>(0);
 $or$cond$i = $0 & $1;
 if ($or$cond$i) {
  $$017$us$i = $uiHorTmp;$$08$us$i = $pSrc;$i$010$us$i = 0;
  while(1) {
   $$phi$trans$insert = (($$08$us$i) + -2|0);
   $$pre = HEAP8[$$phi$trans$insert>>0]|0;
   $$phi$trans$insert18 = (($$08$us$i) + -1|0);
   $$pre19 = HEAP8[$$phi$trans$insert18>>0]|0;
   $$phi$trans$insert20 = (($$08$us$i) + 2|0);
   $$pre21 = HEAP8[$$phi$trans$insert20>>0]|0;
   $$pre22 = HEAP8[$$08$us$i>>0]|0;
   $11 = $$pre19;$13 = $$pre21;$16 = $$pre22;$6 = $$pre;$j$06$us$i = 0;
   while(1) {
    $5 = $6&255;
    $$sum2$us$i = (($j$06$us$i) + 3)|0;
    $7 = (($$08$us$i) + ($$sum2$us$i)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8&255;
    $10 = $11&255;
    $12 = $13&255;
    $14 = (($12) + ($10))|0;
    $15 = $16&255;
    $$sum5$us$i = (($j$06$us$i) + 1)|0;
    $17 = (($$08$us$i) + ($$sum5$us$i)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = (($19) + ($15))|0;
    $21 = Math_imul($14, -5)|0;
    $tmp1$i$us$i = ($20*20)|0;
    $22 = (($5) + 16)|0;
    $23 = (($22) + ($9))|0;
    $24 = (($23) + ($21))|0;
    $25 = (($24) + ($tmp1$i$us$i))|0;
    $26 = $25 >> 5;
    $27 = ($26>>>0)>(255);
    if ($27) {
     $28 = (0 - ($26))|0;
     $29 = $28 >> 31;
     $31 = $29;
    } else {
     $31 = $26;
    }
    $30 = $31&255;
    $32 = (($$017$us$i) + ($j$06$us$i)|0);
    HEAP8[$32>>0] = $30;
    $exitcond$i = ($$sum5$us$i|0)==($iWidth|0);
    if ($exitcond$i) {
     break;
    } else {
     $6$phi = $11;$11$phi = $16;$13 = $8;$16 = $18;$j$06$us$i = $$sum5$us$i;$6 = $6$phi;$11 = $11$phi;
    }
   }
   $2 = (($$017$us$i) + 16|0);
   $3 = (($$08$us$i) + ($iSrcStride)|0);
   $4 = (($i$010$us$i) + 1)|0;
   $exitcond12$i = ($4|0)==($iHeight|0);
   if ($exitcond12$i) {
    break;
   } else {
    $$017$us$i = $2;$$08$us$i = $3;$i$010$us$i = $4;
   }
  }
 }
 if ($0) {
  $33 = $iSrcStride << 1;
  $34 = (($33) + ($iSrcStride))|0;
  if ($1) {
   $$017$us$i16 = $uiVerTmp;$$08$us$i15 = $pSrc;$i$010$us$i14 = 0;
   while(1) {
    $j$06$us$i5 = 0;
    while(1) {
     $38 = (($$08$us$i15) + ($j$06$us$i5)|0);
     $$sum$us$i6 = (($j$06$us$i5) - ($33))|0;
     $39 = (($$08$us$i15) + ($$sum$us$i6)|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $$sum2$us$i7 = (($34) + ($j$06$us$i5))|0;
     $42 = (($$08$us$i15) + ($$sum2$us$i7)|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $$sum3$us$i8 = (($j$06$us$i5) - ($iSrcStride))|0;
     $45 = (($$08$us$i15) + ($$sum3$us$i8)|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $$sum4$us$i9 = (($j$06$us$i5) + ($33))|0;
     $48 = (($$08$us$i15) + ($$sum4$us$i9)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = (($50) + ($47))|0;
     $52 = HEAP8[$38>>0]|0;
     $53 = $52&255;
     $$sum5$us$i10 = (($j$06$us$i5) + ($iSrcStride))|0;
     $54 = (($$08$us$i15) + ($$sum5$us$i10)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55&255;
     $57 = (($56) + ($53))|0;
     $58 = Math_imul($51, -5)|0;
     $tmp1$i$us$i11 = ($57*20)|0;
     $59 = (($41) + 16)|0;
     $60 = (($59) + ($44))|0;
     $61 = (($60) + ($58))|0;
     $62 = (($61) + ($tmp1$i$us$i11))|0;
     $63 = $62 >> 5;
     $64 = ($63>>>0)>(255);
     if ($64) {
      $65 = (0 - ($63))|0;
      $66 = $65 >> 31;
      $68 = $66;
     } else {
      $68 = $63;
     }
     $67 = $68&255;
     $69 = (($$017$us$i16) + ($j$06$us$i5)|0);
     HEAP8[$69>>0] = $67;
     $70 = (($j$06$us$i5) + 1)|0;
     $exitcond$i12 = ($70|0)==($iWidth|0);
     if ($exitcond$i12) {
      break;
     } else {
      $j$06$us$i5 = $70;
     }
    }
    $35 = (($$017$us$i16) + 16|0);
    $36 = (($$08$us$i15) + ($iSrcStride)|0);
    $37 = (($i$010$us$i14) + 1)|0;
    $exitcond12$i4 = ($37|0)==($iHeight|0);
    if ($exitcond12$i4) {
     break;
    } else {
     $$017$us$i16 = $35;$$08$us$i15 = $36;$i$010$us$i14 = $37;
    }
   }
  }
 }
 if ($or$cond$i) {
  $$015$us$i = $uiHorTmp;$$024$us$i = $uiVerTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $j$03$us$i = 0;
  while(1) {
   $75 = (($$015$us$i) + ($j$03$us$i)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = (($$024$us$i) + ($j$03$us$i)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = (($77) + 1)|0;
   $82 = (($81) + ($80))|0;
   $83 = $82 >>> 1;
   $84 = $83&255;
   $85 = (($$06$us$i) + ($j$03$us$i)|0);
   HEAP8[$85>>0] = $84;
   $86 = (($j$03$us$i) + 1)|0;
   $exitcond$i2 = ($86|0)==($iWidth|0);
   if ($exitcond$i2) {
    break;
   } else {
    $j$03$us$i = $86;
   }
  }
  $71 = (($$06$us$i) + ($iDstStride)|0);
  $72 = (($$015$us$i) + 16|0);
  $73 = (($$024$us$i) + 16|0);
  $74 = (($i$07$us$i) + 1)|0;
  $exitcond9$i = ($74|0)==($iHeight|0);
  if ($exitcond9$i) {
   break;
  } else {
   $$015$us$i = $72;$$024$us$i = $73;$$06$us$i = $71;$i$07$us$i = $74;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer12_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$sum$us$i = 0, $$sum2$us$i = 0, $$sum3$us$i = 0, $$sum4$us$i = 0, $$sum5$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i1 = 0, $exitcond12$i = 0, $exitcond9$i = 0, $i$010$us$i = 0, $i$07$us$i = 0, $j$03$us$i = 0, $j$06$us$i = 0, $tmp1$i$us$i = 0, $uiCtrTmp = 0, $uiVerTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $uiVerTmp = sp + 256|0;
 $uiCtrTmp = sp;
 $0 = ($iHeight|0)>(0);
 if ($0) {
  $1 = ($iWidth|0)>(0);
  $2 = $iSrcStride << 1;
  $3 = (($2) + ($iSrcStride))|0;
  if ($1) {
   $$017$us$i = $uiVerTmp;$$08$us$i = $pSrc;$i$010$us$i = 0;
   while(1) {
    $j$06$us$i = 0;
    while(1) {
     $7 = (($$08$us$i) + ($j$06$us$i)|0);
     $$sum$us$i = (($j$06$us$i) - ($2))|0;
     $8 = (($$08$us$i) + ($$sum$us$i)|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = $9&255;
     $$sum2$us$i = (($3) + ($j$06$us$i))|0;
     $11 = (($$08$us$i) + ($$sum2$us$i)|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = $12&255;
     $$sum3$us$i = (($j$06$us$i) - ($iSrcStride))|0;
     $14 = (($$08$us$i) + ($$sum3$us$i)|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = $15&255;
     $$sum4$us$i = (($j$06$us$i) + ($2))|0;
     $17 = (($$08$us$i) + ($$sum4$us$i)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18&255;
     $20 = (($19) + ($16))|0;
     $21 = HEAP8[$7>>0]|0;
     $22 = $21&255;
     $$sum5$us$i = (($j$06$us$i) + ($iSrcStride))|0;
     $23 = (($$08$us$i) + ($$sum5$us$i)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = (($25) + ($22))|0;
     $27 = Math_imul($20, -5)|0;
     $tmp1$i$us$i = ($26*20)|0;
     $28 = (($10) + 16)|0;
     $29 = (($28) + ($13))|0;
     $30 = (($29) + ($27))|0;
     $31 = (($30) + ($tmp1$i$us$i))|0;
     $32 = $31 >> 5;
     $33 = ($32>>>0)>(255);
     if ($33) {
      $34 = (0 - ($32))|0;
      $35 = $34 >> 31;
      $37 = $35;
     } else {
      $37 = $32;
     }
     $36 = $37&255;
     $38 = (($$017$us$i) + ($j$06$us$i)|0);
     HEAP8[$38>>0] = $36;
     $39 = (($j$06$us$i) + 1)|0;
     $exitcond$i = ($39|0)==($iWidth|0);
     if ($exitcond$i) {
      break;
     } else {
      $j$06$us$i = $39;
     }
    }
    $4 = (($$017$us$i) + 16|0);
    $5 = (($$08$us$i) + ($iSrcStride)|0);
    $6 = (($i$010$us$i) + 1)|0;
    $exitcond12$i = ($6|0)==($iHeight|0);
    if ($exitcond12$i) {
     break;
    } else {
     $$017$us$i = $4;$$08$us$i = $5;$i$010$us$i = $6;
    }
   }
   __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($pSrc,$iSrcStride,$uiCtrTmp,16,$iWidth,$iHeight);
   $$015$us$i = $uiVerTmp;$$024$us$i = $uiCtrTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
   while(1) {
    $j$03$us$i = 0;
    while(1) {
     $44 = (($$015$us$i) + ($j$03$us$i)|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     $47 = (($$024$us$i) + ($j$03$us$i)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = (($46) + 1)|0;
     $51 = (($50) + ($49))|0;
     $52 = $51 >>> 1;
     $53 = $52&255;
     $54 = (($$06$us$i) + ($j$03$us$i)|0);
     HEAP8[$54>>0] = $53;
     $55 = (($j$03$us$i) + 1)|0;
     $exitcond$i1 = ($55|0)==($iWidth|0);
     if ($exitcond$i1) {
      break;
     } else {
      $j$03$us$i = $55;
     }
    }
    $40 = (($$06$us$i) + ($iDstStride)|0);
    $41 = (($$015$us$i) + 16|0);
    $42 = (($$024$us$i) + 16|0);
    $43 = (($i$07$us$i) + 1)|0;
    $exitcond9$i = ($43|0)==($iHeight|0);
    if ($exitcond9$i) {
     break;
    } else {
     $$015$us$i = $41;$$024$us$i = $42;$$06$us$i = $40;$i$07$us$i = $43;
    }
   }
   STACKTOP = sp;return;
  }
 }
 __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($pSrc,$iSrcStride,$uiCtrTmp,16,$iWidth,$iHeight);
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer13_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$017$us$i16 = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$08$us$i$pn = 0, $$08$us$i$sum = 0, $$08$us$i$sum18 = 0, $$08$us$i$sum19 = 0, $$08$us$i$sum20 = 0, $$08$us$i$sum21 = 0, $$08$us$i$sum22 = 0, $$08$us$i15 = 0, $$sum$us$i = 0, $$sum$us$i6 = 0, $$sum2$us$i = 0, $$sum2$us$i7 = 0, $$sum3$us$i = 0, $$sum3$us$i8 = 0;
 var $$sum4$us$i = 0, $$sum4$us$i9 = 0, $$sum5$us$i = 0, $$sum5$us$i10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i12 = 0, $exitcond$i2 = 0, $exitcond12$i = 0, $exitcond12$i4 = 0, $exitcond9$i = 0;
 var $i$010$us$i = 0, $i$010$us$i14 = 0, $i$07$us$i = 0, $j$03$us$i = 0, $j$06$us$i = 0, $j$06$us$i5 = 0, $or$cond$i = 0, $tmp1$i$us$i = 0, $tmp1$i$us$i11 = 0, $uiHorTmp = 0, $uiVerTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $uiHorTmp = sp + 256|0;
 $uiVerTmp = sp;
 $0 = ($iHeight|0)>(0);
 $1 = ($iWidth|0)>(0);
 $or$cond$i = $0 & $1;
 if ($or$cond$i) {
  $$sum$us$i = (($iSrcStride) + -2)|0;
  $$sum2$us$i = (($iSrcStride) + 3)|0;
  $$sum3$us$i = (($iSrcStride) + -1)|0;
  $$sum4$us$i = (($iSrcStride) + 2)|0;
  $$017$us$i = $uiHorTmp;$$08$us$i$pn = $pSrc;$i$010$us$i = 0;
  while(1) {
   $j$06$us$i = 0;
   while(1) {
    $$08$us$i$sum = (($j$06$us$i) + ($iSrcStride))|0;
    $4 = (($$08$us$i$pn) + ($$08$us$i$sum)|0);
    $$08$us$i$sum18 = (($$sum$us$i) + ($j$06$us$i))|0;
    $5 = (($$08$us$i$pn) + ($$08$us$i$sum18)|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = $6&255;
    $$08$us$i$sum19 = (($$sum2$us$i) + ($j$06$us$i))|0;
    $8 = (($$08$us$i$pn) + ($$08$us$i$sum19)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    $$08$us$i$sum20 = (($$sum3$us$i) + ($j$06$us$i))|0;
    $11 = (($$08$us$i$pn) + ($$08$us$i$sum20)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $$08$us$i$sum21 = (($$sum4$us$i) + ($j$06$us$i))|0;
    $14 = (($$08$us$i$pn) + ($$08$us$i$sum21)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = (($16) + ($13))|0;
    $18 = HEAP8[$4>>0]|0;
    $19 = $18&255;
    $$sum5$us$i = (($j$06$us$i) + 1)|0;
    $$08$us$i$sum22 = (($$sum5$us$i) + ($iSrcStride))|0;
    $20 = (($$08$us$i$pn) + ($$08$us$i$sum22)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = (($22) + ($19))|0;
    $24 = Math_imul($17, -5)|0;
    $tmp1$i$us$i = ($23*20)|0;
    $25 = (($7) + 16)|0;
    $26 = (($25) + ($10))|0;
    $27 = (($26) + ($24))|0;
    $28 = (($27) + ($tmp1$i$us$i))|0;
    $29 = $28 >> 5;
    $30 = ($29>>>0)>(255);
    if ($30) {
     $31 = (0 - ($29))|0;
     $32 = $31 >> 31;
     $34 = $32;
    } else {
     $34 = $29;
    }
    $33 = $34&255;
    $35 = (($$017$us$i) + ($j$06$us$i)|0);
    HEAP8[$35>>0] = $33;
    $exitcond$i = ($$sum5$us$i|0)==($iWidth|0);
    if ($exitcond$i) {
     break;
    } else {
     $j$06$us$i = $$sum5$us$i;
    }
   }
   $$08$us$i = (($$08$us$i$pn) + ($iSrcStride)|0);
   $2 = (($$017$us$i) + 16|0);
   $3 = (($i$010$us$i) + 1)|0;
   $exitcond12$i = ($3|0)==($iHeight|0);
   if ($exitcond12$i) {
    break;
   } else {
    $$017$us$i = $2;$$08$us$i$pn = $$08$us$i;$i$010$us$i = $3;
   }
  }
 }
 if ($0) {
  $36 = $iSrcStride << 1;
  $37 = (($36) + ($iSrcStride))|0;
  if ($1) {
   $$017$us$i16 = $uiVerTmp;$$08$us$i15 = $pSrc;$i$010$us$i14 = 0;
   while(1) {
    $j$06$us$i5 = 0;
    while(1) {
     $41 = (($$08$us$i15) + ($j$06$us$i5)|0);
     $$sum$us$i6 = (($j$06$us$i5) - ($36))|0;
     $42 = (($$08$us$i15) + ($$sum$us$i6)|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $$sum2$us$i7 = (($37) + ($j$06$us$i5))|0;
     $45 = (($$08$us$i15) + ($$sum2$us$i7)|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $$sum3$us$i8 = (($j$06$us$i5) - ($iSrcStride))|0;
     $48 = (($$08$us$i15) + ($$sum3$us$i8)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $$sum4$us$i9 = (($j$06$us$i5) + ($36))|0;
     $51 = (($$08$us$i15) + ($$sum4$us$i9)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = (($53) + ($50))|0;
     $55 = HEAP8[$41>>0]|0;
     $56 = $55&255;
     $$sum5$us$i10 = (($j$06$us$i5) + ($iSrcStride))|0;
     $57 = (($$08$us$i15) + ($$sum5$us$i10)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = (($59) + ($56))|0;
     $61 = Math_imul($54, -5)|0;
     $tmp1$i$us$i11 = ($60*20)|0;
     $62 = (($44) + 16)|0;
     $63 = (($62) + ($47))|0;
     $64 = (($63) + ($61))|0;
     $65 = (($64) + ($tmp1$i$us$i11))|0;
     $66 = $65 >> 5;
     $67 = ($66>>>0)>(255);
     if ($67) {
      $68 = (0 - ($66))|0;
      $69 = $68 >> 31;
      $71 = $69;
     } else {
      $71 = $66;
     }
     $70 = $71&255;
     $72 = (($$017$us$i16) + ($j$06$us$i5)|0);
     HEAP8[$72>>0] = $70;
     $73 = (($j$06$us$i5) + 1)|0;
     $exitcond$i12 = ($73|0)==($iWidth|0);
     if ($exitcond$i12) {
      break;
     } else {
      $j$06$us$i5 = $73;
     }
    }
    $38 = (($$017$us$i16) + 16|0);
    $39 = (($$08$us$i15) + ($iSrcStride)|0);
    $40 = (($i$010$us$i14) + 1)|0;
    $exitcond12$i4 = ($40|0)==($iHeight|0);
    if ($exitcond12$i4) {
     break;
    } else {
     $$017$us$i16 = $38;$$08$us$i15 = $39;$i$010$us$i14 = $40;
    }
   }
  }
 }
 if ($or$cond$i) {
  $$015$us$i = $uiHorTmp;$$024$us$i = $uiVerTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $j$03$us$i = 0;
  while(1) {
   $78 = (($$015$us$i) + ($j$03$us$i)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = (($$024$us$i) + ($j$03$us$i)|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = (($80) + 1)|0;
   $85 = (($84) + ($83))|0;
   $86 = $85 >>> 1;
   $87 = $86&255;
   $88 = (($$06$us$i) + ($j$03$us$i)|0);
   HEAP8[$88>>0] = $87;
   $89 = (($j$03$us$i) + 1)|0;
   $exitcond$i2 = ($89|0)==($iWidth|0);
   if ($exitcond$i2) {
    break;
   } else {
    $j$03$us$i = $89;
   }
  }
  $74 = (($$06$us$i) + ($iDstStride)|0);
  $75 = (($$015$us$i) + 16|0);
  $76 = (($$024$us$i) + 16|0);
  $77 = (($i$07$us$i) + 1)|0;
  $exitcond9$i = ($77|0)==($iHeight|0);
  if ($exitcond9$i) {
   break;
  } else {
   $$015$us$i = $75;$$024$us$i = $76;$$06$us$i = $74;$i$07$us$i = $77;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer20_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$017$us = 0, $$08$us = 0, $$sum$us = 0, $$sum2$us = 0, $$sum3$us = 0, $$sum4$us = 0, $$sum5$us = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond12 = 0, $i$010$us = 0, $j$06$us = 0, $or$cond = 0, $tmp1$i$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iHeight|0)>(0);
 $1 = ($iWidth|0)>(0);
 $or$cond = $0 & $1;
 if ($or$cond) {
  $$017$us = $pDst;$$08$us = $pSrc;$i$010$us = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $j$06$us = 0;
  while(1) {
   $5 = (($$08$us) + ($j$06$us)|0);
   $$sum$us = (($j$06$us) + -2)|0;
   $6 = (($$08$us) + ($$sum$us)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $$sum2$us = (($j$06$us) + 3)|0;
   $9 = (($$08$us) + ($$sum2$us)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $$sum3$us = (($j$06$us) + -1)|0;
   $12 = (($$08$us) + ($$sum3$us)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $$sum4$us = (($j$06$us) + 2)|0;
   $15 = (($$08$us) + ($$sum4$us)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = (($17) + ($14))|0;
   $19 = HEAP8[$5>>0]|0;
   $20 = $19&255;
   $$sum5$us = (($j$06$us) + 1)|0;
   $21 = (($$08$us) + ($$sum5$us)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = (($23) + ($20))|0;
   $25 = Math_imul($18, -5)|0;
   $tmp1$i$us = ($24*20)|0;
   $26 = (($8) + 16)|0;
   $27 = (($26) + ($11))|0;
   $28 = (($27) + ($25))|0;
   $29 = (($28) + ($tmp1$i$us))|0;
   $30 = $29 >> 5;
   $31 = ($30>>>0)>(255);
   if ($31) {
    $32 = (0 - ($30))|0;
    $33 = $32 >> 31;
    $35 = $33;
   } else {
    $35 = $30;
   }
   $34 = $35&255;
   $36 = (($$017$us) + ($j$06$us)|0);
   HEAP8[$36>>0] = $34;
   $exitcond = ($$sum5$us|0)==($iWidth|0);
   if ($exitcond) {
    break;
   } else {
    $j$06$us = $$sum5$us;
   }
  }
  $2 = (($$017$us) + ($iDstStride)|0);
  $3 = (($$08$us) + ($iSrcStride)|0);
  $4 = (($i$010$us) + 1)|0;
  $exitcond12 = ($4|0)==($iHeight|0);
  if ($exitcond12) {
   break;
  } else {
   $$017$us = $2;$$08$us = $3;$i$010$us = $4;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer21_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert4 = 0, $$phi$trans$insert6 = 0, $$pre = 0, $$pre5 = 0, $$pre7 = 0, $$pre8 = 0, $$sum2$us$i = 0, $$sum5$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $11$phi = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0;
 var $6 = 0, $6$phi = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i2 = 0, $exitcond12$i = 0, $exitcond9$i = 0, $i$010$us$i = 0, $i$07$us$i = 0, $j$03$us$i = 0, $j$06$us$i = 0, $or$cond$i = 0, $tmp1$i$us$i = 0, $uiCtrTmp = 0, $uiHorTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $uiHorTmp = sp + 256|0;
 $uiCtrTmp = sp;
 $0 = ($iHeight|0)>(0);
 $1 = ($iWidth|0)>(0);
 $or$cond$i = $0 & $1;
 if ($or$cond$i) {
  $$017$us$i = $uiHorTmp;$$08$us$i = $pSrc;$i$010$us$i = 0;
 } else {
  __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($pSrc,$iSrcStride,$uiCtrTmp,16,$iWidth,$iHeight);
  STACKTOP = sp;return;
 }
 while(1) {
  $$phi$trans$insert = (($$08$us$i) + -2|0);
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  $$phi$trans$insert4 = (($$08$us$i) + -1|0);
  $$pre5 = HEAP8[$$phi$trans$insert4>>0]|0;
  $$phi$trans$insert6 = (($$08$us$i) + 2|0);
  $$pre7 = HEAP8[$$phi$trans$insert6>>0]|0;
  $$pre8 = HEAP8[$$08$us$i>>0]|0;
  $11 = $$pre5;$13 = $$pre7;$16 = $$pre8;$6 = $$pre;$j$06$us$i = 0;
  while(1) {
   $5 = $6&255;
   $$sum2$us$i = (($j$06$us$i) + 3)|0;
   $7 = (($$08$us$i) + ($$sum2$us$i)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = $11&255;
   $12 = $13&255;
   $14 = (($12) + ($10))|0;
   $15 = $16&255;
   $$sum5$us$i = (($j$06$us$i) + 1)|0;
   $17 = (($$08$us$i) + ($$sum5$us$i)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = (($19) + ($15))|0;
   $21 = Math_imul($14, -5)|0;
   $tmp1$i$us$i = ($20*20)|0;
   $22 = (($5) + 16)|0;
   $23 = (($22) + ($9))|0;
   $24 = (($23) + ($21))|0;
   $25 = (($24) + ($tmp1$i$us$i))|0;
   $26 = $25 >> 5;
   $27 = ($26>>>0)>(255);
   if ($27) {
    $28 = (0 - ($26))|0;
    $29 = $28 >> 31;
    $31 = $29;
   } else {
    $31 = $26;
   }
   $30 = $31&255;
   $32 = (($$017$us$i) + ($j$06$us$i)|0);
   HEAP8[$32>>0] = $30;
   $exitcond$i = ($$sum5$us$i|0)==($iWidth|0);
   if ($exitcond$i) {
    break;
   } else {
    $6$phi = $11;$11$phi = $16;$13 = $8;$16 = $18;$j$06$us$i = $$sum5$us$i;$6 = $6$phi;$11 = $11$phi;
   }
  }
  $2 = (($$017$us$i) + 16|0);
  $3 = (($$08$us$i) + ($iSrcStride)|0);
  $4 = (($i$010$us$i) + 1)|0;
  $exitcond12$i = ($4|0)==($iHeight|0);
  if ($exitcond12$i) {
   break;
  } else {
   $$017$us$i = $2;$$08$us$i = $3;$i$010$us$i = $4;
  }
 }
 __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($pSrc,$iSrcStride,$uiCtrTmp,16,$iWidth,$iHeight);
 $$015$us$i = $uiHorTmp;$$024$us$i = $uiCtrTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
 while(1) {
  $j$03$us$i = 0;
  while(1) {
   $37 = (($$015$us$i) + ($j$03$us$i)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = (($$024$us$i) + ($j$03$us$i)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (($39) + 1)|0;
   $44 = (($43) + ($42))|0;
   $45 = $44 >>> 1;
   $46 = $45&255;
   $47 = (($$06$us$i) + ($j$03$us$i)|0);
   HEAP8[$47>>0] = $46;
   $48 = (($j$03$us$i) + 1)|0;
   $exitcond$i2 = ($48|0)==($iWidth|0);
   if ($exitcond$i2) {
    break;
   } else {
    $j$03$us$i = $48;
   }
  }
  $33 = (($$06$us$i) + ($iDstStride)|0);
  $34 = (($$015$us$i) + 16|0);
  $35 = (($$024$us$i) + 16|0);
  $36 = (($i$07$us$i) + 1)|0;
  $exitcond9$i = ($36|0)==($iHeight|0);
  if ($exitcond9$i) {
   break;
  } else {
   $$015$us$i = $34;$$024$us$i = $35;$$06$us$i = $33;$i$07$us$i = $36;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$0115 = 0, $$016 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $exitcond20 = 0, $exitcond21 = 0, $i$018 = 0, $iTmp = 0, $j$012 = 0, $k$013 = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iTmp = sp;
 $0 = ($iHeight|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = (($iWidth) + 5)|0;
 $2 = ($1|0)>(0);
 $3 = ($iWidth|0)>(0);
 $4 = $iSrcStride << 1;
 $5 = (($4) + ($iSrcStride))|0;
 $$0115 = $pDst;$$016 = $pSrc;$i$018 = 0;
 while(1) {
  if ($2) {
   $j$012 = 0;
   while(1) {
    $$sum = (($j$012) + -2)|0;
    $6 = (($$016) + ($$sum)|0);
    $$sum7 = (($$sum) - ($4))|0;
    $7 = (($$016) + ($$sum7)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8&255;
    $$sum8 = (($5) + ($$sum))|0;
    $10 = (($$016) + ($$sum8)|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11&255;
    $$sum9 = (($$sum) - ($iSrcStride))|0;
    $13 = (($$016) + ($$sum9)|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $$sum10 = (($$sum) + ($4))|0;
    $16 = (($$016) + ($$sum10)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = (($18) + ($15))|0;
    $20 = HEAP8[$6>>0]|0;
    $21 = $20&255;
    $$sum11 = (($$sum) + ($iSrcStride))|0;
    $22 = (($$016) + ($$sum11)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (($24) + ($21))|0;
    $26 = Math_imul($19, -5)|0;
    $tmp1$i = ($25*20)|0;
    $27 = (($12) + ($9))|0;
    $28 = (($27) + ($26))|0;
    $29 = (($28) + ($tmp1$i))|0;
    $30 = $29&65535;
    $31 = (($iTmp) + ($j$012<<1)|0);
    HEAP16[$31>>1] = $30;
    $32 = (($j$012) + 1)|0;
    $exitcond = ($32|0)==($1|0);
    if ($exitcond) {
     break;
    } else {
     $j$012 = $32;
    }
   }
  }
  if ($3) {
   $k$013 = 0;
   while(1) {
    $33 = (($iTmp) + ($k$013<<1)|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34 << 16 >> 16;
    $$sum2 = (($k$013) + 5)|0;
    $36 = (($iTmp) + ($$sum2<<1)|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37 << 16 >> 16;
    $$sum3 = (($k$013) + 1)|0;
    $39 = (($iTmp) + ($$sum3<<1)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40 << 16 >> 16;
    $$sum4 = (($k$013) + 4)|0;
    $42 = (($iTmp) + ($$sum4<<1)|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = $43 << 16 >> 16;
    $45 = (($44) + ($41))|0;
    $$sum5 = (($k$013) + 2)|0;
    $46 = (($iTmp) + ($$sum5<<1)|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47 << 16 >> 16;
    $$sum6 = (($k$013) + 3)|0;
    $49 = (($iTmp) + ($$sum6<<1)|0);
    $50 = HEAP16[$49>>1]|0;
    $51 = $50 << 16 >> 16;
    $52 = (($51) + ($48))|0;
    $53 = Math_imul($45, -5)|0;
    $54 = ($52*20)|0;
    $55 = (($35) + 512)|0;
    $56 = (($55) + ($38))|0;
    $57 = (($56) + ($53))|0;
    $58 = (($57) + ($54))|0;
    $59 = $58 >> 10;
    $60 = ($59>>>0)>(255);
    if ($60) {
     $61 = (0 - ($59))|0;
     $62 = $61 >> 31;
     $64 = $62;
    } else {
     $64 = $59;
    }
    $63 = $64&255;
    $65 = (($$0115) + ($k$013)|0);
    HEAP8[$65>>0] = $63;
    $exitcond20 = ($$sum3|0)==($iWidth|0);
    if ($exitcond20) {
     break;
    } else {
     $k$013 = $$sum3;
    }
   }
  }
  $66 = (($$016) + ($iSrcStride)|0);
  $67 = (($$0115) + ($iDstStride)|0);
  $68 = (($i$018) + 1)|0;
  $exitcond21 = ($68|0)==($iHeight|0);
  if ($exitcond21) {
   break;
  } else {
   $$0115 = $67;$$016 = $66;$i$018 = $68;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer23_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$08$us$i$pn = 0, $$08$us$i$sum = 0, $$08$us$i$sum4 = 0, $$08$us$i$sum5 = 0, $$08$us$i$sum6 = 0, $$08$us$i$sum7 = 0, $$08$us$i$sum8 = 0, $$sum$us$i = 0, $$sum2$us$i = 0, $$sum3$us$i = 0, $$sum4$us$i = 0, $$sum5$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i2 = 0, $exitcond12$i = 0, $exitcond9$i = 0, $i$010$us$i = 0, $i$07$us$i = 0, $j$03$us$i = 0, $j$06$us$i = 0, $or$cond$i = 0, $tmp1$i$us$i = 0, $uiCtrTmp = 0;
 var $uiHorTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $uiHorTmp = sp + 256|0;
 $uiCtrTmp = sp;
 $0 = ($iHeight|0)>(0);
 $1 = ($iWidth|0)>(0);
 $or$cond$i = $0 & $1;
 if (!($or$cond$i)) {
  __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($pSrc,$iSrcStride,$uiCtrTmp,16,$iWidth,$iHeight);
  STACKTOP = sp;return;
 }
 $$sum$us$i = (($iSrcStride) + -2)|0;
 $$sum2$us$i = (($iSrcStride) + 3)|0;
 $$sum3$us$i = (($iSrcStride) + -1)|0;
 $$sum4$us$i = (($iSrcStride) + 2)|0;
 $$017$us$i = $uiHorTmp;$$08$us$i$pn = $pSrc;$i$010$us$i = 0;
 while(1) {
  $j$06$us$i = 0;
  while(1) {
   $$08$us$i$sum = (($j$06$us$i) + ($iSrcStride))|0;
   $4 = (($$08$us$i$pn) + ($$08$us$i$sum)|0);
   $$08$us$i$sum4 = (($$sum$us$i) + ($j$06$us$i))|0;
   $5 = (($$08$us$i$pn) + ($$08$us$i$sum4)|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $$08$us$i$sum5 = (($$sum2$us$i) + ($j$06$us$i))|0;
   $8 = (($$08$us$i$pn) + ($$08$us$i$sum5)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $$08$us$i$sum6 = (($$sum3$us$i) + ($j$06$us$i))|0;
   $11 = (($$08$us$i$pn) + ($$08$us$i$sum6)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $$08$us$i$sum7 = (($$sum4$us$i) + ($j$06$us$i))|0;
   $14 = (($$08$us$i$pn) + ($$08$us$i$sum7)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = (($16) + ($13))|0;
   $18 = HEAP8[$4>>0]|0;
   $19 = $18&255;
   $$sum5$us$i = (($j$06$us$i) + 1)|0;
   $$08$us$i$sum8 = (($$sum5$us$i) + ($iSrcStride))|0;
   $20 = (($$08$us$i$pn) + ($$08$us$i$sum8)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = (($22) + ($19))|0;
   $24 = Math_imul($17, -5)|0;
   $tmp1$i$us$i = ($23*20)|0;
   $25 = (($7) + 16)|0;
   $26 = (($25) + ($10))|0;
   $27 = (($26) + ($24))|0;
   $28 = (($27) + ($tmp1$i$us$i))|0;
   $29 = $28 >> 5;
   $30 = ($29>>>0)>(255);
   if ($30) {
    $31 = (0 - ($29))|0;
    $32 = $31 >> 31;
    $34 = $32;
   } else {
    $34 = $29;
   }
   $33 = $34&255;
   $35 = (($$017$us$i) + ($j$06$us$i)|0);
   HEAP8[$35>>0] = $33;
   $exitcond$i = ($$sum5$us$i|0)==($iWidth|0);
   if ($exitcond$i) {
    break;
   } else {
    $j$06$us$i = $$sum5$us$i;
   }
  }
  $$08$us$i = (($$08$us$i$pn) + ($iSrcStride)|0);
  $2 = (($$017$us$i) + 16|0);
  $3 = (($i$010$us$i) + 1)|0;
  $exitcond12$i = ($3|0)==($iHeight|0);
  if ($exitcond12$i) {
   break;
  } else {
   $$017$us$i = $2;$$08$us$i$pn = $$08$us$i;$i$010$us$i = $3;
  }
 }
 __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($pSrc,$iSrcStride,$uiCtrTmp,16,$iWidth,$iHeight);
 $$015$us$i = $uiHorTmp;$$024$us$i = $uiCtrTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
 while(1) {
  $j$03$us$i = 0;
  while(1) {
   $40 = (($$015$us$i) + ($j$03$us$i)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (($$024$us$i) + ($j$03$us$i)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = (($42) + 1)|0;
   $47 = (($46) + ($45))|0;
   $48 = $47 >>> 1;
   $49 = $48&255;
   $50 = (($$06$us$i) + ($j$03$us$i)|0);
   HEAP8[$50>>0] = $49;
   $51 = (($j$03$us$i) + 1)|0;
   $exitcond$i2 = ($51|0)==($iWidth|0);
   if ($exitcond$i2) {
    break;
   } else {
    $j$03$us$i = $51;
   }
  }
  $36 = (($$06$us$i) + ($iDstStride)|0);
  $37 = (($$015$us$i) + 16|0);
  $38 = (($$024$us$i) + 16|0);
  $39 = (($i$07$us$i) + 1)|0;
  $exitcond9$i = ($39|0)==($iHeight|0);
  if ($exitcond9$i) {
   break;
  } else {
   $$015$us$i = $37;$$024$us$i = $38;$$06$us$i = $36;$i$07$us$i = $39;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer30_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert4 = 0, $$phi$trans$insert6 = 0, $$pre = 0, $$pre5 = 0, $$pre7 = 0, $$pre8 = 0, $$sum2$us$i = 0, $$sum5$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $11$phi = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $6 = 0, $6$phi = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i2 = 0, $exitcond12$i = 0, $exitcond9$i = 0, $i$010$us$i = 0, $i$07$us$i = 0, $j$03$us$i = 0, $j$06$us$i = 0, $or$cond$i = 0, $tmp1$i$us$i = 0, $uiHorTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $uiHorTmp = sp;
 $0 = ($iHeight|0)>(0);
 $1 = ($iWidth|0)>(0);
 $or$cond$i = $0 & $1;
 if ($or$cond$i) {
  $$017$us$i = $uiHorTmp;$$08$us$i = $pSrc;$i$010$us$i = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $$phi$trans$insert = (($$08$us$i) + -2|0);
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  $$phi$trans$insert4 = (($$08$us$i) + -1|0);
  $$pre5 = HEAP8[$$phi$trans$insert4>>0]|0;
  $$phi$trans$insert6 = (($$08$us$i) + 2|0);
  $$pre7 = HEAP8[$$phi$trans$insert6>>0]|0;
  $$pre8 = HEAP8[$$08$us$i>>0]|0;
  $11 = $$pre5;$13 = $$pre7;$16 = $$pre8;$6 = $$pre;$j$06$us$i = 0;
  while(1) {
   $5 = $6&255;
   $$sum2$us$i = (($j$06$us$i) + 3)|0;
   $7 = (($$08$us$i) + ($$sum2$us$i)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = $11&255;
   $12 = $13&255;
   $14 = (($12) + ($10))|0;
   $15 = $16&255;
   $$sum5$us$i = (($j$06$us$i) + 1)|0;
   $17 = (($$08$us$i) + ($$sum5$us$i)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = (($19) + ($15))|0;
   $21 = Math_imul($14, -5)|0;
   $tmp1$i$us$i = ($20*20)|0;
   $22 = (($5) + 16)|0;
   $23 = (($22) + ($9))|0;
   $24 = (($23) + ($21))|0;
   $25 = (($24) + ($tmp1$i$us$i))|0;
   $26 = $25 >> 5;
   $27 = ($26>>>0)>(255);
   if ($27) {
    $28 = (0 - ($26))|0;
    $29 = $28 >> 31;
    $31 = $29;
   } else {
    $31 = $26;
   }
   $30 = $31&255;
   $32 = (($$017$us$i) + ($j$06$us$i)|0);
   HEAP8[$32>>0] = $30;
   $exitcond$i = ($$sum5$us$i|0)==($iWidth|0);
   if ($exitcond$i) {
    break;
   } else {
    $6$phi = $11;$11$phi = $16;$13 = $8;$16 = $18;$j$06$us$i = $$sum5$us$i;$6 = $6$phi;$11 = $11$phi;
   }
  }
  $2 = (($$017$us$i) + 16|0);
  $3 = (($$08$us$i) + ($iSrcStride)|0);
  $4 = (($i$010$us$i) + 1)|0;
  $exitcond12$i = ($4|0)==($iHeight|0);
  if ($exitcond12$i) {
   break;
  } else {
   $$017$us$i = $2;$$08$us$i = $3;$i$010$us$i = $4;
  }
 }
 $33 = (($pSrc) + 1|0);
 $$015$us$i = $33;$$024$us$i = $uiHorTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
 while(1) {
  $j$03$us$i = 0;
  while(1) {
   $38 = (($$015$us$i) + ($j$03$us$i)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = (($$024$us$i) + ($j$03$us$i)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = (($40) + 1)|0;
   $45 = (($44) + ($43))|0;
   $46 = $45 >>> 1;
   $47 = $46&255;
   $48 = (($$06$us$i) + ($j$03$us$i)|0);
   HEAP8[$48>>0] = $47;
   $49 = (($j$03$us$i) + 1)|0;
   $exitcond$i2 = ($49|0)==($iWidth|0);
   if ($exitcond$i2) {
    break;
   } else {
    $j$03$us$i = $49;
   }
  }
  $34 = (($$06$us$i) + ($iDstStride)|0);
  $35 = (($$015$us$i) + ($iSrcStride)|0);
  $36 = (($$024$us$i) + 16|0);
  $37 = (($i$07$us$i) + 1)|0;
  $exitcond9$i = ($37|0)==($iHeight|0);
  if ($exitcond9$i) {
   break;
  } else {
   $$015$us$i = $35;$$024$us$i = $36;$$06$us$i = $34;$i$07$us$i = $37;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer31_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$017$us$i16 = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$08$us$i15 = 0, $$phi$trans$insert = 0, $$phi$trans$insert18 = 0, $$phi$trans$insert20 = 0, $$pre = 0, $$pre19 = 0, $$pre21 = 0, $$pre22 = 0, $$sum$us$i6 = 0, $$sum2$us$i = 0, $$sum2$us$i7 = 0, $$sum3$us$i8 = 0, $$sum4$us$i9 = 0, $$sum5$us$i = 0;
 var $$sum5$us$i10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $11$phi = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $6$phi = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i12 = 0, $exitcond$i2 = 0, $exitcond12$i = 0, $exitcond12$i4 = 0, $exitcond9$i = 0, $i$010$us$i = 0, $i$010$us$i14 = 0, $i$07$us$i = 0;
 var $j$03$us$i = 0, $j$06$us$i = 0, $j$06$us$i5 = 0, $or$cond$i = 0, $tmp1$i$us$i = 0, $tmp1$i$us$i11 = 0, $uiHorTmp = 0, $uiVerTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $uiHorTmp = sp + 256|0;
 $uiVerTmp = sp;
 $0 = ($iHeight|0)>(0);
 $1 = ($iWidth|0)>(0);
 $or$cond$i = $0 & $1;
 if ($or$cond$i) {
  $$017$us$i = $uiHorTmp;$$08$us$i = $pSrc;$i$010$us$i = 0;
  while(1) {
   $$phi$trans$insert = (($$08$us$i) + -2|0);
   $$pre = HEAP8[$$phi$trans$insert>>0]|0;
   $$phi$trans$insert18 = (($$08$us$i) + -1|0);
   $$pre19 = HEAP8[$$phi$trans$insert18>>0]|0;
   $$phi$trans$insert20 = (($$08$us$i) + 2|0);
   $$pre21 = HEAP8[$$phi$trans$insert20>>0]|0;
   $$pre22 = HEAP8[$$08$us$i>>0]|0;
   $11 = $$pre19;$13 = $$pre21;$16 = $$pre22;$6 = $$pre;$j$06$us$i = 0;
   while(1) {
    $5 = $6&255;
    $$sum2$us$i = (($j$06$us$i) + 3)|0;
    $7 = (($$08$us$i) + ($$sum2$us$i)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8&255;
    $10 = $11&255;
    $12 = $13&255;
    $14 = (($12) + ($10))|0;
    $15 = $16&255;
    $$sum5$us$i = (($j$06$us$i) + 1)|0;
    $17 = (($$08$us$i) + ($$sum5$us$i)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = (($19) + ($15))|0;
    $21 = Math_imul($14, -5)|0;
    $tmp1$i$us$i = ($20*20)|0;
    $22 = (($5) + 16)|0;
    $23 = (($22) + ($9))|0;
    $24 = (($23) + ($21))|0;
    $25 = (($24) + ($tmp1$i$us$i))|0;
    $26 = $25 >> 5;
    $27 = ($26>>>0)>(255);
    if ($27) {
     $28 = (0 - ($26))|0;
     $29 = $28 >> 31;
     $31 = $29;
    } else {
     $31 = $26;
    }
    $30 = $31&255;
    $32 = (($$017$us$i) + ($j$06$us$i)|0);
    HEAP8[$32>>0] = $30;
    $exitcond$i = ($$sum5$us$i|0)==($iWidth|0);
    if ($exitcond$i) {
     break;
    } else {
     $6$phi = $11;$11$phi = $16;$13 = $8;$16 = $18;$j$06$us$i = $$sum5$us$i;$6 = $6$phi;$11 = $11$phi;
    }
   }
   $2 = (($$017$us$i) + 16|0);
   $3 = (($$08$us$i) + ($iSrcStride)|0);
   $4 = (($i$010$us$i) + 1)|0;
   $exitcond12$i = ($4|0)==($iHeight|0);
   if ($exitcond12$i) {
    break;
   } else {
    $$017$us$i = $2;$$08$us$i = $3;$i$010$us$i = $4;
   }
  }
 }
 if ($0) {
  $33 = $iSrcStride << 1;
  $34 = (($33) + ($iSrcStride))|0;
  if ($1) {
   $35 = (($pSrc) + 1|0);
   $$017$us$i16 = $uiVerTmp;$$08$us$i15 = $35;$i$010$us$i14 = 0;
   while(1) {
    $j$06$us$i5 = 0;
    while(1) {
     $39 = (($$08$us$i15) + ($j$06$us$i5)|0);
     $$sum$us$i6 = (($j$06$us$i5) - ($33))|0;
     $40 = (($$08$us$i15) + ($$sum$us$i6)|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $$sum2$us$i7 = (($34) + ($j$06$us$i5))|0;
     $43 = (($$08$us$i15) + ($$sum2$us$i7)|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44&255;
     $$sum3$us$i8 = (($j$06$us$i5) - ($iSrcStride))|0;
     $46 = (($$08$us$i15) + ($$sum3$us$i8)|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $$sum4$us$i9 = (($j$06$us$i5) + ($33))|0;
     $49 = (($$08$us$i15) + ($$sum4$us$i9)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = $50&255;
     $52 = (($51) + ($48))|0;
     $53 = HEAP8[$39>>0]|0;
     $54 = $53&255;
     $$sum5$us$i10 = (($j$06$us$i5) + ($iSrcStride))|0;
     $55 = (($$08$us$i15) + ($$sum5$us$i10)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = (($57) + ($54))|0;
     $59 = Math_imul($52, -5)|0;
     $tmp1$i$us$i11 = ($58*20)|0;
     $60 = (($42) + 16)|0;
     $61 = (($60) + ($45))|0;
     $62 = (($61) + ($59))|0;
     $63 = (($62) + ($tmp1$i$us$i11))|0;
     $64 = $63 >> 5;
     $65 = ($64>>>0)>(255);
     if ($65) {
      $66 = (0 - ($64))|0;
      $67 = $66 >> 31;
      $69 = $67;
     } else {
      $69 = $64;
     }
     $68 = $69&255;
     $70 = (($$017$us$i16) + ($j$06$us$i5)|0);
     HEAP8[$70>>0] = $68;
     $71 = (($j$06$us$i5) + 1)|0;
     $exitcond$i12 = ($71|0)==($iWidth|0);
     if ($exitcond$i12) {
      break;
     } else {
      $j$06$us$i5 = $71;
     }
    }
    $36 = (($$017$us$i16) + 16|0);
    $37 = (($$08$us$i15) + ($iSrcStride)|0);
    $38 = (($i$010$us$i14) + 1)|0;
    $exitcond12$i4 = ($38|0)==($iHeight|0);
    if ($exitcond12$i4) {
     break;
    } else {
     $$017$us$i16 = $36;$$08$us$i15 = $37;$i$010$us$i14 = $38;
    }
   }
  }
 }
 if ($or$cond$i) {
  $$015$us$i = $uiHorTmp;$$024$us$i = $uiVerTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $j$03$us$i = 0;
  while(1) {
   $76 = (($$015$us$i) + ($j$03$us$i)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = (($$024$us$i) + ($j$03$us$i)|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = (($78) + 1)|0;
   $83 = (($82) + ($81))|0;
   $84 = $83 >>> 1;
   $85 = $84&255;
   $86 = (($$06$us$i) + ($j$03$us$i)|0);
   HEAP8[$86>>0] = $85;
   $87 = (($j$03$us$i) + 1)|0;
   $exitcond$i2 = ($87|0)==($iWidth|0);
   if ($exitcond$i2) {
    break;
   } else {
    $j$03$us$i = $87;
   }
  }
  $72 = (($$06$us$i) + ($iDstStride)|0);
  $73 = (($$015$us$i) + 16|0);
  $74 = (($$024$us$i) + 16|0);
  $75 = (($i$07$us$i) + 1)|0;
  $exitcond9$i = ($75|0)==($iHeight|0);
  if ($exitcond9$i) {
   break;
  } else {
   $$015$us$i = $73;$$024$us$i = $74;$$06$us$i = $72;$i$07$us$i = $75;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer32_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$sum$us$i = 0, $$sum2$us$i = 0, $$sum3$us$i = 0, $$sum4$us$i = 0, $$sum5$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i1 = 0, $exitcond12$i = 0, $exitcond9$i = 0, $i$010$us$i = 0, $i$07$us$i = 0, $j$03$us$i = 0, $j$06$us$i = 0, $tmp1$i$us$i = 0, $uiCtrTmp = 0, $uiVerTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $uiVerTmp = sp + 256|0;
 $uiCtrTmp = sp;
 $0 = ($iHeight|0)>(0);
 if ($0) {
  $1 = ($iWidth|0)>(0);
  $2 = $iSrcStride << 1;
  $3 = (($2) + ($iSrcStride))|0;
  if ($1) {
   $4 = (($pSrc) + 1|0);
   $$017$us$i = $uiVerTmp;$$08$us$i = $4;$i$010$us$i = 0;
   while(1) {
    $j$06$us$i = 0;
    while(1) {
     $8 = (($$08$us$i) + ($j$06$us$i)|0);
     $$sum$us$i = (($j$06$us$i) - ($2))|0;
     $9 = (($$08$us$i) + ($$sum$us$i)|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = $10&255;
     $$sum2$us$i = (($3) + ($j$06$us$i))|0;
     $12 = (($$08$us$i) + ($$sum2$us$i)|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = $13&255;
     $$sum3$us$i = (($j$06$us$i) - ($iSrcStride))|0;
     $15 = (($$08$us$i) + ($$sum3$us$i)|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = $16&255;
     $$sum4$us$i = (($j$06$us$i) + ($2))|0;
     $18 = (($$08$us$i) + ($$sum4$us$i)|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = $19&255;
     $21 = (($20) + ($17))|0;
     $22 = HEAP8[$8>>0]|0;
     $23 = $22&255;
     $$sum5$us$i = (($j$06$us$i) + ($iSrcStride))|0;
     $24 = (($$08$us$i) + ($$sum5$us$i)|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = (($26) + ($23))|0;
     $28 = Math_imul($21, -5)|0;
     $tmp1$i$us$i = ($27*20)|0;
     $29 = (($11) + 16)|0;
     $30 = (($29) + ($14))|0;
     $31 = (($30) + ($28))|0;
     $32 = (($31) + ($tmp1$i$us$i))|0;
     $33 = $32 >> 5;
     $34 = ($33>>>0)>(255);
     if ($34) {
      $35 = (0 - ($33))|0;
      $36 = $35 >> 31;
      $38 = $36;
     } else {
      $38 = $33;
     }
     $37 = $38&255;
     $39 = (($$017$us$i) + ($j$06$us$i)|0);
     HEAP8[$39>>0] = $37;
     $40 = (($j$06$us$i) + 1)|0;
     $exitcond$i = ($40|0)==($iWidth|0);
     if ($exitcond$i) {
      break;
     } else {
      $j$06$us$i = $40;
     }
    }
    $5 = (($$017$us$i) + 16|0);
    $6 = (($$08$us$i) + ($iSrcStride)|0);
    $7 = (($i$010$us$i) + 1)|0;
    $exitcond12$i = ($7|0)==($iHeight|0);
    if ($exitcond12$i) {
     break;
    } else {
     $$017$us$i = $5;$$08$us$i = $6;$i$010$us$i = $7;
    }
   }
   __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($pSrc,$iSrcStride,$uiCtrTmp,16,$iWidth,$iHeight);
   $$015$us$i = $uiVerTmp;$$024$us$i = $uiCtrTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
   while(1) {
    $j$03$us$i = 0;
    while(1) {
     $45 = (($$015$us$i) + ($j$03$us$i)|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = (($$024$us$i) + ($j$03$us$i)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = (($47) + 1)|0;
     $52 = (($51) + ($50))|0;
     $53 = $52 >>> 1;
     $54 = $53&255;
     $55 = (($$06$us$i) + ($j$03$us$i)|0);
     HEAP8[$55>>0] = $54;
     $56 = (($j$03$us$i) + 1)|0;
     $exitcond$i1 = ($56|0)==($iWidth|0);
     if ($exitcond$i1) {
      break;
     } else {
      $j$03$us$i = $56;
     }
    }
    $41 = (($$06$us$i) + ($iDstStride)|0);
    $42 = (($$015$us$i) + 16|0);
    $43 = (($$024$us$i) + 16|0);
    $44 = (($i$07$us$i) + 1)|0;
    $exitcond9$i = ($44|0)==($iHeight|0);
    if ($exitcond9$i) {
     break;
    } else {
     $$015$us$i = $42;$$024$us$i = $43;$$06$us$i = $41;$i$07$us$i = $44;
    }
   }
   STACKTOP = sp;return;
  }
 }
 __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($pSrc,$iSrcStride,$uiCtrTmp,16,$iWidth,$iHeight);
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL12McHorVer33_cEPKhiPhiii($pSrc,$iSrcStride,$pDst,$iDstStride,$iWidth,$iHeight) {
 $pSrc = $pSrc|0;
 $iSrcStride = $iSrcStride|0;
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us$i = 0, $$017$us$i = 0, $$017$us$i16 = 0, $$024$us$i = 0, $$06$us$i = 0, $$08$us$i = 0, $$08$us$i$pn = 0, $$08$us$i$sum = 0, $$08$us$i$sum18 = 0, $$08$us$i$sum19 = 0, $$08$us$i$sum20 = 0, $$08$us$i$sum21 = 0, $$08$us$i$sum22 = 0, $$08$us$i15 = 0, $$sum$us$i = 0, $$sum$us$i6 = 0, $$sum2$us$i = 0, $$sum2$us$i7 = 0, $$sum3$us$i = 0, $$sum3$us$i8 = 0;
 var $$sum4$us$i = 0, $$sum4$us$i9 = 0, $$sum5$us$i = 0, $$sum5$us$i10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $exitcond$i = 0, $exitcond$i12 = 0, $exitcond$i2 = 0, $exitcond12$i = 0, $exitcond12$i4 = 0;
 var $exitcond9$i = 0, $i$010$us$i = 0, $i$010$us$i14 = 0, $i$07$us$i = 0, $j$03$us$i = 0, $j$06$us$i = 0, $j$06$us$i5 = 0, $or$cond$i = 0, $tmp1$i$us$i = 0, $tmp1$i$us$i11 = 0, $uiHorTmp = 0, $uiVerTmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $uiHorTmp = sp + 256|0;
 $uiVerTmp = sp;
 $0 = ($iHeight|0)>(0);
 $1 = ($iWidth|0)>(0);
 $or$cond$i = $0 & $1;
 if ($or$cond$i) {
  $$sum$us$i = (($iSrcStride) + -2)|0;
  $$sum2$us$i = (($iSrcStride) + 3)|0;
  $$sum3$us$i = (($iSrcStride) + -1)|0;
  $$sum4$us$i = (($iSrcStride) + 2)|0;
  $$017$us$i = $uiHorTmp;$$08$us$i$pn = $pSrc;$i$010$us$i = 0;
  while(1) {
   $j$06$us$i = 0;
   while(1) {
    $$08$us$i$sum = (($j$06$us$i) + ($iSrcStride))|0;
    $4 = (($$08$us$i$pn) + ($$08$us$i$sum)|0);
    $$08$us$i$sum18 = (($$sum$us$i) + ($j$06$us$i))|0;
    $5 = (($$08$us$i$pn) + ($$08$us$i$sum18)|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = $6&255;
    $$08$us$i$sum19 = (($$sum2$us$i) + ($j$06$us$i))|0;
    $8 = (($$08$us$i$pn) + ($$08$us$i$sum19)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    $$08$us$i$sum20 = (($$sum3$us$i) + ($j$06$us$i))|0;
    $11 = (($$08$us$i$pn) + ($$08$us$i$sum20)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $$08$us$i$sum21 = (($$sum4$us$i) + ($j$06$us$i))|0;
    $14 = (($$08$us$i$pn) + ($$08$us$i$sum21)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = (($16) + ($13))|0;
    $18 = HEAP8[$4>>0]|0;
    $19 = $18&255;
    $$sum5$us$i = (($j$06$us$i) + 1)|0;
    $$08$us$i$sum22 = (($$sum5$us$i) + ($iSrcStride))|0;
    $20 = (($$08$us$i$pn) + ($$08$us$i$sum22)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = (($22) + ($19))|0;
    $24 = Math_imul($17, -5)|0;
    $tmp1$i$us$i = ($23*20)|0;
    $25 = (($7) + 16)|0;
    $26 = (($25) + ($10))|0;
    $27 = (($26) + ($24))|0;
    $28 = (($27) + ($tmp1$i$us$i))|0;
    $29 = $28 >> 5;
    $30 = ($29>>>0)>(255);
    if ($30) {
     $31 = (0 - ($29))|0;
     $32 = $31 >> 31;
     $34 = $32;
    } else {
     $34 = $29;
    }
    $33 = $34&255;
    $35 = (($$017$us$i) + ($j$06$us$i)|0);
    HEAP8[$35>>0] = $33;
    $exitcond$i = ($$sum5$us$i|0)==($iWidth|0);
    if ($exitcond$i) {
     break;
    } else {
     $j$06$us$i = $$sum5$us$i;
    }
   }
   $$08$us$i = (($$08$us$i$pn) + ($iSrcStride)|0);
   $2 = (($$017$us$i) + 16|0);
   $3 = (($i$010$us$i) + 1)|0;
   $exitcond12$i = ($3|0)==($iHeight|0);
   if ($exitcond12$i) {
    break;
   } else {
    $$017$us$i = $2;$$08$us$i$pn = $$08$us$i;$i$010$us$i = $3;
   }
  }
 }
 if ($0) {
  $36 = $iSrcStride << 1;
  $37 = (($36) + ($iSrcStride))|0;
  if ($1) {
   $38 = (($pSrc) + 1|0);
   $$017$us$i16 = $uiVerTmp;$$08$us$i15 = $38;$i$010$us$i14 = 0;
   while(1) {
    $j$06$us$i5 = 0;
    while(1) {
     $42 = (($$08$us$i15) + ($j$06$us$i5)|0);
     $$sum$us$i6 = (($j$06$us$i5) - ($36))|0;
     $43 = (($$08$us$i15) + ($$sum$us$i6)|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44&255;
     $$sum2$us$i7 = (($37) + ($j$06$us$i5))|0;
     $46 = (($$08$us$i15) + ($$sum2$us$i7)|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $$sum3$us$i8 = (($j$06$us$i5) - ($iSrcStride))|0;
     $49 = (($$08$us$i15) + ($$sum3$us$i8)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = $50&255;
     $$sum4$us$i9 = (($j$06$us$i5) + ($36))|0;
     $52 = (($$08$us$i15) + ($$sum4$us$i9)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53&255;
     $55 = (($54) + ($51))|0;
     $56 = HEAP8[$42>>0]|0;
     $57 = $56&255;
     $$sum5$us$i10 = (($j$06$us$i5) + ($iSrcStride))|0;
     $58 = (($$08$us$i15) + ($$sum5$us$i10)|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = (($60) + ($57))|0;
     $62 = Math_imul($55, -5)|0;
     $tmp1$i$us$i11 = ($61*20)|0;
     $63 = (($45) + 16)|0;
     $64 = (($63) + ($48))|0;
     $65 = (($64) + ($62))|0;
     $66 = (($65) + ($tmp1$i$us$i11))|0;
     $67 = $66 >> 5;
     $68 = ($67>>>0)>(255);
     if ($68) {
      $69 = (0 - ($67))|0;
      $70 = $69 >> 31;
      $72 = $70;
     } else {
      $72 = $67;
     }
     $71 = $72&255;
     $73 = (($$017$us$i16) + ($j$06$us$i5)|0);
     HEAP8[$73>>0] = $71;
     $74 = (($j$06$us$i5) + 1)|0;
     $exitcond$i12 = ($74|0)==($iWidth|0);
     if ($exitcond$i12) {
      break;
     } else {
      $j$06$us$i5 = $74;
     }
    }
    $39 = (($$017$us$i16) + 16|0);
    $40 = (($$08$us$i15) + ($iSrcStride)|0);
    $41 = (($i$010$us$i14) + 1)|0;
    $exitcond12$i4 = ($41|0)==($iHeight|0);
    if ($exitcond12$i4) {
     break;
    } else {
     $$017$us$i16 = $39;$$08$us$i15 = $40;$i$010$us$i14 = $41;
    }
   }
  }
 }
 if ($or$cond$i) {
  $$015$us$i = $uiHorTmp;$$024$us$i = $uiVerTmp;$$06$us$i = $pDst;$i$07$us$i = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $j$03$us$i = 0;
  while(1) {
   $79 = (($$015$us$i) + ($j$03$us$i)|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = (($$024$us$i) + ($j$03$us$i)|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = (($81) + 1)|0;
   $86 = (($85) + ($84))|0;
   $87 = $86 >>> 1;
   $88 = $87&255;
   $89 = (($$06$us$i) + ($j$03$us$i)|0);
   HEAP8[$89>>0] = $88;
   $90 = (($j$03$us$i) + 1)|0;
   $exitcond$i2 = ($90|0)==($iWidth|0);
   if ($exitcond$i2) {
    break;
   } else {
    $j$03$us$i = $90;
   }
  }
  $75 = (($$06$us$i) + ($iDstStride)|0);
  $76 = (($$015$us$i) + 16|0);
  $77 = (($$024$us$i) + 16|0);
  $78 = (($i$07$us$i) + 1)|0;
  $exitcond9$i = ($78|0)==($iHeight|0);
  if ($exitcond9$i) {
   break;
  } else {
   $$015$us$i = $76;$$024$us$i = $77;$$06$us$i = $75;$i$07$us$i = $78;
  }
 }
 STACKTOP = sp;return;
}
function __ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($pBs,$pCode) {
 $pBs = $pBs|0;
 $pCode = $pCode|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iValue$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBs) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 24;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $7 = $1 >>> 16;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = (8648 + ($7)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = (($11) + 8)|0;
    $$0$i = $12;
    break;
   }
   $13 = $1 >>> 8;
   $14 = ($13|0)==(0);
   if (!($14)) {
    $15 = (8648 + ($13)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = (($17) + 16)|0;
    $$0$i = $18;
    break;
   }
   $19 = ($1|0)==(0);
   if ($19) {
    $$0$i = -1;
   } else {
    $20 = (8648 + ($1)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = (($22) + 24)|0;
    $$0$i = $23;
   }
  } else {
   $4 = (8648 + ($2)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5&255;
   $$0$i = $6;
  }
 } while(0);
 $24 = (($pBs) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$pBs>>2]|0;
 $27 = $25;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $30 = ($$0$i|0)==(-1);
 if ($30) {
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = ($$0$i|0)>(16);
 $32 = (($pBs) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33;
 $35 = (($34) - ($28))|0;
 do {
  if ($31) {
   $36 = $1 << 16;
   HEAP32[$0>>2] = $36;
   $37 = (($pBs) + 24|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 16)|0;
   HEAP32[$37>>2] = $39;
   $40 = ($39|0)>(0);
   do {
    if ($40) {
     $41 = (($29) + 1)|0;
     $42 = ($35|0)>($41|0);
     if ($42) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $43 = HEAP8[$33>>0]|0;
      $44 = $43&255;
      $45 = $44 << 8;
      $46 = (($33) + 1|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47&255;
      $49 = $45 | $48;
      $50 = $49 << $39;
      $51 = $50 | $36;
      HEAP32[$0>>2] = $51;
      HEAP32[$37>>2] = $38;
      $52 = (($33) + 2|0);
      HEAP32[$32>>2] = $52;
      $55 = $51;$57 = $38;$59 = $52;
      break;
     }
    } else {
     $55 = $36;$57 = $39;$59 = $33;
    }
   } while(0);
   $53 = (($$0$i) + -15)|0;
   $54 = $55 << $53;
   HEAP32[$0>>2] = $54;
   $56 = (($57) + ($53))|0;
   HEAP32[$37>>2] = $56;
   $58 = ($56|0)>(0);
   if ($58) {
    $60 = $59;
    $61 = (($60) - ($28))|0;
    $62 = (($29) + 1)|0;
    $63 = ($61|0)>($62|0);
    if ($63) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $64 = HEAP8[$59>>0]|0;
     $65 = $64&255;
     $66 = $65 << 8;
     $67 = (($59) + 1|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = $68&255;
     $70 = $66 | $69;
     $71 = $70 << $56;
     $72 = $71 | $54;
     HEAP32[$0>>2] = $72;
     $73 = (($56) + -16)|0;
     HEAP32[$37>>2] = $73;
     $74 = (($59) + 2|0);
     HEAP32[$32>>2] = $74;
     $101 = $73;$103 = $74;$97 = $72;
     break;
    }
   } else {
    $101 = $56;$103 = $59;$97 = $54;
   }
  } else {
   $75 = (($$0$i) + 1)|0;
   $76 = $1 << $75;
   HEAP32[$0>>2] = $76;
   $77 = (($pBs) + 24|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + ($75))|0;
   HEAP32[$77>>2] = $79;
   $80 = ($79|0)>(0);
   if ($80) {
    $81 = (($29) + 1)|0;
    $82 = ($35|0)>($81|0);
    if ($82) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $83 = HEAP8[$33>>0]|0;
     $84 = $83&255;
     $85 = $84 << 8;
     $86 = (($33) + 1|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87&255;
     $89 = $85 | $88;
     $90 = $89 << $79;
     $91 = $90 | $76;
     HEAP32[$0>>2] = $91;
     $92 = (($79) + -16)|0;
     HEAP32[$77>>2] = $92;
     $93 = (($33) + 2|0);
     HEAP32[$32>>2] = $93;
     $101 = $92;$103 = $93;$97 = $91;
     break;
    }
   } else {
    $101 = $79;$103 = $33;$97 = $76;
   }
  }
 } while(0);
 $94 = ($$0$i|0)==(0);
 do {
  if ($94) {
   $iValue$0 = 0;
  } else {
   $95 = (32 - ($$0$i))|0;
   $96 = $97 >>> $95;
   $98 = $97 << $$0$i;
   HEAP32[$0>>2] = $98;
   $99 = (($pBs) + 24|0);
   $100 = (($101) + ($$0$i))|0;
   HEAP32[$99>>2] = $100;
   $102 = ($100|0)>(0);
   if ($102) {
    $104 = $103;
    $105 = (($104) - ($28))|0;
    $106 = (($29) + 1)|0;
    $107 = ($105|0)>($106|0);
    if ($107) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $108 = HEAP8[$103>>0]|0;
     $109 = $108&255;
     $110 = $109 << 8;
     $111 = (($103) + 1|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = $110 | $113;
     $115 = $114 << $100;
     $116 = $115 | $98;
     HEAP32[$0>>2] = $116;
     $117 = (($100) + -16)|0;
     HEAP32[$99>>2] = $117;
     $118 = (($103) + 2|0);
     HEAP32[$32>>2] = $118;
     $iValue$0 = $96;
     break;
    }
   } else {
    $iValue$0 = $96;
   }
  }
 } while(0);
 $119 = 1 << $$0$i;
 $120 = (($119) + -1)|0;
 $121 = (($120) + ($iValue$0))|0;
 HEAP32[$pCode>>2] = $121;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj573($pBs,$pCode) {
 $pBs = $pBs|0;
 $pCode = $pCode|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iValue$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBs) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 24;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $7 = $1 >>> 16;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = (8648 + ($7)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = (($11) + 8)|0;
    $$0$i = $12;
    break;
   }
   $13 = $1 >>> 8;
   $14 = ($13|0)==(0);
   if (!($14)) {
    $15 = (8648 + ($13)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = (($17) + 16)|0;
    $$0$i = $18;
    break;
   }
   $19 = ($1|0)==(0);
   if ($19) {
    $$0$i = -1;
   } else {
    $20 = (8648 + ($1)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = (($22) + 24)|0;
    $$0$i = $23;
   }
  } else {
   $4 = (8648 + ($2)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5&255;
   $$0$i = $6;
  }
 } while(0);
 $24 = (($pBs) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$pBs>>2]|0;
 $27 = $25;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $30 = ($$0$i|0)==(-1);
 if ($30) {
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = ($$0$i|0)>(16);
 $32 = (($pBs) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33;
 $35 = (($34) - ($28))|0;
 do {
  if ($31) {
   $36 = $1 << 16;
   HEAP32[$0>>2] = $36;
   $37 = (($pBs) + 24|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 16)|0;
   HEAP32[$37>>2] = $39;
   $40 = ($39|0)>(0);
   do {
    if ($40) {
     $41 = (($29) + 1)|0;
     $42 = ($35|0)>($41|0);
     if ($42) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $43 = HEAP8[$33>>0]|0;
      $44 = $43&255;
      $45 = $44 << 8;
      $46 = (($33) + 1|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47&255;
      $49 = $45 | $48;
      $50 = $49 << $39;
      $51 = $50 | $36;
      HEAP32[$0>>2] = $51;
      HEAP32[$37>>2] = $38;
      $52 = (($33) + 2|0);
      HEAP32[$32>>2] = $52;
      $55 = $51;$57 = $38;$59 = $52;
      break;
     }
    } else {
     $55 = $36;$57 = $39;$59 = $33;
    }
   } while(0);
   $53 = (($$0$i) + -15)|0;
   $54 = $55 << $53;
   HEAP32[$0>>2] = $54;
   $56 = (($57) + ($53))|0;
   HEAP32[$37>>2] = $56;
   $58 = ($56|0)>(0);
   if ($58) {
    $60 = $59;
    $61 = (($60) - ($28))|0;
    $62 = (($29) + 1)|0;
    $63 = ($61|0)>($62|0);
    if ($63) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $64 = HEAP8[$59>>0]|0;
     $65 = $64&255;
     $66 = $65 << 8;
     $67 = (($59) + 1|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = $68&255;
     $70 = $66 | $69;
     $71 = $70 << $56;
     $72 = $71 | $54;
     HEAP32[$0>>2] = $72;
     $73 = (($56) + -16)|0;
     HEAP32[$37>>2] = $73;
     $74 = (($59) + 2|0);
     HEAP32[$32>>2] = $74;
     $101 = $73;$103 = $74;$97 = $72;
     break;
    }
   } else {
    $101 = $56;$103 = $59;$97 = $54;
   }
  } else {
   $75 = (($$0$i) + 1)|0;
   $76 = $1 << $75;
   HEAP32[$0>>2] = $76;
   $77 = (($pBs) + 24|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + ($75))|0;
   HEAP32[$77>>2] = $79;
   $80 = ($79|0)>(0);
   if ($80) {
    $81 = (($29) + 1)|0;
    $82 = ($35|0)>($81|0);
    if ($82) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $83 = HEAP8[$33>>0]|0;
     $84 = $83&255;
     $85 = $84 << 8;
     $86 = (($33) + 1|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87&255;
     $89 = $85 | $88;
     $90 = $89 << $79;
     $91 = $90 | $76;
     HEAP32[$0>>2] = $91;
     $92 = (($79) + -16)|0;
     HEAP32[$77>>2] = $92;
     $93 = (($33) + 2|0);
     HEAP32[$32>>2] = $93;
     $101 = $92;$103 = $93;$97 = $91;
     break;
    }
   } else {
    $101 = $79;$103 = $33;$97 = $76;
   }
  }
 } while(0);
 $94 = ($$0$i|0)==(0);
 do {
  if ($94) {
   $iValue$0 = 0;
  } else {
   $95 = (32 - ($$0$i))|0;
   $96 = $97 >>> $95;
   $98 = $97 << $$0$i;
   HEAP32[$0>>2] = $98;
   $99 = (($pBs) + 24|0);
   $100 = (($101) + ($$0$i))|0;
   HEAP32[$99>>2] = $100;
   $102 = ($100|0)>(0);
   if ($102) {
    $104 = $103;
    $105 = (($104) - ($28))|0;
    $106 = (($29) + 1)|0;
    $107 = ($105|0)>($106|0);
    if ($107) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $108 = HEAP8[$103>>0]|0;
     $109 = $108&255;
     $110 = $109 << 8;
     $111 = (($103) + 1|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = $110 | $113;
     $115 = $114 << $100;
     $116 = $115 | $98;
     HEAP32[$0>>2] = $116;
     $117 = (($100) + -16)|0;
     HEAP32[$99>>2] = $117;
     $118 = (($103) + 2|0);
     HEAP32[$32>>2] = $118;
     $iValue$0 = $96;
     break;
    }
   } else {
    $iValue$0 = $96;
   }
  }
 } while(0);
 $119 = 1 << $$0$i;
 $120 = (($119) + -1)|0;
 $121 = (($120) + ($iValue$0))|0;
 HEAP32[$pCode>>2] = $121;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj688($pBs,$pCode) {
 $pBs = $pBs|0;
 $pCode = $pCode|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iValue$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBs) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 24;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $7 = $1 >>> 16;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = (8648 + ($7)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = (($11) + 8)|0;
    $$0$i = $12;
    break;
   }
   $13 = $1 >>> 8;
   $14 = ($13|0)==(0);
   if (!($14)) {
    $15 = (8648 + ($13)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = (($17) + 16)|0;
    $$0$i = $18;
    break;
   }
   $19 = ($1|0)==(0);
   if ($19) {
    $$0$i = -1;
   } else {
    $20 = (8648 + ($1)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = (($22) + 24)|0;
    $$0$i = $23;
   }
  } else {
   $4 = (8648 + ($2)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5&255;
   $$0$i = $6;
  }
 } while(0);
 $24 = (($pBs) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$pBs>>2]|0;
 $27 = $25;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $30 = ($$0$i|0)==(-1);
 if ($30) {
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = ($$0$i|0)>(16);
 $32 = (($pBs) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33;
 $35 = (($34) - ($28))|0;
 do {
  if ($31) {
   $36 = $1 << 16;
   HEAP32[$0>>2] = $36;
   $37 = (($pBs) + 24|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 16)|0;
   HEAP32[$37>>2] = $39;
   $40 = ($39|0)>(0);
   do {
    if ($40) {
     $41 = (($29) + 1)|0;
     $42 = ($35|0)>($41|0);
     if ($42) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $43 = HEAP8[$33>>0]|0;
      $44 = $43&255;
      $45 = $44 << 8;
      $46 = (($33) + 1|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47&255;
      $49 = $45 | $48;
      $50 = $49 << $39;
      $51 = $50 | $36;
      HEAP32[$0>>2] = $51;
      HEAP32[$37>>2] = $38;
      $52 = (($33) + 2|0);
      HEAP32[$32>>2] = $52;
      $55 = $51;$57 = $38;$59 = $52;
      break;
     }
    } else {
     $55 = $36;$57 = $39;$59 = $33;
    }
   } while(0);
   $53 = (($$0$i) + -15)|0;
   $54 = $55 << $53;
   HEAP32[$0>>2] = $54;
   $56 = (($57) + ($53))|0;
   HEAP32[$37>>2] = $56;
   $58 = ($56|0)>(0);
   if ($58) {
    $60 = $59;
    $61 = (($60) - ($28))|0;
    $62 = (($29) + 1)|0;
    $63 = ($61|0)>($62|0);
    if ($63) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $64 = HEAP8[$59>>0]|0;
     $65 = $64&255;
     $66 = $65 << 8;
     $67 = (($59) + 1|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = $68&255;
     $70 = $66 | $69;
     $71 = $70 << $56;
     $72 = $71 | $54;
     HEAP32[$0>>2] = $72;
     $73 = (($56) + -16)|0;
     HEAP32[$37>>2] = $73;
     $74 = (($59) + 2|0);
     HEAP32[$32>>2] = $74;
     $101 = $73;$103 = $74;$97 = $72;
     break;
    }
   } else {
    $101 = $56;$103 = $59;$97 = $54;
   }
  } else {
   $75 = (($$0$i) + 1)|0;
   $76 = $1 << $75;
   HEAP32[$0>>2] = $76;
   $77 = (($pBs) + 24|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + ($75))|0;
   HEAP32[$77>>2] = $79;
   $80 = ($79|0)>(0);
   if ($80) {
    $81 = (($29) + 1)|0;
    $82 = ($35|0)>($81|0);
    if ($82) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $83 = HEAP8[$33>>0]|0;
     $84 = $83&255;
     $85 = $84 << 8;
     $86 = (($33) + 1|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87&255;
     $89 = $85 | $88;
     $90 = $89 << $79;
     $91 = $90 | $76;
     HEAP32[$0>>2] = $91;
     $92 = (($79) + -16)|0;
     HEAP32[$77>>2] = $92;
     $93 = (($33) + 2|0);
     HEAP32[$32>>2] = $93;
     $101 = $92;$103 = $93;$97 = $91;
     break;
    }
   } else {
    $101 = $79;$103 = $33;$97 = $76;
   }
  }
 } while(0);
 $94 = ($$0$i|0)==(0);
 do {
  if ($94) {
   $iValue$0 = 0;
  } else {
   $95 = (32 - ($$0$i))|0;
   $96 = $97 >>> $95;
   $98 = $97 << $$0$i;
   HEAP32[$0>>2] = $98;
   $99 = (($pBs) + 24|0);
   $100 = (($101) + ($$0$i))|0;
   HEAP32[$99>>2] = $100;
   $102 = ($100|0)>(0);
   if ($102) {
    $104 = $103;
    $105 = (($104) - ($28))|0;
    $106 = (($29) + 1)|0;
    $107 = ($105|0)>($106|0);
    if ($107) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $108 = HEAP8[$103>>0]|0;
     $109 = $108&255;
     $110 = $109 << 8;
     $111 = (($103) + 1|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = $110 | $113;
     $115 = $114 << $100;
     $116 = $115 | $98;
     HEAP32[$0>>2] = $116;
     $117 = (($100) + -16)|0;
     HEAP32[$99>>2] = $117;
     $118 = (($103) + 2|0);
     HEAP32[$32>>2] = $118;
     $iValue$0 = $96;
     break;
    }
   } else {
    $iValue$0 = $96;
   }
  }
 } while(0);
 $119 = 1 << $$0$i;
 $120 = (($119) + -1)|0;
 $121 = (($120) + ($iValue$0))|0;
 HEAP32[$pCode>>2] = $121;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDecL23DecodeFrameConstructionEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($pCtx,$ppDst,$pDstInfo) {
 $pCtx = $pCtx|0;
 $ppDst = $ppDst|0;
 $pDstInfo = $pDstInfo|0;
 var $$0 = 0, $$pr = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bFrameCompleteFlag$0$off0 = 0, $brmerge = 0, $iIdx$07 = 0, $iNum$09 = 0;
 var $iTotalNalLen$0$lcssa = 0, $iTotalNalLen$010 = 0, $pDstBuf$0$ph = 0, $pDstBuf$06 = 0, $phitmp = 0, $tmp = 0, $tmp5 = 0, $vararg_buffer13 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer13 = sp;
 $0 = (($pCtx) + 241932|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pCtx) + 5464|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4044|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 4;
 $7 = (($1) + 4048|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 4;
 $10 = Math_imul($8, $5)|0;
 $11 = (($3) + 104|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  $14 = (($pCtx) + 6176|0);
  $15 = (($1) + 88|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 300|0);
  ;HEAP32[$14+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[$14+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[$17+12>>2]|0;
  $18 = (($pCtx) + 242324|0);
  HEAP8[$18>>0] = 0;
  $19 = (($pCtx) + 242320|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==($10|0);
  if ($21) {
   $22 = (($pCtx) + 317169|0);
   HEAP8[$22>>0] = 1;
   $23 = HEAP32[$14>>2]|0;
   $24 = (($pCtx) + 6184|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($pCtx) + 6180|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($pCtx) + 6188|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($pCtx) + 317172|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer13>>2] = $6;
   $vararg_ptr1 = (($vararg_buffer13) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $9;
   $vararg_ptr2 = (($vararg_buffer13) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $23;
   $vararg_ptr3 = (($vararg_buffer13) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $25;
   $vararg_ptr4 = (($vararg_buffer13) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $27;
   $vararg_ptr5 = (($vararg_buffer13) + 20|0);
   HEAP32[$vararg_ptr5>>2] = $29;
   $vararg_ptr6 = (($vararg_buffer13) + 24|0);
   HEAP32[$vararg_ptr6>>2] = $31;
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,4,8080,$vararg_buffer13);
   HEAP32[$30>>2] = 0;
  }
 }
 $32 = (($pCtx) + 242344|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = ($33<<24>>24)==(0);
 if (!($34)) {
  $35 = (($pCtx) + 241888|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($pCtx) + 116|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  $40 = (($pCtx) + 316848|0);
  $41 = HEAP32[$40>>2]|0;
  if (!($39)) {
   $162 = (($41) + 536|0);
   $163 = $162;
   $164 = $163;
   HEAP32[$164>>2] = 0;
   $165 = (($163) + 4)|0;
   $166 = $165;
   HEAP32[$166>>2] = 0;
   $167 = HEAP32[$40>>2]|0;
   HEAP32[$167>>2] = 0;
   $168 = HEAP32[$40>>2]|0;
   $169 = (($168) + 520|0);
   HEAP32[$169>>2] = 0;
   $170 = HEAP32[$40>>2]|0;
   $171 = (($170) + 524|0);
   HEAP32[$171>>2] = 0;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)>(0);
  if ($43) {
   $iNum$09 = 0;$iTotalNalLen$010 = 0;
   while(1) {
    $44 = (($iNum$09) + 1)|0;
    $45 = ((($41) + ($iNum$09<<2)|0) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + ($iTotalNalLen$010))|0;
    $48 = ($44|0)<($42|0);
    if ($48) {
     $iNum$09 = $44;$iTotalNalLen$010 = $47;
    } else {
     $iTotalNalLen$0$lcssa = $47;
     break;
    }
   }
  } else {
   $iTotalNalLen$0$lcssa = 0;
  }
  $49 = (($41) + 516|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($iTotalNalLen$0$lcssa)|0);
  $52 = (($36) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($36) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$36>>2]|0;
  $57 = (($56) + ($53<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if ($59) {
   $70 = 0;$73 = 0;
  } else {
   $60 = (($58) + 3912|0);
   $61 = $60;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($61) + 4)|0;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $70 = $63;$73 = $66;
  }
  $67 = (($41) + 536|0);
  $68 = $67;
  $69 = $68;
  HEAP32[$69>>2] = $70;
  $71 = (($68) + 4)|0;
  $72 = $71;
  HEAP32[$72>>2] = $73;
  $74 = (($pCtx) + 241924|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77 << 4;
  $79 = (($41) + 520|0);
  HEAP32[$79>>2] = $78;
  $80 = HEAP32[$74>>2]|0;
  $81 = (($80) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82 << 4;
  $84 = (($41) + 524|0);
  HEAP32[$84>>2] = $83;
  $85 = HEAP32[$36>>2]|0;
  $86 = (($85) + ($53<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + 12|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = ($89<<24>>24)==(0);
  if ($90) {
   $pDstBuf$0$ph = $51;
  } else {
   $91 = (($pCtx) + 242346|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = ($92<<24>>24)==(0);
   if ($93) {
    $pDstBuf$0$ph = $51;
   } else {
    $94 = (($87) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(20);
    $97 = HEAP32[$74>>2]|0;
    $98 = HEAP32[$97>>2]|0;
    $99 = (($pCtx) + 241928|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (($pCtx) + 242324|0);
    HEAP8[$103>>0] = 0;
    if ($96) {
     $104 = ((($pCtx) + (($98*136)|0)|0) + 247216|0);
     $107 = $104;
    } else {
     $105 = ((($pCtx) + (($98*136)|0)|0) + 242864|0);
     $107 = $105;
    }
    $106 = (($107) + 132|0);
    $108 = HEAP16[$106>>1]|0;
    $109 = $108&65535;
    _memcpy(($51|0),($107|0),($109|0))|0;
    $110 = HEAP16[$106>>1]|0;
    $111 = $110&65535;
    $112 = HEAP32[$41>>2]|0;
    $113 = (($112) + 1)|0;
    HEAP32[$41>>2] = $113;
    $114 = ((($41) + ($112<<2)|0) + 4|0);
    HEAP32[$114>>2] = $111;
    $115 = HEAP16[$106>>1]|0;
    $116 = $115&65535;
    $117 = (($pCtx) + 242348|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + 1)|0;
    HEAP32[$117>>2] = $119;
    $120 = ((($pCtx) + ($118<<2)|0) + 242352|0);
    HEAP32[$120>>2] = $116;
    $121 = HEAP16[$106>>1]|0;
    $122 = $121&65535;
    $$sum3 = (($122) + ($iTotalNalLen$0$lcssa))|0;
    $123 = (($50) + ($$sum3)|0);
    $124 = ((($pCtx) + (($102*136)|0)|0) + 282032|0);
    $125 = ((($pCtx) + (($102*136)|0)|0) + 282164|0);
    $126 = HEAP16[$125>>1]|0;
    $127 = $126&65535;
    _memcpy(($123|0),($124|0),($127|0))|0;
    $128 = HEAP16[$125>>1]|0;
    $129 = $128&65535;
    $130 = HEAP32[$41>>2]|0;
    $131 = (($130) + 1)|0;
    HEAP32[$41>>2] = $131;
    $132 = ((($41) + ($130<<2)|0) + 4|0);
    HEAP32[$132>>2] = $129;
    $133 = HEAP16[$125>>1]|0;
    $134 = $133&65535;
    $$sum4 = (($134) + ($$sum3))|0;
    $135 = (($50) + ($$sum4)|0);
    HEAP8[$91>>0] = 0;
    $pDstBuf$0$ph = $135;
   }
  }
  $136 = ($53|0)>($55|0);
  if (!($136)) {
   $iIdx$07 = $53;$pDstBuf$06 = $pDstBuf$0$ph;
   while(1) {
    $137 = (($iIdx$07) + 1)|0;
    $138 = HEAP32[$36>>2]|0;
    $139 = (($138) + ($iIdx$07<<2)|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($140) + 3900|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($140) + 3896|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = HEAP32[$41>>2]|0;
    $146 = (($145) + 1)|0;
    HEAP32[$41>>2] = $146;
    $147 = ((($41) + ($145<<2)|0) + 4|0);
    HEAP32[$147>>2] = $142;
    _memcpy(($pDstBuf$06|0),($144|0),($142|0))|0;
    $148 = (($pDstBuf$06) + ($142)|0);
    $149 = ($iIdx$07|0)<($55|0);
    if ($149) {
     $iIdx$07 = $137;$pDstBuf$06 = $148;
    } else {
     break;
    }
   }
  }
  $150 = (($pCtx) + 242320|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($151|0)==($10|0);
  if ($152) {
   HEAP32[$150>>2] = 0;
   $153 = (($pCtx) + 242345|0);
   HEAP8[$153>>0] = 0;
   $154 = (($pCtx) + 242346|0);
   HEAP8[$154>>0] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $155 = ($151|0)==(0);
  if ($155) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $156 = (($pCtx) + 242345|0);
  HEAP8[$156>>0] = 1;
  $157 = HEAP32[$2>>2]|0;
  $158 = (($157) + 72|0);
  HEAP8[$158>>0] = 0;
  $159 = (($pCtx) + 242346|0);
  HEAP8[$159>>0] = 0;
  $160 = HEAP32[$37>>2]|0;
  $161 = $160 | 1;
  HEAP32[$37>>2] = $161;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $172 = (($pCtx) + 242320|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = ($173|0)==($10|0);
 if ($174) {
  $180 = (($1) + 12|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = ($181<<24>>24)==(0);
  if ($182) {
   $bFrameCompleteFlag$0$off0 = 1;
  } else {
   $183 = (($pCtx) + 116|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($184|0)==(0);
   if ($185) {
    $186 = HEAP32[$2>>2]|0;
    $187 = (($186) + 72|0);
    HEAP8[$187>>0] = 1;
    $188 = (($pCtx) + 84|0);
    HEAP8[$188>>0] = 0;
    $bFrameCompleteFlag$0$off0 = 1;
   } else {
    $bFrameCompleteFlag$0$off0 = 1;
   }
  }
 } else {
  $175 = HEAP32[$4>>2]|0;
  $176 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $173;
  $vararg_ptr10 = (($vararg_buffer13) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $10;
  $vararg_ptr11 = (($vararg_buffer13) + 8|0);
  HEAP32[$vararg_ptr11>>2] = $175;
  $vararg_ptr12 = (($vararg_buffer13) + 12|0);
  HEAP32[$vararg_ptr12>>2] = $176;
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,8,8240,$vararg_buffer13);
  $177 = (($pCtx) + 241951|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = ($178<<24>>24)==(0);
  if ($179) {
   $bFrameCompleteFlag$0$off0 = 0;
  } else {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$172>>2] = 0;
 $189 = (($3) + 96|0);
 $190 = $189;
 $191 = $190;
 $192 = HEAP32[$191>>2]|0;
 $193 = (($190) + 4)|0;
 $194 = $193;
 $195 = HEAP32[$194>>2]|0;
 $196 = (($pDstInfo) + 16|0);
 $197 = $196;
 $198 = $197;
 HEAP32[$198>>2] = $192;
 $199 = (($197) + 4)|0;
 $200 = $199;
 HEAP32[$200>>2] = $195;
 $201 = (($3) + 16|0);
 $202 = HEAP32[$201>>2]|0;
 HEAP32[$ppDst>>2] = $202;
 $203 = (($3) + 20|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = (($ppDst) + 4|0);
 HEAP32[$205>>2] = $204;
 $206 = (($3) + 24|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = (($ppDst) + 8|0);
 HEAP32[$208>>2] = $207;
 $209 = (($pDstInfo) + 32|0);
 HEAP32[$209>>2] = 23;
 $210 = (($pCtx) + 6176|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = (($pCtx) + 6184|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = (($213) + ($211))|0;
 $215 = $214 << 1;
 $216 = (($6) - ($215))|0;
 $217 = (($pDstInfo) + 24|0);
 HEAP32[$217>>2] = $216;
 $218 = (($pCtx) + 6180|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = (($pCtx) + 6188|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (($221) + ($219))|0;
 $223 = $222 << 1;
 $224 = (($9) - ($223))|0;
 $225 = (($pDstInfo) + 28|0);
 HEAP32[$225>>2] = $224;
 $226 = (($3) + 32|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = (($pDstInfo) + 36|0);
 HEAP32[$228>>2] = $227;
 $229 = (($3) + 36|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = (($pDstInfo) + 40|0);
 HEAP32[$231>>2] = $230;
 $232 = HEAP32[$ppDst>>2]|0;
 $233 = HEAP32[$218>>2]|0;
 $234 = HEAP32[$226>>2]|0;
 $235 = Math_imul($234, $233)|0;
 $236 = HEAP32[$210>>2]|0;
 $tmp = (($236) + ($235))|0;
 $tmp5 = $tmp << 1;
 $237 = (($232) + ($tmp5)|0);
 HEAP32[$ppDst>>2] = $237;
 $238 = HEAP32[$205>>2]|0;
 $239 = HEAP32[$218>>2]|0;
 $240 = HEAP32[$229>>2]|0;
 $241 = Math_imul($240, $239)|0;
 $242 = HEAP32[$210>>2]|0;
 $$sum1 = (($241) + ($242))|0;
 $243 = (($238) + ($$sum1)|0);
 HEAP32[$205>>2] = $243;
 $244 = HEAP32[$208>>2]|0;
 $245 = HEAP32[$218>>2]|0;
 $246 = HEAP32[$229>>2]|0;
 $247 = Math_imul($246, $245)|0;
 $248 = HEAP32[$210>>2]|0;
 $$sum2 = (($247) + ($248))|0;
 $249 = (($244) + ($$sum2)|0);
 HEAP32[$208>>2] = $249;
 HEAP32[$pDstInfo>>2] = 1;
 $250 = (($pCtx) + 76|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = HEAP32[$217>>2]|0;
 $253 = ($251|0)==($252|0);
 $254 = (($pCtx) + 80|0);
 if ($253) {
  $255 = HEAP32[$254>>2]|0;
  $256 = HEAP32[$225>>2]|0;
  $phitmp = ($255|0)==($256|0);
  $267 = $phitmp;
 } else {
  $267 = 0;
 }
 HEAP32[$250>>2] = $252;
 $257 = HEAP32[$225>>2]|0;
 HEAP32[$254>>2] = $257;
 $258 = (($pCtx) + 242340|0);
 $259 = HEAP32[$258>>2]|0;
 if ((($259|0) == 7) | (($259|0) == 5)) {
  $264 = (($pCtx) + 116|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = ($265|0)==(0);
  $brmerge = $266 | $267;
  if ($brmerge) {
   label = 36;
  } else {
   $268 = (($pCtx) + 84|0);
   HEAP8[$268>>0] = 1;
   label = 36;
  }
 } else if ((($259|0) == 0)) {
  if ($bFrameCompleteFlag$0$off0) {
   $260 = (($3) + 72|0);
   $261 = HEAP8[$260>>0]|0;
   $262 = $261&255;
   $263 = $262;
  } else {
   $263 = 0;
  }
  HEAP32[$pDstInfo>>2] = $263;
  $269 = $263;
 } else {
  label = 36;
 }
 if ((label|0) == 36) {
  $$pr = HEAP32[$pDstInfo>>2]|0;
  $269 = $$pr;
 }
 $270 = ($269|0)==(0);
 if ($270) {
  if ($bFrameCompleteFlag$0$off0) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $271 = (($pCtx) + 116|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = $272 | 4;
  HEAP32[$271>>2] = $273;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $274 = (($pCtx) + 84|0);
 $275 = HEAP8[$274>>0]|0;
 $276 = ($275<<24>>24)==(0);
 if (!($276)) {
  HEAP32[$pDstInfo>>2] = 0;
  $277 = HEAP8[$11>>0]|0;
  $278 = ($277<<24>>24)==(0);
  if (!($278)) {
   __Z7WelsLogP13TagLogContextiPKcz($pCtx,4,8360,$vararg_buffer13);
  }
 }
 $279 = (($3) + 108|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = (($pCtx) + 512332|0);
 HEAP32[$281>>2] = $280;
 $282 = (($3) + 116|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = (($pCtx) + 512340|0);
 HEAP32[$284>>2] = $283;
 $285 = (($3) + 112|0);
 $286 = HEAP32[$285>>2]|0;
 $287 = (($pCtx) + 512336|0);
 HEAP32[$287>>2] = $286;
 $288 = HEAP32[$pDstInfo>>2]|0;
 $289 = ($288|0)!=(0);
 _UpdateDecStat($pCtx,$289);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDecL25RemainOneBufferInDpbForECEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $$0$i = 0, $$pre = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i$01$i = 0, $i$05$i$i = 0;
 var $iLongTermFrameIdx$0$be = 0, $iLongTermFrameIdx$08 = 0, $iRet$0 = 0, $or$cond = 0, $or$cond7 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pCtx) + 5854|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($pCtx) + 5856|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) + ($2))|0;
 $7 = (($pCtx) + 241924|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 296|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($6|0)<($10|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($1<<24>>24)==(0);
 if ($12) {
  $14 = (($pCtx) + 5860|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($pCtx) + 242328|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($4<<24>>24)==(0);
  L7: do {
   if ($18) {
    $$0$i = -1;
   } else {
    $i$01$i = 0;
    while(1) {
     $21 = ((($pCtx) + ($i$01$i<<2)|0) + 5724|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + 76|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==($17|0);
     $19 = (($i$01$i) + 1)|0;
     if ($25) {
      break;
     }
     $20 = ($19|0)<($5|0);
     if ($20) {
      $i$01$i = $19;
     } else {
      $$0$i = -1;
      break L7;
     }
    }
    $26 = (($22) + 80|0);
    $27 = HEAP32[$26>>2]|0;
    $$0$i = $27;
   }
  } while(0);
  $28 = ($5|0)<($10|0);
  $29 = ($15|0)<(0);
  $or$cond7 = $28 | $29;
  if ($or$cond7) {
   $65 = $4;$68 = $8;$iRet$0 = 0;
  } else {
   $38 = $4;$71 = $8;$iLongTermFrameIdx$08 = 0;
   while(1) {
    $30 = ($iLongTermFrameIdx$08|0)==($$0$i|0);
    if ($30) {
     $32 = $38;$34 = $71;
    } else {
     $39 = ($38<<24>>24)==(0);
     L17: do {
      if (!($39)) {
       $40 = $38&255;
       $i$05$i$i = 0;
       while(1) {
        $43 = ((($pCtx) + ($i$05$i$i<<2)|0) + 5724|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = (($44) + 80|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ($46|0)==($iLongTermFrameIdx$08|0);
        $42 = (($i$05$i$i) + 1)|0;
        if ($47) {
         break;
        }
        $41 = ($40|0)>($42|0);
        if ($41) {
         $i$05$i$i = $42;
        } else {
         break L17;
        }
       }
       $48 = (($40) - ($i$05$i$i))|0;
       $49 = (($48) + -1)|0;
       $50 = (($44) + 68|0);
       HEAP8[$50>>0] = 0;
       $51 = (($44) + 69|0);
       HEAP8[$51>>0] = 0;
       $52 = ($49|0)>(0);
       if ($52) {
        $53 = ((($pCtx) + ($42<<2)|0) + 5724|0);
        $54 = $49 << 2;
        _memmove(($43|0),($53|0),($54|0))|0;
       }
       $55 = HEAP8[$3>>0]|0;
       $56 = (($55) + -1)<<24>>24;
       HEAP8[$3>>0] = $56;
       $57 = $56&255;
       $58 = ((($pCtx) + ($57<<2)|0) + 5724|0);
       HEAP32[$58>>2] = 0;
       $59 = ($44|0)==(0|0);
       if (!($59)) {
        HEAP8[$50>>0] = 0;
        HEAP8[$51>>0] = 0;
        $60 = (($44) + 73|0);
        $61 = (($44) + 72|0);
        dest=$60+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
        HEAP8[$61>>0] = 0;
       }
      }
     } while(0);
     $$pre = HEAP8[$3>>0]|0;
     $$pre20 = HEAP32[$7>>2]|0;
     $32 = $$pre;$34 = $$pre20;
    }
    $iLongTermFrameIdx$0$be = (($iLongTermFrameIdx$08) + 1)|0;
    $31 = $32&255;
    $33 = (($34) + 296|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = ($31|0)<($35|0);
    $37 = ($iLongTermFrameIdx$08|0)>=($15|0);
    $or$cond = $36 | $37;
    if ($or$cond) {
     $65 = $32;$68 = $34;$iRet$0 = 0;
     break;
    } else {
     $38 = $32;$71 = $34;$iLongTermFrameIdx$08 = $iLongTermFrameIdx$0$be;
    }
   }
  }
 } else {
  $13 = (__ZN7WelsDecL13SlidingWindowEPNS_21TagWelsDecoderContextE($pCtx)|0);
  $$pre21 = HEAP8[$3>>0]|0;
  $$pre22 = HEAP32[$7>>2]|0;
  $65 = $$pre21;$68 = $$pre22;$iRet$0 = $13;
 }
 $62 = HEAP8[$0>>0]|0;
 $63 = $62&255;
 $64 = $65&255;
 $66 = (($64) + ($63))|0;
 $67 = (($68) + 296|0);
 $69 = HEAP32[$67>>2]|0;
 $70 = ($66|0)<($69|0);
 if ($70) {
  $$0 = $iRet$0;
  STACKTOP = sp;return ($$0|0);
 }
 __Z7WelsLogP13TagLogContextiPKcz($pCtx,2,14504,$vararg_buffer);
 $$0 = 1010;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDecL13SlidingWindowEPNS_21TagWelsDecoderContextE($pCtx) {
 $pCtx = $pCtx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$05$i = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pCtx) + 5854|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($pCtx) + 5856|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) + ($2))|0;
 $7 = (($pCtx) + 241924|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 296|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($6|0)<($10|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($1<<24>>24)==(0);
 if ($12) {
  __Z7WelsLogP13TagLogContextiPKcz($pCtx,1,14568,$vararg_buffer);
  $$0 = 10010;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($2) + -1)|0;
 $14 = ((($pCtx) + ($13<<2)|0) + 5596|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 76|0);
 $17 = HEAP32[$16>>2]|0;
 $i$05$i = 0;
 while(1) {
  $20 = ((($pCtx) + ($i$05$i<<2)|0) + 5596|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 76|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==($17|0);
  $19 = (($i$05$i) + 1)|0;
  if ($24) {
   break;
  }
  $18 = ($2|0)>($19|0);
  if ($18) {
   $i$05$i = $19;
  } else {
   $$0 = 10009;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (($2) - ($i$05$i))|0;
 $26 = (($25) + -1)|0;
 $27 = (($21) + 68|0);
 HEAP8[$27>>0] = 0;
 $28 = HEAP32[$20>>2]|0;
 HEAP32[$20>>2] = 0;
 $29 = ($26|0)>(0);
 if ($29) {
  $30 = ((($pCtx) + ($19<<2)|0) + 5596|0);
  $31 = $26 << 2;
  _memmove(($20|0),($30|0),($31|0))|0;
 }
 $32 = HEAP8[$0>>0]|0;
 $33 = (($32) + -1)<<24>>24;
 HEAP8[$0>>0] = $33;
 $34 = $33&255;
 $35 = ((($pCtx) + ($34<<2)|0) + 5596|0);
 HEAP32[$35>>2] = 0;
 $36 = ($28|0)==(0|0);
 if ($36) {
  $$0 = 10009;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($28) + 68|0);
 HEAP8[$37>>0] = 0;
 $38 = (($28) + 69|0);
 HEAP8[$38>>0] = 0;
 $39 = (($28) + 73|0);
 $40 = (($28) + 72|0);
 dest=$39+0|0; stop=dest+15|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP8[$40>>0] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDecL33CavlcGetTrailingOnesAndTotalCoeffERhS0_PNS_16TagReadBitsCacheEPNS_11TagVlcTableEba($uiTotalCoeff,$uiTrailingOnes,$pBitsCache,$pVlcTable,$bChromaDc,$nC) {
 $uiTotalCoeff = $uiTotalCoeff|0;
 $uiTrailingOnes = $uiTrailingOnes|0;
 $pBitsCache = $pBitsCache|0;
 $pVlcTable = $pVlcTable|0;
 $bChromaDc = $bChromaDc|0;
 $nC = $nC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $iIndexVlc$0$pn2 = 0;
 var $iUsedBits$1 = 0, $storemerge = 0, $storemerge$in = 0, $storemerge1 = 0, $storemerge1$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  if ($bChromaDc) {
   $0 = HEAP32[$pBitsCache>>2]|0;
   $1 = $0 >>> 24;
   $2 = (($pVlcTable) + 128|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + ($1<<1)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5&255;
   $7 = ((($3) + ($1<<1)|0) + 1|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = $0 << $9;
   HEAP32[$pBitsCache>>2] = $10;
   $11 = (($pBitsCache) + 4|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = (($13) - ($9))|0;
   $15 = $14&255;
   HEAP8[$11>>0] = $15;
   $iIndexVlc$0$pn2 = $6;$iUsedBits$1 = $9;
  } else {
   $16 = $nC << 24 >> 24;
   $17 = (11872 + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = ($18&255)<(3);
   $21 = HEAP32[$pBitsCache>>2]|0;
   if (!($20)) {
    $67 = $21 >>> 26;
    $68 = $21 << 6;
    HEAP32[$pBitsCache>>2] = $68;
    $69 = (($pBitsCache) + 4|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70&255;
    $72 = (($71) + 250)|0;
    $73 = $72&255;
    HEAP8[$69>>0] = $73;
    $74 = (($pVlcTable) + 12|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + ($67<<1)|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $iIndexVlc$0$pn2 = $78;$iUsedBits$1 = 6;
    break;
   }
   $22 = $21 >>> 24;
   $23 = (11840 + ($19)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($22>>>0)<($25>>>0);
   if ($26) {
    $27 = $21 << 8;
    HEAP32[$pBitsCache>>2] = $27;
    $28 = (($pBitsCache) + 4|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = (($30) + 248)|0;
    $32 = $31&255;
    HEAP8[$28>>0] = $32;
    $33 = (15536 + ($19<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + ($22)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = (32 - ($37))|0;
    $39 = $27 >>> $38;
    $40 = (($19) + 1)|0;
    $41 = ((($pVlcTable) + ($40<<5)|0) + ($22<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + ($39<<1)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = ((($42) + ($39<<1)|0) + 1|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = $27 << $48;
    HEAP32[$pBitsCache>>2] = $49;
    $50 = (($31) - ($48))|0;
    $51 = $50&255;
    HEAP8[$28>>0] = $51;
    $52 = (($48) + 8)|0;
    $iIndexVlc$0$pn2 = $45;$iUsedBits$1 = $52;
    break;
   } else {
    $53 = (($pVlcTable) + ($19<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + ($22<<1)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = ((($54) + ($22<<1)|0) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $21 << $60;
    HEAP32[$pBitsCache>>2] = $61;
    $62 = (($pBitsCache) + 4|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = (($64) - ($60))|0;
    $66 = $65&255;
    HEAP8[$62>>0] = $66;
    $iIndexVlc$0$pn2 = $57;$iUsedBits$1 = $60;
    break;
   }
  }
 } while(0);
 $storemerge1$in = (11896 + ($iIndexVlc$0$pn2<<1)|0);
 $storemerge1 = HEAP8[$storemerge1$in>>0]|0;
 HEAP8[$uiTrailingOnes>>0] = $storemerge1;
 $storemerge$in = ((11896 + ($iIndexVlc$0$pn2<<1)|0) + 1|0);
 $storemerge = HEAP8[$storemerge$in>>0]|0;
 HEAP8[$uiTotalCoeff>>0] = $storemerge;
 STACKTOP = sp;return ($iUsedBits$1|0);
}
function __ZN7WelsDecL16CavlcGetLevelValEPiPNS_16TagReadBitsCacheEhh($iLevel,$pBitsCache,$uiTotalCoeff,$uiTrailingOnes) {
 $iLevel = $iLevel|0;
 $pBitsCache = $pBitsCache|0;
 $uiTotalCoeff = $uiTotalCoeff|0;
 $uiTrailingOnes = $uiTrailingOnes|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$1$i = 0, $$2 = 0, $$2$i = 0, $$3 = 0, $$6 = 0, $$lcssa14 = 0, $$neg1$i = 0, $$pre = 0, $$pre26 = 0, $$uiValue$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fold = 0;
 var $i$0$lcssa = 0, $i$015 = 0, $i$111 = 0, $iLevelCode$08 = 0, $iLevelCode$1 = 0, $iNumBit$1$i = 0, $iNumBit$2$i = 0, $iSuffixLength$09 = 0, $iSuffixLengthSize$07 = 0, $iUsedBits$010 = 0, $iUsedBits$1 = 0, $or$cond = 0, $or$cond5 = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $uiTrailingOnes&255;
 $1 = ($uiTrailingOnes<<24>>24)==(0);
 $2 = HEAP32[$pBitsCache>>2]|0;
 if ($1) {
  $$lcssa14 = $2;$i$0$lcssa = 0;
 } else {
  $3 = ($0>>>0)>(1);
  $6 = $2;$i$015 = 0;
  while(1) {
   $4 = (30 - ($i$015))|0;
   $5 = $6 >>> $4;
   $7 = $5 & 2;
   $8 = (1 - ($7))|0;
   $9 = (($iLevel) + ($i$015<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = (($i$015) + 1)|0;
   $11 = ($10|0)<($0|0);
   $12 = HEAP32[$pBitsCache>>2]|0;
   if ($11) {
    $6 = $12;$i$015 = $10;
   } else {
    break;
   }
  }
  $smax = $3 ? $0 : 1;
  $$lcssa14 = $12;$i$0$lcssa = $smax;
 }
 $13 = $$lcssa14 << $0;
 HEAP32[$pBitsCache>>2] = $13;
 $14 = (($pBitsCache) + 4|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($16) - ($0))|0;
 $18 = $17&255;
 HEAP8[$14>>0] = $18;
 $19 = $uiTotalCoeff&255;
 $20 = ($uiTrailingOnes&255)<(3);
 $21 = ($i$0$lcssa|0)<($19|0);
 if (!($21)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ($uiTotalCoeff&255)>(10);
 $$ = $22 & $20;
 $23 = $$&1;
 $24 = (($pBitsCache) + 8|0);
 $25 = $18;$i$111 = $i$0$lcssa;$iSuffixLength$09 = $23;$iUsedBits$010 = $0;
 while(1) {
  $26 = ($25&255)<(17);
  if ($26) {
   $27 = HEAP32[$24>>2]|0;
   $28 = (($27) + 2|0);
   HEAP32[$24>>2] = $28;
   $29 = $25&255;
   $30 = (($29) + 16)|0;
   $31 = $30&255;
   HEAP8[$14>>0] = $31;
   $32 = (($27) + 4|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $34 << 8;
   $36 = (($27) + 5|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = $35 | $38;
   $40 = $30 & 255;
   $41 = (32 - ($40))|0;
   $42 = $39 << $41;
   $43 = HEAP32[$pBitsCache>>2]|0;
   $44 = $42 | $43;
   HEAP32[$pBitsCache>>2] = $44;
   $45 = $44;$62 = $31;
  } else {
   $$pre26 = HEAP32[$pBitsCache>>2]|0;
   $45 = $$pre26;$62 = $25;
  }
  $46 = ($45>>>0)>(65535);
  $47 = $45 >>> 16;
  $$uiValue$i = $46 ? $47 : $45;
  $$$i = $46 ? 16 : 0;
  $48 = $$uiValue$i & 65280;
  $49 = ($48|0)==(0);
  if ($49) {
   $$1$i = $$uiValue$i;$iNumBit$1$i = $$$i;
  } else {
   $50 = $$uiValue$i >>> 8;
   $51 = $$$i | 8;
   $$1$i = $50;$iNumBit$1$i = $51;
  }
  $52 = $$1$i & 240;
  $53 = ($52|0)==(0);
  if ($53) {
   $$2$i = $$1$i;$iNumBit$2$i = $iNumBit$1$i;
  } else {
   $54 = $$1$i >>> 4;
   $55 = (($iNumBit$1$i) + 4)|0;
   $$2$i = $54;$iNumBit$2$i = $55;
  }
  $56 = (15472 + ($$2$i<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $$neg1$i = (32 - ($iNumBit$2$i))|0;
  $58 = (($$neg1$i) - ($57))|0;
  $59 = ($58|0)>(16);
  if ($59) {
   $$0 = -1;
   label = 25;
   break;
  }
  $60 = $45 << $58;
  HEAP32[$pBitsCache>>2] = $60;
  $61 = $62&255;
  $63 = (($61) - ($58))|0;
  $64 = $63&255;
  HEAP8[$14>>0] = $64;
  $65 = (($58) + ($iUsedBits$010))|0;
  $66 = (($58) + -1)|0;
  $67 = $66 << $iSuffixLength$09;
  $68 = ($66|0)>(13);
  if ($68) {
   $69 = ($66|0)==(14);
   $70 = ($iSuffixLength$09|0)==(0);
   $or$cond = $69 & $70;
   if ($or$cond) {
    $iLevelCode$08 = $67;$iSuffixLengthSize$07 = 4;
    label = 20;
   } else {
    $71 = ($66|0)==(15);
    if ($71) {
     $72 = (($67) + 15)|0;
     $$2 = $70 ? $72 : $67;
     $iLevelCode$08 = $$2;$iSuffixLengthSize$07 = 12;
     label = 20;
    } else {
     label = 19;
    }
   }
  } else {
   label = 19;
  }
  if ((label|0) == 19) {
   label = 0;
   $73 = ($iSuffixLength$09|0)>(0);
   if ($73) {
    $iLevelCode$08 = $67;$iSuffixLengthSize$07 = $iSuffixLength$09;
    label = 20;
   } else {
    $iLevelCode$1 = $67;$iUsedBits$1 = $65;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $74 = $63 & 255;
   $75 = ($74|0)>($iSuffixLengthSize$07|0);
   if ($75) {
    $94 = $60;$98 = $63;
   } else {
    $76 = HEAP32[$24>>2]|0;
    $77 = (($76) + 2|0);
    HEAP32[$24>>2] = $77;
    $78 = (($74) + 16)|0;
    $79 = $78&255;
    HEAP8[$14>>0] = $79;
    $80 = (($76) + 4|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81&255;
    $83 = $82 << 8;
    $84 = (($76) + 5|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = $83 | $86;
    $fold = (($63) + 16)|0;
    $88 = $fold & 255;
    $89 = (32 - ($88))|0;
    $90 = $87 << $89;
    $91 = $90 | $60;
    HEAP32[$pBitsCache>>2] = $91;
    $94 = $91;$98 = $78;
   }
   $92 = (32 - ($iSuffixLengthSize$07))|0;
   $93 = $94 >>> $92;
   $95 = (($93) + ($iLevelCode$08))|0;
   $96 = $94 << $iSuffixLengthSize$07;
   HEAP32[$pBitsCache>>2] = $96;
   $97 = (($98) - ($iSuffixLengthSize$07))|0;
   $99 = $97&255;
   HEAP8[$14>>0] = $99;
   $100 = (($iSuffixLengthSize$07) + ($65))|0;
   $iLevelCode$1 = $95;$iUsedBits$1 = $100;
  }
  $101 = ($i$111|0)==($0|0);
  $$3 = $101 & $20;
  $102 = $$3&1;
  $103 = $102 << 1;
  $104 = (($iLevelCode$1) + ($103))|0;
  $105 = (($104) + 2)|0;
  $106 = $105 >> 1;
  $107 = (($iLevel) + ($i$111<<2)|0);
  $108 = $106 << 1;
  $109 = $104 & 1;
  $110 = (0 - ($109))|0;
  $111 = $108 & $110;
  $112 = (($106) - ($111))|0;
  HEAP32[$107>>2] = $112;
  $113 = ($iSuffixLength$09|0)==(0);
  $114 = $113&1;
  $115 = (($114) + ($iSuffixLength$09))|0;
  $116 = (($115) + -1)|0;
  $117 = 3 << $116;
  $118 = (($i$111) + 1)|0;
  $119 = ($118|0)<($19|0);
  if (!($119)) {
   $$0 = $iUsedBits$1;
   label = 25;
   break;
  }
  $120 = (0 - ($117))|0;
  $121 = ($112|0)<($120|0);
  $122 = ($112|0)>($117|0);
  $123 = ($115|0)<(6);
  $or$cond5 = $122 | $121;
  $$6 = $or$cond5 & $123;
  $124 = $$6&1;
  $125 = (($124) + ($115))|0;
  $$pre = HEAP8[$14>>0]|0;
  $25 = $$pre;$i$111 = $118;$iSuffixLength$09 = $125;$iUsedBits$010 = $iUsedBits$1;
 }
 if ((label|0) == 25) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN7WelsDecL17CavlcGetRunBeforeEPiPNS_16TagReadBitsCacheEhPNS_11TagVlcTableEi($iRun,$pBitsCache,$uiTotalCoeff,$pVlcTable,$iZerosLeft) {
 $iRun = $iRun|0;
 $pBitsCache = $pBitsCache|0;
 $uiTotalCoeff = $uiTotalCoeff|0;
 $pVlcTable = $pVlcTable|0;
 $iZerosLeft = $iZerosLeft|0;
 var $$$i = 0, $$0 = 0, $$01$lcssa = 0, $$0117 = 0, $$1$i = 0, $$2$i = 0, $$neg1$i = 0, $$pre = 0, $$pre28 = 0, $$uiValue$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fold = 0, $i$014 = 0, $iNumBit$1$i = 0, $iNumBit$2$i = 0, $iUsedBits$0$lcssa = 0, $iUsedBits$016 = 0, $iUsedBits$1 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $uiTotalCoeff&255;
 $1 = (($0) + -1)|0;
 $2 = ($1|0)>(0);
 L1: do {
  if ($2) {
   $3 = (($pBitsCache) + 4|0);
   $4 = (($pBitsCache) + 8|0);
   $5 = (($pVlcTable) + 156|0);
   $$0117 = $iZerosLeft;$i$014 = 0;$iUsedBits$016 = 0;
   L3: while(1) {
    $6 = ($$0117|0)>(0);
    if (!($6)) {
     break;
    }
    $11 = (14248 + ($$0117)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = HEAP8[$3>>0]|0;
    $15 = ($14&255)<($12&255);
    if ($15) {
     $16 = HEAP32[$4>>2]|0;
     $17 = (($16) + 2|0);
     HEAP32[$4>>2] = $17;
     $18 = $14&255;
     $19 = (($18) + 16)|0;
     $20 = $19&255;
     HEAP8[$3>>0] = $20;
     $21 = (($16) + 4|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22&255;
     $24 = $23 << 8;
     $25 = (($16) + 5|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = $24 | $27;
     $29 = $19 & 255;
     $30 = (32 - ($29))|0;
     $31 = $28 << $30;
     $32 = HEAP32[$pBitsCache>>2]|0;
     $33 = $31 | $32;
     HEAP32[$pBitsCache>>2] = $33;
     $36 = $33;$46 = $20;
    } else {
     $$pre = HEAP32[$pBitsCache>>2]|0;
     $36 = $$pre;$46 = $14;
    }
    $34 = (32 - ($13))|0;
    $35 = $36 >>> $34;
    $37 = ($$0117|0)<(7);
    do {
     if ($37) {
      $38 = (($$0117) + -1)|0;
      $39 = ((($pVlcTable) + ($38<<2)|0) + 132|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ((($40) + ($35<<1)|0) + 1|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42&255;
      $44 = $36 << $43;
      HEAP32[$pBitsCache>>2] = $44;
      $45 = $46&255;
      $47 = (($45) - ($43))|0;
      $48 = $47&255;
      HEAP8[$3>>0] = $48;
      $49 = (($43) + ($iUsedBits$016))|0;
      $50 = HEAP32[$39>>2]|0;
      $51 = (($50) + ($35<<1)|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = $52&255;
      $54 = (($iRun) + ($i$014<<2)|0);
      HEAP32[$54>>2] = $53;
      $109 = $53;$iUsedBits$1 = $49;
     } else {
      $55 = $36 << $13;
      HEAP32[$pBitsCache>>2] = $55;
      $56 = $46&255;
      $57 = (($56) - ($13))|0;
      $58 = $57&255;
      HEAP8[$3>>0] = $58;
      $59 = (($13) + ($iUsedBits$016))|0;
      $60 = HEAP32[$5>>2]|0;
      $61 = (($60) + ($35<<1)|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = ($62&255)<(7);
      if ($63) {
       $64 = $62&255;
       $65 = (($iRun) + ($i$014<<2)|0);
       HEAP32[$65>>2] = $64;
       $109 = $64;$iUsedBits$1 = $59;
       break;
      }
      $66 = $57 & 240;
      $67 = ($66>>>0)<(16);
      if ($67) {
       $68 = HEAP32[$4>>2]|0;
       $69 = (($68) + 2|0);
       HEAP32[$4>>2] = $69;
       $70 = (($57) + 16)|0;
       $71 = $70&255;
       HEAP8[$3>>0] = $71;
       $72 = (($68) + 4|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = $73&255;
       $75 = $74 << 8;
       $76 = (($68) + 5|0);
       $77 = HEAP8[$76>>0]|0;
       $78 = $77&255;
       $79 = $75 | $78;
       $fold = (($57) + 16)|0;
       $80 = $fold & 255;
       $81 = (32 - ($80))|0;
       $82 = $79 << $81;
       $83 = $82 | $55;
       HEAP32[$pBitsCache>>2] = $83;
       $84 = $83;
      } else {
       $84 = $55;
      }
      $85 = ($84>>>0)>(65535);
      $86 = $84 >>> 16;
      $$uiValue$i = $85 ? $86 : $84;
      $$$i = $85 ? 16 : 0;
      $87 = $$uiValue$i & 65280;
      $88 = ($87|0)==(0);
      if ($88) {
       $$1$i = $$uiValue$i;$iNumBit$1$i = $$$i;
      } else {
       $89 = $$uiValue$i >>> 8;
       $90 = $$$i | 8;
       $$1$i = $89;$iNumBit$1$i = $90;
      }
      $91 = $$1$i & 240;
      $92 = ($91|0)==(0);
      if ($92) {
       $$2$i = $$1$i;$iNumBit$2$i = $iNumBit$1$i;
      } else {
       $93 = $$1$i >>> 4;
       $94 = (($iNumBit$1$i) + 4)|0;
       $$2$i = $93;$iNumBit$2$i = $94;
      }
      $95 = (15472 + ($$2$i<<2)|0);
      $96 = HEAP32[$95>>2]|0;
      $$neg1$i = (32 - ($iNumBit$2$i))|0;
      $97 = (($$neg1$i) - ($96))|0;
      $98 = (($97) + 6)|0;
      $99 = (($iRun) + ($i$014<<2)|0);
      HEAP32[$99>>2] = $98;
      $100 = ($98|0)>($$0117|0);
      if ($100) {
       $$0 = -1;
       label = 23;
       break L3;
      }
      $101 = HEAP32[$pBitsCache>>2]|0;
      $102 = $101 << $97;
      HEAP32[$pBitsCache>>2] = $102;
      $103 = HEAP8[$3>>0]|0;
      $104 = $103&255;
      $105 = (($104) - ($97))|0;
      $106 = $105&255;
      HEAP8[$3>>0] = $106;
      $107 = (($97) + ($59))|0;
      $$pre28 = HEAP32[$99>>2]|0;
      $109 = $$pre28;$iUsedBits$1 = $107;
     }
    } while(0);
    $108 = (($$0117) - ($109))|0;
    $110 = (($i$014) + 1)|0;
    $111 = ($110|0)<($1|0);
    if ($111) {
     $$0117 = $108;$i$014 = $110;$iUsedBits$016 = $iUsedBits$1;
    } else {
     $$01$lcssa = $108;$iUsedBits$0$lcssa = $iUsedBits$1;
     break L1;
    }
   }
   if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($i$014|0)<($0|0);
   if (!($7)) {
    $$0 = $iUsedBits$016;
    STACKTOP = sp;return ($$0|0);
   }
   $scevgep = (($iRun) + ($i$014<<2)|0);
   $8 = Math_imul($i$014, -4)|0;
   $9 = $0 << 2;
   $10 = (($8) + ($9))|0;
   _memset(($scevgep|0),0,($10|0))|0;
   $$0 = $iUsedBits$016;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01$lcssa = $iZerosLeft;$iUsedBits$0$lcssa = 0;
  }
 } while(0);
 $112 = (($iRun) + ($1<<2)|0);
 HEAP32[$112>>2] = $$01$lcssa;
 $$0 = $iUsedBits$0$lcssa;
 STACKTOP = sp;return ($$0|0);
}
function __ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj988($pBs,$pCode) {
 $pBs = $pBs|0;
 $pCode = $pCode|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iValue$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBs) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 24;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $7 = $1 >>> 16;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = (8648 + ($7)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = (($11) + 8)|0;
    $$0$i = $12;
    break;
   }
   $13 = $1 >>> 8;
   $14 = ($13|0)==(0);
   if (!($14)) {
    $15 = (8648 + ($13)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = (($17) + 16)|0;
    $$0$i = $18;
    break;
   }
   $19 = ($1|0)==(0);
   if ($19) {
    $$0$i = -1;
   } else {
    $20 = (8648 + ($1)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = (($22) + 24)|0;
    $$0$i = $23;
   }
  } else {
   $4 = (8648 + ($2)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5&255;
   $$0$i = $6;
  }
 } while(0);
 $24 = (($pBs) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$pBs>>2]|0;
 $27 = $25;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $30 = ($$0$i|0)==(-1);
 if ($30) {
  $$0 = 12;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = ($$0$i|0)>(16);
 $32 = (($pBs) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33;
 $35 = (($34) - ($28))|0;
 do {
  if ($31) {
   $36 = $1 << 16;
   HEAP32[$0>>2] = $36;
   $37 = (($pBs) + 24|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 16)|0;
   HEAP32[$37>>2] = $39;
   $40 = ($39|0)>(0);
   do {
    if ($40) {
     $41 = (($29) + 1)|0;
     $42 = ($35|0)>($41|0);
     if ($42) {
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     } else {
      $43 = HEAP8[$33>>0]|0;
      $44 = $43&255;
      $45 = $44 << 8;
      $46 = (($33) + 1|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47&255;
      $49 = $45 | $48;
      $50 = $49 << $39;
      $51 = $50 | $36;
      HEAP32[$0>>2] = $51;
      HEAP32[$37>>2] = $38;
      $52 = (($33) + 2|0);
      HEAP32[$32>>2] = $52;
      $55 = $51;$57 = $38;$59 = $52;
      break;
     }
    } else {
     $55 = $36;$57 = $39;$59 = $33;
    }
   } while(0);
   $53 = (($$0$i) + -15)|0;
   $54 = $55 << $53;
   HEAP32[$0>>2] = $54;
   $56 = (($57) + ($53))|0;
   HEAP32[$37>>2] = $56;
   $58 = ($56|0)>(0);
   if ($58) {
    $60 = $59;
    $61 = (($60) - ($28))|0;
    $62 = (($29) + 1)|0;
    $63 = ($61|0)>($62|0);
    if ($63) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $64 = HEAP8[$59>>0]|0;
     $65 = $64&255;
     $66 = $65 << 8;
     $67 = (($59) + 1|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = $68&255;
     $70 = $66 | $69;
     $71 = $70 << $56;
     $72 = $71 | $54;
     HEAP32[$0>>2] = $72;
     $73 = (($56) + -16)|0;
     HEAP32[$37>>2] = $73;
     $74 = (($59) + 2|0);
     HEAP32[$32>>2] = $74;
     $101 = $73;$103 = $74;$97 = $72;
     break;
    }
   } else {
    $101 = $56;$103 = $59;$97 = $54;
   }
  } else {
   $75 = (($$0$i) + 1)|0;
   $76 = $1 << $75;
   HEAP32[$0>>2] = $76;
   $77 = (($pBs) + 24|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + ($75))|0;
   HEAP32[$77>>2] = $79;
   $80 = ($79|0)>(0);
   if ($80) {
    $81 = (($29) + 1)|0;
    $82 = ($35|0)>($81|0);
    if ($82) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $83 = HEAP8[$33>>0]|0;
     $84 = $83&255;
     $85 = $84 << 8;
     $86 = (($33) + 1|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87&255;
     $89 = $85 | $88;
     $90 = $89 << $79;
     $91 = $90 | $76;
     HEAP32[$0>>2] = $91;
     $92 = (($79) + -16)|0;
     HEAP32[$77>>2] = $92;
     $93 = (($33) + 2|0);
     HEAP32[$32>>2] = $93;
     $101 = $92;$103 = $93;$97 = $91;
     break;
    }
   } else {
    $101 = $79;$103 = $33;$97 = $76;
   }
  }
 } while(0);
 $94 = ($$0$i|0)==(0);
 do {
  if ($94) {
   $iValue$0 = 0;
  } else {
   $95 = (32 - ($$0$i))|0;
   $96 = $97 >>> $95;
   $98 = $97 << $$0$i;
   HEAP32[$0>>2] = $98;
   $99 = (($pBs) + 24|0);
   $100 = (($101) + ($$0$i))|0;
   HEAP32[$99>>2] = $100;
   $102 = ($100|0)>(0);
   if ($102) {
    $104 = $103;
    $105 = (($104) - ($28))|0;
    $106 = (($29) + 1)|0;
    $107 = ($105|0)>($106|0);
    if ($107) {
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $108 = HEAP8[$103>>0]|0;
     $109 = $108&255;
     $110 = $109 << 8;
     $111 = (($103) + 1|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = $110 | $113;
     $115 = $114 << $100;
     $116 = $115 | $98;
     HEAP32[$0>>2] = $116;
     $117 = (($100) + -16)|0;
     HEAP32[$99>>2] = $117;
     $118 = (($103) + 2|0);
     HEAP32[$32>>2] = $118;
     $iValue$0 = $96;
     break;
    }
   } else {
    $iValue$0 = $96;
   }
  }
 } while(0);
 $119 = 1 << $$0$i;
 $120 = (($119) + -1)|0;
 $121 = (($120) + ($iValue$0))|0;
 HEAP32[$pCode>>2] = $121;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZL19ExpandPictureLuma_cPhiii($pDst,$kiStride,$kiPicW,$kiPicH) {
 $pDst = $pDst|0;
 $kiStride = $kiStride|0;
 $kiPicW = $kiPicW|0;
 $kiPicH = $kiPicH|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0 = 0, $i$1 = 0, $pTmp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($kiPicH) + -1)|0;
 $1 = Math_imul($0, $kiStride)|0;
 $2 = (($pDst) + ($1)|0);
 $3 = HEAP8[$pDst>>0]|0;
 $4 = (($kiPicW) + -1)|0;
 $5 = (($pDst) + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = HEAP8[$2>>0]|0;
 $$sum = (($1) + ($4))|0;
 $8 = (($pDst) + ($$sum)|0);
 $9 = HEAP8[$8>>0]|0;
 $i$0 = 0;
 while(1) {
  $10 = (($i$0) + 1)|0;
  $11 = Math_imul($10, $kiStride)|0;
  $12 = (0 - ($11))|0;
  $13 = (($pDst) + ($12)|0);
  $14 = (($i$0) + ($kiPicH))|0;
  $$sum1 = Math_imul($14, $kiStride)|0;
  $15 = (($pDst) + ($$sum1)|0);
  _memcpy(($13|0),($pDst|0),($kiPicW|0))|0;
  _memcpy(($15|0),($2|0),($kiPicW|0))|0;
  $$sum2 = (-32 - ($11))|0;
  $16 = (($pDst) + ($$sum2)|0);
  _memset(($16|0),($3|0),32)|0;
  $$sum3 = (($kiPicW) - ($11))|0;
  $17 = (($pDst) + ($$sum3)|0);
  _memset(($17|0),($6|0),32)|0;
  $$sum4 = (($$sum1) + -32)|0;
  $18 = (($pDst) + ($$sum4)|0);
  _memset(($18|0),($7|0),32)|0;
  $$sum5 = (($$sum1) + ($kiPicW))|0;
  $19 = (($pDst) + ($$sum5)|0);
  _memset(($19|0),($9|0),32)|0;
  $exitcond = ($10|0)==(32);
  if ($exitcond) {
   $i$1 = 0;$pTmp$0 = $pDst;
   break;
  } else {
   $i$0 = $10;
  }
 }
 while(1) {
  $20 = (($pTmp$0) + -32|0);
  $21 = HEAP8[$pTmp$0>>0]|0;
  _memset(($20|0),($21|0),32)|0;
  $22 = (($pTmp$0) + ($kiPicW)|0);
  $23 = (($pTmp$0) + ($4)|0);
  $24 = HEAP8[$23>>0]|0;
  _memset(($22|0),($24|0),32)|0;
  $25 = (($pTmp$0) + ($kiStride)|0);
  $26 = (($i$1) + 1)|0;
  $27 = ($26|0)<($kiPicH|0);
  if ($27) {
   $i$1 = $26;$pTmp$0 = $25;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZL21ExpandPictureChroma_cPhiii($pDst,$kiStride,$kiPicW,$kiPicH) {
 $pDst = $pDst|0;
 $kiStride = $kiStride|0;
 $kiPicW = $kiPicW|0;
 $kiPicH = $kiPicH|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0 = 0, $i$1 = 0, $pTmp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($kiPicH) + -1)|0;
 $1 = Math_imul($0, $kiStride)|0;
 $2 = (($pDst) + ($1)|0);
 $3 = HEAP8[$pDst>>0]|0;
 $4 = (($kiPicW) + -1)|0;
 $5 = (($pDst) + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = HEAP8[$2>>0]|0;
 $$sum = (($1) + ($4))|0;
 $8 = (($pDst) + ($$sum)|0);
 $9 = HEAP8[$8>>0]|0;
 $i$0 = 0;
 while(1) {
  $10 = (($i$0) + 1)|0;
  $11 = Math_imul($10, $kiStride)|0;
  $12 = (0 - ($11))|0;
  $13 = (($pDst) + ($12)|0);
  $14 = (($i$0) + ($kiPicH))|0;
  $$sum1 = Math_imul($14, $kiStride)|0;
  $15 = (($pDst) + ($$sum1)|0);
  _memcpy(($13|0),($pDst|0),($kiPicW|0))|0;
  _memcpy(($15|0),($2|0),($kiPicW|0))|0;
  $$sum2 = (-16 - ($11))|0;
  $16 = (($pDst) + ($$sum2)|0);
  _memset(($16|0),($3|0),16)|0;
  $$sum3 = (($kiPicW) - ($11))|0;
  $17 = (($pDst) + ($$sum3)|0);
  _memset(($17|0),($6|0),16)|0;
  $$sum4 = (($$sum1) + -16)|0;
  $18 = (($pDst) + ($$sum4)|0);
  _memset(($18|0),($7|0),16)|0;
  $$sum5 = (($$sum1) + ($kiPicW))|0;
  $19 = (($pDst) + ($$sum5)|0);
  _memset(($19|0),($9|0),16)|0;
  $exitcond = ($10|0)==(16);
  if ($exitcond) {
   $i$1 = 0;$pTmp$0 = $pDst;
   break;
  } else {
   $i$0 = $10;
  }
 }
 while(1) {
  $20 = (($pTmp$0) + -16|0);
  $21 = HEAP8[$pTmp$0>>0]|0;
  _memset(($20|0),($21|0),16)|0;
  $22 = (($pTmp$0) + ($kiPicW)|0);
  $23 = (($pTmp$0) + ($4)|0);
  $24 = HEAP8[$23>>0]|0;
  _memset(($22|0),($24|0),16)|0;
  $25 = (($pTmp$0) + ($kiStride)|0);
  $26 = (($i$1) + 1)|0;
  $27 = ($26|0)<($kiPicH|0);
  if ($27) {
   $i$1 = $26;$pTmp$0 = $25;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN10WelsCommonL10PixelAvg_cEPhiPKhiS2_iii($pDst,$iDstStride,$pSrcA,$iSrcAStride,$pSrcB,$iSrcBStride,$iWidth,$iHeight) {
 $pDst = $pDst|0;
 $iDstStride = $iDstStride|0;
 $pSrcA = $pSrcA|0;
 $iSrcAStride = $iSrcAStride|0;
 $pSrcB = $pSrcB|0;
 $iSrcBStride = $iSrcBStride|0;
 $iWidth = $iWidth|0;
 $iHeight = $iHeight|0;
 var $$015$us = 0, $$024$us = 0, $$06$us = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $exitcond9 = 0, $i$07$us = 0, $j$03$us = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iHeight|0)>(0);
 $1 = ($iWidth|0)>(0);
 $or$cond = $0 & $1;
 if ($or$cond) {
  $$015$us = $pSrcA;$$024$us = $pSrcB;$$06$us = $pDst;$i$07$us = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $j$03$us = 0;
  while(1) {
   $6 = (($$015$us) + ($j$03$us)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = (($$024$us) + ($j$03$us)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = (($8) + 1)|0;
   $13 = (($12) + ($11))|0;
   $14 = $13 >>> 1;
   $15 = $14&255;
   $16 = (($$06$us) + ($j$03$us)|0);
   HEAP8[$16>>0] = $15;
   $17 = (($j$03$us) + 1)|0;
   $exitcond = ($17|0)==($iWidth|0);
   if ($exitcond) {
    break;
   } else {
    $j$03$us = $17;
   }
  }
  $2 = (($$06$us) + ($iDstStride)|0);
  $3 = (($$015$us) + ($iSrcAStride)|0);
  $4 = (($$024$us) + ($iSrcBStride)|0);
  $5 = (($i$07$us) + 1)|0;
  $exitcond9 = ($5|0)==($iHeight|0);
  if ($exitcond9) {
   break;
  } else {
   $$015$us = $3;$$024$us = $4;$$06$us = $2;$i$07$us = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZL15welsStderrTracePviPKc($ctx,$level,$string) {
 $ctx = $ctx|0;
 $level = $level|0;
 $string = $string|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $string;
 (_fprintf(($0|0),(31208|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$lcssa = $1;
  STACKTOP = sp;return ($$lcssa|0);
 }
 while(1) {
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$3 & 0]();
  $5 = (_malloc($$size)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $$lcssa = $5;
   label = 5;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = (___cxa_allocate_exception(4)|0);
  HEAP32[$7>>2] = ((31216 + 8|0));
  ___cxa_throw(($7|0),(31272|0),(5|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$lcssa|0);
 }
 return (0)|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (31240|0);
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[31288>>2]|0;HEAP32[31288>>2] = (($0+0)|0);
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,31384,31440,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 31]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = $adjustedPtr;
  $3 = (($info) + 24|0);
  HEAP32[$3>>2] = $path_below;
  $4 = (($info) + 36|0);
  HEAP32[$4>>2] = 1;
  STACKTOP = sp;return;
 }
 $5 = ($1|0)==($adjustedPtr|0);
 if (!($5)) {
  $9 = (($info) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($info) + 24|0);
  HEAP32[$12>>2] = 2;
  $13 = (($info) + 54|0);
  HEAP8[$13>>0] = 1;
  STACKTOP = sp;return;
 }
 $6 = (($info) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 31]($4,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 31]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 15]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   $or$cond5 = $38 & $40;
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   $or$cond7 = $or$cond5 & $42;
   if (!($or$cond7)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  $or$cond = $29 & $31;
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $or$cond3 = $or$cond & $33;
  $34 = HEAP32[$11>>2]|0;
  $$8 = $or$cond3 ? $34 : 0;
  $dst_ptr$0 = $$8;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return (0)|0;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 52|0);
 HEAP8[$4>>0] = 1;
 $5 = (($info) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = $dst_ptr;
  $8 = (($info) + 24|0);
  HEAP32[$8>>2] = $path_below;
  $9 = (($info) + 36|0);
  HEAP32[$9>>2] = 1;
  $10 = (($info) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = ($path_below|0)==(1);
  $or$cond = $12 & $13;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $14 = (($info) + 54|0);
  HEAP8[$14>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = ($6|0)==($dst_ptr|0);
 if (!($15)) {
  $25 = (($info) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = (($info) + 54|0);
  HEAP8[$28>>0] = 1;
  STACKTOP = sp;return;
 }
 $16 = (($info) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  HEAP32[$16>>2] = $path_below;
  $22 = $path_below;
 } else {
  $22 = $17;
 }
 $19 = (($info) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 $23 = ($22|0)==(1);
 $or$cond1 = $21 & $23;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 $24 = (($info) + 54|0);
 HEAP8[$24>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 15]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 31]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 31]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[31592>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((31592 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((31592 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[31592>>2] = $22;
     } else {
      $23 = HEAP32[((31592 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((31592 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((31592 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((31592 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[31592>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((31592 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((31592 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((31592 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((31592 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[31592>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[31592>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((31592 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((31592 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((31592 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((31592 + 8|0))>>2] = $81;
     HEAP32[((31592 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((31592 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((31592 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((31592 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((31592 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((31592 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((31592 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((31592 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((31592 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((31592 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((31592 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((31592 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((31592 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[31592>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[31592>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((31592 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((31592 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((31592 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((31592 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((31592 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((31592 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((31592 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L126: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((31592 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((31592 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((31592 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((31592 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((31592 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((31592 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((31592 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((31592 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((31592 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((31592 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[31592>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[31592>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((31592 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((31592 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((31592 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((31592 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((31592 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((31592 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L225;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((31592 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L204;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((31592 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((31592 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((31592 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((31592 + 20|0))>>2] = $514;
   HEAP32[((31592 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((31592 + 8|0))>>2] = 0;
   HEAP32[((31592 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((31592 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((31592 + 12|0))>>2] = $528;
  $529 = HEAP32[((31592 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((31592 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[32064>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((32064 + 8|0))>>2] = $538;
    HEAP32[((32064 + 4|0))>>2] = $538;
    HEAP32[((32064 + 12|0))>>2] = -1;
    HEAP32[((32064 + 16|0))>>2] = -1;
    HEAP32[((32064 + 20|0))>>2] = 0;
    HEAP32[((31592 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[32064>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((32064 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((31592 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((31592 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((31592 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((31592 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((31592 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((31592 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((32064 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((31592 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((31592 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((32064 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((31592 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((31592 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((31592 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((31592 + 432|0))>>2] = $633;
  $634 = HEAP32[((31592 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((31592 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((31592 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((31592 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((31592 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((31592 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((31592 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((31592 + 460|0))>>2] = 0;
    $641 = HEAP32[32064>>2]|0;
    HEAP32[((31592 + 36|0))>>2] = $641;
    HEAP32[((31592 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((31592 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((31592 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((31592 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((31592 + 24|0))>>2] = $654;
    HEAP32[((31592 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((32064 + 16|0))>>2]|0;
    HEAP32[((31592 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((31592 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((31592 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((31592 + 24|0))>>2] = $684;
       HEAP32[((31592 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((32064 + 16|0))>>2]|0;
       HEAP32[((31592 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((31592 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((31592 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((31592 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((31592 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((31592 + 12|0))>>2] = $731;
        HEAP32[((31592 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((31592 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((31592 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((31592 + 8|0))>>2] = $737;
         HEAP32[((31592 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L353: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((31592 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[31592>>2]|0;
            $764 = $763 & $762;
            HEAP32[31592>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((31592 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((31592 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((31592 + 4|0))>>2] = $807;
             break L353;
            } else {
             $808 = HEAP32[((31592 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L353;
             }
            }
           } while(0);
           $815 = HEAP32[((31592 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((31592 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((31592 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[31592>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[31592>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((31592 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((31592 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((31592 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((31592 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((31592 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((31592 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L442: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L442;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((31592 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((31592 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((31592 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((31592 + 24|0))>>2] = $953;
    HEAP32[((31592 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((32064 + 16|0))>>2]|0;
    HEAP32[((31592 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((31592 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((31592 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((31592 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((31592 + 448|0))+12>>2]|0;
    HEAP32[((31592 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((31592 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((31592 + 460|0))>>2] = 0;
    HEAP32[((31592 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((31592 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[31592>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[31592>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((31592 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((31592 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((31592 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((31592 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((31592 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((31592 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((31592 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((31592 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((31592 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((31592 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((31592 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((31592 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((31592 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((31592 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((31592 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((31592 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[31592>>2]|0;
     $36 = $35 & $34;
     HEAP32[31592>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((31592 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((31592 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((31592 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((31592 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((31592 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((31592 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((31592 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((31592 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((31592 + 12|0))>>2] = $120;
   HEAP32[((31592 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((31592 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((31592 + 20|0))>>2] = 0;
   HEAP32[((31592 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((31592 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((31592 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((31592 + 8|0))>>2] = $128;
   HEAP32[((31592 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((31592 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((31592 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[31592>>2]|0;
     $152 = $151 & $150;
     HEAP32[31592>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((31592 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((31592 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((31592 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((31592 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((31592 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((31592 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((31592 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((31592 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((31592 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((31592 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((31592 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((31592 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[31592>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[31592>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((31592 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((31592 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((31592 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((31592 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((31592 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((31592 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((31592 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((31592 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((31592 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((31592 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((31592 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((31592 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 15]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 15]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre5 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre5;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 15]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=32656+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa36 = 0, $$012 = 0, $$1$lcssa = 0, $$15 = 0, $$22 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $s$0$lcssa = 0, $s$0$lcssa35 = 0, $s$013 = 0, $s$13 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond11 = $3 & $4;
 L1: do {
  if ($or$cond11) {
   $5 = $c&255;
   $$012 = $n;$s$013 = $src;
   while(1) {
    $6 = HEAP8[$s$013>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa36 = $$012;$s$0$lcssa35 = $s$013;
     label = 6;
     break L1;
    }
    $8 = (($s$013) + 1|0);
    $9 = (($$012) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$012 = $9;$s$013 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa36 = $$0$lcssa;$s$0$lcssa35 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa35>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa36;$s$2 = $s$0$lcssa35;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa36>>>0)>(3);
    L11: do {
     if ($18) {
      $$15 = $$0$lcssa36;$w$06 = $s$0$lcssa35;
      while(1) {
       $19 = HEAP32[$w$06>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$15;$w$0$lcssa = $w$06;
        break L11;
       }
       $26 = (($w$06) + 4|0);
       $27 = (($$15) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$15 = $27;$w$06 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa36;$w$0$lcssa = $s$0$lcssa35;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$22 = $$1$lcssa;$s$13 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$13>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$22;$s$2 = $s$13;
       break L8;
      }
      $32 = (($s$13) + 1|0);
      $33 = (($$22) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$22 = $33;$s$13 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$02 = $n;$l$03 = $vl;$r$04 = $vr;
   while(1) {
    $1 = HEAP8[$l$03>>0]|0;
    $2 = HEAP8[$r$04>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$02) + -1)|0;
    $5 = (($l$03) + 1|0);
    $6 = (($r$04) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$02 = $4;$l$03 = $5;$r$04 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i102$i = 0, $$0$lcssa$i109$i = 0, $$0$lcssa$i133$i = 0, $$0$lcssa$i148$i = 0, $$0$lcssa$i40 = 0, $$0$lcssa$i44$i = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i51$i = 0, $$0$lcssa$i53$i = 0, $$0$lcssa$i55 = 0, $$0$lcssa$i61$i = 0, $$0$lcssa$i62 = 0;
 var $$0$lcssa$i68$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i74$i = 0, $$0$lcssa$i79 = 0, $$0$lcssa$i81$i = 0, $$0$lcssa$i89$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i100$i = 0, $$01$i107$i = 0, $$01$i131$i = 0, $$01$i146$i = 0, $$01$i38 = 0, $$01$i42$i = 0, $$01$i49$i = 0, $$01$i53 = 0, $$01$i59$i = 0, $$01$i60 = 0, $$01$i66$i = 0, $$01$i67 = 0;
 var $$01$i72$i = 0, $$01$i77 = 0, $$01$i79$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i90$i = 0, $$010$i = 0.0, $$012$i = 0, $$016$i = 0, $$03$i42 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i84$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i117$i = 0, $$117$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i115$i = 0;
 var $$12$i124$i = 0, $$12$i139$i = 0, $$12$i92$i = 0, $$15 = 0, $$19 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20 = 0, $$213$$26$i = 0, $$213$$28$i = 0, $$213$i = 0, $$23$i = 0, $$23$us$i = 0, $$24$i = 0, $$25$i = 0.0, $$26$i = 0, $$28$i = 0, $$3$i = 0.0, $$314$i = 0;
 var $$36$i = 0, $$4$i = 0.0, $$415$lcssa$i = 0, $$415171$i = 0, $$5189$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us307$i = 0, $$a$3$us308$i = 0, $$a$3309$i = 0, $$a$3310$i = 0, $$fl$4 = 0, $$lcssa292$i = 0, $$lcssa95 = 0, $$mask$i = 0, $$mask$i32 = 0, $$mask1$i = 0, $$mask1$i31 = 0, $$neg156$i = 0, $$neg157$i = 0;
 var $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr151$i = 0, $$pre = 0, $$pre$i = 0, $$pre258 = 0, $$pre259 = 0, $$pre306$i = 0, $$sum$i = 0, $$sum18$i = 0, $$sum19$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0.0, $1026 = 0.0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1034$phi = 0;
 var $1035 = 0, $1035$phi = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0;
 var $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0;
 var $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0;
 var $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0.0, $705 = 0.0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1258$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3244$i = 0, $a$3244$us$i = 0, $a$5$lcssa$i = 0, $a$5218$i = 0, $a$6$i = 0, $a$7$i = 0;
 var $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0;
 var $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0;
 var $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0238$i = 0, $carry3$0238$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0249$i = 0, $d$0251$i = 0, $d$1237$i = 0, $d$1237$us$i = 0, $d$2$lcssa$i = 0;
 var $d$2217$i = 0, $d$3$i = 0, $d$4180$i = 0, $d$5170$i = 0, $d$6188$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2213$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0106 = 0, $fl$0111 = 0;
 var $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa265 = 0, $i$0160 = 0, $i$0232$i = 0, $i$03$i = 0, $i$03$i24 = 0, $i$1$lcssa$i = 0, $i$1168 = 0, $i$1225$i = 0, $i$2212$i = 0, $i$292 = 0, $i$3204$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0;
 var $isdigit$i26 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigit4 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i25 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $j$0$i = 0, $j$0224$i = 0, $j$0226$i = 0, $j$1205$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0;
 var $l$1159 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i105$i = 0, $or$cond$i40$i = 0, $or$cond$i47$i = 0, $or$cond$i51 = 0, $or$cond$i57$i = 0, $or$cond$i58 = 0, $or$cond$i64$i = 0;
 var $or$cond$i65 = 0, $or$cond$i73 = 0, $or$cond$i75 = 0, $or$cond$i77$i = 0, $or$cond$i98$i = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond269 = 0, $or$cond32$i = 0, $or$cond34$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7169$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4264 = 0;
 var $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1163$i = 0, $round$0162$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0177$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0165$i = 0, $s9$0$i = 0, $s9$1184$i = 0, $s9$2$i = 0, $sext = 0, $sext85 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge2104 = 0, $storemerge2110 = 0;
 var $storemerge7 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$22$i = 0, $w$35$i = 0, $wc = 0, $ws$0161 = 0, $ws$1169 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i114$i = 0, $y$03$i123$i = 0, $y$03$i138$i = 0, $y$03$i91$i = 0, $z$0$i = 0, $z$0$lcssa = 0;
 var $z$096 = 0, $z$1$lcssa$i = 0, $z$1257$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3243$i = 0, $z$3243$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1034 = 0;$1035 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   label = 352;
   break;
  } else {
   $1036 = $22;$26 = $23;
  }
  while(1) {
   if ((($1036<<24>>24) == 37)) {
    $28 = $26;$z$096 = $26;
    label = 9;
    break;
   } else if ((($1036<<24>>24) == 0)) {
    $$lcssa95 = $26;$z$0$lcssa = $26;
    break;
   }
   $25 = (($26) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1036 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = (($28) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa95 = $28;$z$0$lcssa = $z$096;
      break L12;
     }
     $31 = (($z$096) + 1|0);
     $32 = (($28) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$096 = $31;
      label = 9;
     } else {
      $$lcssa95 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$1035$phi = $1035;$1034$phi = $1034;$23 = $$lcssa95;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;$1035 = $1035$phi;$1034 = $1034$phi;
   continue;
  }
  $39 = (($$lcssa95) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = (($$lcssa95) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   if ($44) {
    $45 = (($$lcssa95) + 3|0);
    $$pre258 = HEAP8[$45>>0]|0;
    $47 = $$pre258;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $45;
   } else {
    $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
   }
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $$pr = $47;$51 = $46;$fl$0111 = 0;$storemerge2110 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $61 = $$pr;$fl$0106 = $fl$0111;$storemerge2104 = $storemerge2110;
      break L25;
     }
     $55 = $52 | $fl$0111;
     $56 = (($storemerge2110) + 1|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 << 24 >> 24;
     $59 = $58 & -32;
     $60 = ($59|0)==(32);
     if ($60) {
      $$pr = $57;$51 = $58;$fl$0111 = $55;$storemerge2110 = $56;
     } else {
      $61 = $57;$fl$0106 = $55;$storemerge2104 = $56;
      break;
     }
    }
   } else {
    $61 = $47;$fl$0106 = 0;$storemerge2104 = $storemerge;
   }
  } while(0);
  $62 = ($61<<24>>24)==(42);
  do {
   if ($62) {
    $63 = (($storemerge2104) + 1|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $isdigittmp5 = (($65) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    if ($isdigit6) {
     $66 = (($storemerge2104) + 2|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = ($67<<24>>24)==(36);
     if ($68) {
      $69 = (($nl_type) + ($isdigittmp5<<2)|0);
      HEAP32[$69>>2] = 10;
      $70 = HEAP8[$63>>0]|0;
      $71 = $70 << 24 >> 24;
      $72 = (($71) + -48)|0;
      $73 = (($nl_arg) + ($72<<3)|0);
      $74 = $73;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($74) + 4)|0;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($storemerge2104) + 3|0);
      $l10n$2 = 1;$storemerge7 = $80;$w$0 = $76;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $81 = ($l10n$1|0)==(0);
     if (!($81)) {
      $$0 = -1;
      label = 370;
      break L1;
     }
     if (!($1)) {
      $97 = $63;$fl$1 = $fl$0106;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $82 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge7 = $63;$w$0 = $82;
    }
    $83 = ($w$0|0)<(0);
    if ($83) {
     $84 = $fl$0106 | 8192;
     $85 = (0 - ($w$0))|0;
     $97 = $storemerge7;$fl$1 = $84;$l10n$3 = $l10n$2;$w$1 = $85;
    } else {
     $97 = $storemerge7;$fl$1 = $fl$0106;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $86 = $61 << 24 >> 24;
    $isdigittmp1$i = (($86) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $89 = $86;$92 = $storemerge2104;$i$03$i = 0;
     while(1) {
      $87 = ($i$03$i*10)|0;
      $88 = (($89) + -48)|0;
      $90 = (($88) + ($87))|0;
      $91 = (($92) + 1|0);
      $93 = HEAP8[$91>>0]|0;
      $94 = $93 << 24 >> 24;
      $isdigittmp$i = (($94) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $89 = $94;$92 = $91;$i$03$i = $90;
      } else {
       break;
      }
     }
     $95 = ($90|0)<(0);
     if ($95) {
      $$0 = -1;
      label = 370;
      break L1;
     } else {
      $97 = $91;$fl$1 = $fl$0106;$l10n$3 = $l10n$1;$w$1 = $90;
     }
    } else {
     $97 = $storemerge2104;$fl$1 = $fl$0106;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $96 = HEAP8[$97>>0]|0;
  $98 = ($96<<24>>24)==(46);
  L46: do {
   if ($98) {
    $99 = (($97) + 1|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = ($100<<24>>24)==(42);
    if (!($101)) {
     $122 = $100 << 24 >> 24;
     $isdigittmp1$i22 = (($122) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $125 = $122;$128 = $99;$i$03$i24 = 0;
     } else {
      $1037 = $99;$p$0 = 0;
      break;
     }
     while(1) {
      $123 = ($i$03$i24*10)|0;
      $124 = (($125) + -48)|0;
      $126 = (($124) + ($123))|0;
      $127 = (($128) + 1|0);
      $129 = HEAP8[$127>>0]|0;
      $130 = $129 << 24 >> 24;
      $isdigittmp$i25 = (($130) + -48)|0;
      $isdigit$i26 = ($isdigittmp$i25>>>0)<(10);
      if ($isdigit$i26) {
       $125 = $130;$128 = $127;$i$03$i24 = $126;
      } else {
       $1037 = $127;$p$0 = $126;
       break L46;
      }
     }
    }
    $102 = (($97) + 2|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103 << 24 >> 24;
    $isdigittmp3 = (($104) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $105 = (($97) + 3|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = ($106<<24>>24)==(36);
     if ($107) {
      $108 = (($nl_type) + ($isdigittmp3<<2)|0);
      HEAP32[$108>>2] = 10;
      $109 = HEAP8[$102>>0]|0;
      $110 = $109 << 24 >> 24;
      $111 = (($110) + -48)|0;
      $112 = (($nl_arg) + ($111<<3)|0);
      $113 = $112;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = (($113) + 4)|0;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($97) + 4|0);
      $1037 = $119;$p$0 = $115;
      break;
     }
    }
    $120 = ($l10n$3|0)==(0);
    if (!($120)) {
     $$0 = -1;
     label = 370;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $121 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1037 = $102;$p$0 = $121;
    } else {
     $1037 = $102;$p$0 = 0;
    }
   } else {
    $1037 = $97;$p$0 = -1;
   }
  } while(0);
  $132 = $1037;$st$0 = 0;
  while(1) {
   $131 = HEAP8[$132>>0]|0;
   $133 = $131 << 24 >> 24;
   $134 = (($133) + -65)|0;
   $135 = ($134>>>0)>(57);
   if ($135) {
    $$0 = -1;
    label = 370;
    break L1;
   }
   $136 = (($132) + 1|0);
   $137 = ((32088 + (($st$0*58)|0)|0) + ($134)|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = (($139) + -1)|0;
   $141 = ($140>>>0)<(8);
   if ($141) {
    $132 = $136;$st$0 = $139;
   } else {
    break;
   }
  }
  $142 = ($138<<24>>24)==(0);
  if ($142) {
   $$0 = -1;
   label = 370;
   break;
  }
  $143 = ($138<<24>>24)==(19);
  $144 = ($argpos$0|0)>(-1);
  L65: do {
   if ($143) {
    if ($144) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1038 = $1034;$1039 = $1035;
     label = 63;
    }
   } else {
    if ($144) {
     $145 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$145>>2] = $139;
     $146 = (($nl_arg) + ($argpos$0<<3)|0);
     $147 = $146;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $150 = (($147) + 4)|0;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $1038 = $149;$1039 = $152;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 370;
     break L1;
    }
    $153 = ($138&255)>(20);
    if ($153) {
     $187 = $131;$195 = $1034;$222 = $1035;
    } else {
     do {
      switch ($139|0) {
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i31 = $172 & 65535;
       $1040 = 0;$1041 = $$mask1$i31;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $166 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $167 = $166&65535;
       $168 = $167 << 16 >> 16;
       $169 = ($168|0)<(0);
       $170 = $169 << 31 >> 31;
       $sext85 = $166 << 16;
       $171 = $sext85 >> 16;
       $1040 = $170;$1041 = $171;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $155 = $154;
       $1040 = $1035;$1041 = $155;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1040 = 0;$1041 = $159;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i32 = $179 & 255;
       $1040 = 0;$1041 = $$mask$i32;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$183 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $183;$184 = HEAP32[tempDoublePtr>>2]|0;
       $185 = HEAP32[tempDoublePtr+4>>2]|0;
       $1038 = $184;$1039 = $185;
       label = 63;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $156 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $157 = ($156|0)<(0);
       $158 = $157 << 31 >> 31;
       $1040 = $158;$1041 = $156;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $173 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $174 = $173&255;
       $175 = $174 << 24 >> 24;
       $176 = ($175|0)<(0);
       $177 = $176 << 31 >> 31;
       $sext = $173 << 24;
       $178 = $sext >> 24;
       $1040 = $177;$1041 = $178;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $160 = $arglist_current14;
       $161 = $160;
       $162 = HEAP32[$161>>2]|0;
       $163 = (($160) + 4)|0;
       $164 = $163;
       $165 = HEAP32[$164>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1040 = $165;$1041 = $162;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$180 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $180;$181 = HEAP32[tempDoublePtr>>2]|0;
       $182 = HEAP32[tempDoublePtr+4>>2]|0;
       $1040 = $182;$1041 = $181;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1040 = $1035;$1041 = $1034;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1040 = $1039;$1041 = $1038;
    label = 64;
   } else {
    $1034 = $1038;$1035 = $1039;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre259 = HEAP8[$132>>0]|0;
   $187 = $$pre259;$195 = $1041;$222 = $1040;
  }
  $186 = $187 << 24 >> 24;
  $188 = ($st$0|0)!=(0);
  $189 = $186 & 15;
  $190 = ($189|0)==(3);
  $or$cond9 = $188 & $190;
  $191 = $186 & -33;
  $t$0 = $or$cond9 ? $191 : $186;
  $192 = $fl$1 & 8192;
  $193 = ($192|0)==(0);
  $194 = $fl$1 & -65537;
  $fl$1$ = $193 ? $fl$1 : $194;
  L89: do {
   switch ($t$0|0) {
   case 67:  {
    HEAP32[$wc>>2] = $195;
    HEAP32[$5>>2] = 0;
    $1044 = $wc;$1045 = $6;$p$4264 = -1;
    label = 101;
    break;
   }
   case 111:  {
    $243 = ($195|0)==(0);
    $244 = ($222|0)==(0);
    $245 = $243 & $244;
    if ($245) {
     $$0$lcssa$i45 = $2;
    } else {
     $$03$i42 = $2;$247 = $195;$251 = $222;
     while(1) {
      $246 = $247 & 7;
      $248 = $246 | 48;
      $249 = $248&255;
      $250 = (($$03$i42) + -1|0);
      HEAP8[$250>>0] = $249;
      $252 = (_bitshift64Lshr(($247|0),($251|0),3)|0);
      $253 = tempRet0;
      $254 = ($252|0)==(0);
      $255 = ($253|0)==(0);
      $256 = $254 & $255;
      if ($256) {
       $$0$lcssa$i45 = $250;
       break;
      } else {
       $$03$i42 = $250;$247 = $252;$251 = $253;
      }
     }
    }
    $257 = $fl$1$ & 8;
    $258 = ($257|0)==(0);
    $or$cond13 = $258 | $245;
    $$19 = $or$cond13 ? 32552 : ((32552 + 5|0));
    $259 = $or$cond13&1;
    $$20 = $259 ^ 1;
    $297 = $195;$299 = $222;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$20;$prefix$1 = $$19;
    label = 91;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 75;
    break;
   }
   case 117:  {
    $267 = $222;$269 = $195;$pl$0 = 0;$prefix$0 = 32552;
    label = 86;
    break;
   }
   case 105: case 100:  {
    $260 = ($222|0)<(0);
    if ($260) {
     $261 = (_i64Subtract(0,0,($195|0),($222|0))|0);
     $262 = tempRet0;
     $267 = $262;$269 = $261;$pl$0 = 1;$prefix$0 = 32552;
     label = 86;
     break L89;
    }
    $263 = $fl$1$ & 2048;
    $264 = ($263|0)==(0);
    if ($264) {
     $265 = $fl$1$ & 1;
     $266 = ($265|0)==(0);
     $$ = $266 ? 32552 : ((32552 + 2|0));
     $267 = $222;$269 = $195;$pl$0 = $265;$prefix$0 = $$;
     label = 86;
    } else {
     $267 = $222;$269 = $195;$pl$0 = 1;$prefix$0 = ((32552 + 1|0));
     label = 86;
    }
    break;
   }
   case 109:  {
    $310 = (___errno_location()|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = (_strerror(($311|0))|0);
    $a$1 = $312;
    label = 96;
    break;
   }
   case 83:  {
    $321 = $195;
    $322 = ($p$0|0)==(0);
    if ($322) {
     $1046 = $195;$1047 = $321;$i$0$lcssa265 = 0;
     label = 106;
    } else {
     $1044 = $321;$1045 = $195;$p$4264 = $p$0;
     label = 101;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $195;HEAP32[tempDoublePtr+4>>2] = $222;$360 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $361 = ($222|0)<(0);
    if ($361) {
     $362 = -$360;
     $$010$i = $362;$pl$0$i = 1;$prefix$0$i = 32576;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? ((32576 + 1|0)) : ((32576 + 6|0));
      $$010$i = $360;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$010$i = $360;$pl$0$i = 1;$prefix$0$i = ((32576 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$010$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    if (!($374)) {
     $375 = $t$0 & 32;
     $376 = ($375|0)!=(0);
     $377 = $376 ? 32600 : 32608;
     $378 = ($$010$i != $$010$i) | (0.0 != 0.0);
     if ($378) {
      $379 = $376 ? 32616 : 32624;
      $pl$1$i = 0;$s1$0$i = $379;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $377;
     }
     $380 = (($pl$1$i) + 3)|0;
     $381 = $fl$1$ & 8192;
     $382 = ($381|0)==(0);
     $383 = ($w$1|0)>($380|0);
     $or$cond$i40$i = $382 & $383;
     if ($or$cond$i40$i) {
      $384 = (($w$1) - ($380))|0;
      $385 = ($384>>>0)>(256);
      $386 = $385 ? 256 : $384;
      _memset(($pad$i|0),32,($386|0))|0;
      $387 = ($384>>>0)>(255);
      if ($387) {
       $$01$i42$i = $384;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $388 = (($$01$i42$i) + -256)|0;
        $389 = ($388>>>0)>(255);
        if ($389) {
         $$01$i42$i = $388;
        } else {
         break;
        }
       }
       $390 = $384 & 255;
       $$0$lcssa$i44$i = $390;
      } else {
       $$0$lcssa$i44$i = $384;
      }
      (___fwritex($pad$i,$$0$lcssa$i44$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $391 = $fl$1$ & 73728;
     $392 = ($391|0)==(8192);
     $or$cond$i47$i = $392 & $383;
     if ($or$cond$i47$i) {
      $393 = (($w$1) - ($380))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i49$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i49$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i49$i = $397;
        } else {
         break;
        }
       }
       $399 = $393 & 255;
       $$0$lcssa$i51$i = $399;
      } else {
       $$0$lcssa$i51$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i51$i,$f)|0);
     }
     $w$$i = $383 ? $w$1 : $380;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $400 = (+_frexpl($$010$i,$e2$i));
    $401 = $400 * 2.0;
    $402 = $401 != 0.0;
    if ($402) {
     $403 = HEAP32[$e2$i>>2]|0;
     $404 = (($403) + -1)|0;
     HEAP32[$e2$i>>2] = $404;
    }
    $405 = $t$0 | 32;
    $406 = ($405|0)==(97);
    if ($406) {
     $407 = $t$0 & 32;
     $408 = ($407|0)==(0);
     $409 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $408 ? $prefix$0$i : $409;
     $410 = $pl$0$i | 2;
     $411 = ($p$0>>>0)>(11);
     $412 = (12 - ($p$0))|0;
     $re$0$i = $411 ? 0 : $412;
     $413 = ($re$0$i|0)==(0);
     do {
      if ($413) {
       $$1$i = $401;
      } else {
       $re$1163$i = $re$0$i;$round$0162$i = 8.0;
       while(1) {
        $414 = (($re$1163$i) + -1)|0;
        $415 = $round$0162$i * 16.0;
        $416 = ($414|0)==(0);
        if ($416) {
         break;
        } else {
         $re$1163$i = $414;$round$0162$i = $415;
        }
       }
       $417 = HEAP8[$prefix$0$$i>>0]|0;
       $418 = ($417<<24>>24)==(45);
       if ($418) {
        $419 = -$401;
        $420 = $419 - $415;
        $421 = $415 + $420;
        $422 = -$421;
        $$1$i = $422;
        break;
       } else {
        $423 = $401 + $415;
        $424 = $423 - $415;
        $$1$i = $424;
        break;
       }
      }
     } while(0);
     $425 = HEAP32[$e2$i>>2]|0;
     $426 = ($425|0)<(0);
     $427 = (0 - ($425))|0;
     $428 = $426 ? $427 : $425;
     $429 = ($428|0)<(0);
     if ($429) {
      $430 = ($428|0)<(0);
      $431 = $430 << 31 >> 31;
      $$05$i$i = $7;$432 = $428;$433 = $431;
      while(1) {
       $434 = (___uremdi3(($432|0),($433|0),10,0)|0);
       $435 = tempRet0;
       $436 = $434 | 48;
       $437 = $436&255;
       $438 = (($$05$i$i) + -1|0);
       HEAP8[$438>>0] = $437;
       $439 = (___udivdi3(($432|0),($433|0),10,0)|0);
       $440 = tempRet0;
       $441 = ($433>>>0)>(9);
       $442 = ($432>>>0)>(4294967295);
       $443 = ($433|0)==(9);
       $444 = $443 & $442;
       $445 = $441 | $444;
       if ($445) {
        $$05$i$i = $438;$432 = $439;$433 = $440;
       } else {
        break;
       }
      }
      $$0$lcssa$i53$i = $438;$$01$lcssa$off0$i$i = $439;
     } else {
      $$0$lcssa$i53$i = $7;$$01$lcssa$off0$i$i = $428;
     }
     $446 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($446) {
      $$1$lcssa$i$i = $$0$lcssa$i53$i;
     } else {
      $$12$i$i = $$0$lcssa$i53$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $447 = (($y$03$i$i>>>0) % 10)&-1;
       $448 = $447 | 48;
       $449 = $448&255;
       $450 = (($$12$i$i) + -1|0);
       HEAP8[$450>>0] = $449;
       $451 = (($y$03$i$i>>>0) / 10)&-1;
       $452 = ($y$03$i$i>>>0)<(10);
       if ($452) {
        $$1$lcssa$i$i = $450;
        break;
       } else {
        $$12$i$i = $450;$y$03$i$i = $451;
       }
      }
     }
     $453 = ($$1$lcssa$i$i|0)==($7|0);
     if ($453) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $454 = HEAP32[$e2$i>>2]|0;
     $455 = $454 >> 31;
     $456 = $455 & 2;
     $457 = (($456) + 43)|0;
     $458 = $457&255;
     $459 = (($estr$0$i) + -1|0);
     HEAP8[$459>>0] = $458;
     $460 = (($t$0) + 15)|0;
     $461 = $460&255;
     $462 = (($estr$0$i) + -2|0);
     HEAP8[$462>>0] = $461;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $463 = $fl$1$ & 8;
      $464 = ($463|0)==(0);
      if ($464) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $465 = (~~(($$2$us$us$i)));
        $466 = (32632 + ($465)|0);
        $467 = HEAP8[$466>>0]|0;
        $468 = $467&255;
        $469 = $468 | $407;
        $470 = $469&255;
        $471 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $470;
        $472 = (+($465|0));
        $473 = $$2$us$us$i - $472;
        $474 = $473 * 16.0;
        $475 = $471;
        $476 = (($475) - ($0))|0;
        $477 = ($476|0)!=(1);
        $notlhs$us$us$i = $474 == 0.0;
        $or$cond$i73 = $477 | $notlhs$us$us$i;
        if ($or$cond$i73) {
         $s$1$us$us$i = $471;
        } else {
         $478 = (($s$0$us$us$i) + 2|0);
         HEAP8[$471>>0] = 46;
         $s$1$us$us$i = $478;
        }
        $479 = $474 != 0.0;
        if ($479) {
         $$2$us$us$i = $474;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $480 = (~~(($$2$us$i)));
        $481 = (32632 + ($480)|0);
        $482 = HEAP8[$481>>0]|0;
        $483 = $482&255;
        $484 = $483 | $407;
        $485 = $484&255;
        $486 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $485;
        $487 = (+($480|0));
        $488 = $$2$us$i - $487;
        $489 = $488 * 16.0;
        $490 = $486;
        $491 = (($490) - ($0))|0;
        $492 = ($491|0)==(1);
        if ($492) {
         $493 = (($s$0$us$i) + 2|0);
         HEAP8[$486>>0] = 46;
         $s$1$us$i = $493;
        } else {
         $s$1$us$i = $486;
        }
        $494 = $489 != 0.0;
        if ($494) {
         $$2$us$i = $489;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $495 = (~~(($$2$i)));
       $496 = (32632 + ($495)|0);
       $497 = HEAP8[$496>>0]|0;
       $498 = $497&255;
       $499 = $498 | $407;
       $500 = $499&255;
       $501 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $500;
       $502 = (+($495|0));
       $503 = $$2$i - $502;
       $504 = $503 * 16.0;
       $505 = $501;
       $506 = (($505) - ($0))|0;
       $507 = ($506|0)==(1);
       if ($507) {
        $508 = (($s$0$i) + 2|0);
        HEAP8[$501>>0] = 46;
        $s$1$i = $508;
       } else {
        $s$1$i = $501;
       }
       $509 = $504 != 0.0;
       if ($509) {
        $$2$i = $504;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $510 = ($p$0|0)!=(0);
     $$pre306$i = $s$1$lcssa$i;
     $511 = (($11) + ($$pre306$i))|0;
     $512 = ($511|0)<($p$0|0);
     $or$cond269 = $510 & $512;
     $513 = $462;
     if ($or$cond269) {
      $514 = (($12) + ($p$0))|0;
      $515 = (($514) - ($513))|0;
      $l$0$i = $515;
     } else {
      $516 = (($10) - ($513))|0;
      $517 = (($516) + ($$pre306$i))|0;
      $l$0$i = $517;
     }
     $518 = (($l$0$i) + ($410))|0;
     $519 = $fl$1$ & 73728;
     $520 = ($519|0)==(0);
     $521 = ($w$1|0)>($518|0);
     $or$cond$i57$i = $520 & $521;
     if ($or$cond$i57$i) {
      $522 = (($w$1) - ($518))|0;
      $523 = ($522>>>0)>(256);
      $524 = $523 ? 256 : $522;
      _memset(($pad$i|0),32,($524|0))|0;
      $525 = ($522>>>0)>(255);
      if ($525) {
       $$01$i59$i = $522;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $526 = (($$01$i59$i) + -256)|0;
        $527 = ($526>>>0)>(255);
        if ($527) {
         $$01$i59$i = $526;
        } else {
         break;
        }
       }
       $528 = $522 & 255;
       $$0$lcssa$i61$i = $528;
      } else {
       $$0$lcssa$i61$i = $522;
      }
      (___fwritex($pad$i,$$0$lcssa$i61$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$410,$f)|0);
     $529 = ($519|0)==(65536);
     $or$cond$i64$i = $529 & $521;
     if ($or$cond$i64$i) {
      $530 = (($w$1) - ($518))|0;
      $531 = ($530>>>0)>(256);
      $532 = $531 ? 256 : $530;
      _memset(($pad$i|0),48,($532|0))|0;
      $533 = ($530>>>0)>(255);
      if ($533) {
       $$01$i66$i = $530;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $534 = (($$01$i66$i) + -256)|0;
        $535 = ($534>>>0)>(255);
        if ($535) {
         $$01$i66$i = $534;
        } else {
         break;
        }
       }
       $536 = $530 & 255;
       $$0$lcssa$i68$i = $536;
      } else {
       $$0$lcssa$i68$i = $530;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     $537 = (($$pre306$i) - ($0))|0;
     (___fwritex($buf$i,$537,$f)|0);
     $538 = $462;
     $539 = (($9) - ($538))|0;
     $540 = (($l$0$i) - ($539))|0;
     $541 = (($540) - ($537))|0;
     $542 = ($541|0)>(0);
     if ($542) {
      $543 = ($541>>>0)>(256);
      $544 = $543 ? 256 : $541;
      _memset(($pad$i|0),48,($544|0))|0;
      $545 = ($541>>>0)>(255);
      if ($545) {
       $$01$i72$i = $541;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $546 = (($$01$i72$i) + -256)|0;
        $547 = ($546>>>0)>(255);
        if ($547) {
         $$01$i72$i = $546;
        } else {
         break;
        }
       }
       $548 = $541 & 255;
       $$0$lcssa$i74$i = $548;
      } else {
       $$0$lcssa$i74$i = $541;
      }
      (___fwritex($pad$i,$$0$lcssa$i74$i,$f)|0);
     }
     (___fwritex($462,$539,$f)|0);
     $549 = ($519|0)==(8192);
     $or$cond$i77$i = $549 & $521;
     if ($or$cond$i77$i) {
      $550 = (($w$1) - ($518))|0;
      $551 = ($550>>>0)>(256);
      $552 = $551 ? 256 : $550;
      _memset(($pad$i|0),32,($552|0))|0;
      $553 = ($550>>>0)>(255);
      if ($553) {
       $$01$i79$i = $550;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $554 = (($$01$i79$i) + -256)|0;
        $555 = ($554>>>0)>(255);
        if ($555) {
         $$01$i79$i = $554;
        } else {
         break;
        }
       }
       $556 = $550 & 255;
       $$0$lcssa$i81$i = $556;
      } else {
       $$0$lcssa$i81$i = $550;
      }
      (___fwritex($pad$i,$$0$lcssa$i81$i,$f)|0);
     }
     $w$22$i = $521 ? $w$1 : $518;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$22$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $557 = ($p$0|0)<(0);
    $$p$i = $557 ? 6 : $p$0;
    if ($402) {
     $558 = $401 * 268435456.0;
     $559 = HEAP32[$e2$i>>2]|0;
     $560 = (($559) + -28)|0;
     HEAP32[$e2$i>>2] = $560;
     $$3$i = $558;$561 = $560;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $401;$561 = $$pre$i;
    }
    $562 = ($561|0)<(0);
    $$36$i = $562 ? $big$i : $13;
    $563 = $$36$i;
    $$4$i = $$3$i;$z$0$i = $$36$i;
    while(1) {
     $564 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $564;
     $565 = (($z$0$i) + 4|0);
     $566 = (+($564>>>0));
     $567 = $$4$i - $566;
     $568 = $567 * 1.0E+9;
     $569 = $568 != 0.0;
     if ($569) {
      $$4$i = $568;$z$0$i = $565;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $570 = ($$pr$i|0)>(0);
    if ($570) {
     $571 = $$pr$i;$a$1258$i = $$36$i;$z$1257$i = $565;
     while(1) {
      $572 = ($571|0)>(29);
      $573 = $572 ? 29 : $571;
      $d$0249$i = (($z$1257$i) + -4|0);
      $574 = ($d$0249$i>>>0)<($a$1258$i>>>0);
      do {
       if ($574) {
        $a$2$ph$i = $a$1258$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $d$0249$i;
        while(1) {
         $575 = HEAP32[$d$0251$i>>2]|0;
         $576 = (_bitshift64Shl(($575|0),0,($573|0))|0);
         $577 = tempRet0;
         $578 = (_i64Add(($576|0),($577|0),($carry$0250$i|0),0)|0);
         $579 = tempRet0;
         $580 = (___uremdi3(($578|0),($579|0),1000000000,0)|0);
         $581 = tempRet0;
         HEAP32[$d$0251$i>>2] = $580;
         $582 = (___udivdi3(($578|0),($579|0),1000000000,0)|0);
         $583 = tempRet0;
         $d$0$i = (($d$0251$i) + -4|0);
         $584 = ($d$0$i>>>0)<($a$1258$i>>>0);
         if ($584) {
          break;
         } else {
          $carry$0250$i = $582;$d$0251$i = $d$0$i;
         }
        }
        $585 = ($582|0)==(0);
        if ($585) {
         $a$2$ph$i = $a$1258$i;
         break;
        }
        $586 = (($a$1258$i) + -4|0);
        HEAP32[$586>>2] = $582;
        $a$2$ph$i = $586;
       }
      } while(0);
      $z$2$i = $z$1257$i;
      while(1) {
       $587 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($587)) {
        break;
       }
       $588 = (($z$2$i) + -4|0);
       $589 = HEAP32[$588>>2]|0;
       $590 = ($589|0)==(0);
       if ($590) {
        $z$2$i = $588;
       } else {
        break;
       }
      }
      $591 = HEAP32[$e2$i>>2]|0;
      $592 = (($591) - ($573))|0;
      HEAP32[$e2$i>>2] = $592;
      $593 = ($592|0)>(0);
      if ($593) {
       $571 = $592;$a$1258$i = $a$2$ph$i;$z$1257$i = $z$2$i;
      } else {
       $$pr151$i = $592;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr151$i = $$pr$i;$a$1$lcssa$i = $$36$i;$z$1$lcssa$i = $565;
    }
    $594 = ($$pr151$i|0)<(0);
    L235: do {
     if ($594) {
      $595 = (($$p$i) + 25)|0;
      $596 = (($595|0) / 9)&-1;
      $597 = (($596) + 1)|0;
      $598 = ($405|0)==(102);
      if ($598) {
       $599 = (($$36$i) + ($597<<2)|0);
       $601 = $$pr151$i;$a$3244$us$i = $a$1$lcssa$i;$z$3243$us$i = $z$1$lcssa$i;
       while(1) {
        $600 = (0 - ($601))|0;
        $602 = ($600|0)>(9);
        $$23$us$i = $602 ? 9 : $600;
        $603 = ($a$3244$us$i>>>0)<($z$3243$us$i>>>0);
        do {
         if ($603) {
          $628 = 1 << $$23$us$i;
          $622 = (($628) + -1)|0;
          $625 = 1000000000 >>> $$23$us$i;
          $carry3$0238$us$i = 0;$d$1237$us$i = $a$3244$us$i;
          while(1) {
           $620 = HEAP32[$d$1237$us$i>>2]|0;
           $621 = $620 & $622;
           $623 = $620 >>> $$23$us$i;
           $624 = (($623) + ($carry3$0238$us$i))|0;
           HEAP32[$d$1237$us$i>>2] = $624;
           $610 = Math_imul($621, $625)|0;
           $626 = (($d$1237$us$i) + 4|0);
           $627 = ($626>>>0)<($z$3243$us$i>>>0);
           if ($627) {
            $carry3$0238$us$i = $610;$d$1237$us$i = $626;
           } else {
            break;
           }
          }
          $607 = HEAP32[$a$3244$us$i>>2]|0;
          $608 = ($607|0)==(0);
          $609 = (($a$3244$us$i) + 4|0);
          $$a$3$us$i = $608 ? $609 : $a$3244$us$i;
          $611 = ($610|0)==(0);
          if ($611) {
           $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $z$3243$us$i;
           break;
          }
          $612 = (($z$3243$us$i) + 4|0);
          HEAP32[$z$3243$us$i>>2] = $610;
          $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $612;
         } else {
          $604 = HEAP32[$a$3244$us$i>>2]|0;
          $605 = ($604|0)==(0);
          $606 = (($a$3244$us$i) + 4|0);
          $$a$3$us307$i = $605 ? $606 : $a$3244$us$i;
          $$a$3$us308$i = $$a$3$us307$i;$z$4$us$i = $z$3243$us$i;
         }
        } while(0);
        $613 = $z$4$us$i;
        $614 = (($613) - ($563))|0;
        $615 = $614 >> 2;
        $616 = ($615|0)>($597|0);
        $$z$4$us$i = $616 ? $599 : $z$4$us$i;
        $617 = HEAP32[$e2$i>>2]|0;
        $618 = (($617) + ($$23$us$i))|0;
        HEAP32[$e2$i>>2] = $618;
        $619 = ($618|0)<(0);
        if ($619) {
         $601 = $618;$a$3244$us$i = $$a$3$us308$i;$z$3243$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us308$i;$z$3$lcssa$i = $$z$4$us$i;
         break L235;
        }
       }
      } else {
       $630 = $$pr151$i;$a$3244$i = $a$1$lcssa$i;$z$3243$i = $z$1$lcssa$i;
      }
      while(1) {
       $629 = (0 - ($630))|0;
       $631 = ($629|0)>(9);
       $$23$i = $631 ? 9 : $629;
       $632 = ($a$3244$i>>>0)<($z$3243$i>>>0);
       do {
        if ($632) {
         $636 = 1 << $$23$i;
         $637 = (($636) + -1)|0;
         $638 = 1000000000 >>> $$23$i;
         $carry3$0238$i = 0;$d$1237$i = $a$3244$i;
         while(1) {
          $639 = HEAP32[$d$1237$i>>2]|0;
          $640 = $639 & $637;
          $641 = $639 >>> $$23$i;
          $642 = (($641) + ($carry3$0238$i))|0;
          HEAP32[$d$1237$i>>2] = $642;
          $643 = Math_imul($640, $638)|0;
          $644 = (($d$1237$i) + 4|0);
          $645 = ($644>>>0)<($z$3243$i>>>0);
          if ($645) {
           $carry3$0238$i = $643;$d$1237$i = $644;
          } else {
           break;
          }
         }
         $646 = HEAP32[$a$3244$i>>2]|0;
         $647 = ($646|0)==(0);
         $648 = (($a$3244$i) + 4|0);
         $$a$3$i = $647 ? $648 : $a$3244$i;
         $649 = ($643|0)==(0);
         if ($649) {
          $$a$3310$i = $$a$3$i;$z$4$i = $z$3243$i;
          break;
         }
         $650 = (($z$3243$i) + 4|0);
         HEAP32[$z$3243$i>>2] = $643;
         $$a$3310$i = $$a$3$i;$z$4$i = $650;
        } else {
         $633 = HEAP32[$a$3244$i>>2]|0;
         $634 = ($633|0)==(0);
         $635 = (($a$3244$i) + 4|0);
         $$a$3309$i = $634 ? $635 : $a$3244$i;
         $$a$3310$i = $$a$3309$i;$z$4$i = $z$3243$i;
        }
       } while(0);
       $651 = $z$4$i;
       $652 = $$a$3310$i;
       $653 = (($651) - ($652))|0;
       $654 = $653 >> 2;
       $655 = ($654|0)>($597|0);
       if ($655) {
        $656 = (($$a$3310$i) + ($597<<2)|0);
        $z$5$i = $656;
       } else {
        $z$5$i = $z$4$i;
       }
       $657 = HEAP32[$e2$i>>2]|0;
       $658 = (($657) + ($$23$i))|0;
       HEAP32[$e2$i>>2] = $658;
       $659 = ($658|0)<(0);
       if ($659) {
        $630 = $658;$a$3244$i = $$a$3310$i;$z$3243$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3310$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $660 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($660) {
      $661 = $a$3$lcssa$i;
      $662 = (($563) - ($661))|0;
      $663 = $662 >> 2;
      $664 = ($663*9)|0;
      $665 = HEAP32[$a$3$lcssa$i>>2]|0;
      $666 = ($665>>>0)<(10);
      if ($666) {
       $e$1$i = $664;
       break;
      } else {
       $e$0233$i = $664;$i$0232$i = 10;
      }
      while(1) {
       $667 = ($i$0232$i*10)|0;
       $668 = (($e$0233$i) + 1)|0;
       $669 = ($665>>>0)<($667>>>0);
       if ($669) {
        $e$1$i = $668;
        break;
       } else {
        $e$0233$i = $668;$i$0232$i = $667;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $670 = ($405|0)!=(102);
    $671 = $670 ? $e$1$i : 0;
    $672 = (($$p$i) - ($671))|0;
    $673 = ($405|0)==(103);
    $674 = ($$p$i|0)!=(0);
    $$24$i = $673 & $674;
    $$neg156$i = $$24$i << 31 >> 31;
    $675 = (($672) + ($$neg156$i))|0;
    $676 = $z$3$lcssa$i;
    $677 = (($676) - ($563))|0;
    $678 = $677 >> 2;
    $679 = ($678*9)|0;
    $680 = (($679) + -9)|0;
    $681 = ($675|0)<($680|0);
    if ($681) {
     $682 = (($675) + 9216)|0;
     $683 = (($682|0) / 9)&-1;
     $$sum$i = (($683) + -1023)|0;
     $684 = (($$36$i) + ($$sum$i<<2)|0);
     $685 = (($682|0) % 9)&-1;
     $j$0224$i = (($685) + 1)|0;
     $686 = ($j$0224$i|0)<(9);
     if ($686) {
      $i$1225$i = 10;$j$0226$i = $j$0224$i;
      while(1) {
       $687 = ($i$1225$i*10)|0;
       $j$0$i = (($j$0226$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $687;
        break;
       } else {
        $i$1225$i = $687;$j$0226$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $688 = HEAP32[$684>>2]|0;
     $689 = (($688>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $690 = ($689|0)==(0);
     if ($690) {
      $$sum18$i = (($683) + -1022)|0;
      $691 = (($$36$i) + ($$sum18$i<<2)|0);
      $692 = ($691|0)==($z$3$lcssa$i|0);
      if ($692) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $684;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $693 = (($688>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $694 = $693 & 1;
       $695 = ($694|0)==(0);
       $$25$i = $695 ? 9007199254740992.0 : 9007199254740994.0;
       $696 = (($i$1$lcssa$i|0) / 2)&-1;
       $697 = ($689>>>0)<($696>>>0);
       do {
        if ($697) {
         $small$0$i = 0.5;
        } else {
         $698 = ($689|0)==($696|0);
         if ($698) {
          $$sum19$i = (($683) + -1022)|0;
          $699 = (($$36$i) + ($$sum19$i<<2)|0);
          $700 = ($699|0)==($z$3$lcssa$i|0);
          if ($700) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $701 = ($pl$0$i|0)==(0);
       do {
        if ($701) {
         $round6$1$i = $$25$i;$small$1$i = $small$0$i;
        } else {
         $702 = HEAP8[$prefix$0$i>>0]|0;
         $703 = ($702<<24>>24)==(45);
         if (!($703)) {
          $round6$1$i = $$25$i;$small$1$i = $small$0$i;
          break;
         }
         $704 = $$25$i * -1.0;
         $705 = $small$0$i * -1.0;
         $round6$1$i = $704;$small$1$i = $705;
        }
       } while(0);
       $706 = (($688) - ($689))|0;
       HEAP32[$684>>2] = $706;
       $707 = $round6$1$i + $small$1$i;
       $708 = $707 != $round6$1$i;
       if (!($708)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $684;$e$3$i = $e$1$i;
        break;
       }
       $709 = (($706) + ($i$1$lcssa$i))|0;
       HEAP32[$684>>2] = $709;
       $710 = ($709>>>0)>(999999999);
       if ($710) {
        $a$5218$i = $a$3$lcssa$i;$d$2217$i = $684;
        while(1) {
         $711 = (($d$2217$i) + -4|0);
         HEAP32[$d$2217$i>>2] = 0;
         $712 = ($711>>>0)<($a$5218$i>>>0);
         if ($712) {
          $713 = (($a$5218$i) + -4|0);
          HEAP32[$713>>2] = 0;
          $a$6$i = $713;
         } else {
          $a$6$i = $a$5218$i;
         }
         $714 = HEAP32[$711>>2]|0;
         $715 = (($714) + 1)|0;
         HEAP32[$711>>2] = $715;
         $716 = ($715>>>0)>(999999999);
         if ($716) {
          $a$5218$i = $a$6$i;$d$2217$i = $711;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $711;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $684;
       }
       $717 = $a$5$lcssa$i;
       $718 = (($563) - ($717))|0;
       $719 = $718 >> 2;
       $720 = ($719*9)|0;
       $721 = HEAP32[$a$5$lcssa$i>>2]|0;
       $722 = ($721>>>0)<(10);
       if ($722) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $720;
        break;
       } else {
        $e$2213$i = $720;$i$2212$i = 10;
       }
       while(1) {
        $723 = ($i$2212$i*10)|0;
        $724 = (($e$2213$i) + 1)|0;
        $725 = ($721>>>0)<($723>>>0);
        if ($725) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $724;
         break;
        } else {
         $e$2213$i = $724;$i$2212$i = $723;
        }
       }
      }
     } while(0);
     $726 = (($d$3$i) + 4|0);
     $727 = ($z$3$lcssa$i>>>0)>($726>>>0);
     $$z$3$i = $727 ? $726 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $728 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $729 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($729)) {
      $$lcssa292$i = 0;
      break;
     }
     $730 = (($z$6$i) + -4|0);
     $731 = HEAP32[$730>>2]|0;
     $732 = ($731|0)==(0);
     if ($732) {
      $z$6$i = $730;
     } else {
      $$lcssa292$i = 1;
      break;
     }
    }
    do {
     if ($673) {
      $733 = ($$p$i|0)==(0);
      $734 = $733&1;
      $$$p$i = (($734) + ($$p$i))|0;
      $735 = ($$$p$i|0)>($e$4$ph$i|0);
      $736 = ($e$4$ph$i|0)>(-5);
      $or$cond5$i = $735 & $736;
      if ($or$cond5$i) {
       $737 = (($t$0) + -1)|0;
       $$neg157$i = (($$$p$i) + -1)|0;
       $738 = (($$neg157$i) - ($e$4$ph$i))|0;
       $$016$i = $737;$$213$i = $738;
      } else {
       $739 = (($t$0) + -2)|0;
       $740 = (($$$p$i) + -1)|0;
       $$016$i = $739;$$213$i = $740;
      }
      $741 = $fl$1$ & 8;
      $742 = ($741|0)==(0);
      if (!($742)) {
       $$117$i = $$016$i;$$314$i = $$213$i;
       break;
      }
      do {
       if ($$lcssa292$i) {
        $743 = (($z$6$i) + -4|0);
        $744 = HEAP32[$743>>2]|0;
        $745 = ($744|0)==(0);
        if ($745) {
         $j$2$i = 9;
         break;
        }
        $746 = (($744>>>0) % 10)&-1;
        $747 = ($746|0)==(0);
        if ($747) {
         $i$3204$i = 10;$j$1205$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $748 = ($i$3204$i*10)|0;
         $749 = (($j$1205$i) + 1)|0;
         $750 = (($744>>>0) % ($748>>>0))&-1;
         $751 = ($750|0)==(0);
         if ($751) {
          $i$3204$i = $748;$j$1205$i = $749;
         } else {
          $j$2$i = $749;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $752 = $$016$i | 32;
      $753 = ($752|0)==(102);
      $754 = $z$6$i;
      $755 = (($754) - ($563))|0;
      $756 = $755 >> 2;
      $757 = ($756*9)|0;
      $758 = (($757) + -9)|0;
      if ($753) {
       $759 = (($758) - ($j$2$i))|0;
       $760 = ($759|0)<(0);
       $$26$i = $760 ? 0 : $759;
       $761 = ($$213$i|0)<($$26$i|0);
       $$213$$26$i = $761 ? $$213$i : $$26$i;
       $$117$i = $$016$i;$$314$i = $$213$$26$i;
       break;
      } else {
       $762 = (($758) + ($e$4$ph$i))|0;
       $763 = (($762) - ($j$2$i))|0;
       $764 = ($763|0)<(0);
       $$28$i = $764 ? 0 : $763;
       $765 = ($$213$i|0)<($$28$i|0);
       $$213$$28$i = $765 ? $$213$i : $$28$i;
       $$117$i = $$016$i;$$314$i = $$213$$28$i;
       break;
      }
     } else {
      $$117$i = $t$0;$$314$i = $$p$i;
     }
    } while(0);
    $766 = ($$314$i|0)!=(0);
    if ($766) {
     $770 = 1;
    } else {
     $767 = $fl$1$ & 8;
     $768 = ($767|0)!=(0);
     $770 = $768;
    }
    $769 = $770&1;
    $771 = $$117$i | 32;
    $772 = ($771|0)==(102);
    if ($772) {
     $773 = ($e$4$ph$i|0)>(0);
     $774 = $773 ? $e$4$ph$i : 0;
     $$pn$i = $774;$estr$2$i = 0;
    } else {
     $775 = ($e$4$ph$i|0)<(0);
     $776 = $775 ? $728 : $e$4$ph$i;
     $777 = ($776|0)<(0);
     if ($777) {
      $778 = ($776|0)<(0);
      $779 = $778 << 31 >> 31;
      $$05$i84$i = $7;$780 = $776;$781 = $779;
      while(1) {
       $782 = (___uremdi3(($780|0),($781|0),10,0)|0);
       $783 = tempRet0;
       $784 = $782 | 48;
       $785 = $784&255;
       $786 = (($$05$i84$i) + -1|0);
       HEAP8[$786>>0] = $785;
       $787 = (___udivdi3(($780|0),($781|0),10,0)|0);
       $788 = tempRet0;
       $789 = ($781>>>0)>(9);
       $790 = ($780>>>0)>(4294967295);
       $791 = ($781|0)==(9);
       $792 = $791 & $790;
       $793 = $789 | $792;
       if ($793) {
        $$05$i84$i = $786;$780 = $787;$781 = $788;
       } else {
        break;
       }
      }
      $$0$lcssa$i89$i = $786;$$01$lcssa$off0$i90$i = $787;
     } else {
      $$0$lcssa$i89$i = $7;$$01$lcssa$off0$i90$i = $776;
     }
     $794 = ($$01$lcssa$off0$i90$i|0)==(0);
     if ($794) {
      $estr$1$ph$i = $$0$lcssa$i89$i;
     } else {
      $$12$i92$i = $$0$lcssa$i89$i;$y$03$i91$i = $$01$lcssa$off0$i90$i;
      while(1) {
       $795 = (($y$03$i91$i>>>0) % 10)&-1;
       $796 = $795 | 48;
       $797 = $796&255;
       $798 = (($$12$i92$i) + -1|0);
       HEAP8[$798>>0] = $797;
       $799 = (($y$03$i91$i>>>0) / 10)&-1;
       $800 = ($y$03$i91$i>>>0)<(10);
       if ($800) {
        $estr$1$ph$i = $798;
        break;
       } else {
        $$12$i92$i = $798;$y$03$i91$i = $799;
       }
      }
     }
     $801 = $estr$1$ph$i;
     $802 = (($9) - ($801))|0;
     $803 = ($802|0)<(2);
     if ($803) {
      $estr$1195$i = $estr$1$ph$i;
      while(1) {
       $804 = (($estr$1195$i) + -1|0);
       HEAP8[$804>>0] = 48;
       $805 = $804;
       $806 = (($9) - ($805))|0;
       $807 = ($806|0)<(2);
       if ($807) {
        $estr$1195$i = $804;
       } else {
        $estr$1$lcssa$i = $804;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $808 = $e$4$ph$i >> 31;
     $809 = $808 & 2;
     $810 = (($809) + 43)|0;
     $811 = $810&255;
     $812 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$812>>0] = $811;
     $813 = $$117$i&255;
     $814 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$814>>0] = $813;
     $815 = $814;
     $816 = (($9) - ($815))|0;
     $$pn$i = $816;$estr$2$i = $814;
    }
    $817 = (($pl$0$i) + 1)|0;
    $818 = (($817) + ($$314$i))|0;
    $l$1$i = (($818) + ($769))|0;
    $819 = (($l$1$i) + ($$pn$i))|0;
    $820 = $fl$1$ & 73728;
    $821 = ($820|0)==(0);
    $822 = ($w$1|0)>($819|0);
    $or$cond$i98$i = $821 & $822;
    if ($or$cond$i98$i) {
     $823 = (($w$1) - ($819))|0;
     $824 = ($823>>>0)>(256);
     $825 = $824 ? 256 : $823;
     _memset(($pad$i|0),32,($825|0))|0;
     $826 = ($823>>>0)>(255);
     if ($826) {
      $$01$i100$i = $823;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $827 = (($$01$i100$i) + -256)|0;
       $828 = ($827>>>0)>(255);
       if ($828) {
        $$01$i100$i = $827;
       } else {
        break;
       }
      }
      $829 = $823 & 255;
      $$0$lcssa$i102$i = $829;
     } else {
      $$0$lcssa$i102$i = $823;
     }
     (___fwritex($pad$i,$$0$lcssa$i102$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $830 = ($820|0)==(65536);
    $or$cond$i105$i = $830 & $822;
    if ($or$cond$i105$i) {
     $831 = (($w$1) - ($819))|0;
     $832 = ($831>>>0)>(256);
     $833 = $832 ? 256 : $831;
     _memset(($pad$i|0),48,($833|0))|0;
     $834 = ($831>>>0)>(255);
     if ($834) {
      $$01$i107$i = $831;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $835 = (($$01$i107$i) + -256)|0;
       $836 = ($835>>>0)>(255);
       if ($836) {
        $$01$i107$i = $835;
       } else {
        break;
       }
      }
      $837 = $831 & 255;
      $$0$lcssa$i109$i = $837;
     } else {
      $$0$lcssa$i109$i = $831;
     }
     (___fwritex($pad$i,$$0$lcssa$i109$i,$f)|0);
    }
    do {
     if ($772) {
      $838 = ($a$8$ph$i>>>0)>($$36$i>>>0);
      $r$0$a$8$i = $838 ? $$36$i : $a$8$ph$i;
      $d$4180$i = $r$0$a$8$i;
      while(1) {
       $839 = HEAP32[$d$4180$i>>2]|0;
       $840 = ($839|0)==(0);
       if ($840) {
        $$1$lcssa$i117$i = $14;
       } else {
        $$12$i115$i = $14;$y$03$i114$i = $839;
        while(1) {
         $841 = (($y$03$i114$i>>>0) % 10)&-1;
         $842 = $841 | 48;
         $843 = $842&255;
         $844 = (($$12$i115$i) + -1|0);
         HEAP8[$844>>0] = $843;
         $845 = (($y$03$i114$i>>>0) / 10)&-1;
         $846 = ($y$03$i114$i>>>0)<(10);
         if ($846) {
          $$1$lcssa$i117$i = $844;
          break;
         } else {
          $$12$i115$i = $844;$y$03$i114$i = $845;
         }
        }
       }
       $847 = ($d$4180$i|0)==($r$0$a$8$i|0);
       do {
        if ($847) {
         $851 = ($$1$lcssa$i117$i|0)==($14|0);
         if (!($851)) {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $848 = ($$1$lcssa$i117$i>>>0)>($buf$i>>>0);
         if ($848) {
          $s7$0177$i = $$1$lcssa$i117$i;
         } else {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         while(1) {
          $849 = (($s7$0177$i) + -1|0);
          HEAP8[$849>>0] = 48;
          $850 = ($849>>>0)>($buf$i>>>0);
          if ($850) {
           $s7$0177$i = $849;
          } else {
           $s7$1$i = $849;
           break;
          }
         }
        }
       } while(0);
       $852 = $s7$1$i;
       $853 = (($15) - ($852))|0;
       (___fwritex($s7$1$i,$853,$f)|0);
       $854 = (($d$4180$i) + 4|0);
       $855 = ($854>>>0)>($$36$i>>>0);
       if ($855) {
        break;
       } else {
        $d$4180$i = $854;
       }
      }
      $$not$i = $766 ^ 1;
      $856 = $fl$1$ & 8;
      $857 = ($856|0)==(0);
      $or$cond32$i = $857 & $$not$i;
      if (!($or$cond32$i)) {
       (___fwritex(32648,1,$f)|0);
      }
      $858 = ($854>>>0)<($z$6$i>>>0);
      $859 = ($$314$i|0)>(0);
      $or$cond7169$i = $858 & $859;
      if ($or$cond7169$i) {
       $$415171$i = $$314$i;$d$5170$i = $854;
       while(1) {
        $860 = HEAP32[$d$5170$i>>2]|0;
        $861 = ($860|0)==(0);
        if ($861) {
         $s8$0165$i = $14;
         label = 301;
        } else {
         $$12$i124$i = $14;$y$03$i123$i = $860;
         while(1) {
          $862 = (($y$03$i123$i>>>0) % 10)&-1;
          $863 = $862 | 48;
          $864 = $863&255;
          $865 = (($$12$i124$i) + -1|0);
          HEAP8[$865>>0] = $864;
          $866 = (($y$03$i123$i>>>0) / 10)&-1;
          $867 = ($y$03$i123$i>>>0)<(10);
          if ($867) {
           break;
          } else {
           $$12$i124$i = $865;$y$03$i123$i = $866;
          }
         }
         $868 = ($865>>>0)>($buf$i>>>0);
         if ($868) {
          $s8$0165$i = $865;
          label = 301;
         } else {
          $s8$0$lcssa$i = $865;
         }
        }
        if ((label|0) == 301) {
         while(1) {
          label = 0;
          $869 = (($s8$0165$i) + -1|0);
          HEAP8[$869>>0] = 48;
          $870 = ($869>>>0)>($buf$i>>>0);
          if ($870) {
           $s8$0165$i = $869;
           label = 301;
          } else {
           $s8$0$lcssa$i = $869;
           break;
          }
         }
        }
        $871 = ($$415171$i|0)>(9);
        $872 = $871 ? 9 : $$415171$i;
        (___fwritex($s8$0$lcssa$i,$872,$f)|0);
        $873 = (($d$5170$i) + 4|0);
        $874 = (($$415171$i) + -9)|0;
        $875 = ($873>>>0)<($z$6$i>>>0);
        $876 = ($874|0)>(0);
        $or$cond7$i = $875 & $876;
        if ($or$cond7$i) {
         $$415171$i = $874;$d$5170$i = $873;
        } else {
         $$415$lcssa$i = $874;
         break;
        }
       }
      } else {
       $$415$lcssa$i = $$314$i;
      }
      $877 = ($$415$lcssa$i|0)>(0);
      if (!($877)) {
       break;
      }
      $878 = ($$415$lcssa$i>>>0)>(256);
      $879 = $878 ? 256 : $$415$lcssa$i;
      _memset(($pad$i|0),48,($879|0))|0;
      $880 = ($$415$lcssa$i>>>0)>(255);
      if ($880) {
       $$01$i131$i = $$415$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $881 = (($$01$i131$i) + -256)|0;
        $882 = ($881>>>0)>(255);
        if ($882) {
         $$01$i131$i = $881;
        } else {
         break;
        }
       }
       $883 = $$415$lcssa$i & 255;
       $$0$lcssa$i133$i = $883;
      } else {
       $$0$lcssa$i133$i = $$415$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i133$i,$f)|0);
     } else {
      $884 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa292$i ? $z$6$i : $884;
      $885 = ($$314$i|0)>(-1);
      do {
       if ($885) {
        $886 = $fl$1$ & 8;
        $887 = ($886|0)==(0);
        $$5189$i = $$314$i;$d$6188$i = $a$8$ph$i;
        while(1) {
         $888 = HEAP32[$d$6188$i>>2]|0;
         $889 = ($888|0)==(0);
         if ($889) {
          label = 313;
         } else {
          $$12$i139$i = $14;$y$03$i138$i = $888;
          while(1) {
           $890 = (($y$03$i138$i>>>0) % 10)&-1;
           $891 = $890 | 48;
           $892 = $891&255;
           $893 = (($$12$i139$i) + -1|0);
           HEAP8[$893>>0] = $892;
           $894 = (($y$03$i138$i>>>0) / 10)&-1;
           $895 = ($y$03$i138$i>>>0)<(10);
           if ($895) {
            break;
           } else {
            $$12$i139$i = $893;$y$03$i138$i = $894;
           }
          }
          $896 = ($893|0)==($14|0);
          if ($896) {
           label = 313;
          } else {
           $s9$0$i = $893;
          }
         }
         if ((label|0) == 313) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $s9$0$i = $16;
         }
         $897 = ($d$6188$i|0)==($a$8$ph$i|0);
         do {
          if ($897) {
           $901 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $902 = ($$5189$i|0)<(1);
           $or$cond34$i = $902 & $887;
           if ($or$cond34$i) {
            $s9$2$i = $901;
            break;
           }
           (___fwritex(32648,1,$f)|0);
           $s9$2$i = $901;
          } else {
           $898 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($898) {
            $s9$1184$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $899 = (($s9$1184$i) + -1|0);
            HEAP8[$899>>0] = 48;
            $900 = ($899>>>0)>($buf$i>>>0);
            if ($900) {
             $s9$1184$i = $899;
            } else {
             $s9$2$i = $899;
             break;
            }
           }
          }
         } while(0);
         $903 = $s9$2$i;
         $904 = (($15) - ($903))|0;
         $905 = ($$5189$i|0)>($904|0);
         $$$5$i = $905 ? $904 : $$5189$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $906 = (($$5189$i) - ($904))|0;
         $907 = (($d$6188$i) + 4|0);
         $908 = ($907>>>0)<($z$6$$i>>>0);
         $909 = ($906|0)>(-1);
         $or$cond9$i = $908 & $909;
         if ($or$cond9$i) {
          $$5189$i = $906;$d$6188$i = $907;
         } else {
          break;
         }
        }
        $910 = ($906|0)>(0);
        if (!($910)) {
         break;
        }
        $911 = ($906>>>0)>(256);
        $912 = $911 ? 256 : $906;
        _memset(($pad$i|0),48,($912|0))|0;
        $913 = ($906>>>0)>(255);
        if ($913) {
         $$01$i146$i = $906;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $914 = (($$01$i146$i) + -256)|0;
          $915 = ($914>>>0)>(255);
          if ($915) {
           $$01$i146$i = $914;
          } else {
           break;
          }
         }
         $916 = $906 & 255;
         $$0$lcssa$i148$i = $916;
        } else {
         $$0$lcssa$i148$i = $906;
        }
        (___fwritex($pad$i,$$0$lcssa$i148$i,$f)|0);
       }
      } while(0);
      $917 = $estr$2$i;
      $918 = (($9) - ($917))|0;
      (___fwritex($estr$2$i,$918,$f)|0);
     }
    } while(0);
    $919 = ($820|0)==(8192);
    $or$cond$i$i = $919 & $822;
    if ($or$cond$i$i) {
     $920 = (($w$1) - ($819))|0;
     $921 = ($920>>>0)>(256);
     $922 = $921 ? 256 : $920;
     _memset(($pad$i|0),32,($922|0))|0;
     $923 = ($920>>>0)>(255);
     if ($923) {
      $$01$i$i = $920;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $924 = (($$01$i$i) + -256)|0;
       $925 = ($924>>>0)>(255);
       if ($925) {
        $$01$i$i = $924;
       } else {
        break;
       }
      }
      $926 = $920 & 255;
      $$0$lcssa$i$i = $926;
     } else {
      $$0$lcssa$i$i = $920;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$35$i = $822 ? $w$1 : $819;
    $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$35$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 99:  {
    $309 = $195&255;
    HEAP8[$4>>0] = $309;
    $1042 = $195;$1043 = $222;$a$2 = $4;$fl$6 = $194;$p$5 = 1;$pl$2 = 0;$prefix$2 = 32552;$z$2 = $2;
    break;
   }
   case 115:  {
    $313 = $195;
    $314 = ($195|0)==(0);
    $$15 = $314 ? 32568 : $313;
    $a$1 = $$15;
    label = 96;
    break;
   }
   case 112:  {
    $217 = ($p$0>>>0)>(8);
    $218 = $217 ? $p$0 : 8;
    $219 = $fl$1$ | 8;
    $fl$3 = $219;$p$1 = $218;$t$1 = 120;
    label = 75;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 0:  {
     $196 = $195;
     HEAP32[$196>>2] = $cnt$1;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $210 = ($cnt$1|0)<(0);
     $211 = $210 << 31 >> 31;
     $212 = $195;
     $213 = $212;
     $214 = $213;
     HEAP32[$214>>2] = $cnt$1;
     $215 = (($213) + 4)|0;
     $216 = $215;
     HEAP32[$216>>2] = $211;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $207 = $cnt$1&255;
     $208 = $195;
     HEAP8[$208>>0] = $207;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $209 = $195;
     HEAP32[$209>>2] = $cnt$1;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $198 = ($cnt$1|0)<(0);
     $199 = $198 << 31 >> 31;
     $200 = $195;
     $201 = $200;
     $202 = $201;
     HEAP32[$202>>2] = $cnt$1;
     $203 = (($201) + 4)|0;
     $204 = $203;
     HEAP32[$204>>2] = $199;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $205 = $cnt$1&65535;
     $206 = $195;
     HEAP16[$206>>1] = $205;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $197 = $195;
     HEAP32[$197>>2] = $cnt$1;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   default: {
    $1042 = $195;$1043 = $222;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 32552;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    label = 0;
    $220 = $t$1 & 32;
    $221 = ($195|0)==(0);
    $223 = ($222|0)==(0);
    $224 = $221 & $223;
    if ($224) {
     $297 = $195;$299 = $222;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 32552;
     label = 91;
    } else {
     $$012$i = $2;$226 = $195;$233 = $222;
     while(1) {
      $225 = $226 & 15;
      $227 = (32632 + ($225)|0);
      $228 = HEAP8[$227>>0]|0;
      $229 = $228&255;
      $230 = $229 | $220;
      $231 = $230&255;
      $232 = (($$012$i) + -1|0);
      HEAP8[$232>>0] = $231;
      $234 = (_bitshift64Lshr(($226|0),($233|0),4)|0);
      $235 = tempRet0;
      $236 = ($234|0)==(0);
      $237 = ($235|0)==(0);
      $238 = $236 & $237;
      if ($238) {
       break;
      } else {
       $$012$i = $232;$226 = $234;$233 = $235;
      }
     }
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     if ($240) {
      $297 = $195;$299 = $222;$a$0 = $232;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 32552;
      label = 91;
     } else {
      $241 = $t$1 >> 4;
      $242 = (32552 + ($241)|0);
      $297 = $195;$299 = $222;$a$0 = $232;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 91;
     }
    }
   }
   else if ((label|0) == 86) {
    label = 0;
    $268 = ($267>>>0)>(0);
    $270 = ($269>>>0)>(4294967295);
    $271 = ($267|0)==(0);
    $272 = $271 & $270;
    $273 = $268 | $272;
    if ($273) {
     $$05$i = $2;$274 = $269;$275 = $267;
     while(1) {
      $276 = (___uremdi3(($274|0),($275|0),10,0)|0);
      $277 = tempRet0;
      $278 = $276 | 48;
      $279 = $278&255;
      $280 = (($$05$i) + -1|0);
      HEAP8[$280>>0] = $279;
      $281 = (___udivdi3(($274|0),($275|0),10,0)|0);
      $282 = tempRet0;
      $283 = ($275>>>0)>(9);
      $284 = ($274>>>0)>(4294967295);
      $285 = ($275|0)==(9);
      $286 = $285 & $284;
      $287 = $283 | $286;
      if ($287) {
       $$05$i = $280;$274 = $281;$275 = $282;
      } else {
       break;
      }
     }
     $$0$lcssa$i47 = $280;$$01$lcssa$off0$i = $281;
    } else {
     $$0$lcssa$i47 = $2;$$01$lcssa$off0$i = $269;
    }
    $288 = ($$01$lcssa$off0$i|0)==(0);
    if ($288) {
     $297 = $269;$299 = $267;$a$0 = $$0$lcssa$i47;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 91;
    } else {
     $$12$i = $$0$lcssa$i47;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $289 = (($y$03$i>>>0) % 10)&-1;
      $290 = $289 | 48;
      $291 = $290&255;
      $292 = (($$12$i) + -1|0);
      HEAP8[$292>>0] = $291;
      $293 = (($y$03$i>>>0) / 10)&-1;
      $294 = ($y$03$i>>>0)<(10);
      if ($294) {
       $297 = $269;$299 = $267;$a$0 = $292;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 91;
       break;
      } else {
       $$12$i = $292;$y$03$i = $293;
      }
     }
    }
   }
   else if ((label|0) == 96) {
    label = 0;
    $315 = (_memchr($a$1,0,$p$0)|0);
    $316 = ($315|0)==(0|0);
    if ($316) {
     $317 = (($a$1) + ($p$0)|0);
     $1042 = $195;$1043 = $222;$a$2 = $a$1;$fl$6 = $194;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 32552;$z$2 = $317;
     break;
    } else {
     $318 = $315;
     $319 = $a$1;
     $320 = (($318) - ($319))|0;
     $1042 = $195;$1043 = $222;$a$2 = $a$1;$fl$6 = $194;$p$5 = $320;$pl$2 = 0;$prefix$2 = 32552;$z$2 = $315;
     break;
    }
   }
   else if ((label|0) == 101) {
    label = 0;
    $i$0160 = 0;$l$1159 = 0;$ws$0161 = $1044;
    while(1) {
     $323 = HEAP32[$ws$0161>>2]|0;
     $324 = ($323|0)==(0);
     if ($324) {
      $i$0$lcssa = $i$0160;$l$2 = $l$1159;
      break;
     }
     $325 = (_wctomb($mb,$323)|0);
     $326 = ($325|0)<(0);
     $327 = (($p$4264) - ($i$0160))|0;
     $328 = ($325>>>0)>($327>>>0);
     $or$cond17 = $326 | $328;
     if ($or$cond17) {
      $i$0$lcssa = $i$0160;$l$2 = $325;
      break;
     }
     $329 = (($ws$0161) + 4|0);
     $330 = (($325) + ($i$0160))|0;
     $331 = ($p$4264>>>0)>($330>>>0);
     if ($331) {
      $i$0160 = $330;$l$1159 = $325;$ws$0161 = $329;
     } else {
      $i$0$lcssa = $330;$l$2 = $325;
      break;
     }
    }
    $332 = ($l$2|0)<(0);
    if ($332) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1046 = $1045;$1047 = $1044;$i$0$lcssa265 = $i$0$lcssa;
     label = 106;
    }
   }
  } while(0);
  if ((label|0) == 91) {
   label = 0;
   $295 = ($p$2|0)>(-1);
   $296 = $fl$4 & -65537;
   $$fl$4 = $295 ? $296 : $fl$4;
   $298 = ($297|0)!=(0);
   $300 = ($299|0)!=(0);
   $301 = $298 | $300;
   $302 = ($p$2|0)!=(0);
   $or$cond = $301 | $302;
   if ($or$cond) {
    $303 = $a$0;
    $304 = (($3) - ($303))|0;
    $305 = $301&1;
    $306 = $305 ^ 1;
    $307 = (($306) + ($304))|0;
    $308 = ($p$2|0)>($307|0);
    $p$2$ = $308 ? $p$2 : $307;
    $1042 = $297;$1043 = $299;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1042 = $297;$1043 = $299;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 106) {
   label = 0;
   $333 = $fl$1$ & 73728;
   $334 = ($333|0)==(0);
   $335 = ($w$1|0)>($i$0$lcssa265|0);
   $or$cond$i58 = $334 & $335;
   if ($or$cond$i58) {
    $336 = (($w$1) - ($i$0$lcssa265))|0;
    $337 = ($336>>>0)>(256);
    $338 = $337 ? 256 : $336;
    _memset(($pad$i|0),32,($338|0))|0;
    $339 = ($336>>>0)>(255);
    if ($339) {
     $$01$i60 = $336;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $340 = (($$01$i60) + -256)|0;
      $341 = ($340>>>0)>(255);
      if ($341) {
       $$01$i60 = $340;
      } else {
       break;
      }
     }
     $342 = $336 & 255;
     $$0$lcssa$i62 = $342;
    } else {
     $$0$lcssa$i62 = $336;
    }
    (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
   }
   $343 = ($i$0$lcssa265|0)==(0);
   L479: do {
    if (!($343)) {
     $i$1168 = 0;$ws$1169 = $1047;
     while(1) {
      $344 = HEAP32[$ws$1169>>2]|0;
      $345 = ($344|0)==(0);
      if ($345) {
       break L479;
      }
      $346 = (_wctomb($mb,$344)|0);
      $347 = (($346) + ($i$1168))|0;
      $348 = ($347|0)>($i$0$lcssa265|0);
      if ($348) {
       break L479;
      }
      $349 = (($ws$1169) + 4|0);
      (___fwritex($mb,$346,$f)|0);
      $350 = ($347>>>0)<($i$0$lcssa265>>>0);
      if ($350) {
       $i$1168 = $347;$ws$1169 = $349;
      } else {
       break;
      }
     }
    }
   } while(0);
   $351 = ($333|0)==(8192);
   $or$cond$i65 = $351 & $335;
   if ($or$cond$i65) {
    $352 = (($w$1) - ($i$0$lcssa265))|0;
    $353 = ($352>>>0)>(256);
    $354 = $353 ? 256 : $352;
    _memset(($pad$i|0),32,($354|0))|0;
    $355 = ($352>>>0)>(255);
    if ($355) {
     $$01$i67 = $352;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $356 = (($$01$i67) + -256)|0;
      $357 = ($356>>>0)>(255);
      if ($357) {
       $$01$i67 = $356;
      } else {
       break;
      }
     }
     $358 = $352 & 255;
     $$0$lcssa$i69 = $358;
    } else {
     $$0$lcssa$i69 = $352;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $359 = $335 ? $w$1 : $i$0$lcssa265;
   $1034 = $1046;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $359;$l10n$0 = $l10n$3;
   continue;
  }
  $927 = $z$2;
  $928 = $a$2;
  $929 = (($927) - ($928))|0;
  $930 = ($p$5|0)<($929|0);
  $$p$5 = $930 ? $929 : $p$5;
  $931 = (($pl$2) + ($$p$5))|0;
  $932 = ($w$1|0)<($931|0);
  $w$2 = $932 ? $931 : $w$1;
  $933 = $fl$6 & 73728;
  $934 = ($933|0)==(0);
  $935 = ($w$2|0)>($931|0);
  $or$cond$i75 = $934 & $935;
  if ($or$cond$i75) {
   $936 = (($w$2) - ($931))|0;
   $937 = ($936>>>0)>(256);
   $938 = $937 ? 256 : $936;
   _memset(($pad$i|0),32,($938|0))|0;
   $939 = ($936>>>0)>(255);
   if ($939) {
    $$01$i77 = $936;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $940 = (($$01$i77) + -256)|0;
     $941 = ($940>>>0)>(255);
     if ($941) {
      $$01$i77 = $940;
     } else {
      break;
     }
    }
    $942 = $936 & 255;
    $$0$lcssa$i79 = $942;
   } else {
    $$0$lcssa$i79 = $936;
   }
   (___fwritex($pad$i,$$0$lcssa$i79,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $943 = ($933|0)==(65536);
  $or$cond$i51 = $943 & $935;
  if ($or$cond$i51) {
   $944 = (($w$2) - ($931))|0;
   $945 = ($944>>>0)>(256);
   $946 = $945 ? 256 : $944;
   _memset(($pad$i|0),48,($946|0))|0;
   $947 = ($944>>>0)>(255);
   if ($947) {
    $$01$i53 = $944;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $948 = (($$01$i53) + -256)|0;
     $949 = ($948>>>0)>(255);
     if ($949) {
      $$01$i53 = $948;
     } else {
      break;
     }
    }
    $950 = $944 & 255;
    $$0$lcssa$i55 = $950;
   } else {
    $$0$lcssa$i55 = $944;
   }
   (___fwritex($pad$i,$$0$lcssa$i55,$f)|0);
  }
  $951 = ($$p$5|0)>($929|0);
  if ($951) {
   $952 = (($$p$5) - ($929))|0;
   $953 = ($952>>>0)>(256);
   $954 = $953 ? 256 : $952;
   _memset(($pad$i|0),48,($954|0))|0;
   $955 = ($952>>>0)>(255);
   if ($955) {
    $$01$i38 = $952;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $956 = (($$01$i38) + -256)|0;
     $957 = ($956>>>0)>(255);
     if ($957) {
      $$01$i38 = $956;
     } else {
      break;
     }
    }
    $958 = $952 & 255;
    $$0$lcssa$i40 = $958;
   } else {
    $$0$lcssa$i40 = $952;
   }
   (___fwritex($pad$i,$$0$lcssa$i40,$f)|0);
  }
  (___fwritex($a$2,$929,$f)|0);
  $959 = ($933|0)==(8192);
  $or$cond$i = $959 & $935;
  if (!($or$cond$i)) {
   $1034 = $1042;$1035 = $1043;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $960 = (($w$2) - ($931))|0;
  $961 = ($960>>>0)>(256);
  $962 = $961 ? 256 : $960;
  _memset(($pad$i|0),32,($962|0))|0;
  $963 = ($960>>>0)>(255);
  if ($963) {
   $$01$i = $960;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $964 = (($$01$i) + -256)|0;
    $965 = ($964>>>0)>(255);
    if ($965) {
     $$01$i = $964;
    } else {
     break;
    }
   }
   $966 = $960 & 255;
   $$0$lcssa$i = $966;
  } else {
   $$0$lcssa$i = $960;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1034 = $1042;$1035 = $1043;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 352) {
  $967 = ($f|0)==(0|0);
  if (!($967)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $968 = ($l10n$0|0)==(0);
  if ($968) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$292 = 1;
  }
  while(1) {
   $969 = (($nl_type) + ($i$292<<2)|0);
   $970 = HEAP32[$969>>2]|0;
   $971 = ($970|0)==(0);
   if ($971) {
    $i$389 = $i$292;
    break;
   }
   $972 = (($nl_arg) + ($i$292<<3)|0);
   $973 = ($970>>>0)>(20);
   L534: do {
    if (!($973)) {
     do {
      switch ($970|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $974 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$972>>2] = $974;
       break L534;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $975 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $976 = ($975|0)<(0);
       $977 = $976 << 31 >> 31;
       $978 = $972;
       $979 = $978;
       HEAP32[$979>>2] = $975;
       $980 = (($978) + 4)|0;
       $981 = $980;
       HEAP32[$981>>2] = $977;
       break L534;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $982 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $983 = $972;
       $984 = $983;
       HEAP32[$984>>2] = $982;
       $985 = (($983) + 4)|0;
       $986 = $985;
       HEAP32[$986>>2] = 0;
       break L534;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $987 = $arglist_current44;
       $988 = $987;
       $989 = HEAP32[$988>>2]|0;
       $990 = (($987) + 4)|0;
       $991 = $990;
       $992 = HEAP32[$991>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $993 = $972;
       $994 = $993;
       HEAP32[$994>>2] = $989;
       $995 = (($993) + 4)|0;
       $996 = $995;
       HEAP32[$996>>2] = $992;
       break L534;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $997 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $998 = $997&65535;
       $999 = $998 << 16 >> 16;
       $1000 = ($999|0)<(0);
       $1001 = $1000 << 31 >> 31;
       $1002 = $972;
       $1003 = $1002;
       HEAP32[$1003>>2] = $999;
       $1004 = (($1002) + 4)|0;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1001;
       break L534;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1006 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1006 & 65535;
       $1007 = $972;
       $1008 = $1007;
       HEAP32[$1008>>2] = $$mask1$i;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = 0;
       break L534;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1012 = $1011&255;
       $1013 = $1012 << 24 >> 24;
       $1014 = ($1013|0)<(0);
       $1015 = $1014 << 31 >> 31;
       $1016 = $972;
       $1017 = $1016;
       HEAP32[$1017>>2] = $1013;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = $1015;
       break L534;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1020 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1020 & 255;
       $1021 = $972;
       $1022 = $1021;
       HEAP32[$1022>>2] = $$mask$i;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = 0;
       break L534;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1025 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$972>>3] = $1025;
       break L534;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1026 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$972>>3] = $1026;
       break L534;
       break;
      }
      default: {
       break L534;
      }
      }
     } while(0);
    }
   } while(0);
   $1027 = (($i$292) + 1)|0;
   $1028 = ($1027|0)<(10);
   if ($1028) {
    $i$292 = $1027;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1031 = (($nl_type) + ($i$389<<2)|0);
   $1032 = HEAP32[$1031>>2]|0;
   $1033 = ($1032|0)==(0);
   $1029 = (($i$389) + 1)|0;
   if (!($1033)) {
    $$0 = -1;
    label = 370;
    break;
   }
   $1030 = ($1029|0)<(10);
   if ($1030) {
    $i$389 = $1029;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 370) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&15](a1|0);
  }


  function dynCall_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    return FUNCTION_TABLE_iiiiiiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&3](a1|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&7](a1|0,a2|0,a3|0);
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&0]();
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&1](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&1](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(0);return 0; }
  function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(1);return 0; }
  function b2(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(2); }
  function b3(p0) { p0 = p0|0; abort(3); }
  function b4(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; abort(4);return 0; }
  function b5(p0,p1) { p0 = p0|0;p1 = p1|0; abort(5); }
  function b6(p0) { p0 = p0|0; abort(6);return 0; }
  function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(7); }
  function b8(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(8); }
  function b9() { ; abort(9); }
  function b10(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(10);return 0; }
  function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(11); }
  function b12(p0,p1) { p0 = p0|0;p1 = p1|0; abort(12);return 0; }
  function b13(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(13);return 0; }
  function b14(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(14); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,__ZN7WelsDec12CWelsDecoder11DecodeFrameEPKhiPPhPiRiS6_];
  var FUNCTION_TABLE_iiii = [b1,__ZN7WelsDec12CWelsDecoder9SetOptionE14DECODER_OPTIONPv,__ZN7WelsDec12CWelsDecoder9GetOptionE14DECODER_OPTIONPv,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,__ZN7WelsDec23WelsDecodeMbCabacISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj,__ZN7WelsDec23WelsDecodeMbCabacPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj,__ZN7WelsDec23WelsDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj,__ZN7WelsDec23WelsDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_viiiii = [b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__Z17DeblockLumaLt4V_cPhiiiPa,__Z17DeblockLumaLt4H_cPhiiiPa,__Z19DeblockChromaEq4V_cPhS_iii,__Z19DeblockChromaEq4H_cPhS_iii,__Z20DeblockChromaLt4V2_cPhiiiPa,__Z20DeblockChromaLt4H2_cPhiiiPa,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,__ZN7WelsDec12CWelsDecoderD2Ev,__ZN7WelsDec12CWelsDecoderD0Ev,__ZN10WelsCommon12CMemoryAlignD2Ev,__ZN10WelsCommon12CMemoryAlignD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__Z18WelsNonZeroCount_cPa,b3,b3,b3];
  var FUNCTION_TABLE_iiiiiiiiii = [b4,__ZN7WelsDec12CWelsDecoder13DecodeFrameExEPKhiPhiRiS4_S4_S4_];
  var FUNCTION_TABLE_vii = [b5,__ZN7WelsDec33WelsMapNxNNeighToSampleConstrain1EPNS_16TagNeighborAvailEPi,__ZN7WelsDec35WelsMap16x16NeighToSampleConstrain1EPNS_16TagNeighborAvailEPh,__ZN7WelsDec29WelsMapNxNNeighToSampleNormalEPNS_16TagNeighborAvailEPi,__ZN7WelsDec31WelsMap16x16NeighToSampleNormalEPNS_16TagNeighborAvailEPh,__ZN7WelsDec20WelsBlockZero16x16_cEPsi,__ZN7WelsDec18WelsBlockZero8x8_cEPsi,__ZN7WelsDec21WelsI16x16LumaPredV_cEPhi,__ZN7WelsDec21WelsI16x16LumaPredH_cEPhi,__ZN7WelsDec22WelsI16x16LumaPredDc_cEPhi,__ZN7WelsDec25WelsI16x16LumaPredPlane_cEPhi,__ZN7WelsDec26WelsI16x16LumaPredDcLeft_cEPhi,__ZN7WelsDec25WelsI16x16LumaPredDcTop_cEPhi,__ZN7WelsDec24WelsI16x16LumaPredDcNA_cEPhi,__ZN7WelsDec19WelsI4x4LumaPredV_cEPhi,__ZN7WelsDec19WelsI4x4LumaPredH_cEPhi,__ZN7WelsDec20WelsI4x4LumaPredDc_cEPhi,__ZN7WelsDec24WelsI4x4LumaPredDcLeft_cEPhi,__ZN7WelsDec23WelsI4x4LumaPredDcTop_cEPhi,__ZN7WelsDec22WelsI4x4LumaPredDcNA_cEPhi,__ZN7WelsDec21WelsI4x4LumaPredDDL_cEPhi,__ZN7WelsDec24WelsI4x4LumaPredDDLTop_cEPhi,__ZN7WelsDec21WelsI4x4LumaPredDDR_cEPhi,__ZN7WelsDec20WelsI4x4LumaPredVL_cEPhi,__ZN7WelsDec23WelsI4x4LumaPredVLTop_cEPhi,__ZN7WelsDec20WelsI4x4LumaPredVR_cEPhi,__ZN7WelsDec20WelsI4x4LumaPredHU_cEPhi,__ZN7WelsDec20WelsI4x4LumaPredHD_cEPhi,__ZN7WelsDec19WelsIChromaPredDc_cEPhi
  ,__ZN7WelsDec18WelsIChromaPredH_cEPhi,__ZN7WelsDec18WelsIChromaPredV_cEPhi,__ZN7WelsDec22WelsIChromaPredPlane_cEPhi,__ZN7WelsDec23WelsIChromaPredDcLeft_cEPhi,__ZN7WelsDec22WelsIChromaPredDcTop_cEPhi,__ZN7WelsDec21WelsIChromaPredDcNA_cEPhi,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_ii = [b6,__ZN7WelsDec12CWelsDecoder12UninitializeEv,__ZNKSt9bad_alloc4whatEv,b6];
  var FUNCTION_TABLE_viii = [b7,_openh264_log,__ZN7WelsDec16WelsDeblockingMbEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi,__ZN7WelsDec16IdctResAddPred_cEPhiPs,__ZN7WelsDec19IdctResAddPred8x8_cEPhiPs,__ZL15welsStderrTracePviPKc,b7,b7];
  var FUNCTION_TABLE_viiiiiiii = [b8,__ZN10WelsCommonL10PixelAvg_cEPhiPKhiS2_iii,__ZN10WelsCommon10McChroma_cEPKhiPhissii,__ZN10WelsCommon8McLuma_cEPKhiPhissii];
  var FUNCTION_TABLE_v = [b9];
  var FUNCTION_TABLE_iiiii = [b10,__ZN7WelsDec12CWelsDecoder12DecodeParserEPKhiP15TagParserBsInfo];
  var FUNCTION_TABLE_viiiiii = [b11,__ZN10WelsCommonL8McCopy_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer01_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer02_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer03_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer10_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer11_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer12_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer13_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer20_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer21_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer22_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer23_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer30_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer31_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer32_cEPKhiPhiii,__ZN10WelsCommonL12McHorVer33_cEPKhiPhiii,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__Z19DeblockChromaLt4V_cPhS_iiiPa,__Z19DeblockChromaLt4H_cPhS_iiiPa,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11];
  var FUNCTION_TABLE_iii = [b12,__ZN7WelsDec12CWelsDecoder10InitializeEPK19TagSVCDecodingParam];
  var FUNCTION_TABLE_iiiiii = [b13,__ZN7WelsDec12CWelsDecoder18DecodeFrameNoDelayEPKhiPPhP13TagBufferInfo,__ZN7WelsDec12CWelsDecoder12DecodeFrame2EPKhiPPhP13TagBufferInfo,b13];
  var FUNCTION_TABLE_viiii = [b14,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__Z17DeblockLumaEq4V_cPhiii,__Z17DeblockLumaEq4H_cPhiii,__Z20DeblockChromaEq4V2_cPhiii,__Z20DeblockChromaEq4H2_cPhiii,__ZN7WelsDec31WelsFillCacheConstrain1IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE,__ZN7WelsDec31WelsFillCacheConstrain0IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE,__ZN7WelsDec19WelsI8x8LumaPredV_cEPhibb,__ZN7WelsDec19WelsI8x8LumaPredH_cEPhibb,__ZN7WelsDec20WelsI8x8LumaPredDc_cEPhibb,__ZN7WelsDec24WelsI8x8LumaPredDcLeft_cEPhibb,__ZN7WelsDec23WelsI8x8LumaPredDcTop_cEPhibb,__ZN7WelsDec22WelsI8x8LumaPredDcNA_cEPhibb,__ZN7WelsDec21WelsI8x8LumaPredDDL_cEPhibb,__ZN7WelsDec24WelsI8x8LumaPredDDLTop_cEPhibb,__ZN7WelsDec21WelsI8x8LumaPredDDR_cEPhibb,__ZN7WelsDec20WelsI8x8LumaPredVL_cEPhibb,__ZN7WelsDec23WelsI8x8LumaPredVLTop_cEPhibb,__ZN7WelsDec20WelsI8x8LumaPredVR_cEPhibb,__ZN7WelsDec20WelsI8x8LumaPredHU_cEPhibb,__ZN7WelsDec20WelsI8x8LumaPredHD_cEPhibb,__Z15WelsCopy16x16_cPhiS_i,__Z13WelsCopy8x8_cPhiS_i,__ZL19ExpandPictureLuma_cPhiii,__ZL21ExpandPictureChroma_cPhiii,__ZN14welsCodecTrace16StaticCodecTraceEPviPKcPi,b14
  ,b14,b14,b14];

  return { _malloc: _malloc, _i64Subtract: _i64Subtract, _open_decoder: _open_decoder, _free: _free, _strncpy: _strncpy, _memmove: _memmove, _strlen: _strlen, _memset: _memset, _decode_h264buffer: _decode_h264buffer, _i64Add: _i64Add, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _close_decoder: _close_decoder, _decode_nal: _decode_nal, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _open_decoder = Module["_open_decoder"] = asm["_open_decoder"];
var _free = Module["_free"] = asm["_free"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _decode_h264buffer = Module["_decode_h264buffer"] = asm["_decode_h264buffer"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _close_decoder = Module["_close_decoder"] = asm["_close_decoder"];
var _decode_nal = Module["_decode_nal"] = asm["_decode_nal"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



function frame_callback(a,b,c,width,height,stride1,stride2)
{
    var data = new Uint8Array(width*height*3/2);
    var x,y;
    for (y=0;y<height;y++) {
        var ar = Module.HEAP8.subarray(a + y*stride1, a+y*stride1+width);
        data.set(ar, y * width);
    }
    var cbofs=width*height;
    for (y=0;y<height/2;y++) {
        var ar = Module.HEAP8.subarray(b + y*stride2, b+y*stride2+width/2);
        data.set(ar, cbofs + y * width/2);
    }

    var crofs=cbofs + width*height/4;
    for (y=0;y<height/2;y++) {
        var ar = Module.HEAP8.subarray(c + y*stride2, c+y*stride2+width/2);
        data.set(ar, crofs + y * width/2);
    }

    postMessage({'data':data});
}


(function(root){


        var open_decoder = Module.cwrap('open_decoder', 'number', null);
        var close_decoder = Module.cwrap('close_decoder', null, ['number']);
        var decode_h264buffer = Module.cwrap('decode_h264buffer', 'number', ['number','array','number']);
        var decode_h264nal = Module.cwrap('decode_nal', 'number', ['number','array','number']);

        var h = open_decoder();

        root.addEventListener('message', function(e) {
            var message = e.data;
            switch(message.type) {
                case 'closeworker':
                    root.close();
                    break;
                case 'close':
                    close_decoder(h);
                    break;
                case 'frame':
                    if (message.data == null) {
                        decode_h264nal(h, 0, 0);
                    } else {
                        var byteArray = new Uint8Array(message.data);
                        decode_h264nal(h, byteArray, byteArray.length);
                    }
            };
        });
}(self));
